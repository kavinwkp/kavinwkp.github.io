<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>498-对角线遍历</title>
      <link href="2022/01/07/LeetCode-498-%E5%AF%B9%E8%A7%92%E7%BA%BF%E9%81%8D%E5%8E%86/"/>
      <url>2022/01/07/LeetCode-498-%E5%AF%B9%E8%A7%92%E7%BA%BF%E9%81%8D%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-498-Diagonal-Traverse"><a href="#LeetCode-498-Diagonal-Traverse" class="headerlink" title="LeetCode 498. Diagonal Traverse"></a>LeetCode 498. Diagonal Traverse</h2><p>Given an <code>m x n</code> matrix mat, return an array of all the elements of the array in a diagonal order.</p><p>Example 1:</p><p><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/498/diag1-grid.jpg" alt></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> mat <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Example 2:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> mat <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h3 id="method"><a href="#method" class="headerlink" title="method"></a>method</h3><p>储备知识：<code>mat[i][j]</code>对应的对角线就是<code>i+j</code></p><ul><li><code>i+j</code>是偶数：左下-&gt;右上，下标变化是<code>i--,j++</code></li><li><code>i+j</code>是奇数：右上-&gt;左下，下标变化是<code>i++,j--</code></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">findDiagonalOrder</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> mat<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> mat<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> m <span class="token operator">=</span> mat<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">+</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            x <span class="token operator">=</span> i <span class="token operator">&lt;</span> n <span class="token operator">?</span> i <span class="token operator">:</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// 是否超过行数</span>            y <span class="token operator">=</span> i <span class="token operator">-</span> x<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> y <span class="token operator">&lt;</span> m<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>mat<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                x<span class="token operator">--</span><span class="token punctuation">,</span> y<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            y <span class="token operator">=</span> i <span class="token operator">&lt;</span> m <span class="token operator">?</span> i <span class="token operator">:</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// 是否超过列数</span>            x <span class="token operator">=</span> i <span class="token operator">-</span> y<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> y <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>mat<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                x<span class="token operator">++</span><span class="token punctuation">,</span> y<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模拟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode汇总</title>
      <link href="2021/12/20/LeetCode-LeetCode%E6%B1%87%E6%80%BB/"/>
      <url>2021/12/20/LeetCode-LeetCode%E6%B1%87%E6%80%BB/</url>
      
        <content type="html"><![CDATA[<h3 id="二分法"><a href="#二分法" class="headerlink" title="二分法"></a>二分法</h3><p><a href="https://kavinwkp.github.io/2021/05/24/LeetCode-69-x%E7%9A%84%E5%B9%B3%E6%96%B9%E6%A0%B9/">69-x的平方根</a><br><a href="https://kavinwkp.github.io/2021/05/29/LeetCode-1-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/">1/167-两数之和</a><br><a href="https://kavinwkp.github.io/2021/06/02/LeetCode-34-%E5%9C%A8%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9F%A5%E6%89%BE%E5%85%83%E7%B4%A0/">34-查找元素/35-搜索插入位置</a><br><a href="https://kavinwkp.github.io/2021/06/03/LeetCode-74-%E6%90%9C%E7%B4%A2%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5/">74/240-搜索二维矩阵</a><br><a href="https://kavinwkp.github.io/2021/06/03/LeetCode-162-%E5%AF%BB%E6%89%BE%E5%B3%B0%E5%80%BC/">162-寻找峰值</a><br><a href="https://kavinwkp.github.io/2021/06/03/LeetCode-153-%E5%AF%BB%E6%89%BE%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9C%80%E5%B0%8F%E5%80%BC/">153-寻找旋转排序数组中的最小值</a><br><a href="https://kavinwkp.github.io/2021/09/16/LeetCode-4-%E4%B8%A4%E4%B8%AA%E6%AD%A3%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/">4-两个正序数组的中位数</a></p><hr><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><p><a href="https://kavinwkp.github.io/2021/04/16/LeetCode-2-%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/">2/445-两数相加</a><br><a href="https://kavinwkp.github.io/2021/05/28/LeetCode-237-%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/">237-删除链表中的节点</a><br><a href="https://kavinwkp.github.io/2021/05/28/LeetCode-876-%E9%93%BE%E8%A1%A8%E7%9A%84%E4%B8%AD%E9%97%B4%E8%8A%82%E7%82%B9/">876-链表的中间节点</a><br><a href="https://kavinwkp.github.io/2021/05/31/LeetCode-24-%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/">24-两两交换链表中的节点</a><br><a href="https://kavinwkp.github.io/2021/05/31/LeetCode-234-%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8/">234-回文链表</a><br><a href="https://kavinwkp.github.io/2021/06/05/LeetCode-203-%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0/">203-移除链表元素</a><br><a href="https://kavinwkp.github.io/2021/06/05/LeetCode-328-%E5%A5%87%E5%81%B6%E9%93%BE%E8%A1%A8/">328-奇偶链表</a><br><a href="https://kavinwkp.github.io/2021/06/06/LeetCode-141-%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8/">141/142-环形链表</a><br><a href="https://kavinwkp.github.io/2021/06/06/LeetCode-707-%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8/">707-设计链表</a><br><a href="https://kavinwkp.github.io/2021/06/07/LeetCode-160-%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8/">160-相交链表</a><br><a href="https://kavinwkp.github.io/2021/06/07/LeetCode-83-%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0/">83-删除链表重复元素</a><br><a href="https://kavinwkp.github.io/2021/06/09/LeetCode-725-%E5%88%86%E5%9D%97%E9%93%BE%E8%A1%A8/">725-分块链表</a><br><a href="https://kavinwkp.github.io/2021/06/10/LeetCode-86-%E5%88%86%E9%9A%94%E9%93%BE%E8%A1%A8/">86-分隔链表</a><br><a href="https://kavinwkp.github.io/2021/06/10/LeetCode-61-%E6%97%8B%E8%BD%AC%E9%93%BE%E8%A1%A8/">61-旋转链表</a><br><a href="https://kavinwkp.github.io/2021/09/15/LeetCode-206-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/">206-反转链表</a><br><a href="https://kavinwkp.github.io/2021/09/18/LeetCode-21-%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%8E%92%E5%BA%8F%E7%9A%84%E9%93%BE%E8%A1%A8/">21-合并两个排序的链表</a><br><a href="https://kavinwkp.github.io/2021/09/22/LeetCode-25-k%E4%B8%AA%E4%B8%80%E7%BB%84%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/">25-k个为一组反转链表</a><br><a href="https://kavinwkp.github.io/2021/09/23/LeetCode-23-%E5%90%88%E5%B9%B6k%E4%B8%AA%E5%8D%87%E5%BA%8F%E9%93%BE%E8%A1%A8/">23-合并k个升序链表</a><br><a href="https://kavinwkp.github.io/2021/09/24/LeetCode-148-%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8/">148-排序链表</a><br><a href="https://kavinwkp.github.io/2021/09/25/LeetCode-147-%E9%93%BE%E8%A1%A8%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/">147-链表插入排序</a><br><a href="https://kavinwkp.github.io/2021/11/02/LeetCode-138-%E5%A4%8D%E5%88%B6%E5%B8%A6%E9%9A%8F%E6%9C%BA%E6%8C%87%E9%92%88%E7%9A%84%E9%93%BE%E8%A1%A8/">138-复制带随机指针的链表</a></p><hr><h3 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h3><p><a href="https://kavinwkp.github.io/2021/04/16/LeetCode-2-%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/">2/445-两数相加</a><br><a href="https://kavinwkp.github.io/2021/06/09/LeetCode-232-%E7%94%A8%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/">232-用栈实现队列</a><br><a href="https://kavinwkp.github.io/2021/06/10/LeetCode-225-%E7%94%A8%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88/">225-用队列实现栈</a><br><a href="https://kavinwkp.github.io/2021/06/11/LeetCode-20-%E6%9C%89%E6%95%88%E6%8B%AC%E5%8F%B7/">20-有效括号</a><br><a href="https://kavinwkp.github.io/2021/06/22/LeetCode-1047-%E5%88%A0%E9%99%A4%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E7%9B%B8%E9%82%BB%E9%87%8D%E5%A4%8D%E9%A1%B9/">1047-删除字符串中的相邻重复项</a><br><a href="https://kavinwkp.github.io/2021/06/22/LeetCode-150-%E9%80%86%E6%B3%A2%E5%85%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F/">150-逆波兰表达式</a><br><a href="https://kavinwkp.github.io/2021/10/25/LeetCode-155-%E6%9C%80%E5%B0%8F%E6%A0%88/">155-最小栈</a></p><hr><h3 id="回溯"><a href="#回溯" class="headerlink" title="回溯"></a>回溯</h3><p><a href="https://kavinwkp.github.io/2021/06/22/LeetCode-17-%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E7%9A%84%E5%AD%97%E6%AF%8D%E7%BB%84%E5%90%88/">17-电话号码的字母组合</a><br><a href="https://kavinwkp.github.io/2021/06/23/LeetCode-77-%E7%BB%84%E5%90%88/">77-组合</a><br><a href="https://kavinwkp.github.io/2021/06/23/LeetCode-39-%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C/">39/40/216-组合总和</a><br><a href="https://kavinwkp.github.io/2021/06/24/LeetCode-131-%E5%88%86%E5%89%B2%E5%9B%9E%E6%96%87%E4%B8%B2/">131-分割回文串</a><br><a href="https://kavinwkp.github.io/2021/06/25/LeetCode-93-%E5%A4%8D%E5%8E%9FIP%E5%9C%B0%E5%9D%80/">93-复原IP地址</a><br><a href="https://kavinwkp.github.io/2021/06/26/LeetCode-78-%E5%AD%90%E9%9B%86/">78/90-子集</a><br><a href="https://kavinwkp.github.io/2021/06/26/LeetCode-491-%E9%80%92%E5%A2%9E%E5%AD%90%E5%BA%8F%E5%88%97/">491-递增子序列</a><br><a href="https://kavinwkp.github.io/2021/06/26/LeetCode-46-%E5%85%A8%E6%8E%92%E5%88%97/">46/47-全排列</a><br><a href="https://kavinwkp.github.io/2021/06/27/LeetCode-332-%E9%87%8D%E6%96%B0%E5%AE%89%E6%8E%92%E8%A1%8C%E7%A8%8B/">332-重新安排行程</a><br><a href="https://kavinwkp.github.io/2021/07/14/LeetCode-257-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%89%80%E6%9C%89%E8%B7%AF%E5%BE%84/">257-二叉树的所有路径</a><br><a href="https://kavinwkp.github.io/2021/07/17/LeetCode-112-%E8%B7%AF%E5%BE%84%E6%80%BB%E5%92%8C/">112-路径总和</a><br><a href="https://kavinwkp.github.io/2021/09/15/LeetCode-36-%E6%9C%89%E6%95%88%E6%95%B0%E7%8B%AC/">36/37-有效数独</a><br><a href="https://kavinwkp.github.io/2021/09/24/LeetCode-129-%E6%A0%B9%E5%88%B0%E5%8F%B6%E5%AD%90%E8%8A%82%E7%82%B9%E7%9A%84%E5%92%8C/">129-根到叶子节点的和</a><br><a href="https://kavinwkp.github.io/2021/12/15/LeetCode-51-N%E7%9A%87%E5%90%8E/">51-N皇后</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>121-买卖股票的最佳时机</title>
      <link href="2021/12/18/LeetCode-121-%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA/"/>
      <url>2021/12/18/LeetCode-121-%E4%B9%B0%E5%8D%96%E8%82%A1%E7%A5%A8%E7%9A%84%E6%9C%80%E4%BD%B3%E6%97%B6%E6%9C%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-121-Best-Time-to-Buy-and-Sell-Stock"><a href="#LeetCode-121-Best-Time-to-Buy-and-Sell-Stock" class="headerlink" title="LeetCode 121. Best Time to Buy and Sell Stock"></a>LeetCode 121. Best Time to Buy and Sell Stock</h2><p>You are given an array prices where <code>prices[i]</code> is the price of a given stock on the i^th^ day.</p><p>You want to maximize your profit by choosing a <strong>single day</strong> to buy one stock and choosing a <strong>different day in the future</strong> to sell that stock.</p><p>Return the <strong>maximum profit</strong> you can achieve from this transaction. If you cannot achieve any profit, return <strong>0</strong>.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> prices <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token number">5</span>Explanation<span class="token operator">:</span> Buy on day <span class="token number">2</span> <span class="token punctuation">(</span>price <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">and</span> sell on day <span class="token number">5</span> <span class="token punctuation">(</span>price <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> profit <span class="token operator">=</span> <span class="token number">6</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">=</span> <span class="token number">5.</span>Note that buying on day <span class="token number">2</span> <span class="token operator">and</span> selling on day <span class="token number">1</span> is <span class="token operator">not</span> allowed because you must buy before you sell<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><br>Example 2:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> prices <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token number">0</span>Explanation<span class="token operator">:</span> In <span class="token keyword">this</span> <span class="token keyword">case</span><span class="token punctuation">,</span> no transactions are done <span class="token operator">and</span> the max profit <span class="token operator">=</span> <span class="token number">0.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></p><h3 id="method-1-贪心"><a href="#method-1-贪心" class="headerlink" title="method 1: 贪心"></a>method 1: 贪心</h3><p>因为只能持有一只股票，只要找到差值最大的两个数就行，当前价格必须比买入的价格高才行</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> prices<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> low <span class="token operator">=</span> INT_MAX<span class="token punctuation">;</span>  <span class="token comment">// 记录最小数</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 最小数和当前元素的差值</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> prices<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        low <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>low<span class="token punctuation">,</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        res <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> low<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="method-2-动态规划"><a href="#method-2-动态规划" class="headerlink" title="method 2: 动态规划"></a>method 2: 动态规划</h3><p><code>dp[i][0]</code>表示当前持有的股票，可以有两个来源</p><ul><li>当前不买入，持有跟之前一样，即<code>dp[i-1][0]</code></li><li>当前买入，即<code>-prices[i]</code></li></ul><p><code>dp[i][1]</code>表示当前不持有的股票，也是两个来源</p><ul><li>之前就不持有，即<code>dp[i-1][1]</code></li><li>之前持有，现在卖出，所以是<code>dp[i-1][0] + prices[i]</code></li></ul><p>初始化，一开始就买入，<code>dp[0][0] = -prices[0]</code>，一开始没有卖出，所以<code>dp[0][1] = 0</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> prices<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> prices<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">dp</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-=</span> prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> prices<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">-</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>只跟前一个状态有关，可以状态压缩</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> prices<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> prices<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">dp</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-=</span> prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        dp<span class="token punctuation">[</span>i <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">-</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span>i <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="LeetCode-122-Best-Time-to-Buy-and-Sell-Stock-II"><a href="#LeetCode-122-Best-Time-to-Buy-and-Sell-Stock-II" class="headerlink" title="LeetCode 122. Best Time to Buy and Sell Stock II"></a>LeetCode 122. Best Time to Buy and Sell Stock II</h2><p>You are given an integer array prices where <code>prices[i]</code> is the price of a given stock on the ith day.</p><p>On each day, you may decide to buy and/or sell the stock. You can only hold <strong>at most one</strong> share of the stock at any time. However, you can buy it then immediately sell it on the <strong>same day</strong>.</p><p>Find and return the <strong>maximum</strong> profit you can achieve.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> prices <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token number">7</span>Explanation<span class="token operator">:</span> Buy on day <span class="token number">2</span> <span class="token punctuation">(</span>price <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">and</span> sell on day <span class="token number">3</span> <span class="token punctuation">(</span>price <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> profit <span class="token operator">=</span> <span class="token number">5</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">=</span> <span class="token number">4.</span>Then buy on day <span class="token number">4</span> <span class="token punctuation">(</span>price <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">and</span> sell on day <span class="token number">5</span> <span class="token punctuation">(</span>price <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> profit <span class="token operator">=</span> <span class="token number">6</span><span class="token operator">-</span><span class="token number">3</span> <span class="token operator">=</span> <span class="token number">3.</span>Total profit is <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">=</span> <span class="token number">7.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h3 id="method"><a href="#method" class="headerlink" title="method"></a>method</h3><p>跟上一题一样，只是可以<strong>多次买入卖出</strong>，所以当前持有的股票的利润来源要改成<code>dp[i][0] = max(dp[i - 1][0], dp[i - 1][1] - prices[i])</code>，当前要买入，上一次就要卖出</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> prices<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> prices<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">dp</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span>prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> prices<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>同样可以用滚动数组</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> prices<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> prices<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">dp</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span>prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> prices<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        dp<span class="token punctuation">[</span>i <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span>i <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="714-Best-Time-to-Buy-and-Sell-Stock-with-Transaction-Fee"><a href="#714-Best-Time-to-Buy-and-Sell-Stock-with-Transaction-Fee" class="headerlink" title="714. Best Time to Buy and Sell Stock with Transaction Fee"></a>714. Best Time to Buy and Sell Stock with Transaction Fee</h2><p>You are given an array prices where <code>prices[i]</code> is the price of a given stock on the ith day, and an integer fee representing a transaction <code>fee</code>.</p><p>Find the maximum profit you can achieve. You may complete as many transactions as you like, but you need to pay the transaction fee for each transaction.</p><p>Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> prices <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span> fee <span class="token operator">=</span> <span class="token number">2</span>Output<span class="token operator">:</span> <span class="token number">8</span>Explanation<span class="token operator">:</span> The maximum profit can be achieved by<span class="token operator">:</span><span class="token operator">-</span> Buying at prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">-</span> Selling at prices<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token operator">-</span> Buying at prices<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token operator">-</span> Selling at prices<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9</span>The total profit <span class="token function">is</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">8</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">9</span> <span class="token operator">-</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">8.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h3 id="method-1"><a href="#method-1" class="headerlink" title="method"></a>method</h3><p>只是卖出的时候要减去手续费，其他都跟122一样</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> prices<span class="token punctuation">,</span> <span class="token keyword">int</span> fee<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> prices<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">dp</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-=</span> prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> prices<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> fee<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="LeetCode-123-Best-Time-to-Buy-and-Sell-Stock-III"><a href="#LeetCode-123-Best-Time-to-Buy-and-Sell-Stock-III" class="headerlink" title="LeetCode 123. Best Time to Buy and Sell Stock III"></a>LeetCode 123. Best Time to Buy and Sell Stock III</h2><p>You are given an array <code>prices</code> where <code>prices[i]</code> is the price of a given stock on the i^th^ day.</p><p>Find the maximum profit you can achieve. You may complete <strong>at most two transactions</strong>.</p><p><strong>Note</strong>: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> prices <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token number">6</span>Explanation<span class="token operator">:</span> Buy on day <span class="token number">4</span> <span class="token punctuation">(</span>price <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">and</span> sell on day <span class="token number">6</span> <span class="token punctuation">(</span>price <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> profit <span class="token operator">=</span> <span class="token number">3</span><span class="token operator">-</span><span class="token number">0</span> <span class="token operator">=</span> <span class="token number">3.</span>Then buy on day <span class="token number">7</span> <span class="token punctuation">(</span>price <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">and</span> sell on day <span class="token number">8</span> <span class="token punctuation">(</span>price <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> profit <span class="token operator">=</span> <span class="token number">4</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">=</span> <span class="token number">3.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><br>Example 2:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> prices <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token number">4</span>Explanation<span class="token operator">:</span> Buy on day <span class="token number">1</span> <span class="token punctuation">(</span>price <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">and</span> sell on day <span class="token number">5</span> <span class="token punctuation">(</span>price <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> profit <span class="token operator">=</span> <span class="token number">5</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">=</span> <span class="token number">4.</span>Note that you cannot buy on day <span class="token number">1</span><span class="token punctuation">,</span> buy on day <span class="token number">2</span> <span class="token operator">and</span> sell them later<span class="token punctuation">,</span> as you are engaging multiple transactions at the same time<span class="token punctuation">.</span> You must sell before buying again<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></p><h3 id="method-2"><a href="#method-2" class="headerlink" title="method"></a>method</h3><p>限制了只能两次买入卖出，定义5个状态</p><p><code>dp[i][0]</code>表示不操作，所以等于<code>dp[i - 1][0]</code><br><code>dp[i][1]</code>表示考虑第一次买入，两个来源，保持原样或者买入<br><code>dp[i][1] = max(dp[i - 1][1], dp[i - 1][0] - prices[i])</code><br><code>dp[i][2]</code>表示考虑第一次卖出，两个来源，保持原样或者卖出<br><code>dp[i][2] = max(dp[i - 1][2], dp[i - 1][1] + prices[i]</code></p><p>同理，<br><code>dp[i][3]</code>表示考虑第二次买入，两个来源，保持原样或者第一个卖出之后买入<br><code>dp[i][3] = max(dp[i - 1][3], dp[i - 1][2] - prices[i])</code><br><code>dp[i][4]</code>表示考虑第二次卖出，两个来源，保持原样或者第一次买入后卖出<br><code>dp[i][4] = max(dp[i - 1][4], dp[i - 1][3] + prices[i]</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> prices<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">dp</span><span class="token punctuation">(</span>prices<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span>prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span>prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> prices<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">+</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>dp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="LeetCode-188-Best-Time-to-Buy-and-Sell-Stock-IV"><a href="#LeetCode-188-Best-Time-to-Buy-and-Sell-Stock-IV" class="headerlink" title="LeetCode 188. Best Time to Buy and Sell Stock IV"></a>LeetCode 188. Best Time to Buy and Sell Stock IV</h2><p>You are given an integer array prices where <code>prices[i]</code> is the price of a given stock on the i^th^ day, and an integer <code>k</code>.</p><p>Find the maximum profit you can achieve. You may complete at most <code>k</code> transactions.</p><p>Note: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> k <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> prices <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token number">2</span>Explanation<span class="token operator">:</span> Buy on day <span class="token number">1</span> <span class="token punctuation">(</span>price <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">and</span> sell on day <span class="token number">2</span> <span class="token punctuation">(</span>price <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> profit <span class="token operator">=</span> <span class="token number">4</span><span class="token operator">-</span><span class="token number">2</span> <span class="token operator">=</span> <span class="token number">2.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br>Example 2:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> k <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> prices <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token number">7</span>Explanation<span class="token operator">:</span> Buy on day <span class="token number">2</span> <span class="token punctuation">(</span>price <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">and</span> sell on day <span class="token number">3</span> <span class="token punctuation">(</span>price <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> profit <span class="token operator">=</span> <span class="token number">6</span><span class="token operator">-</span><span class="token number">2</span> <span class="token operator">=</span> <span class="token number">4.</span> Then buy on day <span class="token number">5</span> <span class="token punctuation">(</span>price <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">and</span> sell on day <span class="token number">6</span> <span class="token punctuation">(</span>price <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> profit <span class="token operator">=</span> <span class="token number">3</span><span class="token operator">-</span><span class="token number">0</span> <span class="token operator">=</span> <span class="token number">3.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></p><h3 id="method-3"><a href="#method-3" class="headerlink" title="method"></a>method</h3><p><code>dp[i][j]</code>表示第<code>i</code>天状态为<code>j</code>时，所剩下的最大现金</p><ul><li>0表示不操作</li><li>1表示第1次买入</li><li>2表示第1次卖出</li><li>3表示第2次买入</li><li>4表示第2次卖出</li></ul><p>所以除0外，奇数表示买入，偶数表示卖出，总共有<code>2k+1</code>个状态</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> prices<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>prices<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">dp</span><span class="token punctuation">(</span>prices<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> k <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token operator">*</span> k<span class="token punctuation">;</span> j <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span>prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> prices<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token operator">*</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>prices<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> k<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="LeetCode-309-Best-Time-to-Buy-and-Sell-Stock-with-Cooldown"><a href="#LeetCode-309-Best-Time-to-Buy-and-Sell-Stock-with-Cooldown" class="headerlink" title="LeetCode 309. Best Time to Buy and Sell Stock with Cooldown"></a>LeetCode 309. Best Time to Buy and Sell Stock with Cooldown</h2><p>You are given an array prices where <code>prices[i]</code> is the price of a given stock on the i^th^ day.</p><p>Find the maximum profit you can achieve. You may complete as many transactions as you like (i.e., buy one and sell one share of the stock multiple times) with the following restrictions:</p><p>After you sell your stock, you cannot buy stock on the next day (i.e., cooldown one day).<br><strong>Note</strong>: You may not engage in multiple transactions simultaneously (i.e., you must sell the stock before you buy again).</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> prices <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token number">3</span>Explanation<span class="token operator">:</span> transactions <span class="token operator">=</span> <span class="token punctuation">[</span>buy<span class="token punctuation">,</span> sell<span class="token punctuation">,</span> cooldown<span class="token punctuation">,</span> buy<span class="token punctuation">,</span> sell<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></p><h3 id="method-4"><a href="#method-4" class="headerlink" title="method"></a>method</h3><p>定义四种状态</p><ol><li>保持买入</li><li>保持卖出</li><li>今天卖出</li><li>冷冻期</li></ol><p>保持买入的来源有3个，要么前一天就是买入<br><code>dp[i][0] = dp[i-1][0]</code><br>要么前一天是保持卖出或者冷冻期，今天买入<br><code>dp[i][0] = max(dp[i-1][2], dp[i-1][3]) - prices[i]</code><br>3种取最大</p><p>保持卖出有2个来源，要么前一天就是卖出<code>dp[i-1][1]</code><br>要么前一天是冷冻期<code>dp[i-1][3]</code><br>2种取较大值：<code>dp[i][1] = max(dp[i-1][1], dp[i-1][3])</code></p><p>今天要卖出，昨天只能是买入<br><code>dp[i][2] = dp[i-1][0] + prices[i]</code></p><p>今天是冷冻期，只能是昨天卖出，不能是昨天保持卖出，因为冷冻期只有一天<br><code>dp[i][3] = dp[i-1][2]</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> prices<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> prices<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">dp</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span>prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> prices<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>55-跳跃游戏</title>
      <link href="2021/12/16/LeetCode-55-%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8F/"/>
      <url>2021/12/16/LeetCode-55-%E8%B7%B3%E8%B7%83%E6%B8%B8%E6%88%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-55-Jump-Game"><a href="#LeetCode-55-Jump-Game" class="headerlink" title="LeetCode 55. Jump Game"></a>LeetCode 55. Jump Game</h2><p>You are given an integer array nums. You are initially positioned at the array’s first index, and each element in the array represents your maximum jump length at that position.</p><p>Return true if you can reach the last index, or false otherwise. </p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token boolean">true</span>Explanation<span class="token operator">:</span> Jump <span class="token number">1</span> step from index <span class="token number">0</span> to <span class="token number">1</span><span class="token punctuation">,</span> then <span class="token number">3</span> steps to the last index<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br>Example 2:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token boolean">false</span>Explanation<span class="token operator">:</span> You will always arrive at index <span class="token number">3</span> no matter what<span class="token punctuation">.</span> Its maximum jump length is <span class="token number">0</span><span class="token punctuation">,</span> which makes it impossible to reach the last index<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></p><h3 id="method-1-回溯"><a href="#method-1-回溯" class="headerlink" title="method 1: 回溯"></a>method 1: 回溯</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">traversal</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> nums<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">traversal</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> index <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> <span class="token function">canJump</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">traversal</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>超时了</p><h3 id="method-2-动态规划"><a href="#method-2-动态规划" class="headerlink" title="method 2: 动态规划"></a>method 2: 动态规划</h3><p><code>dp[i]</code>表示从下标<code>0</code>到<code>i</code>能跳到的最远的位置<br>首先肯定可以跳到<code>i+nums[i]</code>的位置，其次，如果<code>i-1</code>的<code>dp[i-1]</code>能跳到的位置比<code>i+nums[i]</code>还要远，等价于<code>dp[i]</code>也能跳那么远，所以递推公式<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> i <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">canJump</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">dp</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> i<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> i <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>208-实现前缀树</title>
      <link href="2021/12/16/LeetCode-208-%E5%AE%9E%E7%8E%B0%E5%89%8D%E7%BC%80%E6%A0%91/"/>
      <url>2021/12/16/LeetCode-208-%E5%AE%9E%E7%8E%B0%E5%89%8D%E7%BC%80%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-208-Implement-Trie-Prefix-Tree"><a href="#LeetCode-208-Implement-Trie-Prefix-Tree" class="headerlink" title="LeetCode 208. Implement Trie (Prefix Tree)"></a>LeetCode 208. Implement Trie (Prefix Tree)</h2><p>A trie (pronounced as “try”) or <strong>prefix tree</strong> is a tree data structure used to efficiently store and retrieve keys in a dataset of strings. There are various applications of this data structure, such as autocomplete and spellchecker.</p><p>Implement the Trie class:</p><ul><li><code>Trie()</code> Initializes the trie object.<br>void insert(String word) Inserts the string word into the trie.</li><li><code>boolean search(String word)</code> Returns true if the string word is in the trie (i.e., was inserted before), and false otherwise.</li><li><code>boolean startsWith(String prefix)</code> Returns true if there is a previously inserted string word that has the prefix prefix, and false otherwise.</li></ul><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token punctuation">[</span><span class="token string">"Trie"</span><span class="token punctuation">,</span> <span class="token string">"insert"</span><span class="token punctuation">,</span> <span class="token string">"search"</span><span class="token punctuation">,</span> <span class="token string">"search"</span><span class="token punctuation">,</span> <span class="token string">"startsWith"</span><span class="token punctuation">,</span> <span class="token string">"insert"</span><span class="token punctuation">,</span> <span class="token string">"search"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"apple"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"apple"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"app"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"app"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"app"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">"app"</span><span class="token punctuation">]</span><span class="token punctuation">]</span>Output<span class="token punctuation">[</span>null<span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">]</span>ExplanationTrie trie <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Trie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>trie<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>trie<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// return True</span>trie<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token string">"app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// return False</span>trie<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// return True</span>trie<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token string">"app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>trie<span class="token punctuation">.</span><span class="token function">search</span><span class="token punctuation">(</span><span class="token string">"app"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// return True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h3 id="method"><a href="#method" class="headerlink" title="method"></a>method</h3><p>用一个变量<code>isEnd</code>来表示是否单词结束，有26个字母，所以每个节点就有26个子节点，可以用数组存储</p><p><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/208/Trie.png" alt></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Trie</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">bool</span> isEnd<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>Trie<span class="token operator">*</span><span class="token operator">></span> next<span class="token punctuation">;</span>    Trie<span class="token operator">*</span> <span class="token function">searchPrefix</span><span class="token punctuation">(</span>string prefix<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        Trie <span class="token operator">*</span>root <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> c <span class="token operator">:</span> prefix<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> num <span class="token operator">=</span> c <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token operator">-></span>next<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>   <span class="token comment">// 不存在该前缀</span>            root <span class="token operator">=</span> root<span class="token operator">-></span>next<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 指针一直往后移</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Trie</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">isEnd</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token number">26</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>string word<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        Trie<span class="token operator">*</span> root <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> c <span class="token operator">:</span> word<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> num <span class="token operator">=</span> c <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token operator">-></span>next<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment">// 不存在就创建一个新的节点</span>                root<span class="token operator">-></span>next<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Trie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            root <span class="token operator">=</span> root<span class="token operator">-></span>next<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        root<span class="token operator">-></span>isEnd <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment">// 设置结束标志</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">bool</span> <span class="token function">search</span><span class="token punctuation">(</span>string word<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        Trie <span class="token operator">*</span>node <span class="token operator">=</span> <span class="token function">searchPrefix</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> node <span class="token operator">&amp;&amp;</span> node<span class="token operator">-></span>isEnd<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">bool</span> <span class="token function">startsWith</span><span class="token punctuation">(</span>string prefix<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        Trie <span class="token operator">*</span>node <span class="token operator">=</span> <span class="token function">searchPrefix</span><span class="token punctuation">(</span>prefix<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> node<span class="token punctuation">;</span>    <span class="token comment">// 存在就是true</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Trie</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span><span class="token operator">:</span>    Trie <span class="token operator">*</span>next<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> isEnd<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Trie</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        isEnd <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token function">memset</span><span class="token punctuation">(</span>next<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span>string word<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        Trie <span class="token operator">*</span>root <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> ch <span class="token operator">:</span> word<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> num <span class="token operator">=</span> ch <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token operator">-></span>next<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                root<span class="token operator">-></span>next<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Trie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            root <span class="token operator">=</span> root<span class="token operator">-></span>next<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        root<span class="token operator">-></span>isEnd <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">bool</span> <span class="token function">search</span><span class="token punctuation">(</span>string word<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        Trie <span class="token operator">*</span>root <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> c <span class="token operator">:</span> word<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> num <span class="token operator">=</span> c <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token operator">-></span>next<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            root <span class="token operator">=</span> root<span class="token operator">-></span>next<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> root<span class="token operator">-></span>isEnd<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">bool</span> <span class="token function">startsWith</span><span class="token punctuation">(</span>string prefix<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        Trie <span class="token operator">*</span>root <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> c <span class="token operator">:</span> prefix<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> num <span class="token operator">=</span> c <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token operator">-></span>next<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            root <span class="token operator">=</span> root<span class="token operator">-></span>next<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>14-最长公共前缀</title>
      <link href="2021/12/15/LeetCode-14-%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80/"/>
      <url>2021/12/15/LeetCode-14-%E6%9C%80%E9%95%BF%E5%85%AC%E5%85%B1%E5%89%8D%E7%BC%80/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-14-Longest-Common-Prefix"><a href="#LeetCode-14-Longest-Common-Prefix" class="headerlink" title="LeetCode 14. Longest Common Prefix"></a>LeetCode 14. Longest Common Prefix</h2><p>Write a function to find the longest common prefix string amongst an array of strings.</p><p>If there is no common prefix, return an empty string “”.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> strs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"flower"</span><span class="token punctuation">,</span><span class="token string">"flow"</span><span class="token punctuation">,</span><span class="token string">"flight"</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token string">"fl"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br>Example 2:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> strs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"dog"</span><span class="token punctuation">,</span><span class="token string">"racecar"</span><span class="token punctuation">,</span><span class="token string">"car"</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token string">""</span>Explanation<span class="token operator">:</span> There is no common prefix among the input strings<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></p><h3 id="method"><a href="#method" class="headerlink" title="method"></a>method</h3><p>假设第一个字符串为公共前缀，将其与其他字符串逐个比较，逐渐缩短前缀</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">string <span class="token function">longestCommonPrefix</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token operator">&amp;</span> strs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    string res <span class="token operator">=</span> strs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> strs<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// 用指针来比较，相同就往后移</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 不能超过较短的长度</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>p <span class="token operator">&lt;</span> len <span class="token operator">&amp;&amp;</span> res<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">==</span> strs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span> p<span class="token operator">++</span><span class="token punctuation">;</span>        res <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 前缀缩短</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>235/236-二叉搜索树的最近公共祖先</title>
      <link href="2021/12/15/LeetCode-235-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/"/>
      <url>2021/12/15/LeetCode-235-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-235-Lowest-Common-Ancestor-of-a-Binary-Search-Tree"><a href="#LeetCode-235-Lowest-Common-Ancestor-of-a-Binary-Search-Tree" class="headerlink" title="LeetCode 235. Lowest Common Ancestor of a Binary Search Tree"></a>LeetCode 235. Lowest Common Ancestor of a Binary Search Tree</h2><p>Given a <code>binary search tree (BST)</code>, find the lowest common ancestor (LCA) of two given nodes in the BST.</p><p>According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes p and q as the lowest node in T that has both <code>p</code> and <code>q</code> as descendants (where we allow <strong>a node to be a descendant of itself</strong>).”</p><p>Example 1:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> root <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span>null<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> p <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> q <span class="token operator">=</span> <span class="token number">8</span>Output<span class="token operator">:</span> <span class="token number">6</span>Explanation<span class="token operator">:</span> The LCA of nodes <span class="token number">2</span> <span class="token operator">and</span> <span class="token number">8</span> is <span class="token number">6.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="method"><a href="#method" class="headerlink" title="method"></a>method</h3><p><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/236/binarysearchtree_improved.png" alt></p><p>利用二叉搜索树的性质</p><ul><li>如果<code>root-&gt;val</code>大于区间<code>[p, q]</code>，就往左边找</li><li>如果小于区间<code>[p, q]</code>，就往右边找</li><li>如果在区间里面，就肯定是最近公共祖先，直接返回</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">TreeNode<span class="token operator">*</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">,</span> TreeNode<span class="token operator">*</span> p<span class="token punctuation">,</span> TreeNode<span class="token operator">*</span> q<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-></span>val <span class="token operator">></span> p<span class="token operator">-></span>val <span class="token operator">&amp;&amp;</span> root<span class="token operator">-></span>val <span class="token operator">></span> q<span class="token operator">-></span>val<span class="token punctuation">)</span>         <span class="token keyword">return</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-></span>val <span class="token operator">&lt;</span> p<span class="token operator">-></span>val <span class="token operator">&amp;&amp;</span> root<span class="token operator">-></span>val <span class="token operator">&lt;</span> q<span class="token operator">-></span>val<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="LeetCode-236-Lowest-Common-Ancestor-of-a-Binary-Tree"><a href="#LeetCode-236-Lowest-Common-Ancestor-of-a-Binary-Tree" class="headerlink" title="LeetCode 236. Lowest Common Ancestor of a Binary Tree"></a>LeetCode 236. Lowest Common Ancestor of a Binary Tree</h2><p><a href="https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree/">LeetCode-236</a></p><p>Given a binary tree, find the <strong>lowest common ancestor (LCA)</strong> of two given nodes in the tree.</p><p>According to the definition of LCA on Wikipedia: “The lowest common ancestor is defined between two nodes <code>p</code> and <code>q</code> as the lowest node in <code>T</code> that has both <code>p</code> and <code>q</code> as descendants (where we allow a node to be a descendant of itself).”</p><p><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/236/236.png" alt></p><p>Example 1:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> root <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span>null<span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> p <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> q <span class="token operator">=</span> <span class="token number">1</span>Output<span class="token operator">:</span> <span class="token number">3</span>Explanation<span class="token operator">:</span> The LCA of nodes <span class="token number">5</span> <span class="token operator">and</span> <span class="token number">1</span> is <span class="token number">3.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="method-后序遍历"><a href="#method-后序遍历" class="headerlink" title="method: 后序遍历"></a>method: 后序遍历</h3><p>采用<font color="LightSeaGreen">后序遍历</font>，查找两个节点的位置，如果一个节点的左子树和右子树分别包含了<code>p</code>或<code>q</code>，那这个节点就是两个节点的最近公共祖先</p><p>属于有<font color="LightSeaGreen">返回值</font>的递归，但需要处理整棵树，因为我们要对返回值进行处理</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">TreeNode<span class="token operator">*</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">,</span> TreeNode<span class="token operator">*</span> p<span class="token punctuation">,</span> TreeNode<span class="token operator">*</span> q<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> p <span class="token operator">||</span> root <span class="token operator">==</span> q <span class="token operator">||</span> <span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token punctuation">;</span>    TreeNode <span class="token operator">*</span>left <span class="token operator">=</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>    TreeNode <span class="token operator">*</span>right <span class="token operator">=</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&amp;&amp;</span> right<span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>left <span class="token operator">&amp;&amp;</span> right<span class="token punctuation">)</span> <span class="token keyword">return</span> right<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>right<span class="token punctuation">)</span> <span class="token keyword">return</span> left<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>后面的判断可以简写为</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">TreeNode<span class="token operator">*</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">,</span> TreeNode<span class="token operator">*</span> p<span class="token punctuation">,</span> TreeNode<span class="token operator">*</span> q<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> p <span class="token operator">||</span> root <span class="token operator">==</span> q <span class="token operator">||</span> <span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token punctuation">;</span>    TreeNode <span class="token operator">*</span>left <span class="token operator">=</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>    TreeNode <span class="token operator">*</span>right <span class="token operator">=</span> <span class="token function">lowestCommonAncestor</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">&amp;&amp;</span> right<span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>right<span class="token punctuation">)</span> <span class="token keyword">return</span> right<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>left<span class="token punctuation">)</span> <span class="token keyword">return</span> left<span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为只有四种情况，每个<code>if</code>都能排除一种情况</p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>228-汇总区间</title>
      <link href="2021/12/15/LeetCode-228-%E6%B1%87%E6%80%BB%E5%8C%BA%E9%97%B4/"/>
      <url>2021/12/15/LeetCode-228-%E6%B1%87%E6%80%BB%E5%8C%BA%E9%97%B4/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-228-Summary-Ranges"><a href="#LeetCode-228-Summary-Ranges" class="headerlink" title="LeetCode 228. Summary Ranges"></a>LeetCode 228. Summary Ranges</h2><p>You are given a <strong>sorted unique</strong> integer array <code>nums</code>.</p><p>Return the <strong>smallest sorted</strong> list of ranges that cover all the numbers in the array exactly. That is, each element of nums is covered by exactly one of the ranges, and there is no integer x such that x is in one of the ranges but not in nums.</p><p>Each range <code>[a,b]</code>in the list should be output as:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token string">"a->b"</span> <span class="token keyword">if</span> a <span class="token operator">!=</span> b<span class="token string">"a"</span> <span class="token keyword">if</span> a <span class="token operator">==</span> b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"0->2"</span><span class="token punctuation">,</span><span class="token string">"4->5"</span><span class="token punctuation">,</span><span class="token string">"7"</span><span class="token punctuation">]</span>Explanation<span class="token operator">:</span> The ranges are<span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">--</span><span class="token operator">></span> <span class="token string">"0->2"</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">--</span><span class="token operator">></span> <span class="token string">"4->5"</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">--</span><span class="token operator">></span> <span class="token string">"7"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>Example 2:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"0"</span><span class="token punctuation">,</span><span class="token string">"2->4"</span><span class="token punctuation">,</span><span class="token string">"6"</span><span class="token punctuation">,</span><span class="token string">"8->9"</span><span class="token punctuation">]</span>Explanation<span class="token operator">:</span> The ranges are<span class="token operator">:</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">--</span><span class="token operator">></span> <span class="token string">"0"</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">--</span><span class="token operator">></span> <span class="token string">"2->4"</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">--</span><span class="token operator">></span> <span class="token string">"6"</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">--</span><span class="token operator">></span> <span class="token string">"8->9"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h3 id="method-模拟"><a href="#method-模拟" class="headerlink" title="method: 模拟"></a>method: 模拟</h3><p>类似于双指针，如果满足<code>nums[i+1] == nums[i] + 1</code>指针就一直后移，最后找到满足两两差一的区间<code>[start, i]</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">summaryRanges</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> res<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> start <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> start<span class="token punctuation">)</span>            res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">to_string</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"->"</span> <span class="token operator">+</span> <span class="token function">to_string</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">to_string</span><span class="token punctuation">(</span>start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模拟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>51-N皇后</title>
      <link href="2021/12/15/LeetCode-51-N%E7%9A%87%E5%90%8E/"/>
      <url>2021/12/15/LeetCode-51-N%E7%9A%87%E5%90%8E/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-51-N-Queens"><a href="#LeetCode-51-N-Queens" class="headerlink" title="LeetCode 51. N-Queens"></a>LeetCode 51. N-Queens</h2><p>The <code>n-queens</code> puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.</p><p>Given an integer <code>n</code>, return all distinct solutions to the <code>n-queens</code> puzzle. You may return the answer in <strong>any order</strong>.</p><p>Each solution contains a distinct board configuration of the n-queens’ placement, where ‘Q’ and ‘.’ both indicate a queen and an empty space, respectively.</p><p>Example 1:<br><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/51/queens.jpg" alt><br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> n <span class="token operator">=</span> <span class="token number">4</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">".Q.."</span><span class="token punctuation">,</span><span class="token string">"...Q"</span><span class="token punctuation">,</span><span class="token string">"Q..."</span><span class="token punctuation">,</span><span class="token string">"..Q."</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"..Q."</span><span class="token punctuation">,</span><span class="token string">"Q..."</span><span class="token punctuation">,</span><span class="token string">"...Q"</span><span class="token punctuation">,</span><span class="token string">".Q.."</span><span class="token punctuation">]</span><span class="token punctuation">]</span>Explanation<span class="token operator">:</span> There exist two distinct solutions to the <span class="token number">4</span><span class="token operator">-</span>queens puzzle as shown above<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></p><h3 id="method-回溯"><a href="#method-回溯" class="headerlink" title="method: 回溯"></a>method: 回溯</h3><p>判断逻辑：</p><ul><li>判断同一列是否有</li><li>判断45度斜线是否有</li><li>判断135度斜线是否有</li></ul><p>递归的深度就是棋盘的行数<code>n</code><br>如果这个点可以放就放，然后递归处理下一层</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>string<span class="token operator">>></span> res<span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">isValue</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token operator">&amp;</span> board<span class="token punctuation">,</span> <span class="token keyword">int</span> row<span class="token punctuation">,</span> <span class="token keyword">int</span> col<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> row<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'Q'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> row <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> col <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">,</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'Q'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> row <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">=</span> col <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">,</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'Q'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">traversal</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token operator">&amp;</span> board<span class="token punctuation">,</span> <span class="token keyword">int</span> row<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>row <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>board<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> col <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> col <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> col<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isValue</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> row<span class="token punctuation">,</span> col<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            board<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'Q'</span><span class="token punctuation">;</span>      <span class="token comment">// 放皇后</span>            <span class="token function">traversal</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> row <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 递归处理下一层</span>            board<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>      <span class="token comment">// 回溯取消皇后</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>string<span class="token operator">>></span> <span class="token function">solveNQueens</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">board</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token function">string</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 一个string就是一层</span>    <span class="token function">traversal</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="LeetCode-52-N-Queens-II"><a href="#LeetCode-52-N-Queens-II" class="headerlink" title="LeetCode 52. N-Queens II"></a>LeetCode 52. N-Queens II</h2><p>The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.</p><p>Given an integer n, return the number of distinct solutions to the n-queens puzzle.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> n <span class="token operator">=</span> <span class="token number">4</span>Output<span class="token operator">:</span> <span class="token number">2</span>Explanation<span class="token operator">:</span> There are two distinct solutions to the <span class="token number">4</span><span class="token operator">-</span>queens puzzle as shown<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></p><h3 id="method-回溯-1"><a href="#method-回溯-1" class="headerlink" title="method: 回溯"></a>method: 回溯</h3><p>由元素所在行<code>row</code>和列<code>col</code>计算所在的对角线</p><ul><li>45度对角线：<code>row + col</code></li><li>135度对角线：<code>row - col + n - 1</code></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> res<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span> cols<span class="token punctuation">;</span>  <span class="token comment">// 列</span>vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span> diag1<span class="token punctuation">;</span> <span class="token comment">// 45度对角线</span>vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span> diag2<span class="token punctuation">;</span> <span class="token comment">// 135度对角线</span><span class="token keyword">void</span> <span class="token function">traversal</span><span class="token punctuation">(</span><span class="token keyword">int</span> row<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>row <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        res<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> col <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> col <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> col<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> d1 <span class="token operator">=</span> row <span class="token operator">+</span> col<span class="token punctuation">;</span>         <span class="token comment">// 45度对角线</span>        <span class="token keyword">int</span> d2 <span class="token operator">=</span> row <span class="token operator">-</span> col <span class="token operator">+</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 135度对角线</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cols<span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>diag1<span class="token punctuation">[</span>d1<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>diag2<span class="token punctuation">[</span>d2<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            cols<span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            diag1<span class="token punctuation">[</span>d1<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            diag2<span class="token punctuation">[</span>d2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token function">traversal</span><span class="token punctuation">(</span>row <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>            cols<span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            diag1<span class="token punctuation">[</span>d1<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            diag2<span class="token punctuation">[</span>d2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">totalNQueens</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    cols<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    diag1<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 对角线的数量是2n-1</span>    diag2<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">traversal</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 回溯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>198-打家劫舍</title>
      <link href="2021/12/14/LeetCode-198-%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D/"/>
      <url>2021/12/14/LeetCode-198-%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-198-House-Robber"><a href="#LeetCode-198-House-Robber" class="headerlink" title="LeetCode 198. House Robber"></a>LeetCode 198. House Robber</h2><p>You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed, the only constraint stopping you from robbing each of them is that adjacent houses have security systems connected and <strong>it will automatically contact the police if two adjacent houses were broken into on the same night</strong>.</p><p>Given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight <strong>without alerting the police</strong>.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token number">4</span>Explanation<span class="token operator">:</span> Rob house <span class="token number">1</span> <span class="token punctuation">(</span>money <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">and</span> then rob house <span class="token number">3</span> <span class="token punctuation">(</span>money <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Total amount you can rob <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">=</span> <span class="token number">4.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><br>Example 2:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token number">12</span>Explanation<span class="token operator">:</span> Rob house <span class="token number">1</span> <span class="token punctuation">(</span>money <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rob house <span class="token number">3</span> <span class="token punctuation">(</span>money <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token operator">and</span> rob house <span class="token number">5</span> <span class="token punctuation">(</span>money <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Total amount you can rob <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">9</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">12.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></p><h3 id="method"><a href="#method" class="headerlink" title="method"></a>method</h3><p><code>dp[i]</code>: 从0到<code>i</code>能取到的最大值</p><p>考虑<code>nums[i]</code>，如果不偷，<code>dp[i] = dp[i-1]</code><br>如果偷，<code>dp[i] = dp[i-2] + nums[i]</code><br>所以递推公式<br><code>dp[i] = max(dp[i-1], dp[i-2] + nums[i])</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">rob</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">dp</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 取0和1之间的较大者</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="LeetCode-213-House-Robber-II"><a href="#LeetCode-213-House-Robber-II" class="headerlink" title="LeetCode 213. House Robber II"></a>LeetCode 213. House Robber II</h2><p>You are a professional robber planning to rob houses along a street. Each house has a certain amount of money stashed. All houses at this place are <strong>arranged in a circle</strong>. That means the first house is the neighbor of the last one. Meanwhile, adjacent houses have a security system connected, and <strong>it will automatically contact the police if two adjacent houses were broken into on the same night</strong>.</p><p>Given an integer array nums representing the amount of money of each house, return the maximum amount of money you can rob tonight <strong>without alerting the police</strong>.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token number">3</span>Explanation<span class="token operator">:</span> You cannot rob house <span class="token number">1</span> <span class="token punctuation">(</span>money <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">and</span> then rob house <span class="token number">3</span> <span class="token punctuation">(</span>money <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> because they are adjacent houses<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br>Example 2:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token number">4</span>Explanation<span class="token operator">:</span> Rob house <span class="token number">1</span> <span class="token punctuation">(</span>money <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">and</span> then rob house <span class="token number">3</span> <span class="token punctuation">(</span>money <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">.</span>Total amount you can rob <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">=</span> <span class="token number">4.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></p><h3 id="method-1"><a href="#method-1" class="headerlink" title="method"></a>method</h3><p>因为首尾相连，所以考虑三种情况</p><ol><li>不考虑首尾</li><li>不考虑尾</li><li>不考虑首</li></ol><p>因为情况2和情况3加一起就包含了情况1，所以就考虑两种情况</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">robRange</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">==</span> end<span class="token punctuation">)</span> <span class="token keyword">return</span> nums<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">dp</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span>start <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>start<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>start <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> start <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> end<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">rob</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> res1 <span class="token operator">=</span> <span class="token function">robRange</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 情况2</span>    <span class="token keyword">int</span> res2 <span class="token operator">=</span> <span class="token function">robRange</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 情况3</span>    <span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span>res1<span class="token punctuation">,</span> res2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="LeetCode-337-House-Robber-III"><a href="#LeetCode-337-House-Robber-III" class="headerlink" title="LeetCode 337. House Robber III"></a>LeetCode 337. House Robber III</h2><p>The thief has found himself a new place for his thievery again. There is only one entrance to this area, called root.</p><p>Besides the root, each house has one and only one parent house. After a tour, the smart thief realized that all houses in this place form a binary tree. It will automatically contact the police if <strong>two directly-linked houses were broken into on the same night</strong>.</p><p>Given the root of the binary tree, return the maximum amount of money the thief can rob <strong>without alerting the police</strong>.</p><p>Example 1:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> root <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token number">7</span>Explanation<span class="token operator">:</span> Maximum amount of money the thief can rob <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">7.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Example 2:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> root <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token number">9</span>Explanation<span class="token operator">:</span> Maximum amount of money the thief can rob <span class="token operator">=</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">=</span> <span class="token number">9.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="method-1-记忆化搜索"><a href="#method-1-记忆化搜索" class="headerlink" title="method 1: 记忆化搜索"></a>method 1: 记忆化搜索</h3><p>有两种情况：</p><ul><li>不偷当前节点，考虑偷不偷左右节点</li><li>偷当前节点，接下来只能考虑孙子节点</li></ul><p>两种情况取较大值，得到当前节点的结果后就记录下来</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">unordered_map<span class="token operator">&lt;</span>TreeNode<span class="token operator">*</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> hash<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">rob</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token operator">-></span>left <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>root<span class="token operator">-></span>right<span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token operator">-></span>val<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>hash<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> hash<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 已经处理过就直接返回</span>    <span class="token keyword">int</span> res0 <span class="token operator">=</span> <span class="token function">rob</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">rob</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 情况1</span>    <span class="token keyword">int</span> res1 <span class="token operator">=</span> root<span class="token operator">-></span>val<span class="token punctuation">;</span>   <span class="token comment">// 情况2</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">)</span> res1 <span class="token operator">+=</span> <span class="token function">rob</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token operator">-></span>left<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">rob</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">)</span> res1 <span class="token operator">+=</span> <span class="token function">rob</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token operator">-></span>left<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">rob</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    hash<span class="token punctuation">[</span>root<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>res0<span class="token punctuation">,</span> res1<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 记录结果</span>    <span class="token keyword">return</span> hash<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="method-2-动态规划"><a href="#method-2-动态规划" class="headerlink" title="method 2: 动态规划"></a>method 2: 动态规划</h3><ul><li><code>res[0]</code>表示不偷当前节点的结果</li><li><code>res[1]</code>表示偷当前节点的结果</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">traversal</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span>root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> left <span class="token operator">=</span> <span class="token function">traversal</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 处理左子树</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> right <span class="token operator">=</span> <span class="token function">traversal</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 处理右子树</span>    <span class="token keyword">int</span> res0 <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>left<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> left<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">max</span><span class="token punctuation">(</span>right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> right<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 不偷</span>    <span class="token keyword">int</span> res1 <span class="token operator">=</span> root<span class="token operator">-></span>val <span class="token operator">+</span> left<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> right<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 偷</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>res0<span class="token punctuation">,</span> res1<span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">rob</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res <span class="token operator">=</span> <span class="token function">traversal</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> res<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>139-单词拆分</title>
      <link href="2021/12/13/LeetCode-139-%E5%8D%95%E8%AF%8D%E6%8B%86%E5%88%86/"/>
      <url>2021/12/13/LeetCode-139-%E5%8D%95%E8%AF%8D%E6%8B%86%E5%88%86/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-139-Word-Break"><a href="#LeetCode-139-Word-Break" class="headerlink" title="LeetCode 139. Word Break"></a>LeetCode 139. Word Break</h2><p>Given a string s and a dictionary of strings wordDict, return true if s can be segmented into a space-separated sequence of one or more dictionary words.</p><p>Note that the same word in the dictionary may be reused multiple times in the segmentation.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> s <span class="token operator">=</span> <span class="token string">"leetcode"</span><span class="token punctuation">,</span> wordDict <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"leet"</span><span class="token punctuation">,</span><span class="token string">"code"</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token boolean">true</span>Explanation<span class="token operator">:</span> Return <span class="token boolean">true</span> because <span class="token string">"leetcode"</span> can be segmented as <span class="token string">"leet code"</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br>Example 2:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> s <span class="token operator">=</span> <span class="token string">"applepenapple"</span><span class="token punctuation">,</span> wordDict <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"apple"</span><span class="token punctuation">,</span><span class="token string">"pen"</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token boolean">true</span>Explanation<span class="token operator">:</span> Return <span class="token boolean">true</span> because <span class="token string">"applepenapple"</span> can be segmented as <span class="token string">"apple pen apple"</span><span class="token punctuation">.</span>Note that you are allowed to reuse a dictionary word<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></p><h3 id="method-完全背包"><a href="#method-完全背包" class="headerlink" title="method: 完全背包"></a>method: 完全背包</h3><p>把字典里的字符串放进集合里，当成物品，可以无限使用，所以是完全背包</p><p><code>dp[i]</code>：从0到i的字符串能否由字典里的组成</p><p>如果区间<code>[j,i)</code>的子串在集合中，并且<code>dp[j]</code>为<code>true</code>，那<code>dp[i]</code>也可以是<code>true</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">wordBreak</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token operator">&amp;</span> wordDict<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    unordered_set<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">hash</span><span class="token punctuation">(</span>wordDict<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> wordDict<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span> <span class="token function">dp</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            string word <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> i <span class="token operator">-</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// [j,i)的子串</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>hash<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span> <span class="token operator">!=</span> hash<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 背包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GPOPS-II教程</title>
      <link href="2021/12/11/Math-MATLAB-GPOPS/"/>
      <url>2021/12/11/Math-MATLAB-GPOPS/</url>
      
        <content type="html"><![CDATA[<h2 id="GPOPS-II教程"><a href="#GPOPS-II教程" class="headerlink" title="GPOPS-II教程"></a>GPOPS-II教程</h2><h3 id="GPOPS结构"><a href="#GPOPS结构" class="headerlink" title="GPOPS结构"></a>GPOPS结构</h3><h4 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h4><p>为了指定要解决的最优控制问题，用户必须编写以下<code>MATLAB</code>函数</p><ul><li><font color="LightSeaGreen">端点函数</font><code>endpoint fucntion</code>，端点函数定义了阶段的起始点和/或终止点、阶段的积分以及静态参数之间的相互关系，还定义了要最小化的成本</li><li><font color="LightSeaGreen">连续函数</font>，连续函数定义了动力学，计算任意阶段的积分所需要的被积函数，以及问题任意阶段的路径约束</li></ul><p>还要指定一些下限和上限</p><ul><li>每个阶段的起始时间和终止时间</li><li>每个阶段的起始状态、过程状态和终止状态</li><li>每个阶段的控制</li><li>路径约束</li><li>事件约束</li><li>静态参数</li></ul><h4 id="setup"><a href="#setup" class="headerlink" title="setup"></a>setup</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">output <span class="token operator">=</span> <span class="token function">gpops2</span><span class="token punctuation">(</span>setup<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>输入是一个用户定义的结构，其中包含要解决的最优控制问题的所有信息</li><li>输出是一个结构，其中包含通过解决最优控制问题获得的信息</li></ul><p><code>setup</code>结构体</p><ul><li><code>name</code>: 无空格的字符串，通常是对控制问题的一定程度的描述</li><li><code>function</code>: 包含<font color="LightSeaGreen">端点函数</font><code>endpoint function</code>和<font color="LightSeaGreen">连续函数</font><code>continuous function</code>的结构体</li><li><code>bounds</code>: 包含变量上下限的结构体</li><li><code>guess</code>: 包含对问题中的时间、状态、控制、积分和静态参数的猜测，<code>time/state/control/integrals/static parameters</code></li></ul><p>可选项</p><ul><li><p><code>auxdata</code>: 包含可能用到的<code>auxiliary data</code>的结构体</p></li><li><p><code>derivatives</code></p><ul><li><code>derivatives.supplier</code>: 指定<code>NLP</code>求解器使用的导数近似，默认<code>sparseFD</code>，还有<code>sparseBD/sparseCD</code></li><li><code>derivatives.derivativelevel</code>: NLP求解器使用的导数阶<code>first/second</code></li></ul></li><li><p><code>scales</code>: 指定如何缩放的结构体</p><ul><li><code>scales.method</code>: <code>none/automatic-bounds/automatic-guess</code></li></ul></li><li><p><code>method</code>: 定义在解决问题时要使用的配置版本的字符串，微分: <code>RPM-Differentiation</code>，积分: <code>RPM-Integration</code></p></li><li><p><code>mesh</code>: 指定要使用的网格划分方法和网格划分精度公差信息的结构体</p><ul><li><code>mesh.method</code>: 网络细化方法，<code>hp-PattersonRao</code> or <code>hp-DarbyRao</code> or <code>hp-LiuRao</code> or <code>hp-LiuRao-Legendre</code></li><li><code>mesh.tolerance</code>: 0到1的正数，默认$10^{-3}$</li><li><code>mesh.maxiteration</code>: 最大迭代次数，默认10</li><li><code>mesh.colpointsmin</code>: 指定网格间隔中允许的配置点的最小数量，默认3</li><li><code>mesh.colpointsmax</code>: 指定网格间隔中允许的配置点的最大数量，默认10</li><li><code>phase</code>: 给定阶段的初始网络间隔和配置点<ul><li><code>mesh.phase.fraction</code>: 每个阶段的网络间隔，是一个0到1的缩放区间，N个间隔，行向量加起来等于1，默认<code>0.1*ones(1,10)</code></li><li><code>mesh.phase.colpoints</code>: 每个阶段的配置点，也是行向量，默认<code>4*ones(1,10)</code></li></ul></li></ul></li><li><p><code>nlp</code>: 指定要使用的<code>NLP</code>求解程序和所选<code>NLP</code>求解程序中要使用的选项的结构体</p><ul><li><code>nlp.solver</code>: 求解器，<code>snopt</code> or <code>ipopt</code></li><li><code>nlp.ipoptoptions</code><ul><li><code>nlp.ipoptoptions.linear_solver</code>: <code>mumps</code> or <code>ma57</code></li><li><code>nlp.ipoptoptions.tolerance</code>: 默认$10^{-7}$</li><li><code>nlp.ipoptoptions.maxiterations</code>: 默认2000</li></ul></li><li><code>nlp.snoptoptions</code><ul><li><code>nlp.snoptoptions.tolerance</code>: 默认$10^{-6}$</li><li><code>nlp.snoptoptions.maxiterations</code>: 默认2000</li></ul></li></ul></li><li><p><code>displaylevel</code>: 提供<code>GPOPS-II</code>执行期间发送到<code>MATLAB</code>命令窗口的输出量，0或1或2，默认2</p></li></ul><h4 id="setup-function"><a href="#setup-function" class="headerlink" title="setup.function"></a>setup.function</h4><p>在<code>setup</code>中指定<code>MATLAB</code>函数名称的语法<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">setup<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>continuous <span class="token operator">=</span> @continuousfunsetup<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>endpoint   <span class="token operator">=</span> @endpointfun<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h5 id="setup-functions-continuousfun"><a href="#setup-functions-continuousfun" class="headerlink" title="setup.functions.continuousfun"></a>setup.functions.continuousfun</h5><p>格式</p><script type="math/tex; mode=display">\mathbf{function \enspace output = continuousfun(input)}</script><p>输入包括</p><ul><li><code>input.phase(p).time</code>: p阶段N个配置点的时间，向量长度为$N^{(p)}$</li><li><code>input.phase(p).state</code>: N个配置点*状态维度的矩阵，$N^{(p)} \times n_y^{(p)}$</li><li><code>input.phase(p).control</code>: N个配置点*控制维度的矩阵，$N^{(p)} \times n_u^{(p)}$</li><li><code>input.phase(p).parameter</code>: N个配置点*静态参数数量的矩阵，$N^{(p)} \times n_s$</li></ul><p>输出是一个长度为$P$的结构向量，包括</p><ul><li><code>output.dynamics</code>: N个配置点*状态维度的矩阵，$N^{(p)} \times n_y^{(p)}$</li><li><code>output.path</code>: N个配置点*路径约束维度的矩阵，$N^{(p)} \times n_c^{(p)}$</li><li><code>output.integrand</code>: N个配置点*积分维度的矩阵，$N^{(p)} \times n_d^{(p)}$</li></ul><h5 id="setup-functions-endpoint"><a href="#setup-functions-endpoint" class="headerlink" title="setup.functions.endpoint"></a>setup.functions.endpoint</h5><p>格式</p><script type="math/tex; mode=display">\mathbf{function \enspace output = endpointfun(input)}</script><p>输入包括</p><ul><li><code>input.phase(p).initialtime</code>: 阶段p的起始时间</li><li><code>input.phase(p).finaltime</code>: 阶段p的起始时间</li><li><code>input.phase(p).initialstate</code>: 阶段p的起始状态</li><li><code>input.phase(p).finalstate</code>: 阶段p的终止状态</li><li><code>input.phase(p).integral</code>: 阶段p的积分</li><li><code>input.parameter</code>: 阶段p的静态参数</li></ul><p>输出包括两个成员</p><ul><li><code>output.objective</code>: 标量，计算目标函数结果</li><li><code>output.eventgroup</code></li></ul><h4 id="setup-bounds"><a href="#setup-bounds" class="headerlink" title="setup.bounds"></a>setup.bounds</h4><p>包括3个成员：</p><ol><li><p><code>bounds.phase</code>: 指定了时间、状态、控制、路径约束和每个阶段的积分的界限</p><ul><li><code>phase.initialtime.lower</code>: 起始时间的下界</li><li><code>phase.initialtime.upper</code>: 起始时间的上界<script type="math/tex; mode=display">\mathbf{bounds.phase(\textit{p}).initialtime.lower} = t_0^{lower} \\\mathbf{bounds.phase(\textit{p}).initialtime.upper} = t_0^{upper}</script></li><li><code>phase(p).finaltime.lower</code>: 终止时间的下界</li><li><p><code>phase(p).finaltime.upper</code>: 终止时间的上界</p><script type="math/tex; mode=display">\mathbf{bounds.phase(\textit{p}).finaltime.lower} = t_f^{lower} \\\mathbf{bounds.phase(\textit{p}).finaltime.upper} = t_f^{upper}</script></li><li><p><code>phase(p).initialstate.lower</code>: 初始状态的下界</p></li><li><p><code>phase(p).initialstate.upper</code>: 初始状态的上界</p><script type="math/tex; mode=display">\mathbf{bounds.phase(\textit{p}).initialstate.lower} = [y_{0,1}^{lower} \cdots y_{0, n_y^{(p)}}^{lower}] \\\mathbf{bounds.phase(\textit{p}).initialstate.upper} = [y_{0,1}^{upper} \cdots y_{0, n_y^{(p)}}^{upper}]</script></li><li><p><code>phase(p).state.lower</code>: 每个阶段状态的下界</p></li><li><p><code>phase(p).state.upper</code>: 每个阶段状态的上界</p><script type="math/tex; mode=display">\mathbf{bounds.phase(\textit{p}).state.lower} = [y_{1}^{lower} \cdots y_{n_y^{(p)}}^{lower}] \\\mathbf{bounds.phase(\textit{p}).state.upper} = [y_{1}^{upper} \cdots y_{n_y^{(p)}}^{upper}]</script></li><li><p><code>phase(p).finalstate.lower</code>: 终止状态的下界</p></li><li><p><code>phase(p).finalstate.upper</code>: 终止状态的上界</p><script type="math/tex; mode=display">\mathbf{bounds.phase(\textit{p}).finalstate.lower} = [y_{f,1}^{lower} \cdots y_{f,n_y^{(p)}}^{lower}] \\\mathbf{bounds.phase(\textit{p}).finalstate.upper} = [y_{f,1}^{upper} \cdots y_{f,n_y^{(p)}}^{upper}]</script></li><li><p><code>phase(p).control.lower</code>: 每个阶段控制的下界</p></li><li><p><code>phase(p).control.upper</code>: 每个阶段控制的上界</p><script type="math/tex; mode=display">\mathbf{bounds.phase(\textit{p}).control.lower} = [u_{1}^{lower} \cdots y_{n_u^{(p)}}^{lower}] \\\mathbf{bounds.phase(\textit{p}).control.upper} = [u_{1}^{upper} \cdots y_{n_u^{(p)}}^{upper}]</script></li><li><p><code>phase(p).path.lower</code>: 每个阶段路径约束的下界</p></li><li><p><code>phase(p).path.upper</code>: 每个阶段路径约束的上界</p><script type="math/tex; mode=display">\mathbf{bounds.phase(\textit{p}).path.lower} = [c_{1}^{lower} \cdots c_{n_u^{(p)}}^{lower}] \\\mathbf{bounds.phase(\textit{p}).path.upper} = [c_{1}^{upper} \cdots c_{n_u^{(p)}}^{upper}]</script></li><li><p><code>phase(p).integral.lower</code>: 每个阶段积分的下界</p></li><li><p><code>phase(p).integral.upper</code>: 每个阶段积分的上界</p><script type="math/tex; mode=display">\mathbf{bounds.phase(\textit{p}).integral.lower} = [q_{1}^{lower} \cdots q_{n_q^{(p)}}^{lower}] \\\mathbf{bounds.phase(\textit{p}).integral.upper} = [q_{1}^{upper} \cdots q_{n_q^{(p)}}^{upper}]</script></li><li><p><code>phase(p).duration.lower</code>: 每个阶段时间的下界</p></li><li><code>phase(p).duration.upper</code>: 每个阶段时间的上界</li></ul></li></ol><ol><li><p><code>bounds.parameters</code>: 包含问题中静态参数的下界和上界</p><script type="math/tex; mode=display">\mathbf{bounds.parameters.lower} = [s_{1}^{lower} \cdots s_{n_s}^{lower}] \\\mathbf{bounds.parameters.upper} = [s_{1}^{upper} \cdots s_{n_s}^{upper}]</script></li><li><p><code>bounds.eventgroup</code>: 长度为<code>G</code>的结构数组，其中<code>G</code>是问题中事件组的数量</p><script type="math/tex; mode=display">\mathbf{bounds.eventgroup(\textit{g}).lower} = [b_{1}^{lower} \cdots b_{n_b^{(g)}}^{lower}] \\\mathbf{bounds.eventgroup(\textit{g}).upper} = [b_{1}^{upper} \cdots b_{n_b^{(g)}}^{upper}]</script></li></ol><h4 id="setup-guess"><a href="#setup-guess" class="headerlink" title="setup.guess"></a>setup.guess</h4><p><code>guess</code>结构体里面的值代表了整个求解过程的初始值</p><ul><li><code>guess.phase(p).time</code>: 长度为$M^{(p)}$的列向量，单调递增</li><li><code>guess.phase(p).state</code>: $M^{(p)} \times n_y^{(p)}$的矩阵</li><li><code>guess.phase(p).control</code>: $M^{(p)} \times n_u^{(p)}$的矩阵</li><li><code>guess.phase(p).integral</code>: 长度为$n_d^{(p)}$的行向量</li><li><code>guess.parameter</code>: 长度为$n_s$的行向量</li></ul><h4 id="output"><a href="#output" class="headerlink" title="output"></a>output</h4><p><code>gpops2</code>的输出包括</p><ul><li><code>result</code><ul><li><code>result.solution</code>: 最优的时间、状态和控制以及静态参数<ul><li><code>solution.phase(p).time</code></li><li><code>solution.phase(p).state</code></li><li><code>solution.phase(p).control</code></li><li><code>solution.parameter</code></li></ul></li><li><code>result.objective</code>: 最优值</li><li><code>result.setup</code>: 问题设置</li><li><code>result.nextsetup</code></li></ul></li><li><code>meshhistory</code>: 对每个求解<code>NLP</code>的网格进行求解和误差估计</li><li><code>meshiterations</code>: 迭代次数</li></ul>]]></content>
      
      
      <categories>
          
          <category> Math </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Matlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>377-组合总和IV</title>
      <link href="2021/12/10/LeetCode-377-%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8CIV/"/>
      <url>2021/12/10/LeetCode-377-%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8CIV/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-377-Combination-Sum-IV"><a href="#LeetCode-377-Combination-Sum-IV" class="headerlink" title="LeetCode 377. Combination Sum IV"></a>LeetCode 377. Combination Sum IV</h2><p>Given an array of distinct integers <code>nums</code> and a target integer <code>target</code>, return the number of possible combinations that add up to target.</p><p>The test cases are generated so that the answer can fit in a <code>32-bit</code> integer.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token number">4</span>Output<span class="token operator">:</span> <span class="token number">7</span>Explanation<span class="token operator">:</span>The possible combination ways are<span class="token operator">:</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>Note that different sequences are counted as different combinations<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h3 id="method"><a href="#method" class="headerlink" title="method"></a>method</h3><p>要求排列数，用回溯会超时，考虑用完全背包，target是背包容量，数组元素是物品，因为是组合数，所以递推公式是<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>j <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p><p><font color="LightSeaGreen">求排列数</font>，所以要先遍历物品，再遍历背包</p><p>题目给定结果不会越界，但是在计算过程中有些<code>dp</code>值会越界，所以这些<code>dp</code>值肯定不会是结果，就不用考虑了</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">combinationSum4</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">dp</span><span class="token punctuation">(</span>target <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> target<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> INT_MAX <span class="token operator">-</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                 dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> n <span class="token operator">:</span> dp<span class="token punctuation">)</span>         cout <span class="token operator">&lt;&lt;</span> n <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>target<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 背包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>421-数组中两个数的最大异或值</title>
      <link href="2021/12/03/LeetCode-421-%E6%95%B0%E7%BB%84%E4%B8%AD%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%9A%84%E6%9C%80%E5%A4%A7%E5%BC%82%E6%88%96%E5%80%BC/"/>
      <url>2021/12/03/LeetCode-421-%E6%95%B0%E7%BB%84%E4%B8%AD%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%9A%84%E6%9C%80%E5%A4%A7%E5%BC%82%E6%88%96%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-421-Maximum-XOR-of-Two-Numbers-in-an-Array"><a href="#LeetCode-421-Maximum-XOR-of-Two-Numbers-in-an-Array" class="headerlink" title="LeetCode 421. Maximum XOR of Two Numbers in an Array"></a>LeetCode 421. Maximum XOR of Two Numbers in an Array</h2><p>Given an integer array <code>nums</code>, return the maximum result of <code>nums[i] XOR nums[j]</code>, where <code>0 &lt;= i &lt;= j &lt; n</code>.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token number">28</span>Explanation<span class="token operator">:</span> The maximum result is <span class="token number">5</span> XOR <span class="token number">25</span> <span class="token operator">=</span> <span class="token number">28.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></p><h3 id="method"><a href="#method" class="headerlink" title="method"></a>method</h3><p>将所有元素的二进制表示构建成前缀树，因为要1和0相反异或值才是1，所以对于一个数去找与他异或值最大的数时，要往与他二进制相反的那边找，而且要从高位往低位找，因为高位的比重比低位大</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> son<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>Node<span class="token operator">></span> node<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">findMaximumXOR</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    node<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>Node<span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> n <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// 遍历的指针</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">31</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> t <span class="token operator">=</span> n <span class="token operator">>></span> i <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>son<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                node<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>Node<span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                node<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>son<span class="token punctuation">[</span>t<span class="token punctuation">]</span> <span class="token operator">=</span> node<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            p <span class="token operator">=</span> node<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>son<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>   <span class="token comment">// 这样Trie树就构建完了</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> n <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> maxn <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">31</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> t <span class="token operator">=</span> n <span class="token operator">>></span> i <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>son<span class="token punctuation">[</span><span class="token operator">!</span>t<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                p <span class="token operator">=</span> node<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>son<span class="token punctuation">[</span><span class="token operator">!</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span>                maxn <span class="token operator">+=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">;</span> <span class="token comment">// 如果有相反的，结果就可以增加，没有就不行了</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> p <span class="token operator">=</span> node<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">.</span>son<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        res <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> maxn<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 位运算 </tag>
            
            <tag> Trie树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>338-比特位计数</title>
      <link href="2021/12/03/LeetCode-338-%E6%AF%94%E7%89%B9%E4%BD%8D%E8%AE%A1%E6%95%B0/"/>
      <url>2021/12/03/LeetCode-338-%E6%AF%94%E7%89%B9%E4%BD%8D%E8%AE%A1%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-338-Counting-Bits"><a href="#LeetCode-338-Counting-Bits" class="headerlink" title="LeetCode 338. Counting Bits"></a>LeetCode 338. Counting Bits</h2><p>Given an integer <code>n</code>, return an array ans of length <code>n + 1</code> such that for each <code>i (0 &lt;= i &lt;= n)</code>, <code>ans[i]</code> is the <strong>number of</strong> <code>1&#39;s</code> in the binary representation of <code>i</code>.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> n <span class="token operator">=</span> <span class="token number">2</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>Explanation<span class="token operator">:</span><span class="token number">0</span> <span class="token operator">--</span><span class="token operator">></span> <span class="token number">0</span><span class="token number">1</span> <span class="token operator">--</span><span class="token operator">></span> <span class="token number">1</span><span class="token number">2</span> <span class="token operator">--</span><span class="token operator">></span> <span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>Example 2:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> n <span class="token operator">=</span> <span class="token number">5</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>Explanation<span class="token operator">:</span><span class="token number">0</span> <span class="token operator">--</span><span class="token operator">></span> <span class="token number">0</span><span class="token number">1</span> <span class="token operator">--</span><span class="token operator">></span> <span class="token number">1</span><span class="token number">2</span> <span class="token operator">--</span><span class="token operator">></span> <span class="token number">10</span><span class="token number">3</span> <span class="token operator">--</span><span class="token operator">></span> <span class="token number">11</span><span class="token number">4</span> <span class="token operator">--</span><span class="token operator">></span> <span class="token number">100</span><span class="token number">5</span> <span class="token operator">--</span><span class="token operator">></span> <span class="token number">101</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h3 id="method"><a href="#method" class="headerlink" title="method"></a>method</h3><blockquote><ul><li><code>x &amp; x-1</code>可以去除x最低位的1</li></ul></blockquote><p>利用<code>x &amp; x-1</code>的性质，可以利用<code>res[x &amp; x-1]</code>再加上<code>1</code>求得<code>res[x]</code>，就不用每个数都算一遍</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">countBits</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">res</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">[</span>i <span class="token operator">&amp;</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 位运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>263-丑数</title>
      <link href="2021/12/03/LeetCode-263-%E4%B8%91%E6%95%B0/"/>
      <url>2021/12/03/LeetCode-263-%E4%B8%91%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-263-Ugly-Number"><a href="#LeetCode-263-Ugly-Number" class="headerlink" title="LeetCode 263. Ugly Number"></a>LeetCode 263. Ugly Number</h2><p>An <strong>ugly number</strong> is a positive integer whose prime factors are limited to <code>2</code>, <code>3</code>, and <code>5</code>.</p><p>Given an integer n, return true if n is an ugly number.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> n <span class="token operator">=</span> <span class="token number">6</span>Output<span class="token operator">:</span> <span class="token boolean">true</span>Explanation<span class="token operator">:</span> <span class="token number">6</span> <span class="token operator">=</span> <span class="token number">2</span> × <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br>Example 2:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> n <span class="token operator">=</span> <span class="token number">8</span>Output<span class="token operator">:</span> <span class="token boolean">true</span>Explanation<span class="token operator">:</span> <span class="token number">8</span> <span class="token operator">=</span> <span class="token number">2</span> × <span class="token number">2</span> × <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br>Example 3:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> n <span class="token operator">=</span> <span class="token number">14</span>Output<span class="token operator">:</span> <span class="token boolean">false</span>Explanation<span class="token operator">:</span> <span class="token number">14</span> is <span class="token operator">not</span> ugly since it includes the prime factor <span class="token number">7.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></p><h3 id="method"><a href="#method" class="headerlink" title="method"></a>method</h3><p>如果满足条件，除完2或3或5之后应该等于1</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">isUgly</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">6</span> <span class="token operator">&amp;&amp;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 4用前面的2处理了</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> n <span class="token operator">/=</span> i<span class="token punctuation">;</span>  <span class="token comment">// 这里要用while </span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模拟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>392/524-判断子序列</title>
      <link href="2021/12/02/LeetCode-392-%E5%88%A4%E6%96%AD%E5%AD%90%E5%BA%8F%E5%88%97/"/>
      <url>2021/12/02/LeetCode-392-%E5%88%A4%E6%96%AD%E5%AD%90%E5%BA%8F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-392-Is-Subsequence"><a href="#LeetCode-392-Is-Subsequence" class="headerlink" title="LeetCode 392. Is Subsequence"></a>LeetCode 392. Is Subsequence</h2><p>Given two strings <code>s</code> and <code>t</code>, return true if <code>s</code> is a subsequence of <code>t</code>, or false otherwise.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> s <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">,</span> t <span class="token operator">=</span> <span class="token string">"ahbgdc"</span>Output<span class="token operator">:</span> <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h3 id="method-双指针"><a href="#method-双指针" class="headerlink" title="method: 双指针"></a>method: 双指针</h3><p><code>i</code>指向子串，<code>j</code>指向原串，相同的话<code>i</code>递增，不管怎样<code>j</code>都要递增，最后看<code>i</code>会不会走完整个子串</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">isSubsequence</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> string t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> t<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> t<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> i<span class="token operator">++</span><span class="token punctuation">;</span>        j<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> i <span class="token operator">==</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="LeetCode-524-Longest-Word-in-Dictionary-through-Deleting"><a href="#LeetCode-524-Longest-Word-in-Dictionary-through-Deleting" class="headerlink" title="LeetCode 524. Longest Word in Dictionary through Deleting"></a>LeetCode 524. Longest Word in Dictionary through Deleting</h2><p><a href="https://leetcode.com/problems/longest-word-in-dictionary-through-deleting/">LeetCode</a></p><p>Given a string s and a string array dictionary, return the <code>longest</code> string in the dictionary that can be formed by deleting some of the given string characters. If there is more than one possible result, return the longest word with the <code>smallest lexicographical order</code>. If there is no possible result, return the empty string.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> s <span class="token operator">=</span> <span class="token string">"abpcplea"</span><span class="token punctuation">,</span> dictionary <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"ale"</span><span class="token punctuation">,</span><span class="token string">"apple"</span><span class="token punctuation">,</span><span class="token string">"monkey"</span><span class="token punctuation">,</span><span class="token string">"plea"</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token string">"apple"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h3 id="method-双指针判断子序列"><a href="#method-双指针判断子序列" class="headerlink" title="method: 双指针判断子序列"></a>method: 双指针判断子序列</h3><p>剪枝：如果后面的单词长度比我短，或者跟我一样长，但字典序比我大，那就不用判断了，肯定不会是他了</p><p><strong>判断子序列</strong>：两个指针分别指向两个字符串</p><ul><li>相同的话，子串指针+1</li><li>不同的话，原串指针+1</li><li>最后判断子串指针是不是走到末尾</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">isSubstr</span><span class="token punctuation">(</span>string src<span class="token punctuation">,</span> string sub<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> src<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> sub<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>src<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> sub<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> j<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token comment">// 相同子串+1</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token comment">// 相同或不同原串都+1</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> j <span class="token operator">==</span> sub<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>string <span class="token function">findLongestWord</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token operator">&amp;</span> dictionary<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    string res <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> dict <span class="token operator">:</span> dictionary<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> res<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> dict<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">></span> j<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> j <span class="token operator">&amp;&amp;</span> res <span class="token operator">&lt;</span> dict<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>    <span class="token comment">// 剪枝</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isSubstr</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> dict<span class="token punctuation">)</span><span class="token punctuation">)</span> res <span class="token operator">=</span> dict<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
            <tag> 双指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>201-数字范围按位与</title>
      <link href="2021/12/02/LeetCode-201-%E6%95%B0%E5%AD%97%E8%8C%83%E5%9B%B4%E6%8C%89%E4%BD%8D%E4%B8%8E/"/>
      <url>2021/12/02/LeetCode-201-%E6%95%B0%E5%AD%97%E8%8C%83%E5%9B%B4%E6%8C%89%E4%BD%8D%E4%B8%8E/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-201-Bitwise-AND-of-Numbers-Range"><a href="#LeetCode-201-Bitwise-AND-of-Numbers-Range" class="headerlink" title="LeetCode 201. Bitwise AND of Numbers Range"></a>LeetCode 201. Bitwise AND of Numbers Range</h2><p>Given two integers left and right that represent the range [left, right], return the bitwise AND of all numbers in this range, inclusive.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> left <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">7</span>Output<span class="token operator">:</span> <span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h3 id="method"><a href="#method" class="headerlink" title="method"></a>method</h3><p><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/201/rangeBitwiseAnd.png" alt></p><p>只要找到<code>left</code>到<code>right</code>的公共前缀就可以了，除了公共前缀，其他部分都会出现0和1交替的情况，按位与之后就都是0</p><p>所以<code>left</code>和<code>right</code>每次右移一位，相等的时候就得到了公共前缀，再记录右移了几次，再左移回去，就可以把除了公共前缀的其他部分置0</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">rangeBitwiseAnd</span><span class="token punctuation">(</span><span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        left <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>        right <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>        cnt<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> left <span class="token operator">&lt;&lt;</span> cnt<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ul><li><code>x &amp; x-1</code>可以将x最右边的1置0</li></ul></blockquote><p>利用<code>x &amp; x-1</code>的性质，把x左边第一个1置0，这样一直置0，直到<code>right &lt;= left</code>就找到了公共前缀</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">rangeBitwiseAnd</span><span class="token punctuation">(</span><span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        right <span class="token operator">=</span> right <span class="token operator">&amp;</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> right<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 位运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>268-丢失的数字</title>
      <link href="2021/12/02/LeetCode-268-%E4%B8%A2%E5%A4%B1%E7%9A%84%E6%95%B0%E5%AD%97/"/>
      <url>2021/12/02/LeetCode-268-%E4%B8%A2%E5%A4%B1%E7%9A%84%E6%95%B0%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-268-Missing-Number"><a href="#LeetCode-268-Missing-Number" class="headerlink" title="LeetCode 268. Missing Number"></a>LeetCode 268. Missing Number</h2><p>Given an array nums containing n distinct numbers in the range <code>[0, n]</code>, return the only number in the range that is missing from the array.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token number">2</span>Explanation<span class="token operator">:</span> n <span class="token operator">=</span> <span class="token number">3</span> since there are <span class="token number">3</span> numbers<span class="token punctuation">,</span> so all numbers are in the range <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span> <span class="token number">2</span> is the missing number in the range since it does <span class="token operator">not</span> appear in nums<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></p><h3 id="method-1-排序"><a href="#method-1-排序" class="headerlink" title="method 1: 排序"></a>method 1: 排序</h3><p>排序后，如果元素和下标不对应，就是缺失的</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">missingNumber</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> i<span class="token punctuation">)</span> <span class="token keyword">return</span> i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间复杂度：$O(nlogn)$</p><hr><h3 id="method-2-求和"><a href="#method-2-求和" class="headerlink" title="method 2: 求和"></a>method 2: 求和</h3><p>已经知道是<code>[0,n]</code>，累加之后再减去每个元素就知道哪个缺失了</p><p>等差数列求和：$S_n = \frac{(a_1 + a_n)n}{2}$</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">missingNumber</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> n <span class="token operator">:</span> nums<span class="token punctuation">)</span> sum <span class="token operator">-=</span> n<span class="token punctuation">;</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间复杂度：$O(n)$</p><hr><h3 id="method-3-异或"><a href="#method-3-异或" class="headerlink" title="method 3: 异或"></a>method 3: 异或</h3><p>下标和元素应该是一一对应的，所以全部异或之后，剩下的就是缺失的</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">missingNumber</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 补上下标的n</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        res <span class="token operator">=</span> res <span class="token operator">^</span> i <span class="token operator">^</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间复杂度：$O(n)$</p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 位运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>190-颠倒二进制位</title>
      <link href="2021/12/01/LeetCode-190-%E9%A2%A0%E5%80%92%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%BD%8D/"/>
      <url>2021/12/01/LeetCode-190-%E9%A2%A0%E5%80%92%E4%BA%8C%E8%BF%9B%E5%88%B6%E4%BD%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-190-Reverse-Bits"><a href="#LeetCode-190-Reverse-Bits" class="headerlink" title="LeetCode 190. Reverse Bits"></a>LeetCode 190. Reverse Bits</h2><p>Reverse bits of a given <strong>32 bits unsigned integer</strong>.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> n <span class="token operator">=</span> <span class="token number">00000010100101000001111010011100</span>Output<span class="token operator">:</span>    <span class="token number">964176192</span> <span class="token punctuation">(</span><span class="token number">00111001011110000010100101000000</span><span class="token punctuation">)</span>Explanation<span class="token operator">:</span> The input binary string <span class="token number">00000010100101000001111010011100</span> represents the <span class="token keyword">unsigned</span> integer <span class="token number">43261596</span><span class="token punctuation">,</span> so <span class="token keyword">return</span> <span class="token number">964176192</span> which its binary representation is <span class="token number">00111001011110000010100101000000.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></p><h3 id="method"><a href="#method" class="headerlink" title="method"></a>method</h3><p>先左移再加上取出来的位，不能反过来</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">uint32_t</span> <span class="token function">reverseBits</span><span class="token punctuation">(</span><span class="token keyword">uint32_t</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">uint32_t</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">32</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        res <span class="token operator">&lt;&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span>        res <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">>></span> i<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 位运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>67-二进制求和</title>
      <link href="2021/12/01/LeetCode-67-%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%B1%82%E5%92%8C/"/>
      <url>2021/12/01/LeetCode-67-%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%B1%82%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-67-Add-Binary"><a href="#LeetCode-67-Add-Binary" class="headerlink" title="LeetCode 67. Add Binary"></a>LeetCode 67. Add Binary</h2><p>Given two binary strings <code>a</code> and <code>b</code>, return their sum as a binary string.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> a <span class="token operator">=</span> <span class="token string">"11"</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token string">"1"</span>Output<span class="token operator">:</span> <span class="token string">"100"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br>Example 2:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> a <span class="token operator">=</span> <span class="token string">"1010"</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token string">"1011"</span>Output<span class="token operator">:</span> <span class="token string">"10101"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h3 id="method"><a href="#method" class="headerlink" title="method"></a>method</h3><blockquote><ul><li>十进制加法，先两个加数求和，模以10作为当前位的结果，再除以10作进位</li><li>二进制加法，先两个加数求和，模以2作为当前位的结果，再除以2作进位</li></ul></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">string <span class="token function">addBinary</span><span class="token punctuation">(</span>string a<span class="token punctuation">,</span> string b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> carry <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    string res <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> a<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> b<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">||</span> j <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">||</span> carry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        carry <span class="token operator">+=</span> i <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">?</span> a<span class="token punctuation">[</span>i<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        carry <span class="token operator">+=</span> j <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">?</span> b<span class="token punctuation">[</span>j<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        res <span class="token operator">=</span> <span class="token keyword">char</span><span class="token punctuation">(</span>carry <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token operator">+</span> res<span class="token punctuation">;</span>        carry <span class="token operator">=</span> carry <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 位运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>371-两整数之和</title>
      <link href="2021/12/01/LeetCode-371-%E4%B8%A4%E6%95%B4%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
      <url>2021/12/01/LeetCode-371-%E4%B8%A4%E6%95%B4%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-371-Sum-of-Two-Integers"><a href="#LeetCode-371-Sum-of-Two-Integers" class="headerlink" title="LeetCode 371. Sum of Two Integers"></a>LeetCode 371. Sum of Two Integers</h2><p>Given two integers <code>a</code> and <code>b</code>, return the sum of the two integers without using the operators <code>+</code> and <code>-</code>.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">2</span>Output<span class="token operator">:</span> <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h3 id="method-递归"><a href="#method-递归" class="headerlink" title="method: 递归"></a>method: 递归</h3><center><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/371/1.png#pic_center" width="50%"></center><p>通过观察异或运算的真值表，与加法的真值表特别地像。需要注意的是<strong>异或只看本位</strong>，加法可能需要进位。从而用到与运算&amp;。</p><center><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/371/2.png#pic_center" width="50%"></center><p>与运算可以很好地解决加法进位的问题，加法进位和与运算结果对应：<code>1+0、0+1、0+0</code>的进位都是<code>0</code>，<code>1+1</code>的进位为<code>1</code><br>通过异或得到了本位和，通过与运算得到了进位值，最后，只需要将进位值给高一位即可。</p><p><strong>建议</strong><br>对有符号数使用位运算，符号位如何处理没有明确的规定，所以强烈建议仅将位运算符用于处理<strong>无符号类型</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>b<span class="token punctuation">)</span> <span class="token keyword">return</span> a<span class="token punctuation">;</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token punctuation">;</span>    <span class="token comment">// 相加结果</span>    <span class="token keyword">int</span> carry <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a <span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 进位，转为无符号数</span>    <span class="token keyword">return</span> <span class="token function">getSum</span><span class="token punctuation">(</span>sum<span class="token punctuation">,</span> carry<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="method-2-迭代"><a href="#method-2-迭代" class="headerlink" title="method 2: 迭代"></a>method 2: 迭代</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        c <span class="token operator">=</span> a <span class="token operator">&amp;</span> b<span class="token punctuation">;</span>  <span class="token comment">// 存储进位</span>        a <span class="token operator">=</span> a <span class="token operator">^</span> b<span class="token punctuation">;</span>  <span class="token comment">// 存储一次相加的结果</span>        b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span><span class="token punctuation">)</span>c <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment">// 进位左移一位</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 位运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>476-数字的补数</title>
      <link href="2021/11/30/LeetCode-476-%E6%95%B0%E5%AD%97%E7%9A%84%E8%A1%A5%E6%95%B0/"/>
      <url>2021/11/30/LeetCode-476-%E6%95%B0%E5%AD%97%E7%9A%84%E8%A1%A5%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-476-Number-Complement"><a href="#LeetCode-476-Number-Complement" class="headerlink" title="LeetCode 476. Number Complement"></a>LeetCode 476. Number Complement</h2><p>The complement of an integer is the integer you get when you flip all the 0’s to 1’s and all the 1’s to 0’s in its binary representation.</p><p>For example, The integer 5 is <code>101</code> in binary and its complement is <code>010</code> which is the integer 2.<br>Given an integer num, return its complement.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> num <span class="token operator">=</span> <span class="token number">5</span>Output<span class="token operator">:</span> <span class="token number">2</span>Explanation<span class="token operator">:</span> The binary representation of <span class="token number">5</span> is <span class="token number">101</span> <span class="token punctuation">(</span>no leading zero bits<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">and</span> its complement is <span class="token number">010.</span> So you need to output <span class="token number">2.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></p><h3 id="method"><a href="#method" class="headerlink" title="method"></a>method</h3><p>只需要取反表示数值的Bit，前面的0不动，比如<code>0000 1101</code>要转为<code>0000 0010</code>，而不是<code>1111 0010</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">findComplement</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        res <span class="token operator">+=</span> <span class="token operator">!</span><span class="token punctuation">(</span>num <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> t<span class="token punctuation">;</span> <span class="token comment">// 取最低位，取反右移累加</span>        num <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// 丢掉最后一位，最后会变成0</span>        t<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token comment">// 记录当前位数</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 位运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>762-二进制表示中质数个计算置位</title>
      <link href="2021/11/30/LeetCode-762-%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%A1%A8%E7%A4%BA%E4%B8%AD%E8%B4%A8%E6%95%B0%E4%B8%AA%E8%AE%A1%E7%AE%97%E7%BD%AE%E4%BD%8D/"/>
      <url>2021/11/30/LeetCode-762-%E4%BA%8C%E8%BF%9B%E5%88%B6%E8%A1%A8%E7%A4%BA%E4%B8%AD%E8%B4%A8%E6%95%B0%E4%B8%AA%E8%AE%A1%E7%AE%97%E7%BD%AE%E4%BD%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-762-Prime-Number-of-Set-Bits-in-Binary-Representation"><a href="#LeetCode-762-Prime-Number-of-Set-Bits-in-Binary-Representation" class="headerlink" title="LeetCode 762. Prime Number of Set Bits in Binary Representation"></a>LeetCode 762. Prime Number of Set Bits in Binary Representation</h2><p>Given two integers <code>left</code> and <code>right</code>, return the count of numbers in the inclusive range <code>[left, right]</code> having a <strong>prime number</strong> of set bits in their <strong>binary representation</strong>.</p><p>Recall that the number of set bits an integer has is the number of 1’s present when written in binary.</p><p>Example 1:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> left <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">10</span>Output<span class="token operator">:</span> <span class="token number">4</span>Explanation<span class="token operator">:</span><span class="token number">6</span>  <span class="token operator">-></span> <span class="token number">110</span> <span class="token punctuation">(</span><span class="token number">2</span> set bits<span class="token punctuation">,</span> <span class="token number">2</span> is prime<span class="token punctuation">)</span><span class="token number">7</span>  <span class="token operator">-></span> <span class="token number">111</span> <span class="token punctuation">(</span><span class="token number">3</span> set bits<span class="token punctuation">,</span> <span class="token number">3</span> is prime<span class="token punctuation">)</span><span class="token number">8</span>  <span class="token operator">-></span> <span class="token number">1000</span> <span class="token punctuation">(</span><span class="token number">1</span> set bit<span class="token punctuation">,</span> <span class="token number">1</span> is <span class="token operator">not</span> prime<span class="token punctuation">)</span><span class="token number">9</span>  <span class="token operator">-></span> <span class="token number">1001</span> <span class="token punctuation">(</span><span class="token number">2</span> set bits<span class="token punctuation">,</span> <span class="token number">2</span> is prime<span class="token punctuation">)</span><span class="token number">10</span> <span class="token operator">-></span> <span class="token number">1010</span> <span class="token punctuation">(</span><span class="token number">2</span> set bits<span class="token punctuation">,</span> <span class="token number">2</span> is prime<span class="token punctuation">)</span><span class="token number">4</span> numbers have a prime number of set bits<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Constraints:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">1</span> <span class="token operator">&lt;=</span> left <span class="token operator">&lt;=</span> right <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token operator">^</span><span class="token number">6</span><span class="token number">0</span> <span class="token operator">&lt;=</span> right <span class="token operator">-</span> left <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token operator">^</span><span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>在<code>[left, right]</code>区间中的数，他们的二进制表示中1的个数为质数的有几个</p><h3 id="method"><a href="#method" class="headerlink" title="method"></a>method</h3><p>因为<code>1024 * 1024 &gt; 10^6</code>，所以<code>10^6</code>最多不超过20个Bit，所以只需要考虑20以内的质数就可以了</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">countPrimeSetBits</span><span class="token punctuation">(</span><span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    unordered_set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> hash <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> left<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> right<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> i<span class="token punctuation">;</span> k<span class="token punctuation">;</span> k <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">)</span> cnt <span class="token operator">+=</span> k <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment">// 累加每个Bit</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>hash<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>cnt<span class="token punctuation">)</span><span class="token punctuation">)</span> res<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 位运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>136/137-只出现1次的数字</title>
      <link href="2021/11/30/LeetCode-136-%E5%8F%AA%E5%87%BA%E7%8E%B01%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97/"/>
      <url>2021/11/30/LeetCode-136-%E5%8F%AA%E5%87%BA%E7%8E%B01%E6%AC%A1%E7%9A%84%E6%95%B0%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-136-Single-Number"><a href="#LeetCode-136-Single-Number" class="headerlink" title="LeetCode 136. Single Number"></a>LeetCode 136. Single Number</h2><p>Given a non-empty array of integers <code>nums</code>, every element appears twice <strong>except for one</strong>. Find that single one.</p><p>You must implement a solution with a linear runtime complexity and use only constant extra space.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h3 id="method-异或"><a href="#method-异或" class="headerlink" title="method: 异或"></a>method: 异或</h3><blockquote><ul><li>a ^ a = 0</li><li>0 ^ a = a</li></ul></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">singleNumber</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> n <span class="token operator">:</span> nums<span class="token punctuation">)</span> res <span class="token operator">^=</span> n<span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="LeetCode-137-Single-Number-II"><a href="#LeetCode-137-Single-Number-II" class="headerlink" title="LeetCode 137. Single Number II"></a>LeetCode 137. Single Number II</h2><p>Given an integer array nums where every element appears <strong>three times</strong> except for one, which appears exactly once. Find the single element and return it.</p><p>You must implement a solution with a linear runtime complexity and use only constant extra space.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h3 id="method"><a href="#method" class="headerlink" title="method"></a>method</h3><p>遍历每个数的每一个Bit，如果出现了3次，累加之后模以3应该是0，否则就是多出来的那个数的原因，所以将模以3的结果记录下来，一位一位填充<code>res</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">singleNumber</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">32</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> n <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            sum <span class="token operator">+=</span> <span class="token punctuation">(</span>n <span class="token operator">>></span> i<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">// 累加第i位的值</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">)</span> res <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 第i位多出来了，就加上</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 位运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>231-2的幂</title>
      <link href="2021/11/30/LeetCode-231-2%E7%9A%84%E5%B9%82/"/>
      <url>2021/11/30/LeetCode-231-2%E7%9A%84%E5%B9%82/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-231-Power-of-Two"><a href="#LeetCode-231-Power-of-Two" class="headerlink" title="LeetCode 231. Power of Two"></a>LeetCode 231. Power of Two</h2><p>Given an integer <code>n</code>, return <code>true</code> if it is a <strong>power of two</strong>. Otherwise, return <code>false</code>.</p><p>An integer n is a power of two, if there exists an integer <code>x</code> such that $n = 2^x$.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> n <span class="token operator">=</span> <span class="token number">1</span>Output<span class="token operator">:</span> <span class="token boolean">true</span>Explanation<span class="token operator">:</span> <span class="token number">20</span> <span class="token operator">=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br>Example 2:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> n <span class="token operator">=</span> <span class="token number">16</span>Output<span class="token operator">:</span> <span class="token boolean">true</span>Explanation<span class="token operator">:</span> <span class="token number">24</span> <span class="token operator">=</span> <span class="token number">16</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></p><h3 id="method-1-位运算"><a href="#method-1-位运算" class="headerlink" title="method 1: 位运算"></a>method 1: 位运算</h3><p>整型<code>int</code>的范围是：$-2^{31} \sim 2^{31} - 1$<br>所以最大的2次幂是$2^{30}$<br>如果一个数是2次幂，那他肯定可以被最大的2次幂$2^{30}$整除，所以就用这个条件来判断</p><blockquote><ul><li><code>2</code>的<code>n</code>次幂就是<code>1</code>左移<code>n</code>位<code>1 &lt;&lt; n</code></li></ul></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">isPowerOfTwo</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> n <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">%</span> n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><hr><h3 id="method-2"><a href="#method-2" class="headerlink" title="method 2:"></a>method 2:</h3><blockquote><ul><li><code>x &amp; -x</code>可以得到x最低位的1以及后面若干个0</li></ul></blockquote><p>如果一个数是2的幂，那肯定只含有1个1，比如8是<code>0000 1000</code></p><p>所以如果是2的幂，<code>x &amp; -x</code>的值肯定跟原来一样，不是2的幂肯定含有多个1，<code>x &amp; -x</code>的值会比原来小</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">isPowerOfTwo</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> n <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">&amp;</span> <span class="token operator">-</span>n<span class="token punctuation">)</span> <span class="token operator">==</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 位运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>279-完全平方数</title>
      <link href="2021/11/29/LeetCode-279-%E5%AE%8C%E5%85%A8%E5%B9%B3%E6%96%B9%E6%95%B0/"/>
      <url>2021/11/29/LeetCode-279-%E5%AE%8C%E5%85%A8%E5%B9%B3%E6%96%B9%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-279-Perfect-Squares"><a href="#LeetCode-279-Perfect-Squares" class="headerlink" title="LeetCode 279. Perfect Squares"></a>LeetCode 279. Perfect Squares</h2><p>Given an integer <code>n</code>, return the <strong>least number</strong> of <strong>perfect square numbers</strong> that <strong>sum to n</strong>.</p><p>A perfect square is an integer that is the square of an integer; in other words, it is the product of some integer with itself. For example, <code>1</code>, <code>4</code>, <code>9</code>, and <code>16</code> are perfect squares while <code>3</code> and <code>11</code> are not.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> n <span class="token operator">=</span> <span class="token number">12</span>Output<span class="token operator">:</span> <span class="token number">3</span>Explanation<span class="token operator">:</span> <span class="token number">12</span> <span class="token operator">=</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">4.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br>Example 2:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> n <span class="token operator">=</span> <span class="token number">13</span>Output<span class="token operator">:</span> <span class="token number">2</span>Explanation<span class="token operator">:</span> <span class="token number">13</span> <span class="token operator">=</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">9.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></p><h3 id="method-完全背包"><a href="#method-完全背包" class="headerlink" title="method: 完全背包"></a>method: 完全背包</h3><p><code>dp[i]</code>：组成<code>dp[i]</code>需要的最少的完全平方数<br>物品：完全平方数</p><p>因为要最小，所以初始化为<code>INT_MAX</code><br>因为是数量，所以拆成<code>dp[i] = j + dp[i-j*j]</code>之后，组成dp<code>[i]</code>的完全平方数要<code>+1</code></p><p><font color="LightSeaGreen">求最小数</font><br>递推公式：<code>dp[i] = min(dp[i], dp[i-j*j])</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">numSquares</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">dp</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> INT_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// 遍历背包</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">*</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 遍历物品</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> j <span class="token operator">*</span> j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 背包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>494-目标和</title>
      <link href="2021/11/29/LeetCode-494-%E7%9B%AE%E6%A0%87%E5%92%8C/"/>
      <url>2021/11/29/LeetCode-494-%E7%9B%AE%E6%A0%87%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-494-Target-Sum"><a href="#LeetCode-494-Target-Sum" class="headerlink" title="LeetCode 494. Target Sum"></a>LeetCode 494. Target Sum</h2><p>You are given an integer array <code>nums</code> and an integer <code>target</code>.</p><p>You want to build an <strong>expression</strong> out of nums by adding one of the symbols <code>&#39;+&#39;</code> and <code>&#39;-&#39;</code> before each integer in nums and then concatenate all the integers.</p><p>For example, if <code>nums = [2, 1]</code>, you can add a <code>&#39;+&#39;</code> before 2 and a <code>&#39;-&#39;</code> before 1 and concatenate them to build the expression <code>&quot;+2-1&quot;</code>.<br>Return the number of different expressions that you can build, which evaluates to target.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token number">3</span>Output<span class="token operator">:</span> <span class="token number">5</span>Explanation<span class="token operator">:</span> There are <span class="token number">5</span> ways to assign symbols to make the sum of nums be target <span class="token number">3.</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token operator">+</span><span class="token number">1</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token operator">+</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token operator">+</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token operator">+</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h3 id="method"><a href="#method" class="headerlink" title="method"></a>method</h3><p>转化为容量为<code>(target+sum)/2</code>的背包有多少种装法，例如容量为3的背包有<code>dp[3]</code>种装法，又来了一个<code>weight[i]=2</code>，则容量为5的背包的装法应该加上<code>dp[5-weight[i]]=dp[3]</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">findTargetSumWays</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> n <span class="token operator">:</span> nums<span class="token punctuation">)</span> sum <span class="token operator">+=</span> n<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span> <span class="token operator">></span> sum<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>target <span class="token operator">+</span> sum<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> bagSize <span class="token operator">=</span> <span class="token punctuation">(</span>target <span class="token operator">+</span> sum<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">dp</span><span class="token punctuation">(</span>bagSize <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> bagSize<span class="token punctuation">;</span> j <span class="token operator">>=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>j <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>bagSize<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>509-斐波那契数</title>
      <link href="2021/11/29/LeetCode-509-%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0/"/>
      <url>2021/11/29/LeetCode-509-%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-509-Fibonacci-Number"><a href="#LeetCode-509-Fibonacci-Number" class="headerlink" title="LeetCode 509. Fibonacci Number"></a>LeetCode 509. Fibonacci Number</h2><p>The <strong>Fibonacci numbers</strong>, commonly denoted <code>F(n)</code> form a sequence, called the Fibonacci sequence, such that each number is the sum of the two preceding ones, starting from <code>0</code> and <code>1</code>. That is,<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">F</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">F</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token function">F</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">F</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">F</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">for</span> n <span class="token operator">></span> <span class="token number">1.</span>Given n<span class="token punctuation">,</span> calculate <span class="token function">F</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> n <span class="token operator">=</span> <span class="token number">2</span>Output<span class="token operator">:</span> <span class="token number">1</span>Explanation<span class="token operator">:</span> <span class="token function">F</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">F</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">F</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">0</span> <span class="token operator">=</span> <span class="token number">1.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></p><h3 id="method-1-递归"><a href="#method-1-递归" class="headerlink" title="method 1: 递归"></a>method 1: 递归</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">fib</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> n<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">fib</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">fib</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="method-2-动态规划"><a href="#method-2-动态规划" class="headerlink" title="method 2: 动态规划"></a>method 2: 动态规划</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">fib</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> n<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">dp</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以只用2个变量</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">fib</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> n<span class="token punctuation">;</span>    <span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        sum <span class="token operator">=</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> sum<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.5-指令与条件码</title>
      <link href="2021/11/20/CS-CSAPP-3-5-%E6%8C%87%E4%BB%A4%E4%B8%8E%E6%9D%A1%E4%BB%B6%E7%A0%81/"/>
      <url>2021/11/20/CS-CSAPP-3-5-%E6%8C%87%E4%BB%A4%E4%B8%8E%E6%9D%A1%E4%BB%B6%E7%A0%81/</url>
      
        <content type="html"><![CDATA[<h2 id="指令与条件码"><a href="#指令与条件码" class="headerlink" title="指令与条件码"></a>指令与条件码</h2><h3 id="条件码寄存器"><a href="#条件码寄存器" class="headerlink" title="条件码寄存器"></a>条件码寄存器</h3><p>条件码寄存器是由CPU来维护的，长度是<code>1Bit</code>，它描述了最近执行的操作的属性，例如ALU执行两条连续的算术指令</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">t1<span class="token operator">:</span> addq <span class="token operator">%</span>rax<span class="token punctuation">,</span> <span class="token operator">%</span>rbxt2<span class="token operator">:</span> subq <span class="token operator">%</span>rcx<span class="token punctuation">,</span> <span class="token operator">%</span>rdx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>t1时刻执行指令1，t2时刻执行指令2，t1时刻条件码寄存器保存的是指令1的执行结果的属性，t2时刻，条件码寄存器中的内容将会被下一条指令所覆盖</p><p>常用条件码</p><blockquote><ul><li><code>CF</code>: Carry Flag，进位标志，当执行的指令最高位产生进位时，CF会被置1，用来检查无符号数操作的溢出</li><li><code>ZF</code>: Zero Flag，零标志，最近操作结果等于0时，ZF会置1</li><li><code>SF</code>: Sign Flaag，符号标志，最近操作结果小于0时，SF置1</li><li><code>OF</code>: Overflow Flag，溢出标志，针对有符号数，最近的操作导致正溢出或负溢出，OF会置1</li></ul></blockquote><p>条件码寄存器的值是由ALU在执行算术和运算指令时写入的</p><p>不同的指令有相应的规则来设置条件码寄存器，例如，逻辑操作指令<code>xor</code>，进位标志<code>CF</code>和溢出标志<code>OF</code>会置0；加一和减一指令会设置溢出标志<code>OF</code>和零标志<code>ZF</code>，但不会改变进位标志<code>CF</code></p><p>除此之外，<code>cmp</code>和<code>test</code>指令也可以改变条件码寄存器</p><p><code>cmp</code>指令是根据两个操作数的差来设置，与sub指令不同的是，<code>cmp</code>只是作差，然后设置寄存器，不会更新目的操作数的值</p><p><code>test</code>指令和<code>and</code>类似，同样只是设置条件码寄存器</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p><strong>判断等于</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">comp</span><span class="token punctuation">(</span><span class="token keyword">long</span> a<span class="token punctuation">,</span> <span class="token keyword">long</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a <span class="token operator">==</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>对应的汇编代码，参数a放在寄存器<code>rdi</code>中，参数b放在<code>rsi</code>中<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">cmpq    <span class="token operator">%</span>rsi<span class="token punctuation">,</span> <span class="token operator">%</span>rdisete    <span class="token operator">%</span>almovzbl  <span class="token operator">%</span>al<span class="token punctuation">,</span> <span class="token operator">%</span>eaxret<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></p><p>指令<code>cmpq</code>根据<code>a-b</code>的结果设置条件码寄存器，当<code>a==b</code>时，会将<code>ZF</code>设置为1</p><p>通常情况下，不会直接去读条件码寄存器的值，其中一种方式是根据条件码的某种组合，通过<code>set</code>类指令，将一个字节设置为0或者1</p><p><code>sete</code>根据<code>ZF</code>的值，对寄存器<code>al</code>进行赋值，后缀e是equal</p><ul><li>如果ZF=1，将al置为1</li><li>如果ZF=0，将al置为0</li></ul><p>然后<code>mov</code>对<code>al</code>进行零扩展，最后返回判断结果</p><p><strong>判断小于</strong><br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">comp</span><span class="token punctuation">(</span><span class="token keyword">long</span> a<span class="token punctuation">,</span> <span class="token keyword">long</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a <span class="token operator">&lt;</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br>汇编代码也发生了变化<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">cmpq    <span class="token operator">%</span>rsi<span class="token punctuation">,</span> <span class="token operator">%</span>rdisetl    <span class="token operator">%</span>almovzbl  <span class="token operator">%</span>al<span class="token punctuation">,</span> <span class="token operator">%</span>eaxret<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></p><p>指令<code>setl</code>的含义是如果<code>a &lt; b</code>，<code>al</code>置为1，其中l是less</p><p>小于需要用<code>SF</code>和<code>OF</code>的异或结果来判定</p><ul><li>a &lt; b, t &lt; 0, SF = 1, SF ^ OF = 1</li><li>a &gt; b, t &gt; 0, SF = 0, SF ^ OF = 0</li><li>a &lt; b, t &gt; 0, 正溢出，SF = 0, OF = 1, SF ^ OF = 1</li><li>a &gt; b, t &lt; 0, 负溢出，SF = 1, OF = 1, SF ^ OF = 0</li></ul><p>所以，<code>a&lt;b</code>的异或结果<code>SF ^ OF = 1</code>，可以以此作为判断依据</p>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSAPP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.4-算术和逻辑运算指令</title>
      <link href="2021/11/20/CS-CSAPP-3-4-%E7%AE%97%E6%9C%AF%E5%92%8C%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E6%8C%87%E4%BB%A4/"/>
      <url>2021/11/20/CS-CSAPP-3-4-%E7%AE%97%E6%9C%AF%E5%92%8C%E9%80%BB%E8%BE%91%E8%BF%90%E7%AE%97%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="算术和逻辑运算指令"><a href="#算术和逻辑运算指令" class="headerlink" title="算术和逻辑运算指令"></a>算术和逻辑运算指令</h2><h3 id="leaq指令"><a href="#leaq指令" class="headerlink" title="leaq指令"></a>leaq指令</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">leaq S<span class="token punctuation">,</span> D     <span class="token comment">// load effective address</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>q表示地址长度是64位</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">leaq <span class="token number">7</span><span class="token punctuation">(</span><span class="token operator">%</span>rdx<span class="token punctuation">,</span> <span class="token operator">%</span>rdx<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">%</span>rax  <span class="token comment">// 地址复制到rax中</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>有效地址的计算方式</p><script type="math/tex; mode=display">Imm(r_b, r_i, s) = Imm + R[r_b] + R[r_i] \cdot s</script><p>假设寄存器<code>rdx</code>内保存的数值是<code>x</code>，则有效地址为<code>7 + %rdx + %rdx * 4 = 5x + 7</code></p><p><code>leaq</code>指令会将有效地址值<code>5x+7</code>直接写入到目的寄存器<code>rax</code></p><h3 id="一元操作指令"><a href="#一元操作指令" class="headerlink" title="一元操作指令"></a>一元操作指令</h3><p>只要一个操作数，可以是寄存器，也可以是内存地址</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">INC D   <span class="token comment">// Increment 加一</span>DEC D   <span class="token comment">// Decrement 减一</span>NEG D   <span class="token comment">// Negate 取负</span>NOT D   <span class="token comment">// Complement 取补</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二元操作指令"><a href="#二元操作指令" class="headerlink" title="二元操作指令"></a>二元操作指令</h3><p>第一个是源操作数可以是立即数、寄存器或内存地址<br>第二个既是源操作数，也是目的操作数，可以使寄存器或内存地址，但不能是立即数</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">ADD S<span class="token punctuation">,</span>D     <span class="token comment">// D ← D + S 加</span>SUB S<span class="token punctuation">,</span>D     <span class="token comment">// D ← D - S 减</span>IMUL S<span class="token punctuation">,</span>D    <span class="token comment">// D ← D * S 乘</span>XOR S<span class="token punctuation">,</span>D     <span class="token comment">// D ← D ^ S 异或</span>OR S<span class="token punctuation">,</span>D      <span class="token comment">// D ← D | S 或</span>AND S<span class="token punctuation">,</span>D     <span class="token comment">// D ← D &amp; S 与</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>举例</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">地址<span class="token operator">:</span>   <span class="token number">0x100</span>  <span class="token operator">|</span> <span class="token number">0x108</span>  <span class="token operator">|</span> <span class="token number">0x110</span>  <span class="token operator">|</span> <span class="token number">0x118</span>内容<span class="token operator">:</span>    <span class="token number">0xFF</span>  <span class="token operator">|</span>  <span class="token number">0xAB</span>  <span class="token operator">|</span>  <span class="token number">0x13</span>  <span class="token operator">|</span>  <span class="token number">0x11</span><span class="token operator">%</span>rax <span class="token operator">-></span> <span class="token number">0x100</span><span class="token operator">%</span>rcx <span class="token operator">-></span> <span class="token number">0x1</span><span class="token operator">%</span>rdx <span class="token operator">-></span> <span class="token number">0x3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">addq <span class="token operator">%</span>rcx<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">%</span>rax<span class="token punctuation">)</span>    <span class="token comment">// Mem[0x100] = Men[0x100] + R[%rcx]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这条加法指令将内存地址<code>0x100</code>内的数据与寄存器<code>rcx</code>相加，二者之和再存储到内存地址<code>0x100</code>处，该指令执行完后，内存地址<code>0x100</code>处所存储的数据由<code>0xFF</code>变成<code>0x100</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">subq <span class="token operator">%</span>rdx<span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">(</span><span class="token operator">%</span>rax<span class="token punctuation">)</span>   <span class="token comment">// Mem[0x108] = Mem[0x108] - R[%rdx]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>减法指令将内存地址<code>0x108</code>内的数据减去寄存器<code>rdx</code>内的数据，二者之差存储到内存地址<code>0x108</code>处，该指令执行完后，内存地址<code>0x108</code>处所存储的数据由<code>0xAB</code>变成<code>0xA8</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">incq <span class="token number">16</span><span class="token punctuation">(</span><span class="token operator">%</span>rax<span class="token punctuation">)</span>    <span class="token comment">// Mem[0x110] = Mem[0x110] + 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>加一指令将内存地址<code>0x110</code>内的数据加1，由<code>0x13</code>变成<code>0x14</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">subq <span class="token operator">%</span>rdx<span class="token punctuation">,</span> <span class="token operator">%</span>rax  <span class="token comment">// R[%rax] = R[%rax] - R[%rdx]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>减法指令将寄存器<code>rax</code>内的值减去寄存器<code>rdx</code>内的值，所以由<code>0x100</code>变成<code>0xFD</code></p><h3 id="移位操作指令"><a href="#移位操作指令" class="headerlink" title="移位操作指令"></a>移位操作指令</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">SAL k<span class="token punctuation">,</span> D    <span class="token comment">// D ← D &lt;&lt; k Left Shift 左移</span>SHL k<span class="token punctuation">,</span> D    <span class="token comment">// D ← D &lt;&lt; k Left Shift 左移，等同于SAL</span>SAR k<span class="token punctuation">,</span> D    <span class="token comment">// D ← D >> k(A) Arithmetic right shift 算术右移</span>SHR k<span class="token punctuation">,</span> D    <span class="token comment">// D ← D >> k(L) Logical right shift 逻辑右移</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ul><li>算术右移填符号位，逻辑右移填0</li></ul></blockquote><p>对于移位量<code>k</code>，可以是立即数，或者是放在寄存器<code>cl</code>中的数</p><blockquote><ul><li>移位指令只能用寄存器<code>cl</code>作为操作数</li></ul></blockquote><p>对于<code>salb</code>，目的操作数数8位，所以移位量由<code>cl</code>的低3位来决定<br>对于<code>salw</code>，目的操作数数16位，所以移位量由<code>cl</code>的低4位来决定<br>对于<code>salw</code>，目的操作数数16位，所以移位量由<code>cl</code>的低4位来决定<br>对于<code>salq</code>，目的操作数数64位，所以移位量由<code>cl</code>的低6位来决定</p><p><strong>举例</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">long</span> t2 <span class="token operator">=</span> z <span class="token operator">*</span> <span class="token number">48</span><span class="token punctuation">;</span>汇编指令<span class="token function">leaq</span> <span class="token punctuation">(</span><span class="token operator">%</span>rdx<span class="token punctuation">,</span> <span class="token operator">%</span>rdx<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">%</span>rax   <span class="token comment">// R[%rdx] + R[%rdx]*2 = 3 * z</span>salq $<span class="token number">4</span><span class="token punctuation">,</span> <span class="token operator">%</span>rax    <span class="token comment">// 2^4 * R[%rax] = 16 * (3 * z) = 48 * z</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>乘法计算被分成两步</p><p>第一步先计算<code>3 * z</code>，结果保存到寄存器<code>rax</code>中，第二步将寄存器<code>rax</code>左移4位，等价于乘以16，这样就通过一条<code>leaq</code>和一条左移指令实现了乘法操作</p>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSAPP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.3-栈与数据传送指令</title>
      <link href="2021/11/20/CS-CSAPP-3-3-%E6%A0%88%E4%B8%8E%E6%95%B0%E6%8D%AE%E4%BC%A0%E9%80%81%E6%8C%87%E4%BB%A4/"/>
      <url>2021/11/20/CS-CSAPP-3-3-%E6%A0%88%E4%B8%8E%E6%95%B0%E6%8D%AE%E4%BC%A0%E9%80%81%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="栈与数据传送指令"><a href="#栈与数据传送指令" class="headerlink" title="栈与数据传送指令"></a>栈与数据传送指令</h2><p>在程序的执行过程中，需要在CPU和内存之间进行频繁的数据存取，例如，CPU执行加法<code>c=a+b</code>，首先通过执行数据传送指令将<code>a</code>和<code>b</code>的值从内存读到寄存器内</p><p>寄存器就是CPU内的一种数据存储部件，只不过容量比较小，比如，寄存器<code>rax</code>是<code>64Bit</code>，即<code>8Byte</code>，如果变量<code>a</code>是<code>long</code>类型，需要占用8个字节，因此，<code>rax</code>全部的数据位都用来保存变量<code>a</code>；如果变量<code>a</code>是<code>int</code>类型，就只需要低32位来存储，如果是<code>short</code>类型，则只需要低16位</p><blockquote><p>对于寄存器<code>rax</code>，如果使用全部的64位，用<code>%rax</code>表示，32位用<code>%eax</code>表示，低16位用<code>%ax</code>表示，低8位用<code>%al</code>表示</p></blockquote><p>计算完结果后，再通过数据传送指令将结果保存到内存</p><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">long</span> <span class="token function">exchange</span><span class="token punctuation">(</span><span class="token keyword">long</span> <span class="token operator">*</span>xp<span class="token punctuation">,</span> <span class="token keyword">long</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">long</span> x <span class="token operator">=</span> <span class="token operator">*</span>xp<span class="token punctuation">;</span>    <span class="token operator">*</span>xp <span class="token operator">=</span> y<span class="token punctuation">;</span>    <span class="token keyword">return</span> x<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">long</span> a <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> b <span class="token operator">=</span> <span class="token function">exchange</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a = %ld, b = %ld\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>a <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个程序会将变量<code>a</code>的值替换成3，变量<code>b</code>保存原来<code>a</code>的值4</p><p><code>exchange</code>函数的汇编代码，包括两条数据传送指令和一条返回指令</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">xp <span class="token operator">-></span> <span class="token operator">%</span>rdi<span class="token punctuation">,</span> y <span class="token operator">-></span> <span class="token operator">%</span>rsiexchange<span class="token operator">:</span>    <span class="token function">movq</span>    <span class="token punctuation">(</span><span class="token operator">%</span>rdi<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">%</span>rax    <span class="token comment">// rdi指向的地址的值复制到rax</span>    movq    <span class="token operator">%</span>rsi<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">%</span>rdi<span class="token punctuation">)</span>    <span class="token comment">// rsi的值复制到rdi指向的地址处</span>    ret<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>寄存器<code>rdi</code>和<code>rsi</code>分别用来保存函数传递的第一个参数和第二个参数，因此<code>rdi</code>中保存了<code>xp</code>的值，<code>rsi</code>中保存了变量<code>y</code>的值</p><p>第一条<code>mov</code>指令从内存中读取数值到寄存器，内存地址保存在寄存器<code>rdi</code>中，目的操作数是寄存器<code>rax</code>，因为要返回<code>x</code>的值，所以直接放到<code>rax</code>里面</p><p>第二条<code>mov</code>指令将变量<code>y</code>的值写到内存里，变量<code>y</code>存储在<code>rsi</code>中，内存地址保存在<code>rdi</code>中，也就是<code>xp</code>指向的地址</p><h3 id="程序栈"><a href="#程序栈" class="headerlink" title="程序栈"></a>程序栈</h3><p>要将寄存器<code>rax</code>的值<code>0x123</code>放入栈中，可以使用<code>pushq</code>指令将数据压入栈中，该指令执行的过程可以分解为两步</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">pushq   <span class="token operator">%</span>rax    <span class="token comment">// 将rax的值压栈</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>首先指向栈顶的寄存器<code>rsp</code>进行减法操作，因为栈是从高地址指向低地址，例如此时<code>rsp</code>的值为<code>0x108</code>，rsp值减8之后指向<code>0x100</code>，然后将需要保存的数据复制到新的栈顶位置，此时地址<code>0x100</code>处将保存寄存器<code>rax</code>的数值<code>0x123</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">subq    $<span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">%</span>rsp        <span class="token comment">// rsp的值减8</span>movq    <span class="token operator">%</span>rax<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">%</span>rsp<span class="token punctuation">)</span>    <span class="token comment">// 保存到rsp指向的地址处</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>区别在于<code>pushq</code>指令只要1个字节，而两条指令需要8个字节</p><blockquote><p><code>pushq</code>的本质是将数据写入到内存</p></blockquote><p>与之对应的<code>pop</code>指令就是从内存中读取数据，并且修改栈顶指针</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">popq    <span class="token operator">%</span>rbx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这条指令将栈顶保存的值复制到寄存器<code>rbx</code>中，也可以分解为两步：</p><blockquote><ul><li>首先从栈顶读出数据，复制到寄存器<code>rbx</code></li><li>然后将栈顶指针加8</li></ul></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">movq</span>    <span class="token punctuation">(</span><span class="token operator">%</span>rsp<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">%</span>rbxaddq    $<span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">%</span>rsp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>注意，此时地址<code>0x100</code>内保存的数据<code>0x123</code>依然存在，知道下次<code>push</code>操作，才会被覆盖</p>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSAPP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.2-寄存器与数据传送指令</title>
      <link href="2021/11/20/CS-CSAPP-3-2-%E5%AF%84%E5%AD%98%E5%99%A8%E4%B8%8E%E6%95%B0%E6%8D%AE%E4%BC%A0%E9%80%81%E6%8C%87%E4%BB%A4/"/>
      <url>2021/11/20/CS-CSAPP-3-2-%E5%AF%84%E5%AD%98%E5%99%A8%E4%B8%8E%E6%95%B0%E6%8D%AE%E4%BC%A0%E9%80%81%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="寄存器与数据传送指令"><a href="#寄存器与数据传送指令" class="headerlink" title="寄存器与数据传送指令"></a>寄存器与数据传送指令</h2><p>64位的处理器中，原来8个16位寄存器扩展成了64位，还增加了8个</p><p>不同寄存器扮演不同的角色，相应的编程规范规定了如何使用这些寄存器</p><blockquote><ul><li><code>rax</code>用来保存函数的返回值</li><li><code>rsp</code>用来保存程序栈的结束位置</li><li><code>rdi, rsi, rdx, rcx, r8, r9</code>可以用来传递函数参数</li></ul></blockquote><h3 id="指令-Instruction"><a href="#指令-Instruction" class="headerlink" title="指令(Instruction)"></a>指令(Instruction)</h3><p>包括<font color="LightCoral">操作码(Operation Code)和操作数(Operands)</font></p><ul><li>操作码决定了CPU执行操作的类型</li><li>大多数指令具有一个或多个操作数</li></ul><p>操作数可以分为3类：</p><blockquote><ul><li>立即数(Immediate)：以<code>$</code>开头，后面跟一个整数</li><li>寄存器(Register)：<code>%rax</code>，64位，32位，16位，8位寄存器都可以作为操作数</li><li>内存引用(Memory Reference)：寄存器加上小括号，如<code>(%rdi)</code></li></ul></blockquote><p><strong>MOV指令</strong></p><p>有两个操作数，<font color="LightSeaGreen">源操作数(Source operand)和目的操作数(Destination operand)</font></p><blockquote><ul><li>源操作数可以是：立即数，寄存器，内存引用</li><li>目的操作数是用来存放源操作数的内容，所以只能是寄存器或内存引用</li></ul></blockquote><div class="uk-alert uk-alert-danger"><i class="fas fa-exclamation-triangle"></i> 规定：源操作数和目的操作数不能都是内存的地址</div><p>所以，放需要将一个数从内存的一个位置复制到另一个位置，需要两条<code>mov</code>指令来完成<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">mov memory<span class="token punctuation">,</span> <span class="token keyword">register</span>    <span class="token comment">// 将内存源位置的数值加载到寄存器</span>mov <span class="token keyword">register</span><span class="token punctuation">,</span> memory    <span class="token comment">// 再将该寄存器的值写入目标位置</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><p><code>mov</code>指令的后缀与寄存器的大小一定得是匹配的</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">movl $<span class="token number">0x4050</span><span class="token punctuation">,</span> <span class="token operator">%</span>eax      <span class="token comment">// 立即数->寄存器 32位</span>movw <span class="token operator">%</span>bp<span class="token punctuation">,</span> <span class="token operator">%</span>sp           <span class="token comment">// 寄存器->寄存器 16位</span><span class="token function">movb</span> <span class="token punctuation">(</span><span class="token operator">%</span>rdi<span class="token punctuation">,</span> <span class="token operator">%</span>rcx<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">%</span>al  <span class="token comment">// 内存->寄存器 8位</span>movb $<span class="token operator">-</span><span class="token number">17</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">%</span>rsp<span class="token punctuation">)</span>       <span class="token comment">// 立即数->内存 8位</span>movq <span class="token operator">%</span>rax<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">12</span><span class="token punctuation">(</span><span class="token operator">%</span>rbp<span class="token punctuation">)</span>    <span class="token comment">// 寄存器->内存 64位</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>特殊情况</strong></p><p>当<code>movq</code>的源操作数是立即数时，该立即数只能是32位的补码表示，然后对该数值进行符号位扩展，将得到的64位数传送到目标位置</p><blockquote><p><code>movabsq</code>指令的源操作数可以是任意的64位立即数，目的操作数只能是寄存器</p></blockquote><p>例子：<br>使用<code>movabsq</code>将一个64位立即数复制到寄存器<code>rax</code><br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">movabsq $<span class="token number">0x0011223344556677</span><span class="token punctuation">,</span> <span class="token operator">%</span>rax<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p><p><code>rax</code>内的数值如图所示</p><center><img src="https://github.com/kavinwkp/blogimage/raw/main/img/cs/3/rax-1.png" width="60%"></center><p>接下来，使用<code>movb</code>指令将立即数-1复制到低8位的寄存器<code>al</code></p><p>此时，<code>rax</code>的低8位发生了变化</p><center><img src="https://github.com/kavinwkp/blogimage/raw/main/img/cs/3/rax-2.png" width="60%"></center><p>然后，再用指令<code>movw</code>将-1复制给16位寄存器<code>ax</code></p><p>此时，<code>rax</code>的低16位发生了变化</p><center><img src="https://github.com/kavinwkp/blogimage/raw/main/img/cs/3/rax-3.png" width="60%"></center><p>再用<code>movl</code>将立即数-1复制到32位寄存器<code>eax</code></p><p>此时，<code>rax</code>的低32位发生了变化，而且高32位也被置0</p><center><img src="https://github.com/kavinwkp/blogimage/raw/main/img/cs/3/rax-4.png" width="60%"></center><blockquote><ul><li>64位处理器的规定：<code>movl</code>的目的操作数是寄存器时，它会把寄存器的高4字节设置为0</li></ul></blockquote><p>当源操作数的数位小于目的操作数时，需要对目的操作数剩余的字节进行零扩展或符号位扩展</p><p>零扩展数据传送指令有5条，z表示zero，最后两个字符都是大小指示符</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">movzbw   <span class="token number">8</span><span class="token operator">-></span><span class="token number">16</span>movzbl   <span class="token number">8</span><span class="token operator">-></span><span class="token number">32</span>movzwl   <span class="token number">16</span><span class="token operator">-></span><span class="token number">32</span>movzbq   <span class="token number">8</span><span class="token operator">-></span><span class="token number">64</span>movzwq   <span class="token number">16</span><span class="token operator">-></span><span class="token number">64</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>符号位扩展传送指令有6条，s表示sign</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">movsbw  <span class="token number">8</span><span class="token operator">-></span><span class="token number">16</span>movsbl  <span class="token number">8</span><span class="token operator">-></span><span class="token number">32</span>movswl  <span class="token number">16</span><span class="token operator">-></span><span class="token number">32</span>movsbq  <span class="token number">8</span><span class="token operator">-></span><span class="token number">64</span>movswq  <span class="token number">16</span><span class="token operator">-></span><span class="token number">64</span>movslq  <span class="token number">32</span><span class="token operator">-></span><span class="token number">64</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对比发现，零扩展没有32位到64位的扩展指令，这种情况可以用<code>movl</code>来实现，本身就是可以将高位置0</p><p>另外，符号位扩展还有一条没有操作数的特殊指令<code>cltq</code>，源操作数总是<code>eax</code>，目的操作数总是<code>rax</code>，就是对寄存器<code>rax</code>的高32位进行符号位扩展，等价于<code>movslq %eax, %rax</code></p>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSAPP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.1-程序的机器级表示</title>
      <link href="2021/11/20/CS-CSAPP-3-1-%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA/"/>
      <url>2021/11/20/CS-CSAPP-3-1-%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="3-1-程序的机器级表示"><a href="#3-1-程序的机器级表示" class="headerlink" title="3.1 程序的机器级表示"></a>3.1 程序的机器级表示</h2><p>编写<code>main.c</code>和<code>mstore.c</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token function">mulstore</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">,</span> <span class="token keyword">long</span><span class="token punctuation">,</span> <span class="token keyword">long</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">long</span> d<span class="token punctuation">;</span>    <span class="token function">mulstore</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"2 * 3 --> %ld\n"</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">long</span> <span class="token function">mult2</span><span class="token punctuation">(</span><span class="token keyword">long</span> a<span class="token punctuation">,</span> <span class="token keyword">long</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">long</span> s <span class="token operator">=</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span>    <span class="token keyword">return</span> s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">long</span> <span class="token function">mul2</span><span class="token punctuation">(</span><span class="token keyword">long</span><span class="token punctuation">,</span> <span class="token keyword">long</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">mulstore</span><span class="token punctuation">(</span><span class="token keyword">long</span> x<span class="token punctuation">,</span> <span class="token keyword">long</span> y<span class="token punctuation">,</span> <span class="token keyword">long</span> <span class="token operator">*</span>dest<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">long</span> t <span class="token operator">=</span> <span class="token function">mul2</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>dest <span class="token operator">=</span> t<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>x <span class="token operator">-></span> rdiy <span class="token operator">-></span> rsidest <span class="token operator">-></span> rdx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>两个文件一起编译生成可执行文件<code>prog</code><br><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gcc -Og -o prog main.c mstore.c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p><h3 id="汇编"><a href="#汇编" class="headerlink" title="汇编"></a>汇编</h3><p>也可以编译单个文件，生成汇编文件<code>mstore.s</code><br><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gcc -Og -S mstore.c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br>删除部分无关代码<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">mulstore<span class="token operator">:</span>    pushq   <span class="token operator">%</span>rbx    movq    <span class="token operator">%</span>rdx<span class="token punctuation">,</span> <span class="token operator">%</span>rbx    call    mul2@PLT    movq    <span class="token operator">%</span>rax<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">%</span>rbx<span class="token punctuation">)</span>    popq    <span class="token operator">%</span>rbx    ret<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><p><code>pushq</code>意思是将寄存器<code>rbx</code>的值压如程序栈进行保存</p><p>补充寄存器的知识：<br>在Intel x86-64的处理器中包含16个通用目的寄存器，这些寄存器用来存放整数数据和指针，都是以<code>%r</code>开头</p><center><img src="https://github.com/kavinwkp/blogimage/raw/main/img/cs/3/register.png" width="60%"></center><p>为什么需要对寄存器进行压栈保存，因为在函数中修改了全局的东西，当函数调用完成之后要恢复原样</p><p><strong>调用者保存寄存器和被调用者保存寄存器</strong></p><p>函数A称为调用者(caller)，函数B称为被调用者(callee)，寄存器<code>rbx</code>在函数B中被修改了，逻辑上<code>rbx</code>的内容在调用函数B前后应该保持一致，解决这个问题有2个策略</p><blockquote><ul><li>一个是函数A在调用函数B之前，提前保存寄存器<code>rbx</code>的内容，执行完函数B之后，再恢复<code>rbx</code>的内容，这个策略就称为<font color="LightSeaGreen">调用者保存</font></li><li>一个是函数B在使用寄存器<code>rbx</code>之前，先保存寄存器的内容，在函数B返回之前，先恢复<code>rbx</code>原来的内容，称之为<font color="LightSeaGreen">被调用者保存</font></li></ul></blockquote><p>不同的寄存器采取不同的策略，具体如图所示</p><p><img src="https://github.com/kavinwkp/blogimage/raw/main/img/cs/3/register2.png" alt></p><p>寄存器<code>rbx</code>被定义为被调用者保存寄存器，<code>pushq</code>就是用来保存<code>rbx</code>的内容，在函数返回之前，使用了<code>pop</code>指令，恢复<code>rbx</code>的内容</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">movq    <span class="token operator">%</span>rdx<span class="token punctuation">,</span> <span class="token operator">%</span>rbx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>第二行汇编的含义是将寄存器<code>rdx</code>的内容复制到寄存器<code>rbx</code></p><p>根据寄存器用法的定义，函数<code>mulstore</code>的三个参数分别保存在<code>rdi, rsi, rdx</code>中，这条指令执行完，寄存器<code>rbx</code>的内容与寄存器<code>rdx</code>一致，都是<code>dest</code>指针所指向的内存的地址</p><p><code>movq</code>指令的后缀<code>q</code>表示数据的大小，由于早期的机器是16位，后来才扩展到32位，因此，用字<code>word</code>表示16位的数据类型，32位称为<font color="LightSeaGreen">双字</font>，64位称为<font color="LightSeaGreen">四字</font></p><p>图中给出了C语言的基本数据类型对应的汇编后缀表示<br><img src="https://github.com/kavinwkp/blogimage/raw/main/img/cs/3/suffix.png" alt></p><p>大多数GCC生成的汇编指令都有一个字符后缀来表示操作数的大小，例如，数据传送指令就有4个变种</p><blockquote><ul><li>movb: Move byte， 传送8位</li><li>movw: Move word， 传送16位</li><li>movl: Move double word， 传送32位</li><li>movq: Move quad word， 传送64位</li></ul></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">call    mul2@PLT<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>call</code>指令表示函数调用，返回值会保存在寄存器<code>rax</code>中，因此，寄存器<code>rax</code>中保存了<code>x</code>和<code>y</code>的乘积结果</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">movq    <span class="token operator">%</span>rax<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token operator">%</span>rbx<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这条指令将寄存器<code>rax</code>的值送到内存中，内存的地址就存放在寄存器<code>rbx</code>中</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">popq    <span class="token operator">%</span>rbx<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>恢复寄存器<code>rbx</code>的值</p><h3 id="反汇编"><a href="#反汇编" class="headerlink" title="反汇编"></a>反汇编</h3><p>将编译选项<code>-S</code>替换为<code>-c</code>，就可以生成对应的机器码目标文件<code>mstore.o</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gcc -Og -c mstore.c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该文件是二进制文件无法直接查看，要用到反汇编工具<code>objdump</code>，将机器代码反汇编成汇编代码</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">objdump -d mstore.o<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">mstore<span class="token punctuation">.</span>o<span class="token operator">:</span>     file format elf64<span class="token operator">-</span>x86<span class="token operator">-</span><span class="token number">64</span>Disassembly of section <span class="token punctuation">.</span>text<span class="token operator">:</span><span class="token number">0000000000000000</span> <span class="token operator">&lt;</span>mulstore<span class="token operator">></span><span class="token operator">:</span>   <span class="token number">0</span><span class="token operator">:</span>   <span class="token number">53</span>                      push   <span class="token operator">%</span>rbx   <span class="token number">1</span><span class="token operator">:</span>   <span class="token number">48</span> <span class="token number">89</span> d3                mov    <span class="token operator">%</span>rdx<span class="token punctuation">,</span><span class="token operator">%</span>rbx   <span class="token number">4</span><span class="token operator">:</span>   e8 <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">00</span>          callq  <span class="token number">9</span> <span class="token operator">&lt;</span>mulstore<span class="token operator">+</span><span class="token number">0x9</span><span class="token operator">></span>   <span class="token number">9</span><span class="token operator">:</span>   <span class="token number">48</span> <span class="token number">89</span> <span class="token number">03</span>                mov    <span class="token operator">%</span>rax<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token operator">%</span>rbx<span class="token punctuation">)</span>   c<span class="token operator">:</span>   <span class="token number">5</span>b                      pop    <span class="token operator">%</span>rbx   d<span class="token operator">:</span>   c3                      retq<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过对比反汇编得到的汇编代码与编译器直接生成的汇编代码，可以看到有细微的差异，反汇编代码省略了后缀<code>q</code>，但在<code>call</code>和<code>ret</code>指令后添加了后缀<code>q</code>，由于<code>q</code>只是表示大小指示符，大多数情况下是可以省略的</p>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSAPP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>寄存器</title>
      <link href="2021/11/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86-%E5%AF%84%E5%AD%98%E5%99%A8/"/>
      <url>2021/11/20/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86-%E5%AF%84%E5%AD%98%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h2><p>寄存器是<code>CPU</code>内部的构造，主要用于信息的存储。除此之外，<code>CPU</code>内部还有运算器，负责处理数据；控制器控制其他组件；外部总线连接<code>CPU</code>和各种组件，进行数据传输；内部总线负责<code>CPU</code>内部各种组件的数据处理</p><p><strong>为什么会出现寄存器？</strong></p><p>程序在内存中装载，由<code>CPU</code>来运行，<code>CPU</code>的主要职责就是用来处理数据。这个过程涉及到从存储器读取和写入数据，如果还要从内存中读取就太麻烦了，所以直接在<code>CPU</code>中开辟一些空间来存储数据，读取速度也比较快</p><h3 id="认识寄存器"><a href="#认识寄存器" class="headerlink" title="认识寄存器"></a>认识寄存器</h3><p><code>CPU</code>从逻辑上可以分为3个模块，分别是控制单元、运算单元和存储单元，这三部分由<code>CPU</code>内部总线连接起来。</p><p>几乎所有的冯·诺伊曼型计算机的<code>CPU</code>，其工作都可以分为5个阶段：<font color="LightSeaGreen">取指令、指令译码、执行指令、访存取数、结果写回</font></p><blockquote><ol><li>取指令阶段是将内存中的指令读取到<code>CPU</code>中寄存器的过程，程序寄存器用于存储下一条指令所在的地址</li><li>指令译码阶段，在取指令完成后，立马进入指令译码阶段，指令译码器按照预定的指令格式，对取回的指令进行拆分和解释，识别区分出不同的指令类别以及各种获取操作数的方法</li><li>执行指令阶段，译码完成后，就需要执行这一条指令了，此阶段的任务是完成指令所规定的各种操作，具体实现指令的功能</li><li>访问取数阶段，根据指令的需要，有可能需要从内存中提取数据，此阶段的任务是：根据指令地址码，得到操作数在内存中的地址，并从内存中读取该操作数用于运算</li><li>结果写回阶段(Write Back，WB)，把运行结果写回到<code>CPU</code>内部寄存器中，以便被后续的指令快速地存取</li></ol></blockquote><h3 id="计算机架构中的寄存器"><a href="#计算机架构中的寄存器" class="headerlink" title="　计算机架构中的寄存器"></a>　计算机架构中的寄存器</h3><div class="uk-alert uk-alert-success"><i class="fa fa-check-circle"></i> 寄存器是一块速度非常快的计算机内存</div><p>在<code>8086</code>架构中，所有的内部寄存器、内部以及外部总线都是<code>16</code>位宽，可以存储两个字节，<code>8086</code>处理器有<code>14</code>个寄存器，每个寄存器都有一个特有的名称，即</p><blockquote><p>AX，BX，CX，DX，SP，BP，SI，DI，IP，FLAG，CS，DS，SS，ES</p></blockquote><p><img src="https://github.com/kavinwkp/blogimage/raw/main/img/cs/register.png" alt></p><p>8位写成<code>al</code>，16位写成<code>ax</code>，后面扩展到32位会写成<code>eax</code>，扩展到64位会写成<code>rax</code>，其实都是一样的</p><p>这<code>14</code>个寄存器有可能进行具体的划分，按照功能可以分为三种</p><blockquote><ul><li>通用寄存器</li><li>控制寄存器</li><li>段寄存器</li></ul></blockquote><h3 id="通用寄存器"><a href="#通用寄存器" class="headerlink" title="通用寄存器"></a>通用寄存器</h3><p>通用寄存器主要有四种 ，即<font color="LightSeaGreen">AX、BX、CX、DX</font>，同样的，这四个寄存器也是<code>16</code>位的，能存放两个字节，各自的功能为</p><blockquote><ul><li>AX(Accumulator Register)：累加寄存器，用于输入/输出和大规模的指令运算</li><li>BX(Base Register)：基址寄存器，用来存储基础访问地址</li><li>CX(Count Register)：计数寄存器，在迭代的操作中循环计数</li><li>DX(data Register)：数据寄存器，也用于输入/输出操作。它还与 AX 寄存器一起使用，用于大数值的乘法和除法运算</li></ul></blockquote><p>这四种寄存器可以分为上半部分和下半部分，分成高位和低位两个<code>8</code>位数据寄存器</p><blockquote><p><code>AX</code>寄存器可以分为两个独立的<code>8</code>位的<code>AH</code>和<code>AL</code>寄存器，另外3个类似</p></blockquote><p>寄存器的存储方式是先存储低位，如果低位满足不了就存储高位，如果低位能够满足，高位用0补全</p><p><code>8086 CPU</code>可以一次存储两种类型的数据</p><blockquote><ul><li>字节(byte)：一个字节由<code>8 bit</code>组成，这是一种恒定不变的存储方式</li><li>字(word)：字是由指令集或处理器硬件作为单元处理的固定大小的数据，对于<code>intel</code>来说，一个字长就是两个字节，字是计算机一个非常重要的特征，针对不同的指令集架构来说，计算机一次处理的数据也是不同的。有字(16位)、双字(32位)、四字(64位)等</li></ul></blockquote><h4 id="AX寄存器"><a href="#AX寄存器" class="headerlink" title="AX寄存器"></a>AX寄存器</h4><p><font color="LightSeaGreen">累加寄存器</font>或者简称为累加器</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">mov AX<span class="token punctuation">,</span><span class="token number">20</span>   <span class="token comment">// 将 20 送入寄存器 AX</span>mov AH<span class="token punctuation">,</span><span class="token number">80</span>   <span class="token comment">// 将 80 送入寄存器 AH</span>add AX<span class="token punctuation">,</span><span class="token number">10</span>   <span class="token comment">// 将寄存器 AX 中的数值加上 10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>支持<code>MUL</code>和<code>DIV</code>指令</p><h4 id="BX寄存器"><a href="#BX寄存器" class="headerlink" title="BX寄存器"></a>BX寄存器</h4><p><font color="LightSeaGreen"><b>数据寄存器</b></font>，能够暂存一般数据，还用于<font color="LightSeaGreen">寻址</font>，即寻找物理内存地址。<code>BX</code>寄存器中存放的数据一般是作为<font color="LightSeaGreen">偏移地址</font>使用的。偏移地址是在段寄存器中存储的</p><h4 id="CX寄存器"><a href="#CX寄存器" class="headerlink" title="CX寄存器"></a>CX寄存器</h4><p><code>CX</code>也是数据寄存器，能够暂存一般性数据。当在汇编指令中使用循环<code>LOOP</code>指令时，可以通过<code>CX</code>来指定需要循环的次数，每次执行循环<code>LOOP</code>时候，<code>CPU</code>会做两件事</p><ul><li>一是计数器自动减 1</li><li>二是判断<code>CX</code>中的值，如果值为<code>0</code>则会跳出循环，如果值为<code>0</code>，则会继续执行循环</li></ul><h4 id="DX寄存器"><a href="#DX寄存器" class="headerlink" title="DX寄存器"></a>DX寄存器</h4><p><code>DX</code>也是数据寄存器，能够暂存一般性数据，支持<code>MUL</code>和<code>DIV</code>指令，同时也支持数值溢出等</p><h3 id="段寄存器"><a href="#段寄存器" class="headerlink" title="段寄存器"></a>段寄存器</h3><blockquote><ul><li><font color="LightCoral">CS(Code Segment)：代码寄存器</font>，程序代码的基础位置</li><li>DS(Data Segment)：数据寄存器，变量的基本位置</li><li>SS(Stack Segment)：栈寄存器，栈的基础位置</li><li>ES(Extra Segment)：其他寄存器，内存中变量的其他基本位置</li></ul></blockquote><h3 id="索引寄存器"><a href="#索引寄存器" class="headerlink" title="索引寄存器"></a>索引寄存器</h3><p>索引寄存器主要包含段地址的偏移量，分为</p><blockquote><p>BP(Base Pointer)：基础指针，它是栈寄存器上的偏移量，用来定位栈上变量<br>SP(Stack Pointer): 栈指针，它是栈寄存器上的偏移量，用来定位栈顶<br>SI(Source Index): 变址寄存器，用来拷贝源字符串<br>DI(Destination Index): 目标变址寄存器，用来复制到目标字符串</p></blockquote><h3 id="状态和控制寄存器"><a href="#状态和控制寄存器" class="headerlink" title="状态和控制寄存器"></a>状态和控制寄存器</h3><ul><li><font color="LightCoral">IP(Instruction Pointer)：指令指针寄存器</font>，它是从<code>Code Segment</code>代码寄存器处的偏移来存储执行的下一条指令</li><li>FLAG：<code>Flag</code>寄存器用于存储当前进程的状态，这些状态有<ul><li>位置 (Direction)：用于数据块的传输方向，是向上传输还是向下传输</li><li>中断标志位 (Interrupt) ：1 - 允许；0 - 禁止</li><li>陷入位 (Trap) ：确定每条指令执行完成后，CPU 是否应该停止。1 - 开启，0 - 关闭</li><li>进位 (Carry) : 设置最后一个无符号算术运算是否带有进位</li><li>溢出 (Overflow) : 设置最后一个有符号运算是否溢出</li><li>符号 (Sign) : 如果最后一次算术运算为负，则设置 1 =负，0 =正</li><li>零位 (Zero) : 如果最后一次算术运算结果为零，1 = 零</li><li>辅助进位 (Aux Carry) ：用于第三位到第四位的进位</li><li>奇偶校验 (Parity) : 用于奇偶校验</li></ul></li></ul><h3 id="物理地址"><a href="#物理地址" class="headerlink" title="物理地址"></a>物理地址</h3><p>16 位的 CPU 指的是</p><ul><li>CPU 内部的运算器一次最多能处理 16 位的数据</li></ul><blockquote><p>运算器其实就是ALU，运算控制单元，它是CPU内部的三大核心器件之一，主要负责数据的运算</p></blockquote><ul><li>寄存器的最大宽度为 16 位</li></ul><blockquote><p>这个寄存器的最大宽度值就是通用寄存器能处理的二进制数的最大位数</p></blockquote><ul><li>寄存器和运算器之间的通路为 16 位</li></ul><blockquote><p>这个指的是寄存器和运算器之间的总线，一次能传输 16 位的数据</p></blockquote><p>CPU 相关组件提供两个地址：<font color="LightSeaGreen">段地址和偏移地址</font>，这两个地址都是<code>16</code>位的，他们经由地址加法器变为<code>20</code>位的<font color="LightSeaGreen">物理地址</font>，这个地址即是输入输出控制电路传递给内存的物理地址，由此完成物理地址的转换</p><p>地址加法器采用<code>物理地址 = 段地址 * 16 + 偏移地址</code>的方法用段地址和偏移地址合成物理地址</p><p>段地址*16就是二进制左移4位，十六进制左移1位，作为基础地址，所以</p><div class="uk-alert uk-alert-success"><i class="fa fa-check-circle"></i> 物理地址 = 基础地址 + 偏移地址</div><h3 id="段寄存器-1"><a href="#段寄存器-1" class="headerlink" title="段寄存器"></a>段寄存器</h3><h4 id="CS-寄存器"><a href="#CS-寄存器" class="headerlink" title="CS 寄存器"></a>CS 寄存器</h4><blockquote><p>CS(代码寄存器，存储段地址)和 IP(指令指针，存储偏移地址) 都是 8086 CPU 非常重要的寄存器，它们指出了 CPU 当前需要读取指令的地址</p></blockquote><p>在 CPU 内部，由 CS 和 IP 提供段地址和偏移地址，由加法器负责转换为物理地址，输入输出控制电路负责输入/输出数据，指令缓冲器负责缓冲指令，指令执行器负责执行指令。在内存中有一段连续存储的区域，区域内部存储的是机器码、外面是地址和汇编指令</p><p>假设段地址和偏移地址分别是<code>2000</code>和<code>0000</code>，当这两个地址进入地址加法器后，会由地址加法器负责将这两个地址转换为物理地址<code>20000</code>，然后输入输出控制电路将<code>20</code>位的地址总线送到内存中，然后取出对应的数据，<code>B8 23 01</code>，<code>B8</code>是操作数，再送入指令缓存器中，此时这个指令就已经具备执行条件，然后 IP(指令指针)会自动增加。它会知道下一个需要读取指令的地址<code>0003</code>，在这之后，指令执行执行取出的<code>B8 23 01</code>这条指令，然后再把<code>2000</code>和<code>0003</code>送到地址加法器中再进行后续指令的读取，如此循环</p><p>总结一下 8086 CPU 的工作过程</p><blockquote><ul><li>段寄存器提供段地址和偏移地址给地址加法器</li><li>由地址加法器计算出物理地址通过输入输出控制电路将物理地址送到内存中</li><li>提取物理地址对应的指令，经由控制电路取回并送到指令缓存器中</li><li><code>IP</code>继续指向下一条指令的地址，同时指令执行器执行指令缓冲器中的指令</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机组成原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.4-浮点数</title>
      <link href="2021/11/20/CS-CSAPP-2-4-%E6%B5%AE%E7%82%B9%E6%95%B0/"/>
      <url>2021/11/20/CS-CSAPP-2-4-%E6%B5%AE%E7%82%B9%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="2-4-浮点数"><a href="#2-4-浮点数" class="headerlink" title="2.4 浮点数"></a>2.4 浮点数</h2><h3 id="2-4-1-浮点数表示"><a href="#2-4-1-浮点数表示" class="headerlink" title="2.4.1 浮点数表示"></a>2.4.1 浮点数表示</h3><script type="math/tex; mode=display">V = (-1)^S \times M \times 2^E</script><p><img src="https://github.com/kavinwkp/blogimage/raw/main/img/cs/2/2.3/double.png" alt></p><p><code>float</code>占4个字节，32位，分成3段</p><blockquote><ul><li>最高位表示符号位S，S为0表示正数，S为1表示负数</li><li>23位到30位是<font color="LightSeaGreen">阶码</font>，共<font color="LightSeaGreen">8</font>位</li><li>0到22位是<font color="tomato">尾数</font>，共<font color="tomato">23</font>位</li></ul></blockquote><p><code>double</code>占8个字节，64位，也是分成3段</p><blockquote><ul><li>最高位表示符号位S，S为0表示正数，S为1表示负数</li><li>52位到62位是阶码，共11位</li><li>0到51位是尾数，共52位</li></ul></blockquote><ul><li>当阶码字段的二进制不全为0，也不全为1时，表示的是规格化的值</li><li>当阶码字段全为0时，表示非规格化的值</li><li>当阶码字段全为1时，表示特殊值<ul><li>尾数全为0，表示无穷大或无穷小</li><li>尾数不为0，表示“不是一个数”</li></ul></li></ul><h4 id="规格化的值"><a href="#规格化的值" class="headerlink" title="规格化的值"></a>规格化的值</h4><p><img src="https://github.com/kavinwkp/blogimage/raw/main/img/cs/2/2.3/1.png" alt></p><p>用$e$来表示阶码字段的二进制数，范围是$0000 0001 \sim 11111110, e_{min}=1, e_{max}=254$</p><script type="math/tex; mode=display">{\color{LightSeaGreen}{E = e - bias}}</script><p>偏置量的值与阶码的位数相关</p><script type="math/tex; mode=display">\mathbf{bias(float)} = 2^{8-1}-1 = 127 \\\mathbf{bias(double)} = 2^{11-1}-1 = 1023</script><p>所以，阶码的范围是：$E_{min} = -126, E_{max} = 127$</p><p>$f$表示尾数字段的二进制数，尾数${\color{tomato}{M = 1 + f}}$</p><h4 id="非规格化的值"><a href="#非规格化的值" class="headerlink" title="非规格化的值"></a>非规格化的值</h4><p><img src="https://github.com/kavinwkp/blogimage/raw/main/img/cs/2/2.3/2.png" alt></p><blockquote><p>阶码字段的值全为0</p></blockquote><p>可以表示0：</p><script type="math/tex; mode=display">s=0, M=f=0, V=+0.0 \\s=1, M=f=0, V=-0.0</script><p>可以表示非常接近0的数，计算公式跟规格化的不一样</p><script type="math/tex; mode=display">E = 1 - bias \\M = f</script><h4 id="特殊值"><a href="#特殊值" class="headerlink" title="特殊值"></a>特殊值</h4><p><img src="https://github.com/kavinwkp/blogimage/raw/main/img/cs/2/2.3/3.png" alt></p><blockquote><p>阶码全为1，尾数全为0</p></blockquote><p>可以表示正无穷大和负无穷大</p><script type="math/tex; mode=display">s=0, f=0, V=+\infty \\s=1, f=0, V=-\infty</script><p>也可以表示$NaN$</p><blockquote><p>阶码字段全为1，尾数字段不为0</p></blockquote><p><strong>规律</strong></p><p><img src="https://github.com/kavinwkp/blogimage/raw/main/img/cs/2/2.4/1.png" alt></p><p>考虑<code>k</code>位阶码，<code>n</code>位小数</p><ul><li>值0.0的位模式全为0</li><li>最下的非规格化值的位模式，除了最低位是1，其余为都是0，所以尾数$M=f= 2^{-n}$，阶码$E = 1-(2^{k-1}-1)=-2^{k-1}+2$，所以数字值是$V=M \times 2^E = 2^{-n-2^{k-1}-2}$</li><li>最大的非规格化值的位模式，阶码字段全为0，尾数字段全为1，所以尾数$M=f=1-2^{-n}$，写成$1-\epsilon$，阶码$E=-2^{k-1}+2$，所以数字值是$V=M \times 2^E=(1-2^{-n}) \times 2^{-2^{k-1}-2}$</li><li>最小的正规格化值的位模式，阶码字段最低位是1，其余全为0，所以尾数$M=1+f=1$，阶码$E=1-(2^{k-1}-1)=-2^{k-1}+2$，所以数字值是$V=2^{-2^{k-1}+2}$</li><li>值1.0的位模式，阶码字段最高位为0，其余都为1，尾数字段都为0，所以尾数$M=1$，阶码$E=0$</li><li>最大的正规格化值的位模式，符号位为0，阶码最高位0，其余为1，尾数字段都为1，所以小数值$f=1-2^{-n}$，尾数$M=1+f=2-2^{-n}$，写作$2-\epsilon$，阶码值$E=e-bias=2^k-2-(2^{k-1}-1)=2^{k-1}-1$，所以数值为$V=M \times 2^E=(2-2^{-n}) \times 2^{2^{k-1}-1}=(1-2^{-n-1}) \times 2^{k-1}$</li></ul><h4 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h4><p>1.0的位模式是<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">0011</span> <span class="token number">1111</span> <span class="token number">1000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br>所以小端模式输出十六进制是<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">00</span> <span class="token number">00</span> <span class="token number">80</span> <span class="token number">3f</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p><p>反之，如果位模式是<code>3f 80 00 00</code>，用<code>float</code>来解释的话应该是1.0</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span> byte_pointer<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">show_bytes</span><span class="token punctuation">(</span>byte_pointer start<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" %.2x"</span><span class="token punctuation">,</span> start<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 两位十六进制</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">show_float</span><span class="token punctuation">(</span><span class="token keyword">float</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">show_bytes</span><span class="token punctuation">(</span><span class="token punctuation">(</span>byte_pointer<span class="token punctuation">)</span><span class="token operator">&amp;</span> x<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0x3f800000</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> <span class="token operator">*</span>y <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>x<span class="token punctuation">;</span>  <span class="token comment">// 强制转换为float解释</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%f\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">show_float</span><span class="token punctuation">(</span><span class="token operator">*</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token number">1.000000</span><span class="token number">00</span> <span class="token number">00</span> <span class="token number">80</span> <span class="token number">3f</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果证明确实如此</p><p>如果将1.0的解码字段最低位置0，尾数字段全部置1，这应该是小于1.0的最大数</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">   <span class="token number">3</span>    f    <span class="token number">8</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">0</span><span class="token number">0011</span> <span class="token number">1111</span> <span class="token number">1000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span> <span class="token number">0000</span><span class="token number">0011</span> <span class="token number">1111</span> <span class="token number">0111</span> <span class="token number">1111</span> <span class="token number">1111</span> <span class="token number">1111</span> <span class="token number">1111</span> <span class="token number">1111</span>   <span class="token number">3</span>    f    <span class="token number">7</span>    f    f    f    f    f<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0x3f800000</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> <span class="token operator">*</span>y <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>x<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%f\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">show_float</span><span class="token punctuation">(</span><span class="token operator">*</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> x2 <span class="token operator">=</span> <span class="token number">0x3f7fffff</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> <span class="token operator">*</span>y2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">float</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>x2<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.30f\n"</span><span class="token punctuation">,</span> <span class="token operator">*</span>y2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">show_float</span><span class="token punctuation">(</span><span class="token operator">*</span>y2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token number">1.000000</span> <span class="token number">00</span> <span class="token number">00</span> <span class="token number">80</span> <span class="token number">3f</span><span class="token number">0.999999940395355224609375000000</span> ff ff <span class="token number">7f</span> <span class="token number">3f</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果表明确实很接近，但是有效位数之后的就不准确了</p><p>那么，如果指定一个很接近的1的小数，很可能因为这种误差导致他转换得到的位模式和1.0是一样的，所以如果放到判断语句里面，结果可能会出问题</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">float</span> y <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span>    <span class="token function">show_float</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> y2 <span class="token operator">=</span> <span class="token number">0.99999998</span><span class="token punctuation">;</span>    <span class="token function">show_float</span><span class="token punctuation">(</span>y2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>y <span class="token operator">==</span> y2<span class="token punctuation">)</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Yes\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"No\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//  00 00 80 3f</span><span class="token comment">//  00 00 80 3f</span><span class="token comment">// Yes</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>原因是<code>0.99999998</code>转换成的二进制和1.0的是一样的，所以，最好不要用这种浮点数的比较</p>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSAPP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.3-整数的运算</title>
      <link href="2021/11/20/CS-CSAPP-2-3-%E6%95%B4%E6%95%B0%E7%9A%84%E8%BF%90%E7%AE%97/"/>
      <url>2021/11/20/CS-CSAPP-2-3-%E6%95%B4%E6%95%B0%E7%9A%84%E8%BF%90%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<h2 id="2-3-整数的运算"><a href="#2-3-整数的运算" class="headerlink" title="2.3 整数的运算"></a>2.3 整数的运算</h2><h3 id="2-3-1-加法"><a href="#2-3-1-加法" class="headerlink" title="2.3.1 加法"></a>2.3.1 加法</h3><h4 id="无符号加法"><a href="#无符号加法" class="headerlink" title="无符号加法"></a>无符号加法</h4><p>$w$位无符号数的取值范围是：${\color{tomato}{0 \leq x &lt; 2^w}}$</p><blockquote><ul><li>两个无符号数$x,y$相加，如果和小于$2^w$，结果为$x+y$，与实际情况一致</li><li>如果和大于等于$2^w$，结果会发生溢出，为${\color{tomato}{x+y-2^w}}$</li></ul></blockquote><script type="math/tex; mode=display">x +_w^u y=\left\{\begin{array}{cl}{\color{deepskyblue}{x+y}} & {\color{deepskyblue}{x+y<2^w}} & \rm{Normal}\\{\color{tomato}{x+y-2^w}} & {\color{tomato}{2^w \leq x+y < 2^{w+1}}} & \rm{Overflow}\\\end{array} \right.</script><center><img src="https://github.com/kavinwkp/blogimage/raw/main/img/cs/2/2.3/add-3.png" width="40%"></center><p>可以有2种理解：</p><blockquote><ol><li>相当于把最高位$w$位的1去掉了，所以是减去$2^w$</li><li>截断后面$w$位，相当于对$2^w$取模，也是减去$2^w$</li></ol></blockquote><p>溢出后的结果肯定比$x,y$小，所以可以作比较来判断有没有溢出</p><h4 id="有符号加法"><a href="#有符号加法" class="headerlink" title="有符号加法"></a>有符号加法</h4><p>$w$位有符号数的取值范围是：${\color{tomato}{-2^{w-1} \leq x \leq 2^{w-1} - 1}}$<br>两个有符号数的相加的范围是：${\color{tomato}{-2^{w} \leq x+y \leq 2^{w} - 2}}$</p><p>有符号数的溢出分为正溢出和负溢出</p><script type="math/tex; mode=display">x+_w^ty=\left\{\begin{array}{cl}{\color{LightSeaGreen}{x+y-2^w}} & {\color{LightSeaGreen}{2^{w-1} \leq x+y}} & \rm{Positive\enspace overflow}\\{\color{deepskyblue}{x+y}} & {\color{deepskyblue}{-2^{w-1} \leq x+y < 2^w-1}} & \rm{Normal} \\{\color{tomato}{x+y+2^w}} & {\color{tomato}{x+y < -2^{w-1}}} & \rm{Negative \enspace overflow}\\\end{array} \right.</script><center><img src="https://github.com/kavinwkp/blogimage/raw/main/img/cs/2/2.3/add-4.png" width="60%"></center><blockquote><ul><li>结果大于等于$2^{w-1}$，发生正溢出，和为${\color{LightSeaGreen}{x+y-2^{w}}}$</li><li>结果小于$-2^{w-1}$，发生负溢出，和为${\color{tomato}{x+y+2^{w}}}$</li></ul></blockquote><p>如果两个正数相加得到负数，说明是<font color="LightSeaGreen">正溢出</font><br>如果两个负数相加得到正数，说明是<font color="tomato">负溢出</font></p><h3 id="2-3-2-减法"><a href="#2-3-2-减法" class="headerlink" title="2.3.2 减法"></a>2.3.2 减法</h3><p>减去一个数就相当于加上这个数的相反数（加法逆元）</p><h4 id="无符号的加法逆元"><a href="#无符号的加法逆元" class="headerlink" title="无符号的加法逆元"></a>无符号的加法逆元</h4><p>如果$x=0$，相反数也是$x^{\prime}=0$</p><p>如果$x \geq 0$，如果加到$2^w$会溢出，结果还是0，所以$x+x^{\prime}=2^w=0$，所以相反数是$x^{\prime} = 2^w-x$</p><h4 id="有符号数的加法逆元"><a href="#有符号数的加法逆元" class="headerlink" title="有符号数的加法逆元"></a>有符号数的加法逆元</h4><p>当$x&gt;Tmin_w$，相反数就是$-x$</p><p>当$x=Tmin_w$，因为补码表示的最大值比最小值小1，$|Tmin_w| = |Tmax_w| + 1$，所以要通过负溢出来表示，因为$Tmin_w + Tmin_w = -2^{w-1}-2^{w-1}=-2^w$，会发生负溢出，需要加上$2^w$，就得到$0$，所以$Tmin_w$的加法逆元就是它本身</p><h3 id="2-3-3-乘法"><a href="#2-3-3-乘法" class="headerlink" title="2.3.3 乘法"></a>2.3.3 乘法</h3><p>乘以$2^k$就相当于左移$k$位，可以把乘法分解为加法和移位<br>例如：$x$乘以$14=2^3+2^2+2^1$，就相当于$x \cdot (2^3+2^2+2^1) = (x&lt;&lt;3) + (x&lt;&lt;2) + (x&lt;&lt;1)$，这样就把乘法分解为3个移位操作和2个加法操作</p><h3 id="2-3-4-除法"><a href="#2-3-4-除法" class="headerlink" title="2.3.4 除法"></a>2.3.4 除法</h3><p>除以$2^k$就相当于右移$k$位，注意<font color="LightCoral">无符号数</font>是<font color="LightCoral">逻辑右移</font>，<font color="LightSeaGreen">有符号数</font>是<font color="LightSeaGreen">算术右移</font></p><blockquote><ul><li>整数除法向0取整，即负数上取整，整数下取整</li></ul></blockquote><p>负数的补码除法会出现下取整的问题，与规定不符<br>所以，负数右移的时候要先加上一个偏置</p><script type="math/tex; mode=display">\lceil x/y \rceil = \lfloor (x+y-1)/y \rfloor</script><p>所以负数除以$2^k$需要先加上$2^k-1$，$2^k$就是1左移$k$位</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">?</span> x <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> k<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">:</span> x <span class="token punctuation">)</span> <span class="token operator">>></span> k<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSAPP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.2-整数的表示</title>
      <link href="2021/11/20/CS-CSAPP-2-2-%E6%95%B4%E6%95%B0%E7%9A%84%E8%A1%A8%E7%A4%BA/"/>
      <url>2021/11/20/CS-CSAPP-2-2-%E6%95%B4%E6%95%B0%E7%9A%84%E8%A1%A8%E7%A4%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="2-2-整数的表示"><a href="#2-2-整数的表示" class="headerlink" title="2.2 整数的表示"></a>2.2 整数的表示</h2><h3 id="2-2-1-数据类型"><a href="#2-2-1-数据类型" class="headerlink" title="2.2.1 数据类型"></a>2.2.1 数据类型</h3><p>不同数据类型的数值范围</p><center><img src="https://github.com/kavinwkp/blogimage/raw/main/img/cs/2/2.2/size64-2.png" width="80%"></center><blockquote><ul><li>在64位机器上，<code>long</code>占8个字节</li><li>在32位机器上，<code>long</code>占4个字节</li></ul></blockquote><h4 id="补码"><a href="#补码" class="headerlink" title="补码"></a>补码</h4><p>负数是用补码表示的</p><p>补码最高位的权重是负的，所以称为符号位</p><script type="math/tex; mode=display">x_{w-1} \cdot {\color{tomato}{-2^{w-1}}} + x_{w-2} \cdot {\color{tomato}{2^{w-2}}} + \cdots + x_{0} \cdot {\color{tomato}{2^{0}}}</script><center><img src="https://github.com/kavinwkp/blogimage/raw/main/img/cs/2/2.2/buma.png" width="80%"></center><p>最高位是灰色的负权重，所以最高位为1，就相当于减去8</p><p>例如：<code>-5</code>表示为<code>-8+3</code>，所以符号位是<code>1</code>，非符号位是<code>011</code>，即<code>-5</code>的补码表示为<code>1011</code></p><h3 id="2-2-2-有符号数和无符号数"><a href="#2-2-2-有符号数和无符号数" class="headerlink" title="2.2.2 有符号数和无符号数"></a>2.2.2 有符号数和无符号数</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">short</span> a <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">12345</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">short</span> b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">short</span><span class="token punctuation">)</span>a<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"a = %d, b = %u"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// a = -12345, b = 53191</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>a</code>和<code>b</code>的位模式其实是一样的，都是<code>1100 1111 1100 0111</code>，但是解释这些位的方式不同</p><p>对于相同的位模式，有符号数和无符号数的转换关系为</p><script type="math/tex; mode=display">B2U_{w} = B2T_{w} + x_{w-1} \cdot 2^{w}</script><p>所以</p><script type="math/tex; mode=display">T2U_w(x)=\left\{\begin{array}{cl}{\color{tomato}{x+2^w}} &  x < 0 \\x &  x \geq 0 \\\end{array} \right.</script><blockquote><ul><li>当最高位$x_{w-1}$为1时，此时有符号数$x$表示一个负数，要转换为无符号数需要加上$2^w$</li><li>当最高位为0时，有符号数和无符号数是相等的</li></ul></blockquote><p>无符号数到有符号数的转换</p><script type="math/tex; mode=display">B2T_{w} = B2U_{w} - x_{w-1} \cdot 2^{w}</script><p>所以</p><script type="math/tex; mode=display">U2T_w(u)=\left\{\begin{array}{cl}u &  u \leq TMax_w \\{\color{LightSeaGreen}{u-2^w}} &  u > TMax_w \\\end{array} \right.</script><blockquote><ul><li>最高位等于0时，无符号数可以表示的数值小于有符号数的最大值，此时转换后的数值不变</li><li>最高位等于1时，无符号数可以表示的数值大于有符号数的最大值，转换后得到的有符号数等于该无符号数减去$2^{w}$</li></ul></blockquote><p>例如：无符号数<code>11D = 1011B</code>，转换为有符号数应该是$11-2^4=-5$</p><table><tr><td bgcolor="#dfe2e5"><img src="https://github.com/kavinwkp/blogimage/raw/main/img/cs/3/T2U.png"></td><td bgcolor="#dfe2e5"><img src="https://github.com/kavinwkp/blogimage/raw/main/img/cs/3/U2T.png"></td></tr></table><p>C语言中，执行运算时，如果一个运算数是有符号数，另一个运算数是无符号数，会将<font color="LightSeaGreen">有符号数隐式转换为无符号数</font>来执行运算</p><h3 id="2-2-3-数据类型转换"><a href="#2-2-3-数据类型转换" class="headerlink" title="2.2.3 数据类型转换"></a>2.2.3 数据类型转换</h3><h4 id="数据扩展"><a href="#数据扩展" class="headerlink" title="数据扩展"></a>数据扩展</h4><blockquote><ul><li>无符号数的扩展高位补0</li><li>有符号数的扩展进行符号位扩展，最高位为0就扩展0，为1就扩展1</li></ul></blockquote><h4 id="数据截断"><a href="#数据截断" class="headerlink" title="数据截断"></a>数据截断</h4><p>对于十进制<code>123456</code>，从中间截断得到<code>456</code>，就相当于将原数对<code>1000</code>取模，也就是对$10^3$取模</p><p>同理，将二进制数<code>11001010</code>对$2^4$取模，就得到了<code>1010</code></p>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSAPP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.1-信息的存储</title>
      <link href="2021/11/20/CS-CSAPP-2-1-%E4%BF%A1%E6%81%AF%E7%9A%84%E5%AD%98%E5%82%A8/"/>
      <url>2021/11/20/CS-CSAPP-2-1-%E4%BF%A1%E6%81%AF%E7%9A%84%E5%AD%98%E5%82%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="2-1-信息的存储"><a href="#2-1-信息的存储" class="headerlink" title="2.1 信息的存储"></a>2.1 信息的存储</h2><p>通常情况下，程序将内存视为一个非常大的数组，数组的元素是由一个个的字节<code>Byte</code>组成，每个字节都有一个唯一的数字来表示，称为地址<code>address</code>，所有地址的集合称为<font color="LightSeaGreen">虚拟地址空间</font></p><h3 id="2-1-1-进制"><a href="#2-1-1-进制" class="headerlink" title="2.1.1 进制"></a>2.1.1 进制</h3><p>1个字节由8个位<code>bit</code>组成，用十进制来表示范围是：<code>0~255</code>，这种按照一位一位表示数据的方式称为位模式，使用二进制太冗长，所以引入十六进制</p><blockquote><p>十六进制以<code>0X</code>或<code>0x</code>开头</p></blockquote><p><img src="https://github.com/kavinwkp/blogimage/raw/main/img/cs/2/2.1/hex.png" alt></p><p>快速将2的n次方表示为十六进制数<br>2<sup>0</sup> = 1<br>2<sup>1</sup> = 10<br>2<sup>2</sup> = 100<br>2<sup>3</sup> = 1000<br>所以2的n次方就是1后面跟n个0，n可以表示为<code>i+4j</code>，就是除以4，<code>i</code>为余数，<code>j</code>为商，<code>i</code>只有三种情况，0对应<code>0B-&gt;0H</code>，1对应<code>10B-&gt;2H</code>，2对应<code>100B-&gt;4H</code>，3对应<code>1000B-&gt;8H</code>，后面再跟<code>j</code>个0<br>例如：2<sup>11</sup>，因为<code>11=3+4*2</code>，所以是<code>0x800</code></p><p>C语言支持整数和浮点数等多种数据类型，表格中列出了不同数据类型在32位机器和64位机器上所占字节数的大小</p><p><img src="https://github.com/kavinwkp/blogimage/raw/main/img/cs/2/2.1/size.png" alt></p><p>例如一个4字节的<code>int</code>变量<code>0x01234567</code>，所以需要占用<code>0x100</code>、<code>0x101</code>、<code>0x102</code>和<code>0x103</code>四个字节内存空间</p><blockquote><p>大端法：最高有效字节存储在低地址处，所以是<code>01 23 45 67</code><br>小端法：最低有效字节存储在低地址处，所以是<code>67 45 23 01</code></p></blockquote><p><img src="https://github.com/kavinwkp/blogimage/raw/main/img/cs/2/2.1/endian.png" alt></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span> byte_pointer<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">show_bytes</span><span class="token punctuation">(</span>byte_pointer start<span class="token punctuation">,</span> <span class="token keyword">int</span> len<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">" %.2x"</span><span class="token punctuation">,</span> start<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 两位十六进制</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">show_int</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">show_bytes</span><span class="token punctuation">(</span><span class="token punctuation">(</span>byte_pointer<span class="token punctuation">)</span><span class="token operator">&amp;</span> x<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0x01234567</span><span class="token punctuation">;</span>    <span class="token function">show_int</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//  67 45 23 01</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从程序运行结果可以看出来是小端模式</p><h3 id="2-1-2-移位操作"><a href="#2-1-2-移位操作" class="headerlink" title="2.1.2 移位操作"></a>2.1.2 移位操作</h3><p>左移就是简单地左移，右端补0</p><p>右移分为<font color="LightSeaGreen">逻辑右移</font>和<font color="LightSeaGreen">算术右移</font></p><blockquote><ul><li>逻辑右移左端补0</li><li>算术右移<ul><li>最高位为0则补0</li><li>最高位为1则补1</li></ul></li></ul></blockquote><p>大多数编译器对有符号数使用算术右移，对于无符号数，右移是逻辑右移</p>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSAPP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.2-操作系统</title>
      <link href="2021/11/20/CS-CSAPP-1-2-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
      <url>2021/11/20/CS-CSAPP-1-2-%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="1-2-操作系统"><a href="#1-2-操作系统" class="headerlink" title="1.2 操作系统"></a>1.2 操作系统</h2><p>无论是<code>shell</code>程序还是<code>hello</code>程序，都没有直接访问键盘、显示器、磁盘等硬件设备，真正操控硬件的是<font color="LightSeaGreen">操作系统</font>，可以把操作系统看成是应用程序和硬件之间的<font color="LightSeaGreen">中间层</font>，所有应用程序对硬件的操作必须通过操作系统来完成</p><p><img src="https://github.com/kavinwkp/blogimage/raw/main/img/cs/1/1.2/OS.png" alt></p><p>为了实现上述功能，操作系统引入了一些抽象的概念，例如：<font color="LightSeaGreen">文件</font>是对<code>IO</code>设备的抽象，<font color="LightSeaGreen">虚拟内存</font>是对内存和磁盘的抽象，<font color="LightSeaGreen">进程</font>是对处理器、内存以及<code>IO</code>的抽象</p><p><img src="https://github.com/kavinwkp/blogimage/raw/main/img/cs/1/1.2/OS2.png" alt></p><h3 id="1-2-1-进程"><a href="#1-2-1-进程" class="headerlink" title="1.2.1 进程"></a>1.2.1 进程</h3><p>程序在现代系统上运行时，操作系统会提供一种假象，就好像系统上只有这个程序在运行，程序看上去是独占地使用处理器、内存和IO设备，处理器看上去就像在不间断地执行程序中的指令，即该程序的代码和数据是系统内存中唯一的对象。这种假象是通过<font color="LightSeaGreen">进程</font>的概念来实现的</p><p>假设示例场景中只有两个并发的进程，<code>shell</code>进程和<code>hello</code>进程，最开始只有<code>shell</code>进程在运行，即<code>shell</code>在等待命令行的输入，当我们通过<code>shell</code>进程加载<code>hello</code>进程时，<code>shell</code>进程通过系统调用来执行我们的请求，系统调用会将控制权由<code>shell</code>进程传递给操作系统，操作系统保存<code>shell</code>进程的上下文<code>context</code>，然后创建一个新的<code>hello</code>进程以及上下文，然后将控制权转交给<code>hello</code>进程，<code>hello</code>进程执行完之后，操作系统就会恢复<code>shell</code>进程的上下文，并将控制权交给<code>shell</code>进程，之后<code>shell</code>进程继续等待下一个命令的输入</p><p><img src="https://github.com/kavinwkp/blogimage/raw/main/img/cs/1/1.2/Process.png" alt></p><blockquote><p>上下文：操作系统会跟踪进程运行中所需要的所有状态信息，这种状态就是上下文，例如当前<code>PC</code>和寄存器的值，以及内存中的内容等</p></blockquote><h3 id="1-2-2-虚拟内存"><a href="#1-2-2-虚拟内存" class="headerlink" title="1.2.2 虚拟内存"></a>1.2.2 虚拟内存</h3><p>虚拟内存为每个进程提供了一个假象，就是每个进程都在独自占用整个内存空间，称之为<font color="LightSeaGreen">虚拟内存空间</font></p><p><img src="https://github.com/kavinwkp/blogimage/raw/main/img/cs/1/1.2/space.png" alt></p><ol><li><p>从下往上，第一个区域是用来存放<font color="LightSeaGreen">程序运行的代码和数据</font>，这个区域的内容是从可执行目标文件中加载而来的，对于所有的进程，代码都是从固定的地址开始，全局变量就是放在这个区域</p></li><li><p>再往上是<font color="LightSeaGreen">堆</font>，程序中由<code>malloc</code>申请的空间就在这个区域，堆可以在运行时动态地扩展和收缩</p></li><li><p>接下来是<font color="LightSeaGreen">共享库</font>的存放区域，主要存放像C语言标准库和数学库这种共享库的代码和数据</p></li><li><p>继续往上是<font color="LightSeaGreen">用户栈</font>，栈的增长方向是从高地址到低地址</p></li><li><p>最顶部是为<font color="LightSeaGreen">内核</font>保留的区域，应用程序不能读写这个区域的数据，对应用程序是不可见的</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSAPP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1.1-hello程序</title>
      <link href="2021/11/20/CS-CSAPP-1-1-hello%E7%A8%8B%E5%BA%8F/"/>
      <url>2021/11/20/CS-CSAPP-1-1-hello%E7%A8%8B%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="1-1-hello程序"><a href="#1-1-hello程序" class="headerlink" title="1.1 hello程序"></a>1.1 hello程序</h2><h3 id="1-1-1-编译系统如何工作"><a href="#1-1-1-编译系统如何工作" class="headerlink" title="1.1.1 编译系统如何工作"></a>1.1.1 编译系统如何工作</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hello,world\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编写一个简单的<code>hello.c</code>程序，输出<code>hello,world</code><br>调用<code>gcc</code>即可对代码进行编译，生成可执行文件<code>hello</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gcc hello.c -o hello<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编译过程可以分为4个阶段:</p><blockquote><ol><li>预处理 <code>pre-processer</code></li><li>编译 <code>compiler</code></li><li>汇编 <code>assembler</code></li><li>链接 <code>linker</code></li></ol></blockquote><p><img src="https://github.com/kavinwkp/blogimage/raw/main/img/cs/1/gcc.png" alt></p><p>接下来逐个解释</p><ul><li>预处理</li></ul><p>预处理器会根据以<code>#</code>开头的代码，来修改原始程序，例如<code>hello</code>程序中引入头文件<code>stdio.h</code>，预处理器会读取该头文件中的内容，将其中的内容直接插入到源程序中，结果就得到了另外一个<code>c</code>程序，后缀为<code>.i</code>，所以<code>hello.c</code>经过预处理后得到<code>hello.i</code>，仍旧是一个文本文件</p><ul><li>编译</li></ul><p>编译器会将<code>hello.i</code>翻译成<code>hello.s</code>，包括词法分析、语法分析、语义分析、中间代码生成以及优化等一系列操作，具体可参见《编译原理》</p><ul><li>汇编</li></ul><p>汇编器根据指令集将汇编程序<code>hello.s</code>翻译成机器指令，并按照固定规则进行打包，得到<font color="LightSeaGreen">可重定位目标文件</font><code>hello.o</code>，是一个二进制文件，但是还不能执行</p><ul><li>链接</li></ul><p>程序中调用了<code>printf</code>函数，其在<code>printf.o</code>的文件中，这是一个提前编译好的目标文件，链接器负责把<code>hello.o</code>和<code>printf.o</code>进行合并，得到<font color="LightSeaGreen">可执行文件</font><code>hello</code>，此时<code>hello</code>就可以被加载到内存中执行了</p><p>此时<code>hello</code>已经存储在磁盘上，可以在终端中执行<code>hello</code><br><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./hellohello,world<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h3 id="1-1-2-计算机系统硬件组成"><a href="#1-1-2-计算机系统硬件组成" class="headerlink" title="1.1.2 计算机系统硬件组成"></a>1.1.2 计算机系统硬件组成</h3><p><img src="https://github.com/kavinwkp/blogimage/raw/main/img/cs/1/system.png" alt></p><h4 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h4><p>中央处理单元(Central Processing Unit，CPU)，也称处理器，<code>CPU</code>里面有一个<code>Program Count</code>，简称<code>PC</code>，实质上是一个大小为一个字(word)的存储区域，里面存放<font color="LightSeaGreen">某一条指令的地址</font>，电脑一上电，就开始执行<code>PC</code>指向的指令，然后更新<code>PC</code>，使其指向下一条要执行的指令</p><blockquote><ul><li>32位机器，一个字是4个字节，也就是32位 <code>1 word = 4 Byte</code></li><li>64位机器，一个字是8个字节，也就是64位 <code>1 word = 8 Byte</code></li></ul></blockquote><h4 id="寄存器文件"><a href="#寄存器文件" class="headerlink" title="寄存器文件"></a>寄存器文件</h4><p>寄存器就是<code>CPU</code>内部的一个<font color="LightSeaGreen">存储设备</font>，寄存器文件是由一些<font color="LightSeaGreen">单字长(1 word)</font>的寄存器构成，每个寄存器都有自己唯一的名字，可以理解为一个临时存放数据的空间</p><h4 id="ALU"><a href="#ALU" class="headerlink" title="ALU"></a>ALU</h4><p>算术逻辑单元(Arithmatic Logic Unit)，进行算术运算和逻辑运算</p><h4 id="主存"><a href="#主存" class="headerlink" title="主存"></a>主存</h4><p>也称为内存，处理器在处理数据时，主要存放程序指令及数据</p><blockquote><ul><li>从物理上讲，内存就是由一组<font color="LightSeaGreen">动态随机存取存储器</font><code>DRAM</code>芯片组成</li><li>从逻辑上讲，内存可以看成一个从零开始的大数组，每个字节<code>Byte</code>都有相应的地址</li></ul></blockquote><h4 id="总线"><a href="#总线" class="headerlink" title="总线"></a>总线</h4><p>贯穿整个系统的是一组电子管道，称作总线<br>内存和处理器之间通过总线来进行数据传递，通常总线被设计成传送固定字长的字节块，也就是字<code>word</code></p><h4 id="输入输出设备"><a href="#输入输出设备" class="headerlink" title="输入输出设备"></a>输入输出设备</h4><p>例如键盘、鼠标、显示器以及磁盘等，每一个输入输出设备都通过一个控制器或者适配器与<code>IO</code>总线相连</p>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSAPP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>16-最接近三数之和</title>
      <link href="2021/11/18/LeetCode-16-%E6%9C%80%E6%8E%A5%E8%BF%91%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
      <url>2021/11/18/LeetCode-16-%E6%9C%80%E6%8E%A5%E8%BF%91%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="16-3Sum-Closest"><a href="#16-3Sum-Closest" class="headerlink" title="16. 3Sum Closest"></a>16. 3Sum Closest</h2><p><a href="https://leetcode.com/problems/3sum-closest/">LeetCode-16</a></p><p>Given an integer array <code>nums</code> of length <code>n</code> and an integer <code>target</code>, find three integers in <code>nums</code> such that the sum is <strong>closest to target</strong>.</p><p>Return the <code>sum</code> of the three integers.</p><p>You may assume that each input would have exactly one solution.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token number">1</span>Output<span class="token operator">:</span> <span class="token number">2</span>Explanation<span class="token operator">:</span> The sum that is closest to the target is <span class="token number">2.</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></p><h3 id="method-三指针"><a href="#method-三指针" class="headerlink" title="method: 三指针"></a>method: 三指针</h3><p>不一定等于<code>target</code>，找最接近的</p><p>跟<a href="https://kavinwkp.github.io/2021/06/21/LeetCode-15-%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/">三数之和</a>一样的三个指针，如果三数和与<code>target</code>的差值比<code>diff</code>小，就更新<code>diff</code>，记录结果</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> diff <span class="token operator">=</span> INT_MAX<span class="token punctuation">;</span><span class="token keyword">int</span> res<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">threeSumClosest</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> l <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> r <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> sum <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">abs</span><span class="token punctuation">(</span>sum <span class="token operator">-</span> target<span class="token punctuation">)</span> <span class="token operator">&lt;</span> diff<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 差值更小就更新</span>                diff <span class="token operator">=</span> <span class="token function">abs</span><span class="token punctuation">(</span>sum <span class="token operator">-</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>                res <span class="token operator">=</span> sum<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">></span> target<span class="token punctuation">)</span> r<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> l<span class="token operator">++</span><span class="token punctuation">;</span>   <span class="token comment">// 不断缩小范围</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 双指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>120-三角形最小路径和</title>
      <link href="2021/11/06/LeetCode-120-%E4%B8%89%E8%A7%92%E5%BD%A2%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84%E5%92%8C/"/>
      <url>2021/11/06/LeetCode-120-%E4%B8%89%E8%A7%92%E5%BD%A2%E6%9C%80%E5%B0%8F%E8%B7%AF%E5%BE%84%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-120-Triangle"><a href="#LeetCode-120-Triangle" class="headerlink" title="LeetCode 120. Triangle"></a>LeetCode 120. Triangle</h2><p>Given a triangle array, return the <strong>minimum path sum</strong> from top to bottom.</p><p>For each step, you may move to an adjacent number of the row below. More formally, if you are on index i on the current row, you may move to either index i or index i + 1 on the next row.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> triangle <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token number">11</span>Explanation<span class="token operator">:</span> The triangle looks like<span class="token operator">:</span>   <span class="token number">2</span>  <span class="token number">3</span> <span class="token number">4</span> <span class="token number">6</span> <span class="token number">5</span> <span class="token number">7</span><span class="token number">4</span> <span class="token number">1</span> <span class="token number">8</span> <span class="token number">3</span>The minimum path sum from top to bottom is <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">11</span> <span class="token punctuation">(</span>underlined above<span class="token punctuation">)</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h3 id="method"><a href="#method" class="headerlink" title="method"></a>method</h3><p>除了最左边和最右边的元素，中间的元素都可以从左上角和上方过来，所以只要两者之间的较小值进行累加</p><p>递推方程：<code>dp[i][j] += min(dp[i-1][j-1], dp[i-1][j])</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">minimumTotal</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment">// 最左边</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> i<span class="token punctuation">)</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 最右边</span>            <span class="token keyword">else</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token function">min</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 中间</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> INT_MAX<span class="token punctuation">;</span>    <span class="token keyword">int</span> m <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> n <span class="token operator">=</span> nums<span class="token punctuation">[</span>m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        res <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> nums<span class="token punctuation">[</span>m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 找出最后一行的最小值</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>118-杨辉三角</title>
      <link href="2021/11/06/LeetCode-118-%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92/"/>
      <url>2021/11/06/LeetCode-118-%E6%9D%A8%E8%BE%89%E4%B8%89%E8%A7%92/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-118-Pascal’s-Triangle"><a href="#LeetCode-118-Pascal’s-Triangle" class="headerlink" title="LeetCode 118. Pascal’s Triangle"></a>LeetCode 118. Pascal’s Triangle</h2><p>Given an integer numRows, return the first numRows of <strong>Pascal’s triangle</strong>.</p><p>In <strong>Pascal’s triangle</strong>, each number is the sum of the two numbers directly above it as shown:</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> numRows <span class="token operator">=</span> <span class="token number">5</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h3 id="method"><a href="#method" class="headerlink" title="method"></a>method</h3><p>状态转换方程：<code>dp[i][j] = dp[i-1][j] + dp[i-1][j-1]</code><br>使用滚动数组，每次<code>i</code>循环都在<code>dp</code>后面插入一个<code>1</code>，第一个<code>1</code>和最后一个<code>1</code>不用处理<br>只要处理<code>dp</code>中间部分就可以了，注意要从后往前</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">generate</span><span class="token punctuation">(</span><span class="token keyword">int</span> numRows<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> res<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> dp<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numRows<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        dp<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// 从后往前处理</span>            dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="LeetCode-119-Pascal’s-Triangle-II"><a href="#LeetCode-119-Pascal’s-Triangle-II" class="headerlink" title="LeetCode 119. Pascal’s Triangle II"></a>LeetCode 119. Pascal’s Triangle II</h2><p>Given an integer rowIndex, return the rowIndexth (0-indexed) row of the Pascal’s triangle.</p><p>In Pascal’s triangle, each number is the sum of the two numbers directly above it as shown:</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> rowIndex <span class="token operator">=</span> <span class="token number">3</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h3 id="method-1"><a href="#method-1" class="headerlink" title="method"></a>method</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">getRow</span><span class="token punctuation">(</span><span class="token keyword">int</span> rowIndex<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> dp<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> rowIndex<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        dp<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> dp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>114-二叉树展开为链表</title>
      <link href="2021/11/05/LeetCode-114-%E4%BA%8C%E5%8F%89%E6%A0%91%E5%B1%95%E5%BC%80%E4%B8%BA%E9%93%BE%E8%A1%A8/"/>
      <url>2021/11/05/LeetCode-114-%E4%BA%8C%E5%8F%89%E6%A0%91%E5%B1%95%E5%BC%80%E4%B8%BA%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-114-Flatten-Binary-Tree-to-Linked-List"><a href="#LeetCode-114-Flatten-Binary-Tree-to-Linked-List" class="headerlink" title="LeetCode 114. Flatten Binary Tree to Linked List"></a>LeetCode 114. Flatten Binary Tree to Linked List</h2><p><a href="https://leetcode.com/problems/flatten-binary-tree-to-linked-list/">LeetCode-114</a></p><p>Given the <code>root</code> of a binary tree, flatten the tree into a <code>&quot;linked list&quot;</code>:</p><p>The “linked list” should use the same TreeNode class where the right child pointer points to the next node in the list and the left child pointer is always null.<br>The “linked list” should be in the same order as a pre-order traversal of the binary tree.</p><p>Example 1:</p><p><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/114/114-flaten.jpg" alt></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> root <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="method-递归"><a href="#method-递归" class="headerlink" title="method: 递归"></a>method: 递归</h3><p>左子树和右子树处理完之后，有4种情况</p><ul><li>无左子树，无右子树</li><li>无左子树，有右子树</li><li>有左子树，无右子树</li><li>有左子树，有右子树</li></ul><p>前2种可以直接返回不用处理，后2种需要处理</p><ol><li>先记录右子树</li><li>把左子树换到右子树</li><li>找到右子树的插入位置</li></ol><p><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/114/114.png" alt></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">flatten</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token comment">// 空节点直接返回</span>    <span class="token function">flatten</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">flatten</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 运行到这里，说明该节点的左子树和右子树已经处理好了</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token operator">-></span>left<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token comment">// 左子树为空，就不用处理了，直接返回</span>    TreeNode <span class="token operator">*</span>tmp <span class="token operator">=</span> root<span class="token operator">-></span>right<span class="token punctuation">;</span>    <span class="token comment">// 记录右子树</span>    root<span class="token operator">-></span>right <span class="token operator">=</span> root<span class="token operator">-></span>left<span class="token punctuation">;</span>       <span class="token comment">// 左子树换到右边</span>    root<span class="token operator">-></span>left <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>           <span class="token comment">// 断开左指针</span>    TreeNode <span class="token operator">*</span>cur <span class="token operator">=</span> root<span class="token operator">-></span>right<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>cur<span class="token operator">-></span>right<span class="token punctuation">)</span> cur <span class="token operator">=</span> cur<span class="token operator">-></span>right<span class="token punctuation">;</span>    <span class="token comment">// 找到可以插入的位置</span>    cur<span class="token operator">-></span>right <span class="token operator">=</span> tmp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h3><p>先处理右子树，再处理左子树，这样<code>pre</code>就一直指向需要被移过去的最高节点，然后让左子树指向<code>pre</code>就可以了</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">TreeNode <span class="token operator">*</span>pre <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">flatten</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token function">flatten</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 先处理右子树</span>    <span class="token function">flatten</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    root<span class="token operator">-></span>right <span class="token operator">=</span> pre<span class="token punctuation">;</span>    root<span class="token operator">-></span>left <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>    pre <span class="token operator">=</span> root<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>96-不同的二叉搜索树</title>
      <link href="2021/11/04/LeetCode-96-%E4%B8%8D%E5%90%8C%E7%9A%84%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/"/>
      <url>2021/11/04/LeetCode-96-%E4%B8%8D%E5%90%8C%E7%9A%84%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-96-Unique-Binary-Search-Trees"><a href="#LeetCode-96-Unique-Binary-Search-Trees" class="headerlink" title="LeetCode 96. Unique Binary Search Trees"></a>LeetCode 96. Unique Binary Search Trees</h2><p>Given an integer <code>n</code>, return the number of structurally unique BST’s (binary search trees) which has exactly <code>n</code> nodes of unique values from <code>1</code> to <code>n</code>.</p><p>Example 1:<br><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/96/uniquebstn3.jpg" alt><br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> n <span class="token operator">=</span> <span class="token number">3</span>Output<span class="token operator">:</span> <span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h3 id="method"><a href="#method" class="headerlink" title="method"></a>method</h3><p>对于一棵<code>i</code>个节点的搜索树，用<code>j</code>遍历每个可能的根节点，也就是<code>1</code>到<code>i</code>，当以j为根节点时，左子树有j-1个节点，对应<code>dp[j-1]</code>种搜索树，右子树有<code>i-j</code>个节点，对应<code>dp[i-j]</code>中搜索树，所以状态转移方程是<code>dp[i] = dp[j-1]*dp[i-j]</code>，同时要累计<code>dp[i]</code></p><p>空节点也是一棵树，所以初始化<code>dp[0] = 1</code>，后面用到乘法，也必须是1</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">numTrees</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">dp</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>343-整数分解</title>
      <link href="2021/11/04/LeetCode-343-%E6%95%B4%E6%95%B0%E5%88%86%E8%A7%A3/"/>
      <url>2021/11/04/LeetCode-343-%E6%95%B4%E6%95%B0%E5%88%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-343-Integer-Break"><a href="#LeetCode-343-Integer-Break" class="headerlink" title="LeetCode 343. Integer Break"></a>LeetCode 343. Integer Break</h2><p>Given an integer <code>n</code>, break it into the sum of k positive integers, where <code>k &gt;= 2</code>, and maximize the product of those integers.</p><p>Return the maximum product you can get.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> n <span class="token operator">=</span> <span class="token number">2</span>Output<span class="token operator">:</span> <span class="token number">1</span>Explanation<span class="token operator">:</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span> × <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">1.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br>Example 2:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> n <span class="token operator">=</span> <span class="token number">10</span>Output<span class="token operator">:</span> <span class="token number">36</span>Explanation<span class="token operator">:</span> <span class="token number">10</span> <span class="token operator">=</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span> × <span class="token number">3</span> × <span class="token number">4</span> <span class="token operator">=</span> <span class="token number">36.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></p><h3 id="method"><a href="#method" class="headerlink" title="method"></a>method</h3><p>整数拆解，要求拆解出来的数的乘积最大</p><blockquote><ul><li><code>dp[i]</code>表示i的拆解最大乘积</li><li>对于一个数i，可以从1开始拆解，直到i-1</li><li>算一下直接相乘的<code>j * (i-j)</code>大，还是需要继续分解<code>j * dp[i-j]</code></li></ul></blockquote><p>状态转移方程：<code>dp[i] = max(j * (i-j), j * dp[i-j])</code><br>因为在<code>j</code>遍历的过程中，需要更新<code>dp[i]</code>的最大值，所以还需要一个<code>max</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">integerBreak</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">dp</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// 初始化</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">max</span><span class="token punctuation">(</span>j <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> j<span class="token punctuation">)</span><span class="token punctuation">,</span> j <span class="token operator">*</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>62/63-不同路径</title>
      <link href="2021/11/04/LeetCode-62-%E4%B8%8D%E5%90%8C%E8%B7%AF%E5%BE%84/"/>
      <url>2021/11/04/LeetCode-62-%E4%B8%8D%E5%90%8C%E8%B7%AF%E5%BE%84/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-62-Unique-Paths"><a href="#LeetCode-62-Unique-Paths" class="headerlink" title="LeetCode 62. Unique Paths"></a>LeetCode 62. Unique Paths</h2><p>A robot is located at the top-left corner of a <code>m x n</code> grid (marked ‘Start’ in the diagram below).</p><p>The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked ‘Finish’ in the diagram below).</p><p>How many possible unique paths are there?</p><p>Example 1:</p><p><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/62/62.png" alt></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> m <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token number">7</span>Output<span class="token operator">:</span> <span class="token number">28</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="method-动态规划"><a href="#method-动态规划" class="headerlink" title="method: 动态规划"></a>method: 动态规划</h3><p>当前位置只能从左边或上边过来</p><p>注意初始化：第一行和第一列都是1</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">uniquePaths</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">dp</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 干脆全部初始化为1</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h3><p>因为只跟上一行有关，所以只需要两行就可以了</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">uniquePaths</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">pre</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cur</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            cur<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> cur<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> pre<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">swap</span><span class="token punctuation">(</span>cur<span class="token punctuation">,</span> pre<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> pre<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="再改进"><a href="#再改进" class="headerlink" title="再改进"></a>再改进</h3><p>只需要一行就够了，在下一次<code>i</code>循环<code>cur</code>就变成<code>pre</code>了</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">uniquePaths</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">dp</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="LeetCode-63-Unique-Paths-II"><a href="#LeetCode-63-Unique-Paths-II" class="headerlink" title="LeetCode 63. Unique Paths II"></a>LeetCode 63. Unique Paths II</h2><p>A robot is located at the top-left corner of a <code>m x n</code> grid (marked ‘Start’ in the diagram below).</p><p>The robot can only move either down or right at any point in time. The robot is trying to reach the bottom-right corner of the grid (marked ‘Finish’ in the diagram below).</p><p>Now consider if some obstacles are added to the grids. How many unique paths would there be?</p><p>An obstacle and space is marked as <code>1</code> and <code>0</code> respectively in the grid.</p><p>Example 1:</p><p><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/63/robot1.jpg" alt></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> obstacleGrid <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token number">2</span>Explanation<span class="token operator">:</span> There is one obstacle in the middle of the <span class="token number">3</span>x3 grid above<span class="token punctuation">.</span>There are two ways to reach the bottom<span class="token operator">-</span>right corner<span class="token operator">:</span><span class="token number">1.</span> Right <span class="token operator">-></span> Right <span class="token operator">-></span> Down <span class="token operator">-></span> Down<span class="token number">2.</span> Down <span class="token operator">-></span> Down <span class="token operator">-></span> Right <span class="token operator">-></span> Right<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="method"><a href="#method" class="headerlink" title="method"></a>method</h3><p>初始化问题：对于第一行和第一列，如果出现障碍，就不能再继续赋值了，因为已经过不去了</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">uniquePathsWithObstacles</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> map<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> m <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> n <span class="token operator">=</span> map<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">dp</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m <span class="token operator">&amp;&amp;</span> map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment">// 出现障碍就退出</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n <span class="token operator">&amp;&amp;</span> map<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>    <span class="token comment">// 障碍dp保持0</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>70-爬楼梯</title>
      <link href="2021/11/04/LeetCode-70-%E7%88%AC%E6%A5%BC%E6%A2%AF/"/>
      <url>2021/11/04/LeetCode-70-%E7%88%AC%E6%A5%BC%E6%A2%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-70-Climbing-Stairs"><a href="#LeetCode-70-Climbing-Stairs" class="headerlink" title="LeetCode 70. Climbing Stairs"></a>LeetCode 70. Climbing Stairs</h2><p>You are climbing a staircase. It takes <code>n</code> steps to reach the top.</p><p>Each time you can either climb <code>1</code> or <code>2</code> steps. In how many distinct ways can you climb to the top?</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> n <span class="token operator">=</span> <span class="token number">2</span>Output<span class="token operator">:</span> <span class="token number">2</span>Explanation<span class="token operator">:</span> There are two ways to climb to the top<span class="token punctuation">.</span><span class="token number">1.</span> <span class="token number">1</span> step <span class="token operator">+</span> <span class="token number">1</span> step<span class="token number">2.</span> <span class="token number">2</span> steps<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h3 id="method"><a href="#method" class="headerlink" title="method"></a>method</h3><p>当前阶可以从<code>i-1</code>阶跳一格过来，也可以从<code>i-2</code>阶跳两格过来</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">climbStairs</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> n<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">dp</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以状态压缩为2个变量</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">climbStairs</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> n<span class="token punctuation">;</span>    <span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> sum<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="改成每次可以跳m阶"><a href="#改成每次可以跳m阶" class="headerlink" title="改成每次可以跳m阶"></a>改成每次可以跳m阶</h3><p>就成了完全背包问题<br>每次可以装1件、装2件、…、装m件<br>类比为每次可以跳1阶、跳2阶、…、跳m阶</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span>m<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><font color="LightSeaGreen">求排列数</font>，所以先遍历背包，再遍历物品</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">climbStairs</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">dp</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> j<span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="LeetCode-746-Min-Cost-Climbing-Stairs"><a href="#LeetCode-746-Min-Cost-Climbing-Stairs" class="headerlink" title="LeetCode 746. Min Cost Climbing Stairs"></a>LeetCode 746. Min Cost Climbing Stairs</h2><p>You are given an integer array cost where <code>cost[i]</code> is the cost of ith step on a staircase. Once you pay the cost, you can either climb one or two steps.</p><p>You can either start from the step with index 0, or the step with index 1.</p><p>Return the minimum cost to reach the top of the floor.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> cost <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token number">15</span>Explanation<span class="token operator">:</span> You will start at index <span class="token number">1.</span><span class="token operator">-</span> Pay <span class="token number">15</span> <span class="token operator">and</span> climb two steps to reach the top<span class="token punctuation">.</span>The total cost is <span class="token number">15.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h4 id="method-1"><a href="#method-1" class="headerlink" title="method"></a>method</h4><p>要跳到第<code>i</code>个台阶上需要花费<code>cost[i]</code>，每次可以跳一级或两级，所以状态转移方程为<code>dp[i] = min(dp[i-1],dp[i-2]) + cost[i]</code></p><p>最后一级可以选择从倒数第一级或倒数第二级跳过来</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">minCostClimbingStairs</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> cost<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">dp</span><span class="token punctuation">(</span>cost<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> cost<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> cost<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> dp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>dp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>dp<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>状态压缩</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">    <span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> cost<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> cost<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cost<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> cost<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>138-复制带随机指针的链表</title>
      <link href="2021/11/02/LeetCode-138-%E5%A4%8D%E5%88%B6%E5%B8%A6%E9%9A%8F%E6%9C%BA%E6%8C%87%E9%92%88%E7%9A%84%E9%93%BE%E8%A1%A8/"/>
      <url>2021/11/02/LeetCode-138-%E5%A4%8D%E5%88%B6%E5%B8%A6%E9%9A%8F%E6%9C%BA%E6%8C%87%E9%92%88%E7%9A%84%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-138-Copy-List-with-Random-Pointer"><a href="#LeetCode-138-Copy-List-with-Random-Pointer" class="headerlink" title="LeetCode 138. Copy List with Random Pointer"></a>LeetCode 138. Copy List with Random Pointer</h2><p><a href="https://leetcode.com/problems/copy-list-with-random-pointer/">LeetCode-138</a></p><p>A linked list of length <code>n</code> is given such that each node contains an additional random pointer, which could point to any node in the list, or null.</p><p>Construct a <strong>deep copy</strong> of the list. The deep copy should consist of exactly n brand new nodes, where each new node has its value set to the value of its corresponding original node. Both the next and random pointer of the new nodes should point to new nodes in the copied list such that the pointers in the original list and copied list represent the same list state. <strong>None of the pointers in the new list should point to nodes in the original list.</strong></p><p>Return <em>the head of the copied linked list.</em></p><p>The linked list is represented in the input/output as a list of n nodes. Each node is represented as a pair of <code>[val, random_index]</code> where:</p><p><code>val</code>: an integer representing <code>Node.val</code><br><code>random_index</code>: the index of the node (range from <code>0</code> to <code>n-1</code>) that the <code>random</code> pointer points to, or <code>null</code> if it does not point to any node.</p><p>Your code will <strong>only</strong> be given the head of the original linked list.</p><p>Example 1:</p><p><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/138/138_1.png" alt><br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> head <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span>null<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span>null<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h3 id="method-哈希表"><a href="#method-哈希表" class="headerlink" title="method: 哈希表"></a>method: 哈希表</h3><p>第一次遍历只生成节点，用哈希表记录原节点和新节点的对应关系</p><p>然后就可以用<code>hash[cur-&gt;next]</code>获取原节点的next在新节点中的位置，以及用<code>hash[cur]-&gt;next</code>对当前的新节点的指针赋值</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Node<span class="token operator">*</span> <span class="token function">copyRandomList</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>head<span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>    unordered_map<span class="token operator">&lt;</span>Node<span class="token operator">*</span><span class="token punctuation">,</span> Node<span class="token operator">*</span><span class="token operator">></span> hash<span class="token punctuation">;</span>    Node <span class="token operator">*</span>cur <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>cur<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// 第一次遍历只生成节点</span>        Node <span class="token operator">*</span>tmp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Node</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        hash<span class="token punctuation">[</span>cur<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>        cur <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cur <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>cur<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// 第二次遍历对指针赋值</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token operator">-></span>next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            hash<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token operator">-></span>next <span class="token operator">=</span> hash<span class="token punctuation">[</span>cur<span class="token operator">-></span>next<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token operator">-></span>random<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            hash<span class="token punctuation">[</span>cur<span class="token punctuation">]</span><span class="token operator">-></span>random <span class="token operator">=</span> hash<span class="token punctuation">[</span>cur<span class="token operator">-></span>random<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        cur <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> hash<span class="token punctuation">[</span>head<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 哈希表 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>116/117-填充右侧指针</title>
      <link href="2021/11/02/LeetCode-116-%E5%A1%AB%E5%85%85%E5%8F%B3%E4%BE%A7%E6%8C%87%E9%92%88/"/>
      <url>2021/11/02/LeetCode-116-%E5%A1%AB%E5%85%85%E5%8F%B3%E4%BE%A7%E6%8C%87%E9%92%88/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-116-Populating-Next-Right-Pointers-in-Each-Node"><a href="#LeetCode-116-Populating-Next-Right-Pointers-in-Each-Node" class="headerlink" title="LeetCode 116. Populating Next Right Pointers in Each Node"></a>LeetCode 116. Populating Next Right Pointers in Each Node</h2><p>You are given a <strong>perfect binary tree</strong> where all leaves are on the same level, and every parent has two children. The binary tree has the following definition:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> val<span class="token punctuation">;</span>  Node <span class="token operator">*</span>left<span class="token punctuation">;</span>  Node <span class="token operator">*</span>right<span class="token punctuation">;</span>  Node <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Populate each next pointer to point to its next right node.</strong> If there is no next right node, the next pointer should be set to <code>NULL</code>.</p><p>Initially, all next pointers are set to <code>NULL</code>.</p><p>Example 1:</p><p><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/116/116_sample.png" alt></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> root <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span>#<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>#<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span>#<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Explanation: Given the above perfect binary tree (Figure A), your function should populate each next pointer to point to its next right node, just like in Figure B. The serialized output is in level order as connected by the next pointers, with <code>&#39;#&#39;</code> signifying the end of each level.</p><h3 id="method-层序遍历"><a href="#method-层序遍历" class="headerlink" title="method: 层序遍历"></a>method: 层序遍历</h3><p>当前节点弹出后，队列里的头结点就是同一层的下一个节点<br>每一层的最后一个节点不需要处理<code>next</code>指针</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Node<span class="token operator">*</span> <span class="token function">connect</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token punctuation">;</span>    queue<span class="token operator">&lt;</span>Node<span class="token operator">*</span><span class="token operator">></span> q<span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> size <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            Node <span class="token operator">*</span>cur <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> cur<span class="token operator">-></span>next <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 非最后一个节点</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token operator">-></span>left<span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token operator">-></span>right<span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="LeetCode-117-Populating-Next-Right-Pointers-in-Each-Node-II"><a href="#LeetCode-117-Populating-Next-Right-Pointers-in-Each-Node-II" class="headerlink" title="LeetCode 117. Populating Next Right Pointers in Each Node II"></a>LeetCode 117. Populating Next Right Pointers in Each Node II</h2><p>Given a <code>binary tree</code>(不是完美二叉树)<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">Node</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> val<span class="token punctuation">;</span>  Node <span class="token operator">*</span>left<span class="token punctuation">;</span>  Node <span class="token operator">*</span>right<span class="token punctuation">;</span>  Node <span class="token operator">*</span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>Populate each next pointer to point to its next right node. If there is no next right node, the next pointer should be set to <code>NULL</code>.</p><p>Initially, all next pointers are set to <code>NULL</code>.</p><p>Example 1:</p><p><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/116/117_sample.png" alt></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> root <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span>#<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>#<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span>#<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="method"><a href="#method" class="headerlink" title="method"></a>method</h2><p>跟116代码完全一样，区别在于不是完美二叉树，但还是可以用层序遍历解决</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Node<span class="token operator">*</span> <span class="token function">connect</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token punctuation">;</span>    queue<span class="token operator">&lt;</span>Node<span class="token operator">*</span><span class="token operator">></span> q<span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> size <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            Node <span class="token operator">*</span>cur <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> cur<span class="token operator">-></span>next <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 非最后一个节点</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token operator">-></span>left<span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token operator">-></span>right<span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>75-颜色分类</title>
      <link href="2021/10/26/LeetCode-75-%E9%A2%9C%E8%89%B2%E5%88%86%E7%B1%BB/"/>
      <url>2021/10/26/LeetCode-75-%E9%A2%9C%E8%89%B2%E5%88%86%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-75-Sort-Colors"><a href="#LeetCode-75-Sort-Colors" class="headerlink" title="LeetCode 75. Sort Colors"></a>LeetCode 75. Sort Colors</h2><p><a href="https://leetcode.com/problems/sort-colors/">LeetCode-75</a></p><p>Given an array nums with <code>n</code> objects colored <code>red, white, or blue</code>, sort them <strong>in-place</strong> so that objects of the same color are adjacent, with the colors in the order <code>red, white, and blue</code>.</p><p>We will use the integers <code>0, 1, and 2</code> to represent the color red, white, and blue, respectively.</p><p>You must solve this problem without using the library’s sort function.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h2 id="method"><a href="#method" class="headerlink" title="method"></a>method</h2><p>让<code>zero, one, two</code>分别为<code>0,1,2</code>的末尾指针，遍历数组</p><ul><li>如果是0，则<code>zero++, one++, two++</code></li><li>如果是1，则<code>one++, two++</code></li><li>如果是2，则<code>two++</code></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">sortColors</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> zero <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> one <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> two <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            nums<span class="token punctuation">[</span><span class="token operator">++</span>two<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>            nums<span class="token punctuation">[</span><span class="token operator">++</span>one<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            nums<span class="token punctuation">[</span><span class="token operator">++</span>zero<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            nums<span class="token punctuation">[</span><span class="token operator">++</span>two<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>            nums<span class="token punctuation">[</span><span class="token operator">++</span>one<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            nums<span class="token punctuation">[</span><span class="token operator">++</span>two<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>two/one/zero</code>指针移动的先后顺序不能修改，例如一开始的时候来个<code>0</code>，那如果<code>zero</code>先移动赋值，后面就会被<code>one</code>和<code>two</code>覆盖了</p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模拟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>14.7-成员访问运算符</title>
      <link href="2021/10/26/C-Primer-14-7-%E6%88%90%E5%91%98%E8%AE%BF%E9%97%AE%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
      <url>2021/10/26/C-Primer-14-7-%E6%88%90%E5%91%98%E8%AE%BF%E9%97%AE%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h2 id="14-7-成员访问运算符"><a href="#14-7-成员访问运算符" class="headerlink" title="14.7 成员访问运算符"></a>14.7 成员访问运算符</h2><p>添加解引用运算符<code>*</code>和箭头运算符<code>-&gt;</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">StrBlobPtr</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    string<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">auto</span> p <span class="token operator">=</span> <span class="token function">check</span><span class="token punctuation">(</span>curr<span class="token punctuation">,</span> <span class="token string">"dereference past end"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">[</span>curr<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// (*p)是对象所指的vector</span>    <span class="token punctuation">&#125;</span>    string<span class="token operator">*</span> <span class="token keyword">operator</span><span class="token operator">-></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token operator">&amp;</span><span class="token keyword">this</span><span class="token operator">-></span><span class="token keyword">operator</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>箭头运算符必须是<font color="LightSeaGreen">类的成员</font>，解引用运算符通常也是<font color="LightSeaGreen">类的成员</font></p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">StrBlob a1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"hi"</span><span class="token punctuation">,</span> <span class="token string">"bye"</span><span class="token punctuation">,</span> <span class="token string">"now"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>strBlobPtr <span class="token function">p</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// p指向a1中的vector</span><span class="token operator">*</span>p <span class="token operator">=</span> <span class="token string">"okay"</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> p<span class="token operator">-></span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>      <span class="token comment">// 4</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment">// 4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="对箭头运算符返回值的限定"><a href="#对箭头运算符返回值的限定" class="headerlink" title="对箭头运算符返回值的限定"></a>对箭头运算符返回值的限定</h4><p>对于<code>point-&gt;mem</code>有两种情况</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">(</span><span class="token operator">*</span>point<span class="token punctuation">)</span><span class="token punctuation">.</span>mem<span class="token punctuation">;</span>point<span class="token punctuation">.</span><span class="token keyword">operator</span><span class="token operator">-></span>mem<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol><li>如果<code>point</code>是指针，等价于<code>(*point).mem</code>，先解引用，再访问成员</li><li>如果是定义了<code>operator-&gt;</code>的类对象，则使用<code>point.operator-&gt;()</code>的结果获取<code>mem</code>，如果该结果是一个指针，则执行第1步；如果该结果本身含有重载的<code>operator-&gt;()</code>，则重复调用当前步骤</li></ol><blockquote><p>重载的箭头运算符必须返回类的指针或者自定义了箭头运算符的某个类的对象</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++Primer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>14.4/14.5/14.6-赋值/下标/递增和递减运算符</title>
      <link href="2021/10/26/C-Primer-14-4-%E8%B5%8B%E5%80%BC%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
      <url>2021/10/26/C-Primer-14-4-%E8%B5%8B%E5%80%BC%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h2 id="14-4-赋值运算符"><a href="#14-4-赋值运算符" class="headerlink" title="14.4 赋值运算符"></a>14.4 赋值运算符</h2><p>赋值运算符必须定义为<font color="LightSeaGreen">成员函数</font>，返回左侧运算对象的引用</p><h4 id="复合赋值运算符"><a href="#复合赋值运算符" class="headerlink" title="复合赋值运算符"></a>复合赋值运算符</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Sales_data<span class="token operator">&amp;</span> Sales_data<span class="token operator">::</span><span class="token keyword">operator</span><span class="token operator">+=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Sales_data<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    units_sold <span class="token operator">+=</span> rhs<span class="token punctuation">.</span>units_sold<span class="token punctuation">;</span>    revenue <span class="token operator">+=</span> rhs<span class="token punctuation">.</span>revenue<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="14-5-下标运算符"><a href="#14-5-下标运算符" class="headerlink" title="14.5 下标运算符"></a>14.5 下标运算符</h2><p>表示容器的类一般会定义下标运算符<code>operator[]</code></p><blockquote><p>下标运算符必须是<font color="LightSeaGreen">成员函数</font>，通常定义两个版本：一个返回普通引用，另一个是类的常量成员并且返回常量引用</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">StrVec</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    string<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>size_t n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> elements<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">const</span> string<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>size_t n<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> elements<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">private</span><span class="token operator">:</span>    string <span class="token operator">*</span>element<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对常量对象取下标时，不能为其赋值</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> StrVec cvec <span class="token operator">=</span> svec<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>svec<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> svec<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    svec<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"zero"</span><span class="token punctuation">;</span>   <span class="token comment">// 正确</span>    cvec<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Zip"</span><span class="token punctuation">;</span>    <span class="token comment">// Err</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="14-6-递增和递减运算符"><a href="#14-6-递增和递减运算符" class="headerlink" title="14.6 递增和递减运算符"></a>14.6 递增和递减运算符</h2><h4 id="定义前置递增-递减运算符"><a href="#定义前置递增-递减运算符" class="headerlink" title="定义前置递增/递减运算符"></a>定义前置递增/递减运算符</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">StrBlobPtr</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    StrBlobPtr<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    StrBlobPtr<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">--</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>前置运算符应该返回递增或递减后对象的引用</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">StrBlobPtr<span class="token operator">&amp;</span> StrBlobPtr<span class="token operator">::</span><span class="token keyword">operator</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">check</span><span class="token punctuation">(</span>curr<span class="token punctuation">,</span> <span class="token string">"increment past end of StrBlobPtr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">++</span>curr<span class="token punctuation">;</span>     <span class="token comment">// 将curr在当前状态下向后移动一个元素</span>    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>StrBlobPtr<span class="token operator">&amp;</span> StrBlobPtr<span class="token operator">::</span><span class="token keyword">operator</span><span class="token operator">--</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 如果curr是0，则继续递减将产生一个无效的下标</span>    <span class="token operator">--</span>curr<span class="token punctuation">;</span>     <span class="token comment">// 将curr在当前状态下向前移动一个元素</span>    <span class="token function">check</span><span class="token punctuation">(</span>curr<span class="token punctuation">,</span> <span class="token string">"decrement past begin of StrBlobPtr"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="区分前置和后置运算符"><a href="#区分前置和后置运算符" class="headerlink" title="区分前置和后置运算符"></a>区分前置和后置运算符</h4><p>后置版本接受一个额外的<code>int</code>类型的形参，唯一作用是区分前置版本和后置版本</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">StrBlobPtr</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    StrBlobPtr <span class="token keyword">operator</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    StrBlobPtr <span class="token keyword">operator</span><span class="token operator">--</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>后置运算符应该返回对象的原值（递增或递减之前的值），返回的是一个值而非引用</p></blockquote><p>要先记录对象的状态</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">StrBlobPtr StrBlobPtr<span class="token operator">::</span><span class="token keyword">operator</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    StrBlobPtr ret <span class="token operator">=</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span> <span class="token comment">// 记录当前的值</span>    <span class="token operator">++</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token comment">// 调用前置运算符</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span> <span class="token comment">// 返回保存的副本</span><span class="token punctuation">&#125;</span>StrBlobPtr StrBlobPtr<span class="token operator">::</span><span class="token keyword">operator</span><span class="token operator">--</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    StrBlobPtr ret <span class="token operator">=</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token operator">--</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="显式地调用后置运算符"><a href="#显式地调用后置运算符" class="headerlink" title="显式地调用后置运算符"></a>显式地调用后置运算符</h4><p>需要传个参数给<code>int</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">StrBlobPtr <span class="token function">p</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span>p<span class="token punctuation">.</span><span class="token keyword">operator</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 调用后置版本</span>p<span class="token punctuation">.</span><span class="token keyword">operator</span><span class="token operator">++</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 调用前置版本</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++Primer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>14.3-算术和关系运算符</title>
      <link href="2021/10/26/C-Primer-14-3-%E7%AE%97%E6%9C%AF%E5%92%8C%E5%85%B3%E7%B3%BB%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
      <url>2021/10/26/C-Primer-14-3-%E7%AE%97%E6%9C%AF%E5%92%8C%E5%85%B3%E7%B3%BB%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h2 id="14-3-算术和关系运算符"><a href="#14-3-算术和关系运算符" class="headerlink" title="14.3 算术和关系运算符"></a>14.3 算术和关系运算符</h2><p>算术和关系运算符一般定义为<font color="LightSeaGreen">非成员函数</font></p><p>算术运算符会计算两个运算对象并得到一个新值，新值通常是一个局部变量，然后返回局部变量的副本</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Sales_data<span class="token keyword">operator</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token keyword">const</span> Sales_data<span class="token operator">&amp;</span> lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> Sales_data<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Sales_data sum <span class="token operator">=</span> lhs<span class="token punctuation">;</span>    sum <span class="token operator">+=</span> rhs<span class="token punctuation">;</span>     <span class="token comment">// 使用复合赋值</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="14-3-1-相等运算符"><a href="#14-3-1-相等运算符" class="headerlink" title="14.3.1 相等运算符"></a>14.3.1 相等运算符</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">==</span><span class="token punctuation">(</span><span class="token keyword">const</span> Sales_data<span class="token operator">&amp;</span> lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> Sales_data<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> lhs<span class="token punctuation">.</span><span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> rhs<span class="token punctuation">.</span><span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> lhs<span class="token punctuation">.</span>units_sold <span class="token operator">==</span> rhs<span class="token punctuation">.</span>units_sold <span class="token operator">&amp;&amp;</span> lhs<span class="token punctuation">.</span>revenue <span class="token operator">==</span> rhs<span class="token punctuation">.</span>revenue<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token operator">!=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Sales_data<span class="token operator">&amp;</span> lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> Sales_data<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token operator">!</span><span class="token punctuation">(</span>lhs <span class="token operator">==</span> rhs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="14-3-2-关系运算符"><a href="#14-3-2-关系运算符" class="headerlink" title="14.3.2 关系运算符"></a>14.3.2 关系运算符</h3><p>通常情况下，关系运算符应该</p><blockquote><ul><li>定义顺序关系</li><li>如果类同时也含有相等运算符，则关系运算符应该与其保持一致</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++Primer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>14.2-输入和输出运算符</title>
      <link href="2021/10/26/C-Primer-14-2-%E8%BE%93%E5%85%A5%E5%92%8C%E8%BE%93%E5%87%BA%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
      <url>2021/10/26/C-Primer-14-2-%E8%BE%93%E5%85%A5%E5%92%8C%E8%BE%93%E5%87%BA%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h2 id="14-2-输入和输出运算符"><a href="#14-2-输入和输出运算符" class="headerlink" title="14.2 输入和输出运算符"></a>14.2 输入和输出运算符</h2><p>类需要自定义<code>IO</code>操作的<code>&gt;&gt;</code>输入和<code>&lt;&lt;</code>输出运算符</p><h3 id="14-2-1-重载输出运算符"><a href="#14-2-1-重载输出运算符" class="headerlink" title="14.2.1 重载输出运算符"></a>14.2.1 重载输出运算符</h3><blockquote><ul><li>第一个参数是非常量的<code>ostream</code>对象的引用</li><li>第二个参数是常量的类类型的引用</li></ul></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">ostream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>ostream<span class="token operator">&amp;</span> os<span class="token punctuation">,</span> <span class="token keyword">const</span> Sales_data<span class="token operator">&amp;</span> item<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    os <span class="token operator">&lt;&lt;</span> item<span class="token punctuation">.</span><span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> item<span class="token punctuation">.</span>units_sold <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> item<span class="token punctuation">.</span>revenue <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> item<span class="token punctuation">.</span><span class="token function">avg_price</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> os<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>通常，输出运算符不应该打印换行符</p></blockquote><div class="uk-alert uk-alert-success"><i class="fa fa-check-circle"></i> 输入输出运算符必须是非成员函数</div><p><code>IO</code>运算符通常需要读写类的非公有数据成员，所以一般声明为友元</p><h3 id="14-2-2-重载输入运算符"><a href="#14-2-2-重载输入运算符" class="headerlink" title="14.2.2 重载输入运算符"></a>14.2.2 重载输入运算符</h3><blockquote><ul><li>第一个形参是将要读取的流的引用</li><li>第二个形参数将要读入到的非常量对象的引用</li></ul></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">istream<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">>></span><span class="token punctuation">(</span>istream<span class="token operator">&amp;</span> is<span class="token punctuation">,</span> Sales_data<span class="token operator">&amp;</span> item<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">double</span> price<span class="token punctuation">;</span>    is <span class="token operator">>></span> item<span class="token punctuation">.</span>bookNo <span class="token operator">>></span> item<span class="token punctuation">.</span>units_sold <span class="token operator">>></span> price<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>is<span class="token punctuation">)</span>     <span class="token comment">// 检查输入是都成功</span>        item<span class="token punctuation">.</span>revenue <span class="token operator">=</span> item<span class="token punctuation">.</span>units_sold <span class="token operator">*</span> price<span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token comment">// 输入失败，赋予默认状态</span>        item <span class="token operator">=</span> <span class="token function">Sales_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> is<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ul><li>输入运算符必须处理输入可能失败的情况，而输出运算符不需要</li><li>当读取操作发生错误时，输入运算符应该从错误中恢复</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++Primer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>14.1-基本概念</title>
      <link href="2021/10/26/C-Primer-14-1-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
      <url>2021/10/26/C-Primer-14-1-%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<h2 id="14-1-基本概念"><a href="#14-1-基本概念" class="headerlink" title="14.1 基本概念"></a>14.1 基本概念</h2><blockquote><p>当一个重载的运算符是成员函数时，<code>this</code>绑定到左侧运算对象，成员运算符函数的参数数量比运算对象的数量少一个</p></blockquote><p>不能被重载的运算符：<code>::</code>、<code>.*</code>、<code>.</code>、<code>?:</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">data1 <span class="token operator">+</span> data2<span class="token punctuation">;</span>  <span class="token comment">// 普通的表达式</span><span class="token keyword">operator</span><span class="token operator">+</span><span class="token punctuation">(</span>data1<span class="token punctuation">,</span> data2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 等价的函数调用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">data1 <span class="token operator">+</span> daata2<span class="token punctuation">;</span>     <span class="token comment">// 基于调用的表达式</span>data1<span class="token punctuation">.</span><span class="token keyword">operator</span><span class="token operator">+=</span><span class="token punctuation">(</span>data2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 对成员运算符函数的等价调用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>逻辑与<code>&amp;&amp;</code>和逻辑或<code>||</code>运算符的重载版本也无法保留内置运算符的短路求值属性，两个运算对象总是会被求值。所以不建议重载</p><blockquote><p>通常不应该重载逗号、取地址、逻辑与和逻辑或运算符</p></blockquote><p>应该定义为成员函数：</p><blockquote><ul><li>赋值<code>=</code>、下标<code>[]</code>、调用<code>()</code>和成员访问箭头<code>-&gt;</code>运算符必须是成员</li><li><font color="LightSeaGreen">复合赋值运算符</font>一般应该是成员</li><li>改变对象状态的运算符或者与给定类型密切相关的运算符，如<font color="LightSeaGreen">递增、递减和解引用运算符</font>，通常应该是成员</li></ul></blockquote><p>应该定义为普通的非成员函数</p><blockquote><ul><li>具有对称性的运算符可能转换任意一端的运算对象，例如<font color="LightCoral">算术、相等性、关系和位运算符</font>等，通常是普通的非成员函数</li></ul></blockquote><p>当把运算符定义成成员函数时，左侧对象必须是运算符所属类的一个对象</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">string s <span class="token operator">=</span> <span class="token string">"world"</span><span class="token punctuation">;</span>string t <span class="token operator">=</span> s <span class="token operator">+</span> <span class="token string">"!"</span><span class="token punctuation">;</span>     <span class="token comment">// 正确，string加一个const char*</span>string u <span class="token operator">=</span> <span class="token string">"hi"</span> <span class="token operator">+</span> s<span class="token punctuation">;</span>    <span class="token comment">// Err，+是string的成员函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++Primer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>13.6-对象移动</title>
      <link href="2021/10/26/C-Primer-13-6-%E5%AF%B9%E8%B1%A1%E7%A7%BB%E5%8A%A8/"/>
      <url>2021/10/26/C-Primer-13-6-%E5%AF%B9%E8%B1%A1%E7%A7%BB%E5%8A%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="13-6-对象移动"><a href="#13-6-对象移动" class="headerlink" title="13.6 对象移动"></a>13.6 对象移动</h2><p>有时候对象拷贝之后就立即销毁了，如果只是移动而不是拷贝对象会大幅度提升性能，因为移动不用重新分配内存和拷贝数据</p><ul><li>标准库容器、<code>string</code>和<code>shared_ptr</code>类既支持移动也支持拷贝，<code>IO</code>类和<code>unique_ptr</code>类可以移动但不能拷贝</li></ul><h3 id="13-6-1-右值引用"><a href="#13-6-1-右值引用" class="headerlink" title="13.6.1 右值引用"></a>13.6.1 右值引用</h3><p>右值引用只能绑定到一个将要销毁的对象，可以自由地将一个右值引用的资源移动到另一个对象中</p><p>对于常规的左值引用，不能将其绑定到要求转换的表达式、字面常量或是返回右值的表达式。右值引用则相反，但不能直接绑定到一个左值上</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>r1 <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token comment">// OK, 左值引用</span><span class="token keyword">int</span> <span class="token operator">&amp;&amp;</span>r2 <span class="token operator">=</span> i<span class="token punctuation">;</span>           <span class="token comment">// Err, 不能将右值引用绑定到左值</span><span class="token keyword">int</span> <span class="token operator">&amp;</span>r3 <span class="token operator">=</span> i <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">;</span>       <span class="token comment">// Err, i*10是一个右值</span><span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>r3 <span class="token operator">=</span> i <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token comment">// OK, 可以将const引用绑定到右值</span><span class="token keyword">int</span> <span class="token operator">&amp;&amp;</span>r4 <span class="token operator">=</span> i <span class="token operator">*</span> <span class="token number">10</span><span class="token punctuation">;</span>      <span class="token comment">// OK, 右值引用</span>cout <span class="token operator">&lt;&lt;</span> r4 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>     <span class="token comment">// 100</span>r4 <span class="token operator">+=</span> <span class="token number">10</span><span class="token punctuation">;</span>               <span class="token comment">// OK，也可以修改</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>返回左值引用的函数，连同赋值、下标、解引用和前置递增/递减运算符，都是左值</li><li>返回非引用类型的函数，连同算术、关系、位以及后置递增/递减运算符，都生成右值</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span><span class="token operator">&amp;</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    num <span class="token operator">=</span> num <span class="token operator">*</span> num<span class="token punctuation">;</span>    <span class="token keyword">return</span> num<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> num <span class="token operator">*</span> num<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">&amp;</span>ref1 <span class="token operator">=</span> <span class="token function">func1</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 返回左值</span>    cout <span class="token operator">&lt;&lt;</span> ref1 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>   <span class="token comment">// 25</span>    <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token operator">&amp;&amp;</span>ref2 <span class="token operator">=</span> <span class="token function">func2</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 返回右值</span>    cout <span class="token operator">&lt;&lt;</span> ref2 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>   <span class="token comment">// 16</span>    <span class="token keyword">const</span> <span class="token keyword">int</span> <span class="token operator">&amp;</span>ref3 <span class="token operator">=</span> <span class="token function">func2</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// const引用可以绑定右值</span>    cout <span class="token operator">&lt;&lt;</span> ref3 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>       <span class="token comment">// 16</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>右值引用指向<font color="LightCoral">将要被销毁的对象</font>，所以，我们可以从绑定到右值引用的对象“窃取”状态</p><table><tr><td bgcolor="MistyRose"><font color="Salmon" size="5">变量是左值</font></td></tr></table><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token operator">&amp;&amp;</span>r1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">&amp;&amp;</span>r2 <span class="token operator">=</span> r1<span class="token punctuation">;</span>  <span class="token comment">// Err, r1是左值，尽管r1是右值引用，但还是一个变量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="std-move"><a href="#std-move" class="headerlink" title="std::move()"></a>std::move()</h4><p>可以显式地将一个左值转换为对应的右值引用类型<br>可以用<code>std::move</code>函数来获得绑定到左值上的右值引用</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token operator">&amp;&amp;</span>r1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">&amp;&amp;</span>r2 <span class="token operator">=</span> std<span class="token operator">::</span><span class="token function">move</span><span class="token punctuation">(</span>r1<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// OK</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>调用<code>std::move()</code>之后，除了对<code>r1</code>赋值或销毁外，不能再使用它</p><h3 id="13-6-2-移动构造函数和移动赋值运算符"><a href="#13-6-2-移动构造函数和移动赋值运算符" class="headerlink" title="13.6.2 移动构造函数和移动赋值运算符"></a>13.6.2 移动构造函数和移动赋值运算符</h3><h4 id="移动构造函数"><a href="#移动构造函数" class="headerlink" title="移动构造函数"></a>移动构造函数</h4><p>移动构造函数的参数是<font color="LightCoral">右值引用</font>，新对象接管源对象的资源之后，<font color="LightCoral">把源对象的指针置空</font>，使其成为可析构的状态</p><ul><li>必须把源对象指针置空，不然源对象移动完就析构，移动的资源也跟着释放了</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span><span class="token operator">:</span>    string <span class="token operator">*</span>ptr<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">const</span> string <span class="token operator">&amp;</span>s <span class="token operator">=</span> <span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">ptr</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">string</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">age</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">const</span> Person <span class="token operator">&amp;</span>p<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">ptr</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">string</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">.</span>ptr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">age</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token function">Person</span><span class="token punctuation">(</span>Person <span class="token operator">&amp;&amp;</span>p<span class="token punctuation">)</span> <span class="token keyword">noexcept</span> <span class="token comment">// 移动操作不应抛出异常</span>        <span class="token operator">:</span> <span class="token function">ptr</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>ptr<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">age</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"move constructor"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        p<span class="token punctuation">.</span>ptr <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span> <span class="token comment">// 源对象的指针置空</span>    <span class="token punctuation">&#125;</span>    <span class="token operator">~</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">delete</span> ptr<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Person p1<span class="token punctuation">;</span>    Person p2 <span class="token operator">=</span> std<span class="token operator">::</span><span class="token function">move</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>move constructor<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="移动赋值运算符"><a href="#移动赋值运算符" class="headerlink" title="移动赋值运算符"></a>移动赋值运算符</h4><p>先释放自身的资源，接管源对象的资源，再把源对象的指针置空</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span><span class="token operator">:</span>    string <span class="token operator">*</span>ptr<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    Person<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span>Person <span class="token operator">&amp;&amp;</span>rhs<span class="token punctuation">)</span> <span class="token keyword">noexcept</span> <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"move copy assignment"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">!=</span> <span class="token operator">&amp;</span>rhs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">delete</span> ptr<span class="token punctuation">;</span>     <span class="token comment">// 释放拥有的资源</span>            ptr <span class="token operator">=</span> rhs<span class="token punctuation">.</span>ptr<span class="token punctuation">;</span>            age <span class="token operator">=</span> rhs<span class="token punctuation">.</span>age<span class="token punctuation">;</span>            rhs<span class="token punctuation">.</span>ptr <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Person <span class="token function">func</span><span class="token punctuation">(</span>Person<span class="token operator">&amp;</span> p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 函数返回右值</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Person p1<span class="token punctuation">,</span> p2<span class="token punctuation">;</span>    p2 <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>move copy assignment<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果只定义拷贝构造函数，没有定义移动构造函数，那也可以用右值进行构造，调用的是拷贝构造函数</p><h4 id="拷贝并交换赋值运算符和移动操作"><a href="#拷贝并交换赋值运算符和移动操作" class="headerlink" title="拷贝并交换赋值运算符和移动操作"></a>拷贝并交换赋值运算符和移动操作</h4><blockquote><p>可以将拷贝赋值运算符和移动赋值运算符统一起来，调用自定义<code>swap</code>函数即可</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span><span class="token operator">:</span>    string <span class="token operator">*</span>ptr<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">const</span> string <span class="token operator">&amp;</span>s <span class="token operator">=</span> <span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">ptr</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">string</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">age</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">const</span> Person <span class="token operator">&amp;</span>p<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">ptr</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">string</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">.</span>ptr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">age</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"copy constructor"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 拷贝构造函数</span>    <span class="token function">Person</span><span class="token punctuation">(</span>Person <span class="token operator">&amp;&amp;</span>p<span class="token punctuation">)</span> <span class="token keyword">noexcept</span> <span class="token comment">// 移动构造函数</span>        <span class="token operator">:</span> <span class="token function">ptr</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>ptr<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">age</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>age<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"move constructor"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        p<span class="token punctuation">.</span>ptr <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span> <span class="token comment">// 源对象的指针置空</span>    <span class="token punctuation">&#125;</span>    Person<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span>Person rhs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"swap copy assignment"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">,</span> rhs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">friend</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span>Person<span class="token operator">&amp;</span><span class="token punctuation">,</span> Person<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">~</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">delete</span> ptr<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">inline</span><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span>Person<span class="token operator">&amp;</span> lhs<span class="token punctuation">,</span> Person<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">using</span> std<span class="token operator">::</span>swap<span class="token punctuation">;</span>    <span class="token function">swap</span><span class="token punctuation">(</span>lhs<span class="token punctuation">.</span>ptr<span class="token punctuation">,</span> rhs<span class="token punctuation">.</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">swap</span><span class="token punctuation">(</span>lhs<span class="token punctuation">.</span>age<span class="token punctuation">,</span> rhs<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Person <span class="token function">p1</span><span class="token punctuation">(</span><span class="token string">"kavin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 直接初始化</span>    Person p2<span class="token punctuation">;</span>    p2 <span class="token operator">=</span> p1<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"----------"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    p2 <span class="token operator">=</span> std<span class="token operator">::</span><span class="token function">move</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// copy constructor 左值调用拷贝构造函数</span><span class="token comment">// swap copy assignment</span><span class="token comment">// ----------</span><span class="token comment">// move constructor 右值调用移动构造函数</span><span class="token comment">// swap copy assignment</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在拷贝赋值运算符中调用自定义的<code>swap</code>函数，注意参数是<font color="LightSeaGreen">非引用的</font>，所以，当实参是左值时，调用拷贝构造函数，当实参是右值时，调用移动构造函数</p><h3 id="13-6-3-右值引用和成员函数"><a href="#13-6-3-右值引用和成员函数" class="headerlink" title="13.6.3 右值引用和成员函数"></a>13.6.3 右值引用和成员函数</h3><blockquote><p>可以同时定义拷贝和移动版本的成员函数</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">push_back</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">push_back</span><span class="token punctuation">(</span>string<span class="token operator">&amp;&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>当调用<code>push_back</code>时，实参类型决定了新元素是拷贝还是移动</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">StrVec vec<span class="token punctuation">;</span>string s <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 调用push_back(const string&amp;)</span>vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token string">"done"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 调用push_back(string&amp;&amp;)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="右值和左值引用成员函数"><a href="#右值和左值引用成员函数" class="headerlink" title="右值和左值引用成员函数"></a>右值和左值引用成员函数</h4><blockquote><p>可以给成员函数增加引用限定符，强制左侧运算对象是一个左值/右值</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span><span class="token operator">:</span>    string <span class="token operator">*</span>ptr<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    Person<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Person<span class="token operator">&amp;</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Person<span class="token operator">&amp;</span> Person<span class="token operator">::</span><span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Person<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token punctuation">&#123;</span>    <span class="token comment">// 执行将rhs赋予本对象的工作</span>    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><div class="uk-alert uk-alert-success"><i class="fa fa-check-circle"></i> 如果同时使用<code>const</code>和引用限定，<code>const</code>必须排在前面</div><h4 id="重载和引用函数"><a href="#重载和引用函数" class="headerlink" title="重载和引用函数"></a>重载和引用函数</h4><blockquote><p>可以综合引用限定符和<code>const</code>来区分一个成员函数的重载版本</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Foo</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> data<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    Foo <span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span><span class="token punctuation">;</span>        <span class="token comment">// 可用于可改变的右值</span>    Foo <span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token operator">&amp;</span><span class="token punctuation">;</span>   <span class="token comment">// 可用于任何类型的Foo</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 本对象为右值,因此可以原址排序</span>Foo <span class="token class-name">Foo</span><span class="token operator">::</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">&#123;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> data<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 本对象是const或左值,不能对其进行原址排序</span>Foo <span class="token class-name">Foo</span><span class="token operator">::</span><span class="token function">sorted</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token operator">&amp;</span> <span class="token punctuation">&#123;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"left value"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    Foo <span class="token function">ret</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 先拷贝对象</span>    <span class="token function">sort</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ret<span class="token punctuation">.</span>data<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对象是一个右值，意味着没有其他用户，因此可以改变对象<br>当对一个<code>const</code>右值或一个左值执行<code>sorted</code>时，不能改变对象，因此需要在排序前拷贝对象</p><div class="uk-alert uk-alert-success"><i class="fa fa-check-circle"></i> 如果一个成员函数有引用限定符，则具有相同参数列表的所有版本都必须有引用限定符</div>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++Primer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>13.3-交换操作</title>
      <link href="2021/10/26/C-Primer-13-3-%E4%BA%A4%E6%8D%A2%E6%93%8D%E4%BD%9C/"/>
      <url>2021/10/26/C-Primer-13-3-%E4%BA%A4%E6%8D%A2%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="13-3-交换操作"><a href="#13-3-交换操作" class="headerlink" title="13.3 交换操作"></a>13.3 交换操作</h2><p>在排序算法中经常用到两个元素的交换，如果设计的类也要实现排序，就需要用到<code>swap</code>，如果类没有自定义<code>swap</code>函数，就会调用标准库定义的<code>swap</code></p><p>标准库的<code>swap</code><br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Person tmp <span class="token operator">=</span> p1<span class="token punctuation">;</span>p1 <span class="token operator">=</span> p2<span class="token punctuation">;</span>p2 <span class="token operator">=</span> tmp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br>其中的两次赋值都要进行动态内存分配，这是没有必要的，只需要交换两个对象的指针就可以了</p><h3 id="编写自己的swap函数"><a href="#编写自己的swap函数" class="headerlink" title="编写自己的swap函数"></a>编写自己的swap函数</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">string <span class="token operator">*</span>tmp <span class="token operator">=</span> p1<span class="token punctuation">.</span>ptr<span class="token punctuation">;</span>p1<span class="token punctuation">.</span>ptr <span class="token operator">=</span> p2<span class="token punctuation">.</span>ptr<span class="token punctuation">;</span>p2<span class="token punctuation">.</span>ptr <span class="token operator">=</span> tmp<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>而指针的交换可以用匹配类型的模板<code>swap</code>来完成</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span><span class="token operator">:</span>    string <span class="token operator">*</span>ptr<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">friend</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span>Person<span class="token operator">&amp;</span><span class="token punctuation">,</span> Person<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">inline</span><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span>Person<span class="token operator">&amp;</span> lhs<span class="token punctuation">,</span> Person<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">using</span> std<span class="token operator">::</span>swap<span class="token punctuation">;</span>    <span class="token function">swap</span><span class="token punctuation">(</span>lhs<span class="token punctuation">.</span>ptr<span class="token punctuation">,</span> rhs<span class="token punctuation">.</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 交换指针变量</span>    <span class="token function">swap</span><span class="token punctuation">(</span>lhs<span class="token punctuation">.</span>age<span class="token punctuation">,</span> rhs<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 交换成员变量</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>自定义的<code>swap</code>不是成员函数，但需要对私有变量进行修改，所以定义为<font color="LightSalmon">友元函数</font>，并声明为内联函数</p><h3 id="在赋值运算符中使用swap"><a href="#在赋值运算符中使用swap" class="headerlink" title="在赋值运算符中使用swap"></a>在赋值运算符中使用swap</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span><span class="token operator">:</span>    string <span class="token operator">*</span>ptr<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> s <span class="token operator">=</span> <span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">ptr</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">string</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">age</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">const</span> Person<span class="token operator">&amp;</span> p<span class="token punctuation">)</span>        <span class="token operator">:</span> <span class="token function">ptr</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">string</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">.</span>ptr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">age</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>age<span class="token punctuation">)</span>     <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"copy constructor"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token comment">// 拷贝构造函数</span>    Person <span class="token operator">&amp;</span><span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span>Person rhs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"swap copy assignment"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">,</span> rhs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token operator">~</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">delete</span> ptr<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">friend</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span>Person <span class="token operator">&amp;</span><span class="token punctuation">,</span> Person <span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span>Person<span class="token operator">&amp;</span> lhs<span class="token punctuation">,</span> Person<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Person swap"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">using</span> std<span class="token operator">::</span>swap<span class="token punctuation">;</span>    <span class="token function">swap</span><span class="token punctuation">(</span>lhs<span class="token punctuation">.</span>ptr<span class="token punctuation">,</span> rhs<span class="token punctuation">.</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">swap</span><span class="token punctuation">(</span>lhs<span class="token punctuation">.</span>age<span class="token punctuation">,</span> rhs<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Person <span class="token function">p1</span><span class="token punctuation">(</span><span class="token string">"kavin"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Person <span class="token function">p2</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p2 <span class="token operator">=</span> p1<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// copy constructor 按值传递会调用拷贝构造函数</span><span class="token comment">// swap copy assignment</span><span class="token comment">// Person swap 调用类自定义的swap</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里右侧运算对象以<font color="LightSeaGreen">传值方式</font>传递给了赋值运算符，因此，<code>rhs</code>是右侧运算对象的一个副本<br>赋值函数执行时，交换<code>this</code>和<code>rhs</code>的资源，函数执行完之后，<code>rhs</code>就被销毁了，释放掉左侧运算对象中原来的内存</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++Primer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>13.2-拷贝控制与资源管理</title>
      <link href="2021/10/26/C-Primer-13-2-%E6%8B%B7%E8%B4%9D%E6%8E%A7%E5%88%B6%E4%B8%8E%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86/"/>
      <url>2021/10/26/C-Primer-13-2-%E6%8B%B7%E8%B4%9D%E6%8E%A7%E5%88%B6%E4%B8%8E%E8%B5%84%E6%BA%90%E7%AE%A1%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="13-2-拷贝控制与资源管理"><a href="#13-2-拷贝控制与资源管理" class="headerlink" title="13.2 拷贝控制与资源管理"></a>13.2 拷贝控制与资源管理</h2><h3 id="13-2-1-行为像值的类"><a href="#13-2-1-行为像值的类" class="headerlink" title="13.2.1 行为像值的类"></a>13.2.1 行为像值的类</h3><p>行为像值的类拷贝时要先拷贝源对象的资源，再释放当前对象的资源，再指向新的资源</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span><span class="token operator">:</span>    string <span class="token operator">*</span>ptr<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">const</span> string <span class="token operator">&amp;</span>s <span class="token operator">=</span> <span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">ptr</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">string</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">age</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">const</span> Person <span class="token operator">&amp;</span>p<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">ptr</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">string</span><span class="token punctuation">(</span><span class="token operator">*</span>p<span class="token punctuation">.</span>ptr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">age</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    Person<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Person<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"copy assignment"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">auto</span> newptr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">string</span><span class="token punctuation">(</span><span class="token operator">*</span>rhs<span class="token punctuation">.</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 拷贝资源</span>        <span class="token keyword">delete</span> ptr<span class="token punctuation">;</span>     <span class="token comment">// 释放当前对象的资源</span>        ptr <span class="token operator">=</span> newptr<span class="token punctuation">;</span>   <span class="token comment">// 指针指向新的资源</span>        age <span class="token operator">=</span> rhs<span class="token punctuation">.</span>age<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token operator">~</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">delete</span> ptr<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Person <span class="token function">p1</span><span class="token punctuation">(</span><span class="token string">"kavin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Person p2<span class="token punctuation">;</span>    p2 <span class="token operator">=</span> p1<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// copy assignment</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="13-2-2-行为像指针的类"><a href="#13-2-2-行为像指针的类" class="headerlink" title="13.2.2 行为像指针的类"></a>13.2.2 行为像指针的类</h3><p>行为像指针的类拷贝时两个对象的指针指向同一块资源，使用计数器统计资源的用户数量，当用户数量为0时释放资源，类似于<code>shared_ptr</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span><span class="token operator">:</span>    string <span class="token operator">*</span>ptr<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    size_t <span class="token operator">*</span>use<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">const</span> string <span class="token operator">&amp;</span>s <span class="token operator">=</span> <span class="token function">string</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">ptr</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">string</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">age</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">use</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">size_t</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">const</span> Person <span class="token operator">&amp;</span>p<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">ptr</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>ptr<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">age</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">use</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>use<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token operator">*</span>use<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    Person<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Person<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token operator">++</span><span class="token operator">*</span>rhs<span class="token punctuation">.</span>use<span class="token punctuation">;</span>         <span class="token comment">// 先递增左侧对象的引用计数</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">--</span><span class="token operator">*</span>use <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 再递减右侧对象的引用计数</span>            <span class="token keyword">delete</span> ptr<span class="token punctuation">;</span>            <span class="token keyword">delete</span> use<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        ptr <span class="token operator">=</span> rhs<span class="token punctuation">.</span>ptr<span class="token punctuation">;</span>        age <span class="token operator">=</span> rhs<span class="token punctuation">.</span>age<span class="token punctuation">;</span>        use <span class="token operator">=</span> rhs<span class="token punctuation">.</span>use<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token operator">~</span><span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">--</span><span class="token operator">*</span>use <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 引用计数为0就释放资源</span>            <span class="token keyword">delete</span> ptr<span class="token punctuation">;</span>            <span class="token keyword">delete</span> use<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>use <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Person <span class="token function">p1</span><span class="token punctuation">(</span><span class="token string">"kavin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Person p2<span class="token punctuation">;</span>    p2 <span class="token operator">=</span> p1<span class="token punctuation">;</span>    p2<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++Primer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>13.1-拷贝、赋值与销毁</title>
      <link href="2021/10/26/C-Primer-13-1-%E6%8B%B7%E8%B4%9D%E3%80%81%E8%B5%8B%E5%80%BC%E4%B8%8E%E9%94%80%E6%AF%81/"/>
      <url>2021/10/26/C-Primer-13-1-%E6%8B%B7%E8%B4%9D%E3%80%81%E8%B5%8B%E5%80%BC%E4%B8%8E%E9%94%80%E6%AF%81/</url>
      
        <content type="html"><![CDATA[<h2 id="13-1-拷贝、赋值与销毁"><a href="#13-1-拷贝、赋值与销毁" class="headerlink" title="13.1 拷贝、赋值与销毁"></a>13.1 拷贝、赋值与销毁</h2><h3 id="13-1-1-copy-constructor"><a href="#13-1-1-copy-constructor" class="headerlink" title="13.1.1 copy constructor"></a>13.1.1 copy constructor</h3><div class="uk-alert uk-alert-success"><i class="fa fa-check-circle"></i> 拷贝构造函数</div> <p>第一个参数是引用类型<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">Foo</span><span class="token punctuation">(</span><span class="token keyword">const</span> Foo<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p><ul><li>直接初始化和拷贝初始化</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Person <span class="token function">p1</span><span class="token punctuation">(</span><span class="token string">"kavin"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 直接初始化</span>Person <span class="token function">p2</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// 直接初始化</span>Person p3 <span class="token operator">=</span> p1<span class="token punctuation">;</span>             <span class="token comment">// 拷贝初始化</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用拷贝初始化时，我们要求编译器将右侧运算对象拷贝到正在创建的对象中，如果需要的话还要进行类型转换</p><p>代码示例</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span><span class="token operator">:</span>    string name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Person</span><span class="token punctuation">(</span>string name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">name</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">age</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"constructor"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">Person</span><span class="token punctuation">(</span><span class="token keyword">const</span> Person<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"copy constructor"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        name <span class="token operator">=</span> rhs<span class="token punctuation">.</span>name<span class="token punctuation">;</span>        age <span class="token operator">=</span> rhs<span class="token punctuation">.</span>age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Person <span class="token function">p1</span><span class="token punctuation">(</span><span class="token string">"kavin"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用自定义构造函数</span>    Person <span class="token operator">*</span>ptr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token string">"kavin"</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 调用自定义构造函数</span>    Person <span class="token function">p2</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 调用拷贝构造函数直接初始化</span>    Person p3 <span class="token operator">=</span> p1<span class="token punctuation">;</span>         <span class="token comment">// 调用拷贝构造函数</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// constructor</span><span class="token comment">// constructor</span><span class="token comment">// copy constructor</span><span class="token comment">// copy constructor</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>拷贝初始化不仅在我们用<code>=</code>定义变量时发生，在下列情况下也会发生<br>1、将一个对象作为实参传递给一个<font color="LightSeaGreen">非引用类型的形参</font></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span>Person p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Entering func"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Person <span class="token function">p1</span><span class="token punctuation">(</span><span class="token string">"kavin"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">func</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// constructor</span><span class="token comment">// copy constructor 调用了拷贝构造函数</span><span class="token comment">// Entering func</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也说明了拷贝构造函数必须是<code>const</code>，如果不是<code>const</code>，实参传递给形参时就得再调用拷贝构造函数，就会陷入循环</p><p>2、 从一个返回类型为<font color="LightSeaGreen">非引用类型</font>的函数返回一个对象</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Person <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Person <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Person</span><span class="token punctuation">(</span><span class="token string">"lisa"</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">*</span>p<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Person p1 <span class="token operator">=</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// constructor</span><span class="token comment">// copy constructor 调用了拷贝构造函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="13-1-2-copy-assignment-operator"><a href="#13-1-2-copy-assignment-operator" class="headerlink" title="13.1.2 copy-assignment operator"></a>13.1.2 copy-assignment operator</h3><div class="uk-alert uk-alert-success"><i class="fa fa-check-circle"></i> 拷贝赋值运算符</div> <p>参数是类类型的<code>const</code>引用<br>返回值是指向其左侧运算对象的引用</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Foo<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> foo<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>代码示例</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span><span class="token operator">:</span>    string name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token function">Person</span><span class="token punctuation">(</span>string name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">name</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">age</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    Person<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">const</span> Person<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        name <span class="token operator">=</span> rhs<span class="token punctuation">.</span>name<span class="token punctuation">;</span>        age <span class="token operator">=</span> rhs<span class="token punctuation">.</span>age<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Person <span class="token function">p1</span><span class="token punctuation">(</span><span class="token string">"kavin"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 调用自定义构造函数</span>    Person p2<span class="token punctuation">;</span>  <span class="token comment">// 调用默认构造函数</span>    p2 <span class="token operator">=</span> p1<span class="token punctuation">;</span>    <span class="token comment">// 调用拷贝赋值运算符</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="13-3-3-destructor"><a href="#13-3-3-destructor" class="headerlink" title="13.3.3 destructor"></a>13.3.3 destructor</h3><div class="uk-alert uk-alert-success"><i class="fa fa-check-circle"></i> 析构函数</div> <ol><li>不接受参数，也没有返回值</li><li>不能被重载</li><li>对一个给定类，只会有唯一一个析构函数</li><li>当指向一个对象的<strong>引用</strong>或<strong>指针</strong>离开作用域时，<strong>不会调用析构函数</strong></li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token operator">~</span><span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在一个析构函数中，首先执行<strong>函数体</strong>，然后<strong>销毁成员</strong>，成员按初始化顺序的逆序销毁</p><p>如果一个类需要<strong>析构函数</strong>，那肯定也需要<strong>拷贝构造函数</strong>和<strong>拷贝赋值运算符</strong>，尤其是含有动态分配内存的类，因为合成析构函数不会<code>delete</code>一个指针数据成员</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++Primer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7.6-类的静态成员</title>
      <link href="2021/10/26/C-Primer-7-6-%E7%B1%BB%E7%9A%84%E9%9D%99%E6%80%81%E6%88%90%E5%91%98/"/>
      <url>2021/10/26/C-Primer-7-6-%E7%B1%BB%E7%9A%84%E9%9D%99%E6%80%81%E6%88%90%E5%91%98/</url>
      
        <content type="html"><![CDATA[<h2 id="7-6-类的静态成员"><a href="#7-6-类的静态成员" class="headerlink" title="7.6 类的静态成员"></a>7.6 类的静态成员</h2><p>如果需要让一个成员在所有对象中都是一样的，可以将其声明为静态变量，如银行利率，是所有对象共享的</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Account</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">calculate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> amount <span class="token operator">+=</span> amount <span class="token operator">*</span> interestRate<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">rate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> interestRate<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">rate</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    string owner<span class="token punctuation">;</span>    <span class="token keyword">double</span> amount<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">double</span> interestRate<span class="token punctuation">;</span>     <span class="token comment">// 静态成员变量</span>    <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">initRate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 静态成员函数</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>类的静态成员存在于任何对象之外，对象中不包含任何与静态数据成员相关的数据</p><blockquote><ul><li>静态成员函数没有<code>this</code>指针，所以不能声明为<code>const</code></li><li>使用类名和作用域运算符访问静态成员</li></ul></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">double</span> r<span class="token punctuation">;</span>r <span class="token operator">=</span> <span class="token class-name">Account</span><span class="token operator">::</span><span class="token function">rate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 使用作用域运算符访问静态成员</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>可以使用类的对象、引用或者指针来访问静态成员</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Account ac1<span class="token punctuation">;</span>Account <span class="token operator">*</span>ac2 <span class="token operator">=</span> <span class="token operator">&amp;</span>ac1<span class="token punctuation">;</span>r <span class="token operator">=</span> ac1<span class="token punctuation">.</span><span class="token function">rate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>r <span class="token operator">=</span> ac2<span class="token operator">-></span><span class="token function">rate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>static</code>关键字只能出现在类内部的声明语句中</p><blockquote><p>必须在类的外部定义和初始化每个静态成员</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">double</span> Account<span class="token operator">::</span>interestRate <span class="token operator">=</span> <span class="token function">initRate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="静态成员的类内初始化"><a href="#静态成员的类内初始化" class="headerlink" title="静态成员的类内初始化"></a>静态成员的类内初始化</h4><p>可以为静态成员提供<code>const</code><font color="LightSeaGreen">整数类型</font>的类内初始值，要求静态成员必须是字面值常量类型的<code>constexpr</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Account</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">rate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> interestRate<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">rate</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">static</span> <span class="token keyword">constexpr</span> <span class="token keyword">int</span> period <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>   <span class="token comment">// 常量表达式</span>    <span class="token keyword">double</span> daily_tbl<span class="token punctuation">[</span>period<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">constexpr</span> <span class="token keyword">int</span> Account<span class="token operator">::</span>period<span class="token punctuation">;</span>  <span class="token comment">// 初始值在类的定义内提供</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>即使一个常量静态数据成员在类内部被初始化了，通常也应该在类的外部定义一下该成员</p></blockquote><h4 id="静态成员能用于某些场景，而普通成员不能"><a href="#静态成员能用于某些场景，而普通成员不能" class="headerlink" title="静态成员能用于某些场景，而普通成员不能"></a>静态成员能用于某些场景，而普通成员不能</h4><blockquote><p>静态数据成员的类型可以就是它所属的类类型，而非静态成员只能声明成所属类的指针或引用</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Bar</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">static</span> Bar mem1<span class="token punctuation">;</span>    <span class="token comment">// 正确</span>    Bar <span class="token operator">*</span>mem2<span class="token punctuation">;</span>          <span class="token comment">// 正确</span>    Bar mem3<span class="token punctuation">;</span>           <span class="token comment">// Err</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>可以使用静态成员作为默认实参</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Screen</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    Screen<span class="token operator">&amp;</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">=</span> bkground<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 使用静态成员作为实参</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">char</span> bkground<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++Primer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7.5-构造函数再探</title>
      <link href="2021/10/26/C-Primer-7-5-%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%86%8D%E6%8E%A2/"/>
      <url>2021/10/26/C-Primer-7-5-%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%86%8D%E6%8E%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="7-5-构造函数再探"><a href="#7-5-构造函数再探" class="headerlink" title="7.5 构造函数再探"></a>7.5 构造函数再探</h2><h3 id="7-5-1-构造函数初始值列表"><a href="#7-5-1-构造函数初始值列表" class="headerlink" title="7.5.1 构造函数初始值列表"></a>7.5.1 构造函数初始值列表</h3><p>如果没有在构造函数的初始值列表中显式地初始化成员，则该成员将在构造函数体之前执行默认初始化，然后再在构造函数体内赋值</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 使用初始化列表</span><span class="token function">Sales_data</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> s<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> n<span class="token punctuation">,</span> <span class="token keyword">double</span> p<span class="token punctuation">)</span><span class="token operator">:</span>     <span class="token function">bookNo</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">units_sold</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">revenus</span><span class="token punctuation">(</span>p <span class="token operator">*</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">// 虽然合法但比较草率，没有使用构造函数初始值</span><span class="token function">Sales_data</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> s<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> cnt<span class="token punctuation">,</span> <span class="token keyword">double</span> price<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    bookNo <span class="token operator">=</span> s<span class="token punctuation">;</span>    units_sold <span class="token operator">=</span> cnt<span class="token punctuation">;</span>    revenue <span class="token operator">=</span> cnt <span class="token operator">*</span> price<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>成员是<code>const</code>、引用，或者属于某种未提供默认构造函数的类类型，必须通过构造函数初始值列表为这些成员提供初值</p></blockquote><p>随着构造函数体一开始执行，初始化就完成了，初始化<code>const</code>或引用类型的成员的唯一机会是通过<font color="LightSeaGreen">构造函数初始化列表</font></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">ConstRef</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>     <span class="token function">ConstRef</span><span class="token punctuation">(</span><span class="token keyword">int</span> ii<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">int</span> ci<span class="token punctuation">;</span>   <span class="token comment">// const必须初始化</span>    <span class="token keyword">int</span> <span class="token operator">&amp;</span>ri<span class="token punctuation">;</span>        <span class="token comment">// 引用必须初始化</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">ConstRef</span><span class="token operator">::</span><span class="token function">ConstRef</span><span class="token punctuation">(</span><span class="token keyword">int</span> ii<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">i</span><span class="token punctuation">(</span>ii<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">ci</span><span class="token punctuation">(</span>ii<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">ri</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="成员初始化顺序"><a href="#成员初始化顺序" class="headerlink" title="成员初始化顺序"></a>成员初始化顺序</h4><p>成员的初始化顺序与它们在类定义中的出现顺序一致，构造函数初始值列表中的前后位置关系不会影响实际的初始化顺序</p><h4 id="默认实参和构造函数"><a href="#默认实参和构造函数" class="headerlink" title="默认实参和构造函数"></a>默认实参和构造函数</h4><p>如果一个构造函数为所有参数都提供了默认实参，则它实际上也定义了默认构造函数</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 定义默认构造函数</span><span class="token function">Sales_data</span><span class="token punctuation">(</span>string s <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">bookNo</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="7-5-2-委托构造函数"><a href="#7-5-2-委托构造函数" class="headerlink" title="7.5.2 委托构造函数"></a>7.5.2 委托构造函数</h3><p>一个<font color="LightSeaGreen">委托构造函数</font>使用它所属类的其他构造函数执行自己的初始化过程，或者说它把自己的一些职责委托给了其他构造函数</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Sales_data</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 非委托构造函数使用对应的实参初始化成员</span>    <span class="token function">Sales_data</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> s<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> n<span class="token punctuation">,</span> <span class="token keyword">double</span> p<span class="token punctuation">)</span><span class="token operator">:</span>         <span class="token function">bookNo</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">units_sold</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">revenus</span><span class="token punctuation">(</span>p <span class="token operator">*</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token comment">// 其余构造函数全都委托给另一个构造函数</span>    <span class="token function">Sales_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">Sales_data</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token function">Sales_data</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">Sales_data</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token function">Sales_data</span><span class="token punctuation">(</span>istream<span class="token operator">&amp;</span> is<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">Sales_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">read</span><span class="token punctuation">(</span>is<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-5-3-默认构造函数的作用"><a href="#7-5-3-默认构造函数的作用" class="headerlink" title="7.5.3 默认构造函数的作用"></a>7.5.3 默认构造函数的作用</h3><p>在实际中，如果定义了其他构造函数，最好也提供一个默认构造函数</p><p>使用默认构造函数的正确写法</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Sales_data obj<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="7-5-4-隐式的类类型转换"><a href="#7-5-4-隐式的类类型转换" class="headerlink" title="7.5.4 隐式的类类型转换"></a>7.5.4 隐式的类类型转换</h3><p>能通过一个实参调用的构造函数定义了一条从构造函数的参数类型向类类型转换的规则</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">string null_book <span class="token operator">=</span> <span class="token string">"9-999"</span><span class="token punctuation">;</span>item<span class="token punctuation">.</span><span class="token function">combine</span><span class="token punctuation">(</span>null_book<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>这里构造了一个临时的<code>Sales_data</code>对象，<code>bookNo</code>等于<code>null_book</code>，其他成员默认</p><h4 id="只允许一步类类型转换"><a href="#只允许一步类类型转换" class="headerlink" title="只允许一步类类型转换"></a>只允许一步类类型转换</h4><p>编译器只会自动地执行一步类型转换</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">item<span class="token punctuation">.</span><span class="token function">combine</span><span class="token punctuation">(</span><span class="token string">"9-999"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Err 需要两步类型转换</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>需要先把<code>9-999</code>转换为<code>string</code>，再转换为<code>Sales_data</code></p><p>可以把其中一步显式地写出来</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">item<span class="token punctuation">.</span><span class="token function">combine</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token string">"9-999"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 正确</span>item<span class="token punctuation">.</span><span class="token function">combine</span><span class="token punctuation">(</span><span class="token function">Sales_data</span><span class="token punctuation">(</span><span class="token string">"9-999"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 正确</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="抑制构造函数定义的隐式转换"><a href="#抑制构造函数定义的隐式转换" class="headerlink" title="抑制构造函数定义的隐式转换"></a>抑制构造函数定义的隐式转换</h4><p>可以通过将构造函数声明为<code>explicit</code>阻止隐式转换</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Sales_data</span> <span class="token punctuation">&#123;</span>    <span class="token function">Sales_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>    <span class="token function">Sales_data</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> s<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> n<span class="token punctuation">,</span> <span class="token keyword">double</span> p<span class="token punctuation">)</span><span class="token operator">:</span>         <span class="token function">bookNo</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">units_sold</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">revenus</span><span class="token punctuation">(</span>p <span class="token operator">*</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">explicit</span> <span class="token function">Sales_data</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> s<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">bookNo</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">explicit</span> <span class="token function">Sales_data</span><span class="token punctuation">(</span>istream<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就不能隐式转换</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">item<span class="token punctuation">.</span><span class="token function">combine</span><span class="token punctuation">(</span>null_book<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Err</span>item<span class="token punctuation">.</span><span class="token function">combine</span><span class="token punctuation">(</span>cin<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// Err</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>关键字<code>explicit</code>只对一个实参的构造函数有效，需要多个实参的构造函数不能用于执行隐式转换，所以不用声明<code>explicit</code><br>只能在类内声明构造函数时使用<code>explicit</code>，类外不能重复</p><h4 id="explicit构造函数只能用于直接初始化"><a href="#explicit构造函数只能用于直接初始化" class="headerlink" title="explicit构造函数只能用于直接初始化"></a>explicit构造函数只能用于直接初始化</h4><p>执行拷贝形式的初始化时（使用<code>=</code>）会发生隐式转换，这种只能使用<font color="LightSeaGreen">直接初始化</font>而不能使用<code>explicit</code>构造函数</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Sales_data <span class="token function">item1</span><span class="token punctuation">(</span>null_book<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 正确，直接初始化</span>Sales_data item2 <span class="token operator">=</span> null_book<span class="token punctuation">;</span>   <span class="token comment">// Err，不能将explicit构造函数用于拷贝形式的初始化过程</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>用<code>explicit</code>声明构造函数时，就只能以直接初始化的形式使用，同时也不能在自动转换过程中使用该构造函数</p></blockquote><p>硬要用的话可以用强制类型转换</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Sales_data item <span class="token operator">=</span> <span class="token keyword">static_cast</span><span class="token operator">&lt;</span>Sales_data<span class="token operator">></span><span class="token punctuation">(</span>null_book<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 正确</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="7-5-5-聚合类"><a href="#7-5-5-聚合类" class="headerlink" title="7.5.5 聚合类"></a>7.5.5 聚合类</h3><blockquote><ul><li>所有成员都是<code>public</code>的</li><li>没有定义任何构造函数</li><li>没有类内初始值</li><li>没有基类，也没有<code>virtual</code>函数</li></ul></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">Data</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> ival<span class="token punctuation">;</span>    string s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Data data1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"kavin"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以使用成员初始化列表初始化聚合类的数据成员，顺序要跟声明的顺序相同</p><h3 id="7-5-6-字面值常量类"><a href="#7-5-6-字面值常量类" class="headerlink" title="7.5.6 字面值常量类"></a>7.5.6 字面值常量类</h3><blockquote><ul><li>数据成员必须都是字面值类型</li><li>类必须至少有一个<code>constexpr</code>构造函数</li><li>数据成员的类内初始值<ul><li>内置类型：必须是一条常量表达式</li><li>类类型：使用成员自己的<code>constexpr</code>构造函数</li></ul></li><li>类必须使用析构函数的默认定义</li></ul></blockquote><div class="uk-alert uk-alert-success"><i class="fa fa-check-circle"></i> 算数类型、引用、指针是字面值类型</div><blockquote><p><code>constexpr</code>构造函数体一般应该是空的</p></blockquote><p>因为<code>constexpr</code>函数只能有返回语句，构造函数又不能有返回语句</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Debug</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">constexpr</span> <span class="token function">Debug</span><span class="token punctuation">(</span><span class="token keyword">bool</span> b <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">hw</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">io</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">other</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">constexpr</span> <span class="token function">Debug</span><span class="token punctuation">(</span><span class="token keyword">bool</span> h<span class="token punctuation">,</span> <span class="token keyword">bool</span> i<span class="token punctuation">,</span> <span class="token keyword">bool</span> o<span class="token punctuation">)</span><span class="token operator">:</span>        <span class="token function">hw</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">io</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">other</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">bool</span> hw<span class="token punctuation">;</span>    <span class="token keyword">bool</span> io<span class="token punctuation">;</span>    <span class="token keyword">bool</span> other<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++Primer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7.4-类的作用域</title>
      <link href="2021/10/26/C-Primer-7-4-%E7%B1%BB%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F/"/>
      <url>2021/10/26/C-Primer-7-4-%E7%B1%BB%E7%9A%84%E4%BD%9C%E7%94%A8%E5%9F%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="类的作用域"><a href="#类的作用域" class="headerlink" title="类的作用域"></a>类的作用域</h2><p>在类的作用域之外，普通的数据和函数成员只能由对象、引用或者指针使用<font color="LightSeaGreen">成员访问运算符</font>来访问</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Screen<span class="token operator">::</span>pos ht <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> wd <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token comment">// 使用Screen定义的pos类型</span>Screen <span class="token function">scr</span><span class="token punctuation">(</span>ht<span class="token punctuation">,</span> wd<span class="token punctuation">,</span> <span class="token string">'X'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Screen <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>scr<span class="token punctuation">;</span><span class="token keyword">char</span> c <span class="token operator">=</span> scr<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 类对象调用成员函数</span>p<span class="token operator">-></span><span class="token function">display</span><span class="token punctuation">(</span>cout<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 类指针调用成员函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果返回类型是类里面定义的类型，也需要加上类名和作用域解析运算符</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Window_mgr</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    ScreenIndex <span class="token function">addScreen</span><span class="token punctuation">(</span><span class="token keyword">const</span> Screen<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Window_mgr<span class="token operator">::</span>ScreenIndex <span class="token class-name">Window_mgr</span><span class="token operator">::</span><span class="token function">addScreen</span><span class="token punctuation">(</span><span class="token keyword">const</span> Screen<span class="token operator">&amp;</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    screens<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> screens<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-4-1-名字查找与类的作用域"><a href="#7-4-1-名字查找与类的作用域" class="headerlink" title="7.4.1 名字查找与类的作用域"></a>7.4.1 名字查找与类的作用域</h3><blockquote><p>编译器处理完类中的全部声明后才会处理成员函数的定义</p></blockquote><p>成员函数中使用的名字按照如下方式解析：</p><blockquote><ul><li>首先，在成员函数内查找该名字的声明</li><li>如果在成员函数内没有找到，则在类内继续查找，这时类的所有成员都可以被考虑</li><li>如果类内也没有该名字的声明，就在成员函数定义之前的作用域内继续查找</li></ul></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> height<span class="token punctuation">;</span>     <span class="token comment">// 定义一个全局名字，待会在Screen中使用</span><span class="token keyword">class</span> <span class="token class-name">Screen</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">typedef</span> string<span class="token operator">::</span>size_type pos<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">dummy_fcn</span><span class="token punctuation">(</span>pos height<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cursor <span class="token operator">=</span> width <span class="token operator">*</span> height<span class="token punctuation">;</span>    <span class="token comment">// 使用的是参数声明</span>    <span class="token punctuation">&#125;</span><span class="token keyword">private</span><span class="token operator">:</span>    pos cursor <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    pos height <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> width <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果硬要使用类的成员，可以显式地用<code>this</code>或类名</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">dummy_fcn</span><span class="token punctuation">(</span>pos height<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    cursor <span class="token operator">=</span> width <span class="token operator">*</span> <span class="token keyword">this</span><span class="token operator">-></span>height<span class="token punctuation">;</span>    <span class="token comment">// 使用的是类的成员</span>    <span class="token comment">// cursor = width * Screen::hegiht;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果要用到外层作用域中的名字，可以显式地通过作用域运算符来请求</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">dummy_fcn</span><span class="token punctuation">(</span>pos height<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    cursor <span class="token operator">=</span> width <span class="token operator">*</span> <span class="token operator">::</span>height<span class="token punctuation">;</span>    <span class="token comment">// 使用的是全局变量</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>成员函数定义在类的外部时，名字查找不仅要考虑类定义之前的全局作用域中的声明，还要考虑成员函数定义之前的全局作用域中的声明</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> height<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Screen</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">typedef</span> string<span class="token operator">::</span>size_type pos<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">setHeight</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>    pos height <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Screen<span class="token operator">::</span>pos <span class="token function">verity</span><span class="token punctuation">(</span>Screen<span class="token operator">::</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 全局函数的声明</span><span class="token keyword">void</span> <span class="token class-name">Screen</span><span class="token operator">::</span><span class="token function">setHeight</span><span class="token punctuation">(</span>pos var<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    height <span class="token operator">=</span> <span class="token function">verify</span><span class="token punctuation">(</span>var<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里成员函数<code>setHeight</code>用到的<code>verify</code>全局函数，已经在成员函数定义之前声明了，所以可以正常使用，<code>height</code>已经在类里面声明了，所以成员函数里面的<code>height</code>就是类的成员了</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++Primer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7.3-类的其他特性</title>
      <link href="2021/10/26/C-Primer-7-3-%E7%B1%BB%E7%9A%84%E5%85%B6%E4%BB%96%E7%89%B9%E6%80%A7/"/>
      <url>2021/10/26/C-Primer-7-3-%E7%B1%BB%E7%9A%84%E5%85%B6%E4%BB%96%E7%89%B9%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<h2 id="7-3-类的其他特性"><a href="#7-3-类的其他特性" class="headerlink" title="7.3 类的其他特性"></a>7.3 类的其他特性</h2><h3 id="7-3-1-类成员再探"><a href="#7-3-1-类成员再探" class="headerlink" title="7.3.1 类成员再探"></a>7.3.1 类成员再探</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Screen</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">typedef</span> string<span class="token operator">::</span>size_type pos<span class="token punctuation">;</span>    <span class="token comment">// using pos = string::size_type</span><span class="token keyword">private</span><span class="token operator">:</span>    pos cursor <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    pos height <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> width <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    string contents<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里定义了一个<code>screen</code>类，<code>pos</code>是一个别名，类似于<code>unsigned</code></p><h4 id="Screen类的成员函数"><a href="#Screen类的成员函数" class="headerlink" title="Screen类的成员函数"></a>Screen类的成员函数</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Screen</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">typedef</span> string<span class="token operator">::</span>size_type pos<span class="token punctuation">;</span>    <span class="token function">Screen</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>    <span class="token function">Screen</span><span class="token punctuation">(</span>pos h<span class="token punctuation">,</span> pos w<span class="token punctuation">,</span> <span class="token keyword">char</span> c<span class="token punctuation">)</span>        <span class="token operator">:</span> <span class="token function">height</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">width</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">contents</span><span class="token punctuation">(</span>h <span class="token operator">*</span> w<span class="token punctuation">,</span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">char</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> contents<span class="token punctuation">[</span>cursor<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>   <span class="token comment">// 隐式内联</span>    <span class="token keyword">inline</span> <span class="token keyword">char</span> <span class="token function">get</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> pos<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>    <span class="token comment">// 显式内联</span>    Screen<span class="token operator">&amp;</span> <span class="token function">move</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> pos<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 能在之后被设为内联</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为已经提供了一个构造函数了，编译器就不会生成默认构造函数，如果还是需要默认构造函数，就需要显式地声明出来</p><h4 id="令成员作为内联函数"><a href="#令成员作为内联函数" class="headerlink" title="令成员作为内联函数"></a>令成员作为内联函数</h4><blockquote><p>定义在类内部的成员函数是自动<code>inline</code>的</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">char</span> <span class="token class-name">Screen</span><span class="token operator">::</span><span class="token function">get</span><span class="token punctuation">(</span>pos r<span class="token punctuation">,</span> pos c<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>    pos row <span class="token operator">=</span> r <span class="token operator">*</span> width<span class="token punctuation">;</span>    <span class="token keyword">return</span> contents<span class="token punctuation">[</span>row <span class="token operator">+</span> c<span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment">// 获取指定位置的字符</span><span class="token punctuation">&#125;</span><span class="token keyword">inline</span>  <span class="token comment">// 可以在函数的定义处指定inline</span>Screen<span class="token operator">&amp;</span> <span class="token class-name">Screen</span><span class="token operator">::</span><span class="token function">move</span><span class="token punctuation">(</span>pos r<span class="token punctuation">,</span> pos c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    pos row <span class="token operator">=</span> r <span class="token operator">*</span> width<span class="token punctuation">;</span>    cursor <span class="token operator">=</span> row <span class="token operator">+</span> c<span class="token punctuation">;</span>   <span class="token comment">// 移动光标到指定位置</span>    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="重载成员函数"><a href="#重载成员函数" class="headerlink" title="重载成员函数"></a>重载成员函数</h4><blockquote><p>只要成员函数在参数的数量和/或类型上有所区别，就可以实现重载</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Screen myscreen<span class="token punctuation">;</span><span class="token keyword">char</span> ch <span class="token operator">=</span> myscreen<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 调用 Screen::get()</span>ch <span class="token operator">=</span> myscreen<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 调用 Screen::get(pos, pos)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="可变数据成员"><a href="#可变数据成员" class="headerlink" title="可变数据成员"></a>可变数据成员</h4><p>有时会希望修改某个数据成员，即使是在一个<code>const</code>成员函数里面，可以通过在变量声明中加入<code>mutable</code>做到</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Screen</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">some_member</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">mutable</span> size_t access_ctr<span class="token punctuation">;</span>  <span class="token comment">// 即使在一个const对象内也能修改</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token class-name">Screen</span><span class="token operator">::</span><span class="token function">some_member</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>    <span class="token operator">++</span>access_ctr<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="类数据成员的初始值"><a href="#类数据成员的初始值" class="headerlink" title="类数据成员的初始值"></a>类数据成员的初始值</h4><p>定义一个窗口管理类，包含一个<code>Screen</code>的<code>vector</code>，并增加一个默认初始化元素</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Window_mgr</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span>Screen<span class="token operator">></span> screens<span class="token punctuation">&#123;</span><span class="token function">Screen</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token string">'*'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>当我们提供一个类内初始值时，必须以<code>=</code>或者<code>&#123;&#125;</code>表示</p></blockquote><h3 id="7-3-2-返回-this的成员函数"><a href="#7-3-2-返回-this的成员函数" class="headerlink" title="7.3.2 返回*this的成员函数"></a>7.3.2 返回*this的成员函数</h3><p>增加修改当前位置和指定位置字符的成员函数</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Screen</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    Screen<span class="token operator">&amp;</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Screen<span class="token operator">&amp;</span> <span class="token function">set</span><span class="token punctuation">(</span>pos<span class="token punctuation">,</span> pos<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">inline</span> Screen<span class="token operator">&amp;</span> <span class="token class-name">Screen</span><span class="token operator">::</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    contents<span class="token punctuation">[</span>cursor<span class="token punctuation">]</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>   <span class="token comment">// 修改当前位置的字符</span>    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">inline</span> Screen<span class="token operator">&amp;</span> <span class="token class-name">Screen</span><span class="token operator">::</span><span class="token function">set</span><span class="token punctuation">(</span>pos r<span class="token punctuation">,</span> pos c<span class="token punctuation">,</span> <span class="token keyword">char</span> ch<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    contents<span class="token punctuation">[</span>r <span class="token operator">*</span> width <span class="token operator">+</span> c<span class="token punctuation">]</span> <span class="token operator">=</span> ch<span class="token punctuation">;</span>   <span class="token comment">// 修改指定位置的字符</span>    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为是返回对象本身，所以可以连续调用函数</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">myscreen<span class="token punctuation">.</span><span class="token function">move</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'#'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="从const成员函数返回-this"><a href="#从const成员函数返回-this" class="headerlink" title="从const成员函数返回*this"></a>从const成员函数返回*this</h4><p>可以定义一个<code>display</code>函数输出，可以指定为<code>const</code>，那么返回值就应该是<code>const Screen&amp;</code>，因此不能再去调用非<code>const</code>的函数</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Screen myScreen<span class="token punctuation">;</span>myScreen<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span>cout<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'*'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Err</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>尽管<code>myScreen</code>是个非常量对象，但<code>display</code>返回的是常量引用，所以就不能调用<code>set()</code>对非共有变量进行修改</p><div class="uk-alert uk-alert-danger"><i class="fas fa-exclamation-triangle"></i> 一个<code>const</code>成员函数如果以引用的形式返回<code>*this</code>，那么它的返回类型将是常量引用</div><h4 id="基于const的重载"><a href="#基于const的重载" class="headerlink" title="基于const的重载"></a>基于const的重载</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Screen</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    Screen<span class="token operator">&amp;</span> <span class="token function">display</span><span class="token punctuation">(</span>ostream<span class="token operator">&amp;</span> os<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">do_display</span><span class="token punctuation">(</span>os<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">const</span> Screen<span class="token operator">&amp;</span> <span class="token function">display</span><span class="token punctuation">(</span>ostream<span class="token operator">&amp;</span> os<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>        <span class="token function">do_display</span><span class="token punctuation">(</span>os<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">do_display</span><span class="token punctuation">(</span>ostream<span class="token operator">&amp;</span> os<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> os <span class="token operator">&lt;&lt;</span> contents<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在某个对象上调用<code>display</code>时，该对象是否是<code>const</code>决定了应该调用<code>display</code>的哪个版本</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Screen <span class="token function">myScreen</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'$'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> Screen <span class="token function">blank</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'&amp;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>myScreen<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'%'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span>cout<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 调用非常量版本</span>blank<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span>cout<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 调用常量版本</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-3-3-类类型"><a href="#7-3-3-类类型" class="headerlink" title="7.3.3 类类型"></a>7.3.3 类类型</h3><blockquote><p>每个类定义了唯一的类型，对于两个类来说，即使他们的成员完全一样，也是不同的类型</p></blockquote><h4 id="类的声明"><a href="#类的声明" class="headerlink" title="类的声明"></a>类的声明</h4><p>可以仅仅声明类而暂时不定义</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Screen</span><span class="token punctuation">;</span>   <span class="token comment">// 类的声明</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在声明之后定义之前是<font color="LightSeaGreen">不完全类型</font></p><p>可以定义指向这种类型的指针或引用，也可以声明（不能定义）以<font color="LightSeaGreen">不完全类型</font>作为参数或者返回类型的函数</p><blockquote><p>一旦一个类的名字出现后，就被认为是声明过了，因此类允许包含指向它本身的引用或指针</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Link_screen</span> <span class="token punctuation">&#123;</span>    Screen window<span class="token punctuation">;</span>    Link_screen <span class="token operator">*</span>next<span class="token punctuation">;</span>    Link_screen <span class="token operator">*</span>prev<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-3-4-友元再探"><a href="#7-3-4-友元再探" class="headerlink" title="7.3.4 友元再探"></a>7.3.4 友元再探</h3><p>如果<code>Window_mgr</code>类需要改变<code>Screen</code>对象的值，需要在<code>Screen</code>内将其设为友元</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Screen</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">friend</span> <span class="token keyword">class</span> <span class="token class-name">Window_mgr</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这样<code>Window_mgr</code>的成员就能访问<code>Screen</code>类的私有部分</p><div class="uk-alert uk-alert-success"><i class="fa fa-check-circle"></i> 如果一个类指定了友元，则友元类的成员函数可以访问此类包括非公有成员在内的所有成员</div><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Window_mgr</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">using</span> ScreenIndex <span class="token operator">=</span> vector<span class="token operator">&lt;</span>Screen<span class="token operator">></span><span class="token operator">::</span>size_type<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span>ScreenIndex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span>Screen<span class="token operator">></span> screens<span class="token punctuation">&#123;</span><span class="token function">Screen</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token string">'*'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token class-name">Window_mgr</span><span class="token operator">::</span><span class="token function">clear</span><span class="token punctuation">(</span>ScreenIndex i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 要清空的Screen的下标</span>    Screen<span class="token operator">&amp;</span> s <span class="token operator">=</span> screens<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token comment">// 指向要清空的那个Screen</span>    s<span class="token punctuation">.</span>contents <span class="token operator">=</span> <span class="token function">string</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>height <span class="token operator">*</span> s<span class="token punctuation">.</span>width<span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>友元关系不存在传递性，如果<code>Window_mgr</code>有自己的友元，那他们并不能访问<code>Screen</code>的成员</p></blockquote><h4 id="令成员函数作为友元"><a href="#令成员函数作为友元" class="headerlink" title="令成员函数作为友元"></a>令成员函数作为友元</h4><p>可以只让<code>clear</code>函数作为<code>Screen</code>的友元函数，注意<code>clear</code>必须在<code>Screen</code>类之前被声明，顺序是</p><blockquote><ol><li>首先声明<code>Screen</code>类，不用定义</li><li>然后定义<code>Window_mgr</code>类，声明<code>clear</code>函数</li><li>再定义<code>Screen</code>，包括对于<code>clear</code>友元声明</li><li>最后定义<code>clear</code></li></ol></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 1. 先声明Screen，因为Window_mgr中用到了</span><span class="token keyword">class</span> <span class="token class-name">Screen</span><span class="token punctuation">;</span><span class="token comment">// 2. 定义Window_mgr类，声明clear函数</span><span class="token keyword">class</span> <span class="token class-name">Window_mgr</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">using</span> ScreenIndex <span class="token operator">=</span> vector<span class="token operator">&lt;</span>Screen<span class="token operator">></span><span class="token operator">::</span>size_type<span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span>ScreenIndex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    vector<span class="token operator">&lt;</span>Screen<span class="token operator">></span> screens<span class="token punctuation">;</span>     <span class="token comment">// 这里就不能调用Screen的构造函数了</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 3. 定义Screen，包括对于clear友元声明</span><span class="token keyword">class</span> <span class="token class-name">Screen</span><span class="token punctuation">&#123;</span>    <span class="token keyword">friend</span> <span class="token keyword">void</span> <span class="token class-name">Window_mgr</span><span class="token operator">::</span><span class="token function">clear</span><span class="token punctuation">(</span>ScreenIndex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 4. 最后定义clear</span><span class="token keyword">void</span> <span class="token class-name">Window_mgr</span><span class="token operator">::</span><span class="token function">clear</span><span class="token punctuation">(</span>ScreenIndex i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Screen<span class="token operator">&amp;</span> s <span class="token operator">=</span> screens<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token comment">// 指向要清空的那个Screen</span>    s<span class="token punctuation">.</span>contents <span class="token operator">=</span> <span class="token function">string</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>height <span class="token operator">*</span> s<span class="token punctuation">.</span>width<span class="token punctuation">,</span> <span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="函数重载和友元"><a href="#函数重载和友元" class="headerlink" title="函数重载和友元"></a>函数重载和友元</h4><p>要把重载的函数声明为友元，需要逐个声明</p><h4 id="友元声明和作用域"><a href="#友元声明和作用域" class="headerlink" title="友元声明和作用域"></a>友元声明和作用域</h4><p>可以在类的内部定义友元函数，但也需要在外部声明使得友元函数可见</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++Primer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7.2-访问控制与封装</title>
      <link href="2021/10/26/C-Primer-7-2-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E4%B8%8E%E5%B0%81%E8%A3%85/"/>
      <url>2021/10/26/C-Primer-7-2-%E8%AE%BF%E9%97%AE%E6%8E%A7%E5%88%B6%E4%B8%8E%E5%B0%81%E8%A3%85/</url>
      
        <content type="html"><![CDATA[<h2 id="7-2-访问控制与封装"><a href="#7-2-访问控制与封装" class="headerlink" title="7.2 访问控制与封装"></a>7.2 访问控制与封装</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Sales_data</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Sales_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span>    <span class="token function">Sales_data</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> s<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">bookNo</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token function">Sales_data</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> s<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> n<span class="token punctuation">,</span> <span class="token keyword">double</span> p<span class="token punctuation">)</span><span class="token operator">:</span>         <span class="token function">bookNo</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">units_sold</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">revenus</span><span class="token punctuation">(</span>p <span class="token operator">*</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token function">Sales_data</span><span class="token punctuation">(</span>istream<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    string <span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> bookNo<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    Sales_data<span class="token operator">&amp;</span> <span class="token function">combine</span><span class="token punctuation">(</span><span class="token keyword">const</span> Sales_data<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> <span class="token function">avg_price</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    string bookNo<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> units_sold <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> revenus <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ul><li>如果我们使用<code>struct</code>关键字，则定义在第一个访问说明符之前的成员是<code>public</code>的</li><li>如果使用<code>class</code>关键字，则这些成员是<code>private</code>的</li></ul></blockquote><h3 id="7-2-1-友元"><a href="#7-2-1-友元" class="headerlink" title="7.2.1 友元"></a>7.2.1 友元</h3><p>类可以允许其他类或者函数访问它的非公有成员，方法是令其他类或者函数成为<font color="LightSeaGreen">友元</font></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Sales_data</span> <span class="token punctuation">&#123;</span><span class="token keyword">friend</span> Sales_data <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">const</span> Sales_data<span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> Sales_data<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">friend</span> istream<span class="token operator">&amp;</span> <span class="token function">read</span><span class="token punctuation">(</span>istream<span class="token operator">&amp;</span><span class="token punctuation">,</span> Sales_data<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">friend</span> ostream<span class="token operator">&amp;</span> <span class="token function">print</span><span class="token punctuation">(</span>ostream<span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> Sales_data<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>友元声明只能出现在类定义的内部，但是在类内出现的具体位置不限<br>一般最好在类开始或结束的位置集中声明友元</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++Primer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7.1-定义抽象数据结构</title>
      <link href="2021/10/26/C-Primer-7-1-%E5%AE%9A%E4%B9%89%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
      <url>2021/10/26/C-Primer-7-1-%E5%AE%9A%E4%B9%89%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h2 id="7-1-定义抽象数据类型"><a href="#7-1-定义抽象数据类型" class="headerlink" title="7.1 定义抽象数据类型"></a>7.1 定义抽象数据类型</h2><h3 id="7-1-1-设计Sales-data类"><a href="#7-1-1-设计Sales-data类" class="headerlink" title="7.1.1 设计Sales_data类"></a>7.1.1 设计Sales_data类</h3><h3 id="7-1-2-定义改进的Sales-data类"><a href="#7-1-2-定义改进的Sales-data类" class="headerlink" title="7.1.2 定义改进的Sales_data类"></a>7.1.2 定义改进的Sales_data类</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">Sales_data</span><span class="token punctuation">&#123;</span>    string <span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> bookNo<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    Sales_data<span class="token operator">&amp;</span> <span class="token function">combine</span><span class="token punctuation">(</span><span class="token keyword">const</span> Sales_data<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> <span class="token function">avg_price</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span>    string bookNo<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> units_sold <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> revenus <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Sales_data <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">const</span> Sales_data<span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> Sales_data<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ostream<span class="token operator">&amp;</span> <span class="token function">print</span><span class="token punctuation">(</span>ostream<span class="token operator">&amp;</span><span class="token punctuation">,</span> <span class="token keyword">const</span> Sales_data<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>istream<span class="token operator">&amp;</span> <span class="token function">read</span><span class="token punctuation">(</span>istream<span class="token operator">&amp;</span><span class="token punctuation">,</span> Sales_data<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>成员函数的声明必须在类的内部，定义既可以在类的内部也可以在类的外部<br>定义在类内部的函数是隐式的<code>inline</code>函数</p></blockquote><h4 id="引入const成员函数"><a href="#引入const成员函数" class="headerlink" title="引入const成员函数"></a>引入const成员函数</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">string <span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> bookNo<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里<code>const</code>是修饰<code>this</code>指针，说明此处的<code>this</code>是一个指向常量的指针，所以常量成员函数不能修改调用它的对象的内容</p><div class="uk-alert uk-alert-danger"><i class="fas fa-exclamation-triangle"></i> 常量对象，以及常量对象的引用或指针都只能调用常量成员函数</div><h4 id="类作用域和成员函数"><a href="#类作用域和成员函数" class="headerlink" title="类作用域和成员函数"></a>类作用域和成员函数</h4><p>在类外部定义的成员函数需要带上<font color="LightSeaGreen">类名</font>和<font color="LightSeaGreen">作用域解析运算符</font></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">double</span> <span class="token class-name">Sales_data</span><span class="token operator">::</span><span class="token function">avg_price</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>units_sold<span class="token punctuation">)</span>         <span class="token keyword">return</span> revenus <span class="token operator">/</span> units_sold<span class="token punctuation">;</span>    <span class="token keyword">else</span>         <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="定义一个返回this对象的函数"><a href="#定义一个返回this对象的函数" class="headerlink" title="定义一个返回this对象的函数"></a>定义一个返回this对象的函数</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Sales_data<span class="token operator">&amp;</span> <span class="token class-name">Sales_data</span><span class="token operator">::</span><span class="token function">combine</span><span class="token punctuation">(</span><span class="token keyword">const</span> Sales_data<span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    units_sold <span class="token operator">+=</span> rhs<span class="token punctuation">.</span>units_sold<span class="token punctuation">;</span>    revenus <span class="token operator">+=</span> rhs<span class="token punctuation">.</span>revenus<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-1-3-定义类相关的非成员函数"><a href="#7-1-3-定义类相关的非成员函数" class="headerlink" title="7.1.3 定义类相关的非成员函数"></a>7.1.3 定义类相关的非成员函数</h3><p>一般来说，如果非成员函数是类接口的组成部分，则这些函数的声明应该与类在同一个头文件内</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 输入的交易信息包括ISBN、售出总数和售出价格</span>istream<span class="token operator">&amp;</span> <span class="token function">read</span><span class="token punctuation">(</span>istream<span class="token operator">&amp;</span> is<span class="token punctuation">,</span> Sales_data<span class="token operator">&amp;</span> item<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">double</span> price<span class="token punctuation">;</span>    is <span class="token operator">>></span> item<span class="token punctuation">.</span>bookNo <span class="token operator">>></span> item<span class="token punctuation">.</span>units_sold <span class="token operator">>></span> price<span class="token punctuation">;</span>    item<span class="token punctuation">.</span>revenus <span class="token operator">=</span> price <span class="token operator">*</span> item<span class="token punctuation">.</span>units_sold<span class="token punctuation">;</span>    <span class="token keyword">return</span> is<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ostream<span class="token operator">&amp;</span> <span class="token function">print</span><span class="token punctuation">(</span>ostream<span class="token operator">&amp;</span> os<span class="token punctuation">,</span> <span class="token keyword">const</span> Sales_data<span class="token operator">&amp;</span> item<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    os <span class="token operator">&lt;&lt;</span> item<span class="token punctuation">.</span><span class="token function">isbn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> item<span class="token punctuation">.</span>units_sold <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span>        <span class="token operator">&lt;&lt;</span> item<span class="token punctuation">.</span>revenus <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span> <span class="token operator">&lt;&lt;</span> item<span class="token punctuation">.</span><span class="token function">avg_price</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> os<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>IO类属于不能被拷贝的类型，因此只能通过引用来传递</p></blockquote><h4 id="定义add函数"><a href="#定义add函数" class="headerlink" title="定义add函数"></a>定义add函数</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Sales_data <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">const</span> Sales_data<span class="token operator">&amp;</span> rhs<span class="token punctuation">,</span> <span class="token keyword">const</span> Sales_data<span class="token operator">&amp;</span> lhs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Sales_data sum <span class="token operator">=</span> lhs<span class="token punctuation">;</span>    sum<span class="token punctuation">.</span><span class="token function">combine</span><span class="token punctuation">(</span>lhs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-1-4-构造函数"><a href="#7-1-4-构造函数" class="headerlink" title="7.1.4 构造函数"></a>7.1.4 构造函数</h3><h4 id="合成的默认构造函数"><a href="#合成的默认构造函数" class="headerlink" title="合成的默认构造函数"></a>合成的默认构造函数</h4><p>类通过一个特殊的构造函数来控制默认初始化过程，这个函数叫做<font color="LightSeaGreen">默认构造函数</font>，无须任何实参</p><blockquote><ul><li>如果存在类内的初始值，用它来初始化成员，如<code>units_sold</code>和<code>revenus</code></li><li>否则，默认初始化，将<code>bookNo</code>初始化为空字符串</li></ul></blockquote><div class="uk-alert uk-alert-danger"><i class="fas fa-exclamation-triangle"></i> 只有当类没有声明任何构造函数时，编译器才会自动地生成默认构造函数</div><h4 id="定义Sales-data的构造函数"><a href="#定义Sales-data的构造函数" class="headerlink" title="定义Sales_data的构造函数"></a>定义Sales_data的构造函数</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">Sales_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">default</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>该构造函数不接受任何实参，所以它是一个默认构造函数，我们定义这个构造函数的目的仅仅是因为我们既需要其他形式的构造函数，也需要默认的构造函数</p><h4 id="构造函数初始值列表"><a href="#构造函数初始值列表" class="headerlink" title="构造函数初始值列表"></a>构造函数初始值列表</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">Sales_data</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> s<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">bookNo</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token function">Sales_data</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> s<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> n<span class="token punctuation">,</span> <span class="token keyword">double</span> p<span class="token punctuation">)</span><span class="token operator">:</span>     <span class="token function">bookNo</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">units_sold</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">revenus</span><span class="token punctuation">(</span>p <span class="token operator">*</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="在类的外部定义构造函数"><a href="#在类的外部定义构造函数" class="headerlink" title="在类的外部定义构造函数"></a>在类的外部定义构造函数</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token class-name">Sales_data</span><span class="token operator">::</span><span class="token function">Sales_data</span><span class="token punctuation">(</span>istream<span class="token operator">&amp;</span> is<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">read</span><span class="token punctuation">(</span>is<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="7-1-5-拷贝、赋值和析构"><a href="#7-1-5-拷贝、赋值和析构" class="headerlink" title="7.1.5 拷贝、赋值和析构"></a>7.1.5 拷贝、赋值和析构</h3><p>尽管编译器能替我们合成拷贝、赋值和销毁的操作，但是，对于某些类来说合成的版本无法正常工作。特别是，当类需要分配类对象之外的资源时，合成的版本常常会失效，所以只能自己写</p><p>不过，如果类包含<code>vector</code>或<code>string</code>成员，则其拷贝、赋值和销毁的合成版本能够正常工作</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++Primer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>155-最小栈</title>
      <link href="2021/10/25/LeetCode-155-%E6%9C%80%E5%B0%8F%E6%A0%88/"/>
      <url>2021/10/25/LeetCode-155-%E6%9C%80%E5%B0%8F%E6%A0%88/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-155-Min-Stack"><a href="#LeetCode-155-Min-Stack" class="headerlink" title="LeetCode 155. Min Stack"></a>LeetCode 155. Min Stack</h2><p><a href="https://leetcode.com/problems/min-stack/">LeetCode-155</a></p><p>Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.</p><p>Implement the MinStack class:</p><ul><li><code>MinStack()</code> initializes the stack object.</li><li><code>void push(int val)</code> pushes the element val onto the stack.</li><li><code>void pop()</code> removes the element on the top of the stack.</li><li><code>int top()</code>gets the top element of the stack.</li><li><code>int getMin()</code> retrieves the minimum element in the stack.</li></ul><p>定义栈的数据结构，请在该类型中实现一个能够得到栈的最小元素的 <code>min</code> 函数在该栈中，调用 <code>min</code>、<code>push</code> 及 <code>pop</code> 的时间复杂度都是 <code>O(1)</code>。</p><p>示例:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">MinStack minStack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">MinStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>minStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>minStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>minStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>minStack<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token operator">--</span><span class="token operator">></span> 返回 <span class="token operator">-</span><span class="token number">3.</span>minStack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>minStack<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token operator">--</span><span class="token operator">></span> 返回 <span class="token number">0.</span>minStack<span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token operator">--</span><span class="token operator">></span> 返回 <span class="token operator">-</span><span class="token number">2.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h3 id="method-栈"><a href="#method-栈" class="headerlink" title="method: 栈"></a>method: 栈</h3><p>用两个栈，一个<code>stackValue</code>存储每个数值，一个<code>stackMin</code>作单调栈，从栈底到栈顶单调递减</p><p>如果后面的数比当前的最小值大，那么他一定会先弹出，所以没必要入单调栈<br>比如，<code>1 2 3</code>分别入栈<code>stackValue</code><br><code>1</code>入栈<code>stackMin</code>，<code>2</code>和<code>3</code>不用，因为<code>2</code>和<code>3</code>肯定会在<code>1</code>之前出栈<code>stackValue</code>，在此期间最小值一直是<code>1</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">MinStack</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> stackValue<span class="token punctuation">;</span>    stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> stackMin<span class="token punctuation">;</span>    <span class="token function">MinStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        stackValue<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>stackMin<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> x <span class="token operator">&lt;=</span> stackMin<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">// 等于也要压栈</span>            stackMin<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">void</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> stackValue<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stackValue<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> stackMin<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> stackMin<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> stackValue<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> <span class="token function">getMin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> stackMin<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python常用方法</title>
      <link href="2021/10/24/Python-Python%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
      <url>2021/10/24/Python-Python%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<ul><li>enumerate</li></ul><p>同时遍历下标和元素</p><pre class="line-numbers language-py" data-language="py"><code class="language-py">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> num <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> num<span class="token punctuation">)</span><span class="token number">0</span> <span class="token number">1</span><span class="token number">1</span> <span class="token number">2</span><span class="token number">2</span> <span class="token number">3</span><span class="token number">3</span> <span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>conda环境</title>
      <link href="2021/10/23/Python-PyTorch-conda%E7%8E%AF%E5%A2%83/"/>
      <url>2021/10/23/Python-PyTorch-conda%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h2 id="新建环境"><a href="#新建环境" class="headerlink" title="新建环境"></a>新建环境</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda create -n name <span class="token assign-left variable">python</span><span class="token operator">=</span>版本<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="查看环境"><a href="#查看环境" class="headerlink" title="查看环境"></a>查看环境</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda info -e<span class="token comment"># conda environments:</span><span class="token comment">#</span>base                  *  D:<span class="token punctuation">\</span>software<span class="token punctuation">\</span>anaconda3pytorch                  D:<span class="token punctuation">\</span>software<span class="token punctuation">\</span>anaconda3<span class="token punctuation">\</span>envs<span class="token punctuation">\</span>pytorch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="激活环境"><a href="#激活环境" class="headerlink" title="激活环境"></a>激活环境</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda activate name<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="删除环境"><a href="#删除环境" class="headerlink" title="删除环境"></a>删除环境</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">conda remove -n name --all<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyTorch教程-2</title>
      <link href="2021/10/23/Python-PyTorch-PyTorch%E6%95%99%E7%A8%8B-2/"/>
      <url>2021/10/23/Python-PyTorch-PyTorch%E6%95%99%E7%A8%8B-2/</url>
      
        <content type="html"><![CDATA[<ul><li>reshape</li></ul><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token builtin">input</span> <span class="token operator">=</span> torch<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token comment"># tensor([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11])</span><span class="token builtin">input</span> <span class="token operator">=</span> torch<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># tensor([[ 0,  1,  2,  3],</span><span class="token comment">#         [ 4,  5,  6,  7],</span><span class="token comment">#         [ 8,  9, 10, 11]])</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>view</li></ul><p>返回一个张量，数据与输入张量相同，大小不同</p><pre class="line-numbers language-py" data-language="py"><code class="language-py">x <span class="token operator">=</span> torch<span class="token punctuation">.</span>randn<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token comment"># tensor([[ 1.5941, -0.1812],</span><span class="token comment">#         [ 0.5612,  1.5465]])</span><span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># torch.Size([2, 2])</span>y <span class="token operator">=</span> x<span class="token punctuation">.</span>view<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>   <span class="token comment"># 数据是一样的</span><span class="token comment"># tensor([ 1.5941, -0.1812,  0.5612,  1.5465])</span><span class="token keyword">print</span><span class="token punctuation">(</span>y<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 大小可以改变</span><span class="token comment"># torch.Size([4])</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>flatness</li></ul><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token builtin">input</span> <span class="token operator">=</span> torch<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># tensor([[0, 1, 2],</span><span class="token comment">#         [3, 4, 5]])</span>output <span class="token operator">=</span> torch<span class="token punctuation">.</span>flatten<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span><span class="token comment"># tensor([0, 1, 2, 3, 4, 5])</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>argmax</li></ul><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token builtin">input</span> <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                      <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">.</span>argmax<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 每行最大值下标</span>tensor<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>manual_seed</li></ul><p>随机数种子，每次运行的结果都是一样的</p><pre class="line-numbers language-py" data-language="py"><code class="language-py">seed <span class="token operator">=</span> <span class="token number">111</span>torch<span class="token punctuation">.</span>manual_seed<span class="token punctuation">(</span>seed<span class="token punctuation">)</span><span class="token comment"># tensor([[0.7156, 0.9140]])</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>Sequential</li></ul><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token keyword">class</span> <span class="token class-name">CNN</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>CNN<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>model1 <span class="token operator">=</span> Sequential<span class="token punctuation">(</span>            Conv2d<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            Conv2d<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            Conv2d<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> padding<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            MaxPool2d<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            Flatten<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            Linear<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            Linear<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> self<span class="token punctuation">.</span>model1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">return</span> xmodel <span class="token operator">=</span> CNN<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token builtin">input</span> <span class="token operator">=</span> torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span>output <span class="token operator">=</span> model<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>output<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token comment"># torch.Size([64, 10])</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PyTorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>协方差</title>
      <link href="2021/10/21/Math-%E6%A6%82%E7%8E%87%E8%AE%BA-%E5%8D%8F%E6%96%B9%E5%B7%AE/"/>
      <url>2021/10/21/Math-%E6%A6%82%E7%8E%87%E8%AE%BA-%E5%8D%8F%E6%96%B9%E5%B7%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="协方差定义"><a href="#协方差定义" class="headerlink" title="协方差定义"></a>协方差定义</h2><p>$X,Y$是两个随机变量，$X,Y$的协方差<code>covarianxe</code>定义为</p><script type="math/tex; mode=display">cov(X,Y) = \mathbb{E}[(X-\mu_x)(Y-\mu_y)]</script><p>其中，$\mathbb{E}[X]=\mu_x$</p><h2 id="协方差矩阵定义"><a href="#协方差矩阵定义" class="headerlink" title="协方差矩阵定义"></a>协方差矩阵定义</h2><p>这里默认每一行是一个观测值，每一列是一个随机变量</p><script type="math/tex; mode=display">\mathbf{X} = \begin{bmatrix}    a_{11} & a_{12} & \dots & a_{1n} \\    a_{21} & a_{22} & \dots & a_{2n} \\    \vdots & \vdots & \ddots & \vdots \\    a_{m1} & a_{m2} & \dots & a_{mn} \\\end{bmatrix}_{m \times n} = \begin{bmatrix}    \mathbf{x_{1}} & \mathbf{x_{2}} & \dots & \mathbf{x_{n}} \\\end{bmatrix}</script><p>协方差矩阵为</p><script type="math/tex; mode=display">cov = \frac{1}{m-1}\begin{bmatrix}    cov(x_1,x_1) & cov(x_1,x_2) & \dots & cov(x_1,x_n) \\    cov(x_2,x_1) & cov(x_2,x_2) & \dots & cov(x_2,x_n) \\    \vdots & \vdots & \ddots & \vdots \\    cov(x_m,x_1) & cov(x_m,x_2) & \dots & cov(x_m,x_n) \\\end{bmatrix}</script><p>从这里也可以看出</p><ul><li>协方差矩阵是对称矩阵</li><li>对角元素就是随机变量的方差<code>variance</code><script type="math/tex; mode=display">cov(x_i, x_i) = var(x_i) = \mathbb{E}[(x_i-\mathbb{E}[x_i])(x_i-\mathbb{E}[x_i])]</script></li></ul><p><strong>例子</strong>：</p><script type="math/tex; mode=display">\mathbf{X} = \begin{bmatrix}    1 & 2 & 3 \\    3 & 1 & 1 \\\end{bmatrix} = \begin{bmatrix}    \mathbf{x_{1}} & \mathbf{x_{2}} & \mathbf{x_{3}} \\\end{bmatrix}</script><ul><li>求每个随机变量的均值</li></ul><script type="math/tex; mode=display">\mathbf{\bar{x}} = \begin{bmatrix}    \bar{x}_{1} & \bar{x}_{2} & \bar{x}_{3} \\\end{bmatrix} = \begin{bmatrix}    2 & 1.5 & 2 \\\end{bmatrix}</script><ul><li>$\mathbf{X}$的每一列减去均值</li></ul><script type="math/tex; mode=display">\mathbf{X} = \begin{bmatrix}    -1 & 0.5 & 1 \\    1 & -0.5 & -1 \\\end{bmatrix}</script><ul><li>计算协方差矩阵</li></ul><script type="math/tex; mode=display">cov = \frac{1}{m-1}\mathbf{X}^T \mathbf{X} = \frac{1}{2}\begin{bmatrix}    2 & -1 & -2 \\    -1 & 0.5 & 1 \\    -2 & 1 & 2 \\\end{bmatrix}</script><h2 id="协方差的意义"><a href="#协方差的意义" class="headerlink" title="协方差的意义"></a>协方差的意义</h2><center><img src="/2021/10/21/Math-%E6%A6%82%E7%8E%87%E8%AE%BA-%E5%8D%8F%E6%96%B9%E5%B7%AE/111.png#pix_center" width="80%" height="80%" alt="正相关"></center><center><img src="/2021/10/21/Math-%E6%A6%82%E7%8E%87%E8%AE%BA-%E5%8D%8F%E6%96%B9%E5%B7%AE/222.png#pix_center" width="80%" height="80%" alt="负相关"></center><center><img src="/2021/10/21/Math-%E6%A6%82%E7%8E%87%E8%AE%BA-%E5%8D%8F%E6%96%B9%E5%B7%AE/233.png#pix_center" width="80%" height="80%" alt="不相关"></center><p>在图中的区域（1）中，有$X &gt; \mathbb{E}[X], Y &gt; \mathbb{E}[Y]$，所以$(X - \mathbb{E}[X])(Y - \mathbb{E}[Y]) &gt; 0$<br>在图中的区域（2）中，有$X &lt; \mathbb{E}[X], Y &gt; \mathbb{E}[Y]$，所以$(X - \mathbb{E}[X])(Y-\mathbb{E}[Y]) &lt; 0$<br>在图中的区域（3）中，有$X &gt; \mathbb{E}[X], Y&gt;\mathbb{E}[Y]$，所以$(X - \mathbb{E}[X])(Y - \mathbb{E}[Y]) &gt; 0$<br>在图中的区域（4）中，有$X &gt; \mathbb{E}[X], Y &gt; \mathbb{E}[Y]$，所以$(X - \mathbb{E}[X])(Y - \mathbb{E}[Y]) &gt; 0$</p><ul><li><p>当$X$与$Y$正相关时，它们的分布大部分在区域（1）和（3）中，小部分在区域（2）和（4）中，所以平均来说，有$\mathbb{E}[(X-\mathbb{E}[X])(Y-\mathbb{E}[Y])] &gt; 0$</p></li><li><p>当$X$与$Y$负相关时，它们的分布大部分在区域（2）和（4）中，小部分在区域（1）和（3）中，所以平均来说，有$\mathbb{E}[(X-\mathbb{E}[X])(Y-\mathbb{E}[Y])]&lt;  0$</p></li><li><p>当$X$与$Y$不相关时，它们在区域（1）和（3）中的分布，与在区域（2）和（4）中的分布几乎一样多，所以平均来说，有$\mathbb{E}[(X-\mathbb{E}[X])(Y-\mathbb{E}[Y])] = 0$</p></li></ul><p>所以，我们可以定义一个表示$X, Y$相互关系的数字特征，也就是<strong>协方差</strong></p><script type="math/tex; mode=display">cov(X,Y) = \mathbb{E}[(X-\mathbb{E}[X])(Y-\mathbb{E}[Y])]</script><ul><li>$cov(X, Y) &gt; 0$时，表明$X$与$Y$正相关</li><li>$cov(X, Y) &lt; 0$时，表明$X$与$Y$负相关</li><li>$cov(X, Y) = 0$时，表明$X$与$Y$不相关</li></ul><p>这就是协方差的意义</p>]]></content>
      
      
      
        <tags>
            
            <tag> 概率论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PyTorch教程-1</title>
      <link href="2021/10/20/Python-PyTorch-PyTorch%E6%95%99%E7%A8%8B-1/"/>
      <url>2021/10/20/Python-PyTorch-PyTorch%E6%95%99%E7%A8%8B-1/</url>
      
        <content type="html"><![CDATA[<p>查看<code>torch</code>版本号</p><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token keyword">print</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span>__version__<span class="token punctuation">)</span><span class="token comment"># 1.9.1+cu111</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="张量初始化"><a href="#张量初始化" class="headerlink" title="张量初始化"></a>张量初始化</h2><p>(1) 直接从数据初始化</p><pre class="line-numbers language-py" data-language="py"><code class="language-py">data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span>x_data <span class="token operator">=</span> torch<span class="token punctuation">.</span>tensor<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x_data<span class="token punctuation">)</span><span class="token comment"># tensor([[1, 2],</span><span class="token comment">#         [3, 4]])</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(2) 从<code>numpy</code>初始化</p><pre class="line-numbers language-py" data-language="py"><code class="language-py">np_array <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np_array<span class="token punctuation">)</span><span class="token comment"># [[1 2]</span><span class="token comment">#  [3 4]]</span>x_np <span class="token operator">=</span> torch<span class="token punctuation">.</span>from_numpy<span class="token punctuation">(</span>np_array<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x_np<span class="token punctuation">)</span><span class="token comment"># tensor([[1, 2],</span><span class="token comment">#         [3, 4]], dtype=torch.int32)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(3) 从另一个张量初始化</p><p><code>ones_like</code>会保持和原始数据同样的大小，数值替换为1<br>指定<code>dtype</code>可以修改数据类型</p><pre class="line-numbers language-py" data-language="py"><code class="language-py">x_ones <span class="token operator">=</span> torch<span class="token punctuation">.</span>ones_like<span class="token punctuation">(</span>x_data<span class="token punctuation">)</span> <span class="token comment"># 返回的tensor默认具有相同的torch.dtype和torch.device</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Ones Tensor: \n </span><span class="token interpolation"><span class="token punctuation">&#123;</span>x_ones<span class="token punctuation">&#125;</span></span><span class="token string"> \n"</span></span><span class="token punctuation">)</span><span class="token comment"># Ones Tensor: </span><span class="token comment">#  tensor([[1, 1],</span><span class="token comment">#         [1, 1]]) </span>x_rand <span class="token operator">=</span> torch<span class="token punctuation">.</span>rand_like<span class="token punctuation">(</span>x_data<span class="token punctuation">,</span> dtype<span class="token operator">=</span>torch<span class="token punctuation">.</span><span class="token builtin">float</span><span class="token punctuation">)</span> <span class="token comment"># 指定新的数据类型</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Random Tensor: \n </span><span class="token interpolation"><span class="token punctuation">&#123;</span>x_rand<span class="token punctuation">&#125;</span></span><span class="token string"> \n"</span></span><span class="token punctuation">)</span><span class="token comment"># Random Tensor: </span><span class="token comment">#  tensor([[0.5542, 0.4023],</span><span class="token comment">#         [0.5633, 0.9819]]) </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(4) 指定大小创建</p><pre class="line-numbers language-py" data-language="py"><code class="language-py">shape <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span><span class="token punctuation">)</span>rand_tensor <span class="token operator">=</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span>shape<span class="token punctuation">)</span>ones_tensor <span class="token operator">=</span> torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span>shape<span class="token punctuation">)</span>zeros_tensor <span class="token operator">=</span> torch<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>shape<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Random Tensor: \n </span><span class="token interpolation"><span class="token punctuation">&#123;</span>rand_tensor<span class="token punctuation">&#125;</span></span><span class="token string"> \n"</span></span><span class="token punctuation">)</span><span class="token comment"># Random Tensor: </span><span class="token comment">#  tensor([[0.5704, 0.2910, 0.4899],</span><span class="token comment">#         [0.9169, 0.8592, 0.7099]]) </span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Ones Tensor: \n </span><span class="token interpolation"><span class="token punctuation">&#123;</span>ones_tensor<span class="token punctuation">&#125;</span></span><span class="token string"> \n"</span></span><span class="token punctuation">)</span><span class="token comment"># Ones Tensor: </span><span class="token comment">#  tensor([[1., 1., 1.],</span><span class="token comment">#         [1., 1., 1.]]) </span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Zeros Tensor: \n </span><span class="token interpolation"><span class="token punctuation">&#123;</span>zeros_tensor<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token comment"># Zeros Tensor: </span><span class="token comment">#  tensor([[0., 0., 0.],</span><span class="token comment">#         [0., 0., 0.]])</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="张量属性"><a href="#张量属性" class="headerlink" title="张量属性"></a>张量属性</h2><ul><li><code>shape</code>：张量大小</li><li><code>dtype</code>：张量数据类型</li><li><code>device</code>：存储在什么设备上</li></ul><pre class="line-numbers language-py" data-language="py"><code class="language-py">tensor <span class="token operator">=</span> torch<span class="token punctuation">.</span>rand<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Shape of tensor: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>tensor<span class="token punctuation">.</span>shape<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Datatype of tensor: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>tensor<span class="token punctuation">.</span>dtype<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Device tensor is stored on: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>tensor<span class="token punctuation">.</span>device<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token comment"># Shape of tensor: torch.Size([3, 4])</span><span class="token comment"># Datatype of tensor: torch.float32</span><span class="token comment"># Device tensor is stored on: cpu</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="张量操作"><a href="#张量操作" class="headerlink" title="张量操作"></a>张量操作</h2><p>(1) 移动到<code>GPU</code></p><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token keyword">if</span> torch<span class="token punctuation">.</span>cuda<span class="token punctuation">.</span>is_available<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  tensor <span class="token operator">=</span> tensor<span class="token punctuation">.</span>to<span class="token punctuation">(</span><span class="token string">'cuda'</span><span class="token punctuation">)</span>  <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Device tensor is stored on: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>tensor<span class="token punctuation">.</span>device<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token comment"># Device tensor is stored on: cuda:0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>(2) 和<code>numpy</code>类似的索引</p><p>第1列赋值为0<br><pre class="line-numbers language-py" data-language="py"><code class="language-py">tensor <span class="token operator">=</span> torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>tensor<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">print</span><span class="token punctuation">(</span>tensor<span class="token punctuation">)</span><span class="token comment"># tensor([[1., 0., 1., 1.],</span><span class="token comment">#         [1., 0., 1., 1.],</span><span class="token comment">#         [1., 0., 1., 1.],</span><span class="token comment">#         [1., 0., 1., 1.]])</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><p>(3) 连接多个张量</p><p>按列连接<br><pre class="line-numbers language-py" data-language="py"><code class="language-py">t1 <span class="token operator">=</span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">[</span>tensor<span class="token punctuation">,</span> tensor<span class="token punctuation">,</span> tensor<span class="token punctuation">]</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token comment"># tensor([[1., 0., 1., 1.],</span><span class="token comment">#         [1., 0., 1., 1.],</span><span class="token comment">#         [1., 0., 1., 1.],</span><span class="token comment">#         [1., 0., 1., 1.],</span><span class="token comment">#         [1., 0., 1., 1.],</span><span class="token comment">#         [1., 0., 1., 1.],</span><span class="token comment">#         [1., 0., 1., 1.],</span><span class="token comment">#         [1., 0., 1., 1.],</span><span class="token comment">#         [1., 0., 1., 1.],</span><span class="token comment">#         [1., 0., 1., 1.],</span><span class="token comment">#         [1., 0., 1., 1.],</span><span class="token comment">#         [1., 0., 1., 1.]])</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><p>按行连接<br><pre class="line-numbers language-py" data-language="py"><code class="language-py">t1 <span class="token operator">=</span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">[</span>tensor<span class="token punctuation">,</span> tensor<span class="token punctuation">,</span> tensor<span class="token punctuation">]</span><span class="token punctuation">,</span> dim<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>t1<span class="token punctuation">)</span><span class="token comment"># tensor([[1., 0., 1., 1., 1., 0., 1., 1., 1., 0., 1., 1.],</span><span class="token comment">#         [1., 0., 1., 1., 1., 0., 1., 1., 1., 0., 1., 1.],</span><span class="token comment">#         [1., 0., 1., 1., 1., 0., 1., 1., 1., 0., 1., 1.],</span><span class="token comment">#         [1., 0., 1., 1., 1., 0., 1., 1., 1., 0., 1., 1.]])</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><p>(4) 张量相乘</p><p>对应元素相乘<br><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"tensor.mul(tensor) \n </span><span class="token interpolation"><span class="token punctuation">&#123;</span>tensor<span class="token punctuation">.</span>mul<span class="token punctuation">(</span>tensor<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string"> \n"</span></span><span class="token punctuation">)</span><span class="token comment"># tensor.mul(tensor) </span><span class="token comment">#  tensor([[1., 0., 1., 1.],</span><span class="token comment">#         [1., 0., 1., 1.],</span><span class="token comment">#         [1., 0., 1., 1.],</span><span class="token comment">#         [1., 0., 1., 1.]]) </span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"tensor * tensor \n </span><span class="token interpolation"><span class="token punctuation">&#123;</span>tensor <span class="token operator">*</span> tensor<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token comment"># tensor * tensor </span><span class="token comment">#  tensor([[1., 0., 1., 1.],</span><span class="token comment">#         [1., 0., 1., 1.],</span><span class="token comment">#         [1., 0., 1., 1.],</span><span class="token comment">#         [1., 0., 1., 1.]])</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><p>矩阵乘法</p><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"tensor.matmul(tensor.T) \n </span><span class="token interpolation"><span class="token punctuation">&#123;</span>tensor<span class="token punctuation">.</span>matmul<span class="token punctuation">(</span>tensor<span class="token punctuation">.</span>T<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string"> \n"</span></span><span class="token punctuation">)</span><span class="token comment"># tensor.matmul(tensor.T) </span><span class="token comment">#  tensor([[3., 3., 3., 3.],</span><span class="token comment">#         [3., 3., 3., 3.],</span><span class="token comment">#         [3., 3., 3., 3.],</span><span class="token comment">#         [3., 3., 3., 3.]]) </span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"tensor @ tensor.T \n </span><span class="token interpolation"><span class="token punctuation">&#123;</span>tensor @ tensor<span class="token punctuation">.</span>T<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token comment"># tensor @ tensor.T </span><span class="token comment">#  tensor([[3., 3., 3., 3.],</span><span class="token comment">#         [3., 3., 3., 3.],</span><span class="token comment">#         [3., 3., 3., 3.],</span><span class="token comment">#         [3., 3., 3., 3.]])</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(5) 直接更改元素</p><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token keyword">print</span><span class="token punctuation">(</span>tensor<span class="token punctuation">,</span> <span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token comment"># tensor([[1., 0., 1., 1.],</span><span class="token comment">#         [1., 0., 1., 1.],</span><span class="token comment">#         [1., 0., 1., 1.],</span><span class="token comment">#         [1., 0., 1., 1.]]) </span>tensor<span class="token punctuation">.</span>add_<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tensor<span class="token punctuation">)</span><span class="token comment"># tensor([[6., 5., 6., 6.],</span><span class="token comment">#         [6., 5., 6., 6.],</span><span class="token comment">#         [6., 5., 6., 6.],</span><span class="token comment">#         [6., 5., 6., 6.]])</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注</strong>：<code>PyTorch</code>操作<code>inplace</code>版本都有后缀<code>_</code>, 例如<code>x.copy_(y), x.t_()</code></p><h2 id="与numpy的转换"><a href="#与numpy的转换" class="headerlink" title="与numpy的转换"></a>与numpy的转换</h2><pre class="line-numbers language-py" data-language="py"><code class="language-py">t <span class="token operator">=</span> torch<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"t: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>t<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token comment"># t: tensor([1., 1., 1., 1., 1.])</span>n <span class="token operator">=</span> t<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"n: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>n<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token comment"># n: [1. 1. 1. 1. 1.]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>张量与<code>numpy</code>共享存储空间，<code>tensor</code>改变，<code>numpy</code>也会改变</p><pre class="line-numbers language-py" data-language="py"><code class="language-py">t<span class="token punctuation">.</span>add_<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"t: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>t<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token comment"># t: tensor([2., 2., 2., 2., 2.])</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"n: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>n<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token comment"># n: [2. 2. 2. 2. 2.]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>numpy</code>转为<code>tensor</code></p><pre class="line-numbers language-py" data-language="py"><code class="language-py">n <span class="token operator">=</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"n: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>n<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token comment"># n: [1. 1. 1. 1. 1.]</span>t <span class="token operator">=</span> torch<span class="token punctuation">.</span>from_numpy<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"t: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>t<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token comment"># t: tensor([1., 1., 1., 1., 1.], dtype=torch.float64)</span>np<span class="token punctuation">.</span>add<span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> out<span class="token operator">=</span>n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"n: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>n<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token comment"># n: [2. 2. 2. 2. 2.]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"t: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>t<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token comment"># t: tensor([2., 2., 2., 2., 2.], dtype=torch.float64)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PyTorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深拷贝与浅拷贝</title>
      <link href="2021/10/16/Python-%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
      <url>2021/10/16/Python-%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D/</url>
      
        <content type="html"><![CDATA[<h2 id="Python标签"><a href="#Python标签" class="headerlink" title="Python标签"></a>Python标签</h2><pre class="line-numbers language-py" data-language="py"><code class="language-py">res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">:</span>    res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>obj<span class="token punctuation">)</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># 2897774181960</span>func<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 2409845052424</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"res: "</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span>a<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"res: "</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span>res<span class="token punctuation">:</span>  <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span>res<span class="token punctuation">:</span>  <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从输出可以看到，<code>a</code>和<code>res[0]</code>的<code>id</code>一样，说明指向了同一块内存空间，所以<code>a</code>改变了之后<code>res[0]</code>也跟着改变了，你以为拷贝了，其实并没有</p><p>原因：</p><p><code>Python</code>没有变量，我们平时所说的变量其实只是<strong>标签</strong>，是<strong>引用</strong>。<br>执行：<code>values=[0,1,2]</code>的时候，<code>python</code>做的事情是首先创建一个列表对象<code>[0,1,2]</code>，然后给它贴上名为<code>values</code>的标签。如果随后执行<code>values=[3,4,5]</code>的话，<code>python</code>做的事情是创建另一个列表对象<code>[3,4,5]</code>，然后把刚才那张名为<code>values</code>的标签从前面的<code>[0,1,2]</code>对象上撕下来，重新贴到<code>[3,4,5]</code>这个对象上。</p><p>所以，这里的<code>a</code>和<code>res[0]</code>就相当于两张标签贴到了同一个对象<code>[1,2,3]</code>上</p><h2 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h2><p>解决办法是用拷贝，这里先说浅拷贝<code>shallow copy</code></p><p>注意：<code>[:]</code>生成对象的拷贝或者是复制序列，不再是引用和共享变量，但此法只能顶层复制</p><pre class="line-numbers language-py" data-language="py"><code class="language-py">res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">:</span>    res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>obj<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># 这里不一样</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment"># 1558831191048</span>func<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token comment"># 1558832493512</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"res: "</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span>a<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"a: "</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"res: "</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span>res<span class="token punctuation">:</span>  <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span>a<span class="token punctuation">:</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>res<span class="token punctuation">:</span>  <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到<code>a</code>和<code>res[0]</code>的<code>id</code>不一样了，<code>a</code>改变了之后，<code>res[0]</code>没有改变，对于这种场景，浅拷贝就适用了，但如果包含子对象，浅拷贝就有问题了</p><pre class="line-numbers language-py" data-language="py"><code class="language-py">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>b <span class="token operator">=</span> a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">8</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment"># [8, [1, 9], 3]</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>  <span class="token comment"># [0, [1, 9], 3]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到，<code>b[1][1]</code>也跟着改变了，这就是浅拷贝只做顶层拷贝的效果</p><center><img src="/2021/10/16/Python-%E6%B7%B1%E6%8B%B7%E8%B4%9D%E4%B8%8E%E6%B5%85%E6%8B%B7%E8%B4%9D/copy.png#pic_center" width="50%" height="50%"></center><p>原因从图里就可以看出来了，<code>a[1]</code>和<code>b[1]</code>还是指向了同一个对象</p><h2 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h2><p>解决办法使用深拷贝</p><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token keyword">import</span> copya <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>b <span class="token operator">=</span> copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 2071720571784</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">id</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 2071721298184</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">8</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>  <span class="token comment"># [8, [1, 9], 3]</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span>  <span class="token comment"># [0, [1, 2], 3]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>深拷贝之后就指向两个完全不同的对象了</p><p>对象也是一样</p><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token keyword">import</span> copy<span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>num <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>p1 <span class="token operator">=</span> Person<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>num<span class="token punctuation">)</span>   <span class="token comment"># [1, 2]</span>p2 <span class="token operator">=</span> p1         <span class="token comment"># 指向同一个内存</span><span class="token keyword">print</span><span class="token punctuation">(</span>p2<span class="token punctuation">.</span>num<span class="token punctuation">)</span>   <span class="token comment"># [1, 2]</span>p3 <span class="token operator">=</span> copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>p1<span class="token punctuation">)</span>  <span class="token comment"># 深拷贝</span><span class="token keyword">print</span><span class="token punctuation">(</span>p3<span class="token punctuation">.</span>num<span class="token punctuation">)</span>   <span class="token comment"># [1, 2]</span>p1<span class="token punctuation">.</span>num<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>num<span class="token punctuation">)</span>   <span class="token comment"># [1, 2, 3]</span><span class="token keyword">print</span><span class="token punctuation">(</span>p2<span class="token punctuation">.</span>num<span class="token punctuation">)</span>   <span class="token comment"># [1, 2, 3] 也改变了</span><span class="token keyword">print</span><span class="token punctuation">(</span>p3<span class="token punctuation">.</span>num<span class="token punctuation">)</span>   <span class="token comment"># [1, 2] 没有改变</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>概率分布函数</title>
      <link href="2021/10/14/Math-%E6%A6%82%E7%8E%87%E8%AE%BA-%E6%A6%82%E7%8E%87%E5%88%86%E5%B8%83%E5%87%BD%E6%95%B0/"/>
      <url>2021/10/14/Math-%E6%A6%82%E7%8E%87%E8%AE%BA-%E6%A6%82%E7%8E%87%E5%88%86%E5%B8%83%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="Discrete-Random-Variable"><a href="#Discrete-Random-Variable" class="headerlink" title="Discrete Random Variable"></a>Discrete Random Variable</h3><p>离散型随机变量，随机变量的取值是有穷可列举的<br>通常用大写字母表示随机变量，用小写字母表示随机变量的观测值</p><h4 id="Probabolity-Mass-Function"><a href="#Probabolity-Mass-Function" class="headerlink" title="Probabolity Mass Function"></a>Probabolity Mass Function</h4><p>直译为概率质量函数，教科书常用<strong>概率分布</strong>，表明随机变量有哪几种取值可能，每种所对应的概率是多少，所以严格来讲应该叫<strong>离散型随机变量值分布与概率分布</strong></p><p>用数学语言来讲，<strong>概率分布</strong>是表示所有$P(X=x)$或$p(x)$的图、表、公式</p><p>例如抛骰子</p><p><img src="/2021/10/14/Math-%E6%A6%82%E7%8E%87%E8%AE%BA-%E6%A6%82%E7%8E%87%E5%88%86%E5%B8%83%E5%87%BD%E6%95%B0/table2.png" alt></p><center><img src="/2021/10/14/Math-%E6%A6%82%E7%8E%87%E8%AE%BA-%E6%A6%82%E7%8E%87%E5%88%86%E5%B8%83%E5%87%BD%E6%95%B0/111.png#pic_center" width="50%" height="50%"><br><div style="color:orange; border-bottom: 1px solid #d9d9d9;display: inline-block;color: #999;padding: 2px;">概率分布</div></center><h4 id="Cumulative-Distribution-Function"><a href="#Cumulative-Distribution-Function" class="headerlink" title="Cumulative Distribution Function"></a>Cumulative Distribution Function</h4><p>直译为<strong>累计分布函数</strong>，教科书直接叫<strong>分布函数</strong>，是对概率分布的<strong>累加</strong></p><p><img src="/2021/10/14/Math-%E6%A6%82%E7%8E%87%E8%AE%BA-%E6%A6%82%E7%8E%87%E5%88%86%E5%B8%83%E5%87%BD%E6%95%B0/222.png" alt></p><p>可以看到</p><script type="math/tex; mode=display">F_X(x = 4) = \mathbb{P}(X \leq 4) = \sum_{x_i=1}^{4}p(x_i)</script><h4 id="Expectation-Mean"><a href="#Expectation-Mean" class="headerlink" title="Expectation/Mean"></a>Expectation/Mean</h4><p>对于离散随机变量$X$，函数$h(X)$关于变量$X$的期望是</p><script type="math/tex; mode=display">\mathbb{E}_{X\sim p(\cdot)}[h(X)] = \sum_{x \in \mathcal{X}}p(x) \cdot h(x)</script><h3 id="Continuous-Random-Variable"><a href="#Continuous-Random-Variable" class="headerlink" title="Continuous Random Variable"></a>Continuous Random Variable</h3><p>连续型随机变量</p><h4 id="Probability-Density-Function"><a href="#Probability-Density-Function" class="headerlink" title="Probability Density Function"></a>Probability Density Function</h4><p>连续型随机变量的概率分布，称为<strong>概率密度函数</strong></p><p>性质：</p><ol><li>函数值大于等于0</li><li>在区间$(-\infty, +\infty)$上的积分为1</li><li>连续型随机变量的取值为区间$(a, b]$，其概率等于概率密度函数在相应区间上的面积</li></ol><script type="math/tex; mode=display">\mathbb{P}\left\{a < X \leq b\right\} = F_X(b) - F_X(a) = \int_{a}^{b}f(x)dx</script><h4 id="Cumulative-Distribution-Function-1"><a href="#Cumulative-Distribution-Function-1" class="headerlink" title="Cumulative Distribution Function"></a>Cumulative Distribution Function</h4><p>连续型随机变量也是叫<strong>分布函数</strong>，由概率密度函数积分得到</p><script type="math/tex; mode=display">\mathbb{P} \left\{X \leq x\right\} = F_X(x) = \int_{-\infty}^{x}f(u)du</script><p><img src="/2021/10/14/Math-%E6%A6%82%E7%8E%87%E8%AE%BA-%E6%A6%82%E7%8E%87%E5%88%86%E5%B8%83%E5%87%BD%E6%95%B0/222333.png" alt></p><p>所以，概率密度函数与横轴的面积就是对应分布函数的函数值</p><h4 id="Expectation-Mean-1"><a href="#Expectation-Mean-1" class="headerlink" title="Expectation/Mean"></a>Expectation/Mean</h4><p>对于连续随机变量$X$，概率密度函数为$p(x)$，对$X$求期望</p><script type="math/tex; mode=display">\mathbb{E}_{X \sim p(\cdot)}[X] = \int_{\mathcal{X}} x \cdot p(x) dx</script><p>花体$\mathcal{X}$是随机变量$X$的取值范围</p><p>函数$h(X)$关于变量$X$的期望是</p><script type="math/tex; mode=display">\mathbb{E}_{X\sim p(\cdot)}[h(X)] = \int_{\mathcal{X}} h(x) \cdot p(x) dx</script><p>对某个随机随机变量求期望就可以消掉该变量</p><p>例如：$g(X,Y)=\frac{1}{5}XY$为二元函数，$X$的取值范围为$[0,10]$，概率密度函数为$p(x)=\frac{1}{10}$，对$X$求期望</p><script type="math/tex; mode=display">\begin{align*}\mathbb{E}_{X \sim p(\cdot) }[g(X,Y)] &= \int_{\mathcal{X}}g(x, Y) \cdot p(x) dx \\&= \int_{0}^{10}\frac{1}{5}xY \cdot \frac{1}{10} dx \\&= Y\end{align*}</script><p>可以看到，结果是不含随机变量$X$的，只包含随机变量$Y$</p><h4 id="Conditional-Expectation-Mean"><a href="#Conditional-Expectation-Mean" class="headerlink" title="Conditional Expectation/Mean"></a>Conditional Expectation/Mean</h4><p>如果在$Y=y$条件下$X$的条件概率密度函数为$f(x|Y=y)$，那么$X$的条件期望为</p><script type="math/tex; mode=display">\mathbb{E}_{X \sim f(\cdot | Y=y)} [X|Y=y] = \int_{\mathcal{X}} x \cdot f(x | Y=y) dx</script><p>或者直接写成</p><script type="math/tex; mode=display">\mathbb{E}_{X \sim f(\cdot | y)} [X|Y=y] = \int_{\mathcal{X}} x \cdot f(x | y) dx</script><p>从这里可以看出来，对$X$求期望会消掉$X$，所以条件期望$\mathbb{E}[X|Y=y]$的结果是一个$Y=y$条件下的确定的值<br>如果$Y$没有取值，那$\mathbb{E}[X|Y]$依然是一个关于$Y$的随机变量，有概率密度为$f(y)$，就可以求期望</p><script type="math/tex; mode=display">\begin{align*}\mathbb{E}_{Y \sim p(\cdot)} [\mathbb{E} [X|Y] ] &= \int_{\mathcal{Y}} {\color{teal}{\int_{\mathcal{X}} x f(x|y) dx}} \cdot f(y) dy \\&= \int_{\mathcal{Y}} \int_{\mathcal{X}} x \cdot {\color{Tomato}{f(x|y)f(y)}} dx  dy \\&= \int_{\mathcal{Y}} \int_{\mathcal{X}} x {\color{Tomato}{f(x,y)}} dy \\&= \mathbb{E}\left[X\right]\end{align*}</script><p>这里用到了贝叶斯公式</p><script type="math/tex; mode=display">f(x|y) = \frac{f(x, y)}{f(y)}</script>]]></content>
      
      
      <categories>
          
          <category> 概率论 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 概率论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件</title>
      <link href="2021/10/10/Linux-%E6%96%87%E4%BB%B6/"/>
      <url>2021/10/10/Linux-%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="python"><a href="#python" class="headerlink" title="python"></a>python</h2><pre class="line-numbers language-py" data-language="py"><code class="language-py">#!&#x2F;usr&#x2F;bin&#x2F;env python3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用哪个解释器去解释/运行脚本</p><h2 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">7</span> <span class="token operator">=</span> <span class="token number">4</span> + <span class="token number">2</span> + <span class="token number">1</span>r<span class="token punctuation">(</span>可读<span class="token punctuation">)</span> w<span class="token punctuation">(</span>可写<span class="token punctuation">)</span> x<span class="token punctuation">(</span>可执行<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>分为三个部分:</p><ul><li><code>Owner</code></li><li><code>Group</code></li><li><code>Others</code></li></ul><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token number">644</span> -rw-r--r-- 所有者可读可写<span class="token number">755</span> -rwxr-xr-x 所有者可读可写可执行<span class="token number">777</span> -rwxrwxrwx<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="文件基本操作"><a href="#文件基本操作" class="headerlink" title="文件基本操作"></a>文件基本操作</h2><p><code>mv</code>: 英文<code>move</code>，移动文件，重命名<br><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mv</span> hwllo.txt hello.txt  <span class="token comment"># 重命名</span><span class="token function">mv</span> dir1 dir2            <span class="token comment"># 移动文件夹</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><p><code>cp</code>: 英文<code>copy</code>，复制文件<br><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> a.txt a_copy.txt<span class="token function">cp</span> -r dir1 dir2     <span class="token comment"># 复制文件夹</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><p><code>rm</code>: 英文<code>remove</code>，删除文件，没有回收站<br><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> a.txt        <span class="token comment"># 删除单个文件</span><span class="token function">rm</span> a.txt b.txt c.txt    <span class="token comment"># 删除多个文件</span><span class="token function">rm</span> -r dir1      <span class="token comment"># 删除文件夹</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></p><h2 id="环境变量"><a href="#环境变量" class="headerlink" title="环境变量"></a>环境变量</h2><p><code>$PATH</code>: 以<code>:</code>分割的文件夹列表<br>指明到哪里去找可执行文件(按照文件夹的顺序查找)</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span><span class="token builtin class-name">:</span><span class="token environment constant">$PWD</span>     <span class="token comment"># 把当前目录追加到PATH中</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>只对当前终端有效<br>要对全局有效的话要加入到<code>.bashrc</code>或<code>.zshrc</code></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>特征值与特征向量</title>
      <link href="2021/10/09/Math-%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0-%E7%89%B9%E5%BE%81%E5%80%BC%E4%B8%8E%E7%89%B9%E5%BE%81%E5%90%91%E9%87%8F/"/>
      <url>2021/10/09/Math-%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0-%E7%89%B9%E5%BE%81%E5%80%BC%E4%B8%8E%E7%89%B9%E5%BE%81%E5%90%91%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>设$A$为$n \times n$阶方阵，若存在常数$\lambda$及$n$维<strong>非零</strong>向量$\boldsymbol{v}$，使得$A \boldsymbol{v} = \lambda \boldsymbol{v}$，则称$\lambda$是矩阵$A$的特征值<code>eigenvalue</code>，$\boldsymbol{v}$是$A$属于特征值$\lambda$的特征向量<code>eigenvector</code></p><p>向量$\boldsymbol{v}$左乘矩阵$A$意味着对向量$\boldsymbol{v}$做变换，等式右边是一个常数乘以向量，说明只有拉伸变换，没有旋转变换</p><h2 id="求矩阵特征值与特征向量"><a href="#求矩阵特征值与特征向量" class="headerlink" title="求矩阵特征值与特征向量"></a>求矩阵特征值与特征向量</h2><p>解方程$(A - \lambda I) \boldsymbol{v} = \boldsymbol{0}$，等价于$det(A - \lambda I) = 0$</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>矩阵$\begin{bmatrix}3 &amp; 1 \\ 0 &amp; 2\end{bmatrix}$的特征值为$\lambda_1 = 2, \lambda_2 = 3$，对应的特征向量是$y=-x$和$y=0$上的向量，说明这两条直线上的向量分别被拉伸了2倍和3倍</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">R <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token number">0</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">[</span>V<span class="token punctuation">,</span> D<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">eig</span><span class="token punctuation">(</span>R<span class="token punctuation">)</span> <span class="token comment">// 给出的是单位特征向量</span>V <span class="token operator">=</span>    <span class="token number">1.0000</span>   <span class="token operator">-</span><span class="token number">0.7071</span>         <span class="token number">0</span>    <span class="token number">0.7071</span>D <span class="token operator">=</span>    <span class="token number">3</span>    <span class="token number">0</span>    <span class="token number">0</span>    <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>(1) 求矩阵的高次幂</p><p>我们知道对角矩阵的$N$次幂就是对角元素的$N$次幂</p><script type="math/tex; mode=display">\begin{bmatrix}a & 0 \\ 0 & b\end{bmatrix}^n = \begin{bmatrix}a^n & 0 \\ 0 & b^n\end{bmatrix}</script><p>因为$A\boldsymbol{v} = \lambda \boldsymbol{v}$<br>所以</p><script type="math/tex; mode=display">\begin{aligned}& \quad \enspace \boldsymbol{v}^{-1} A \boldsymbol{v} = \boldsymbol{v}^{-1} \lambda \boldsymbol{v} = \lambda \\& \Leftrightarrow A = \boldsymbol{v} \lambda \boldsymbol{v}^{-1} \\& \Leftrightarrow A^n = \boldsymbol{v} \lambda \boldsymbol{v}^{-1} \boldsymbol{v} \lambda \boldsymbol{v}^{-1} \ldots \boldsymbol{v} \lambda \boldsymbol{v}^{-1} = \boldsymbol{v} \lambda^n \boldsymbol{v}^{-1}\end{aligned}</script><p>例子：<br>直接算</p><script type="math/tex; mode=display">\begin{bmatrix}3 & 1 \\ 0 & 2\end{bmatrix}^2 = \begin{bmatrix}9 & 5 \\ 0 & 4\end{bmatrix}</script><p>用特征值和特征向量算</p><script type="math/tex; mode=display">\begin{bmatrix}3 & 1 \\ 0 & 2\end{bmatrix}^2 = \begin{bmatrix}1 & 1 \\ 0 & -1\end{bmatrix}\begin{bmatrix}3^2 & 0 \\ 0 & 2^2\end{bmatrix}\begin{bmatrix}1 & 1 \\ 0 & -1\end{bmatrix}^{-1} = \begin{bmatrix}9 & 5 \\ 0 & 4\end{bmatrix}</script><p>结果是一样的</p><p>(2) 旋转轴</p><p>对于三维旋转矩阵，特征向量就是在变换中没有旋转的向量，也就是旋转轴，所以可以通过求旋转矩阵的特征向量得到<strong>旋转轴</strong></p>]]></content>
      
      
      <categories>
          
          <category> 线性代数 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线性代数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>半正定矩阵</title>
      <link href="2021/10/09/Math-%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0-%E5%8D%8A%E6%AD%A3%E5%AE%9A%E7%9F%A9%E9%98%B5/"/>
      <url>2021/10/09/Math-%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0-%E5%8D%8A%E6%AD%A3%E5%AE%9A%E7%9F%A9%E9%98%B5/</url>
      
        <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>半正定矩阵的定义为：给定一个大小为$n \times n$的实对称矩阵$M$，若对于任意长度为$n$的非零向量$X$，有$X^{T}MX \ge 0$恒成立，则矩阵$M$是一个<strong>半正定矩阵</strong>，若有$X^{T}MX &gt; 0$恒成立，则矩阵$M$是一个<strong>正定矩阵</strong></p><p>理解：<br>$X$是<strong>向量</strong>，$M$看成<strong>变换矩阵</strong><br>向量左乘矩阵，相当于对向量做<strong>线性变换</strong>，记变换后的结果为$Y$，则半正定矩阵可写成：$X^{T}Y \ge 0$，即为两个向量的内积，根据向量夹角公式有</p><script type="math/tex; mode=display">cos\theta = \frac{X^{T} Y}{||X|| \cdot ||Y||}</script><p>所以半正定矩阵的含义：向量$X$经过$M$矩阵变换后的结果与自身的夹角小于等于$90^{\circ}$，这样的矩阵称为半正定矩阵</p><h2 id="半正定判断"><a href="#半正定判断" class="headerlink" title="半正定判断"></a>半正定判断</h2><h3 id="特征值判断"><a href="#特征值判断" class="headerlink" title="特征值判断"></a>特征值判断</h3><ul><li>半正定：所有特征值都大于等于0</li><li>正定：所以特征值都大于0</li></ul><h3 id="matlab求特征值"><a href="#matlab求特征值" class="headerlink" title="matlab求特征值"></a>matlab求特征值</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">A <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span><span class="token punctuation">;</span> <span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">[</span>V<span class="token punctuation">,</span> D<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">eig</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// V是特征向量，D是对应的特征值</span>V <span class="token operator">=</span>   <span class="token operator">-</span><span class="token number">0.2320</span>   <span class="token operator">-</span><span class="token number">0.7858</span>    <span class="token number">0.4082</span>   <span class="token operator">-</span><span class="token number">0.5253</span>   <span class="token operator">-</span><span class="token number">0.0868</span>   <span class="token operator">-</span><span class="token number">0.8165</span>   <span class="token operator">-</span><span class="token number">0.8187</span>    <span class="token number">0.6123</span>    <span class="token number">0.4082</span>D <span class="token operator">=</span>   <span class="token number">16.1168</span>         <span class="token number">0</span>         <span class="token number">0</span>         <span class="token number">0</span>   <span class="token operator">-</span><span class="token number">1.1168</span>         <span class="token number">0</span>         <span class="token number">0</span>         <span class="token number">0</span>   <span class="token operator">-</span><span class="token number">0.0000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有负的特征值，所以A不是半正定矩阵</p><h3 id="行列式判断"><a href="#行列式判断" class="headerlink" title="行列式判断"></a>行列式判断</h3><p>如果矩阵$M$的行列式$|M|$的各阶顺序主子式都大于0，则矩阵$M$为正定矩阵<br>如果奇数阶为负，偶数阶为正，则矩阵$M$为负定矩阵</p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>多元函数$f(\boldsymbol{x})$在点$\boldsymbol{x}_k$取极值的必要条件是</p><script type="math/tex; mode=display">\nabla f(\boldsymbol{x}_k) = 0</script><p>在$\boldsymbol{x}_k$点泰勒展开</p><script type="math/tex; mode=display">f(\boldsymbol{x}) - f(\boldsymbol{x}_k) \approx [\nabla f(\boldsymbol{x}_k)]^{\mathrm{T}}[\boldsymbol{x} - \boldsymbol{x}_k] + \frac{1}{2} [\boldsymbol{x} - \boldsymbol{x}_k]^{\mathrm{T}} \boldsymbol{H}(\boldsymbol{x}_k) [\boldsymbol{x} - \boldsymbol{x}_k]</script><p>令$\Delta \boldsymbol{x} = \boldsymbol{x} - \boldsymbol{x}_k$，代入可得</p><script type="math/tex; mode=display">f(\boldsymbol{x}) - f(\boldsymbol{x}_k) \approx \frac{1}{2} \Delta \boldsymbol{x}^{\mathrm{T}} \boldsymbol{H}(\boldsymbol{x}_k) \Delta \boldsymbol{x}</script><p>要让$\boldsymbol{x}_k$为<font color="red">极小值点</font>，就必须保证$\boldsymbol{x}_k$领域内的一切$\boldsymbol{x}$，恒有$f(\boldsymbol{x}_k) &lt; f(\boldsymbol{x})$，也就是$\Delta \boldsymbol{x}^{\mathrm{T}} \boldsymbol{H}(\boldsymbol{x}_k) \Delta \boldsymbol{x} &gt; 0$，所以$\boldsymbol{H}(\boldsymbol{x}_k)$必须为<font color="red">正定矩阵</font><br>类似的，若要保证$\boldsymbol{x}_k$为<font color="blue">极大值点</font>，$\boldsymbol{H}(\boldsymbol{x}_k)$必须为<font color="blue">负定矩阵</font></p><p><strong>总结</strong><br>对于多元函数$f(\boldsymbol{x})$，如果$\boldsymbol{x}_k$是驻点，也就是$\nabla f(\boldsymbol{x}_k) = 0$，那么</p><ul><li>若$\boldsymbol{H}(\boldsymbol{x}_k)$为正定矩阵，则$\boldsymbol{x}_k$为极小值</li><li>若$\boldsymbol{H}(\boldsymbol{x}_k)$为负定矩阵，则$\boldsymbol{x}_k$为极大值</li></ul><script type="math/tex; mode=display">\boldsymbol{H}_{ij} = \frac{\partial ^2 f}{\partial x_i \partial x_j}</script><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p>求$f(\boldsymbol{x}) = x_1^2+x_2^2-6x_1-4x_2+9$的极值<br>先求梯度向量</p><script type="math/tex; mode=display">\nabla f(\boldsymbol{x}) = \begin{bmatrix}    2x_1-6 \\    2x_2-4\end{bmatrix}</script><p>再求<code>Hessian</code>矩阵</p><script type="math/tex; mode=display">\boldsymbol{H}(\boldsymbol{x}) = \begin{bmatrix}    2 & 0 \\    0 & 2\end{bmatrix}</script><p>令$\nabla f(\boldsymbol{x}) = 0$可得驻点为$\boldsymbol{x}_k = \begin{bmatrix}3 &amp; 2 \end{bmatrix}^\mathrm{T}$，又因为$\boldsymbol{H}(\boldsymbol{x}_k)$为正定矩阵，所以$\boldsymbol{x}_k$是极小值点，对应极小值为$f(\boldsymbol{x}) = -4$</p><p><code>matlab</code>验证</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">n <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">:</span><span class="token number">0.1</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token operator">-</span><span class="token number">10</span><span class="token operator">:</span><span class="token number">0.1</span><span class="token operator">:</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">[</span>x1<span class="token punctuation">,</span> x2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">meshgrid</span><span class="token punctuation">(</span><span class="token function">n</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">n</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>f <span class="token operator">=</span> x1<span class="token punctuation">.</span><span class="token operator">^</span><span class="token number">2</span> <span class="token operator">+</span> x2<span class="token punctuation">.</span><span class="token operator">^</span><span class="token number">2</span> <span class="token operator">-</span> <span class="token number">6</span><span class="token operator">*</span>x1 <span class="token operator">-</span> <span class="token number">4</span><span class="token operator">*</span>x2 <span class="token operator">+</span> <span class="token number">9</span><span class="token punctuation">;</span>minval <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span><span class="token function">min</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">[</span>row<span class="token punctuation">,</span> column<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>f <span class="token operator">==</span> minval<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">mesh</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">x1</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span> column<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">x2</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span> column<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/10/09/Math-%E7%BA%BF%E6%80%A7%E4%BB%A3%E6%95%B0-%E5%8D%8A%E6%AD%A3%E5%AE%9A%E7%9F%A9%E9%98%B5/ff.png" alt></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">minval <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">4</span>x1 <span class="token operator">=</span> <span class="token number">3</span>x2 <span class="token operator">=</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 线性代数 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 线性代数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>91-解码方法</title>
      <link href="2021/10/07/LeetCode-91-%E8%A7%A3%E7%A0%81%E6%96%B9%E6%B3%95/"/>
      <url>2021/10/07/LeetCode-91-%E8%A7%A3%E7%A0%81%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-91-Decode-resays"><a href="#LeetCode-91-Decode-resays" class="headerlink" title="LeetCode 91. Decode resays"></a>LeetCode 91. Decode resays</h2><p><a href="https://leetcode.com/problems/decode-ways/">LeetCode-91</a></p><p>A message containing letters from <code>A-Z</code> can be encoded into <code>numbers</code> using the folloresing mapping:<br><pre class="line-numbers language-none"><code class="language-none">&#39;A&#39; -&gt; &quot;1&quot;&#39;B&#39; -&gt; &quot;2&quot;...&#39;Z&#39; -&gt; &quot;26&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><br>To decode an encoded message, all the digits must be grouped then mapped back into letters using the reverse of the mapping above (there may be multiple resays). For example, “11106” can be mapped into:<br><pre class="line-numbers language-none"><code class="language-none">&quot;AAJF&quot; resith the grouping (1 1 10 6)&quot;KJF&quot; resith the grouping (11 10 6)Note that the grouping (1 11 06) is invalid because &quot;06&quot; cannot be mapped into &#39;F&#39; since &quot;6&quot; is different from &quot;06&quot;.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br>Given a string <code>s</code> containing <strong>only digits</strong>, return the number of resays to decode it.</p><p>The ansreser is guaranteed to fit in a <code>32-bit</code> integer.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> s <span class="token operator">=</span> <span class="token string">"12"</span>Output<span class="token operator">:</span> <span class="token number">2</span>Explanation<span class="token operator">:</span> <span class="token string">"12"</span> could be decoded as <span class="token string">"AB"</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token string">"L"</span> <span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br>Example 2:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> s <span class="token operator">=</span> <span class="token string">"226"</span>Output<span class="token operator">:</span> <span class="token number">3</span>Explanation<span class="token operator">:</span> <span class="token string">"226"</span> could be decoded as <span class="token string">"BZ"</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token number">26</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"VF"</span> <span class="token punctuation">(</span><span class="token number">22</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">or</span> <span class="token string">"BBF"</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token number">2</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></p><h3 id="method-1-记忆化搜索"><a href="#method-1-记忆化搜索" class="headerlink" title="method 1: 记忆化搜索"></a>method 1: 记忆化搜索</h3><p>一个字符串的解码方法=去除第一个字符的解码方法+去除前连个字符</p><p>记忆化方法，<code>map</code>存储每个下标对应的解码数，重复处理下标时可以立即返回</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> hash<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">reversal</span><span class="token punctuation">(</span>string<span class="token operator">&amp;</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>hash<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> hash<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// 首字母为0，不合法</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">>=</span> r<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>       <span class="token comment">// 只有一个字符或空</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token function">reversal</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 一个字符的情况</span>    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">>=</span> <span class="token number">10</span> <span class="token operator">&amp;&amp;</span> num <span class="token operator">&lt;=</span> <span class="token number">26</span><span class="token punctuation">)</span>        res <span class="token operator">+=</span> <span class="token function">reversal</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> l <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 两个字符的情况</span>    hash<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">numDecodings</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">reversal</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="method-2-动态规划"><a href="#method-2-动态规划" class="headerlink" title="method 2: 动态规划"></a>method 2: 动态规划</h3><p>0只能和前一个数搭配，如果搭出来是无效的，就直接返回0</p><p>基本模型是<code>dp[i] = dp[i-1] + dp[i-2]</code><br>不过要加一些条件，如果<code>s[i]</code>有效，就是<code>dp[i] += dp[i-1]</code><br>如果<code>s[i-1]s[i]</code>也有效，再加上<code>dp[i-2]</code></p><p><code>dp[1]</code>要特殊处理一下，不然会越界取到<code>dp[-1]</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">isValue</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">!=</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> <span class="token function">isValue</span><span class="token punctuation">(</span><span class="token keyword">char</span> c1<span class="token punctuation">,</span> <span class="token keyword">char</span> c2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token punctuation">(</span>c1 <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token punctuation">(</span>c2 <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">>=</span> <span class="token number">10</span> <span class="token operator">&amp;&amp;</span> num <span class="token operator">&lt;=</span> <span class="token number">26</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">numDecodings</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">dp</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// 已经确保s[0]有效，还要考虑dp[1]</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isValue</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isValue</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment">// 30 40之类无效的</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isValue</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isValue</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isValue</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isValue</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isValue</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isValue</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> dp<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用变量替换数组，就不用考虑越界的问题了</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">numDecodings</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> dp0 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>     <span class="token comment">// 相当于dp[i-1]</span>    <span class="token keyword">int</span> dp1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>     <span class="token comment">// 相当于dp[i-2]</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// 相当于dp[i]</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isValue</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isValue</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isValue</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> res <span class="token operator">+=</span> dp0<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isValue</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> res <span class="token operator">+=</span> dp1<span class="token punctuation">;</span>        dp1 <span class="token operator">=</span> dp0<span class="token punctuation">;</span>    <span class="token comment">// dp[i-1]在下一次迭代就变成了dp[i-2]</span>        dp0 <span class="token operator">=</span> res<span class="token punctuation">;</span>     <span class="token comment">// dp[i]在下一次迭代就变成了dp[i-1]</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> dp1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 记忆化搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>189-旋转数组</title>
      <link href="2021/10/07/LeetCode-189-%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84/"/>
      <url>2021/10/07/LeetCode-189-%E6%97%8B%E8%BD%AC%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-189-Rotate-Array"><a href="#LeetCode-189-Rotate-Array" class="headerlink" title="LeetCode 189. Rotate Array"></a>LeetCode 189. Rotate Array</h2><p><a href="https://leetcode.com/problems/rotate-array/">LeetCode-189</a></p><p>Given an array, <strong>rotate</strong> the array to the right by <code>k</code> steps, where k is non-negative.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">3</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>Explanation<span class="token operator">:</span>rotate <span class="token number">1</span> steps to the right<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>rotate <span class="token number">2</span> steps to the right<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>rotate <span class="token number">3</span> steps to the right<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h3 id="method"><a href="#method" class="headerlink" title="method"></a>method</h3><p>把<code>nums[i]</code>赋值到移动后的位置，注意取模</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">rotate</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">res</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> res<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        res<span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">+</span> k<span class="token punctuation">)</span> <span class="token operator">%</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    nums <span class="token operator">=</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模拟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>stm32-基础</title>
      <link href="2021/10/01/%E5%B5%8C%E5%85%A5%E5%BC%8F-stm32-%E5%9F%BA%E7%A1%80/"/>
      <url>2021/10/01/%E5%B5%8C%E5%85%A5%E5%BC%8F-stm32-%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="LED"><a href="#LED" class="headerlink" title="LED"></a>LED</h2><h3 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">__LED_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__LED_H</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"sys.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LED0</span> <span class="token expression"><span class="token function">PBout</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>   </span><span class="token comment">// PB5</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">LED1</span> <span class="token expression"><span class="token function">PEout</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>   </span><span class="token comment">// PE5</span></span><span class="token keyword">void</span> <span class="token function">LED_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//初始化</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="源文件"><a href="#源文件" class="headerlink" title="源文件"></a>源文件</h3><p><code>RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB, ENABLE)</code>: 使能端口的时钟<br><code>GPIO_Init(GPIOB, &amp;GPIO_InitStructure)</code>: 端口初始化</p><p><code>GPIO_InitTypeDef</code>的成员变量：</p><ul><li><code>GPIO_Pin</code>: 指定哪个端口</li><li><code>GPIO_Mode</code>: 输入输出的模式<ul><li><code>GPIO_Mode_Out_PP</code>: 推挽输出(Push Pull)</li><li><code>GPIO_Mode_IPU</code>: 上拉输入(Input Up)</li><li><code>GPIO_Mode_IPD</code>: 下拉输入(Input Down)</li></ul></li><li><code>GPIO_Speed</code>: 端口速度<ul><li><code>GPIO_Speed_50MHz</code></li><li><code>GPIO_Speed_10MHz</code></li></ul></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"led.h"</span></span><span class="token keyword">void</span> <span class="token function">LED_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    GPIO_InitTypeDef GPIO_InitStructure<span class="token punctuation">;</span>    <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_GPIOB<span class="token operator">|</span>RCC_APB2Periph_GPIOE<span class="token punctuation">,</span> ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//使能PB,PE端口时钟</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> GPIO_Pin_5<span class="token punctuation">;</span>           <span class="token comment">// LED0-->PB.5 端口配置</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_Out_PP<span class="token punctuation">;</span>    <span class="token comment">// 推挽输出</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Speed <span class="token operator">=</span> GPIO_Speed_50MHz<span class="token punctuation">;</span>   <span class="token comment">// IO口速度为50MHz</span>    <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// 根据设定参数初始化GPIOB.5</span>    <span class="token function">GPIO_SetBits</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">,</span>GPIO_Pin_5<span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token comment">// PB.5 输出高</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin <span class="token operator">=</span> GPIO_Pin_5<span class="token punctuation">;</span>   <span class="token comment">// LED1-->PE.5 端口配置, 推挽输出</span>    <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOE<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 推挽输出，IO口速度为50MHz</span>    <span class="token function">GPIO_SetBits</span><span class="token punctuation">(</span>GPIOE<span class="token punctuation">,</span>GPIO_Pin_5<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// PE.5 输出高</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="main文件"><a href="#main文件" class="headerlink" title="main文件"></a>main文件</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"sys.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"delay.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"usart.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"led.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">delay_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//延时函数初始化  </span>    <span class="token function">LED_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//初始化与LED连接的硬件接口</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        LED0 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment">// LED0亮</span>        LED1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment">// LED1灭</span>        <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        LED0 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment">// LED0灭</span>        LED1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment">// LED1亮</span>        <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// 库函数写法</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">delay_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">LED_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">GPIO_ResetBits</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">,</span>GPIO_Pin_5<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//LED0引脚GPIOB.5拉低，亮 等同LED0=0;</span>        <span class="token function">GPIO_SetBits</span><span class="token punctuation">(</span>GPIOE<span class="token punctuation">,</span>GPIO_Pin_5<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//LED1引脚GPIOE.5拉高，灭 等同LED1=1;</span>        <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">GPIO_SetBits</span><span class="token punctuation">(</span>GPIOB<span class="token punctuation">,</span>GPIO_Pin_5<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//LED0引脚GPIOB.5拉高，灭 等同LED0=1;</span>        <span class="token function">GPIO_ResetBits</span><span class="token punctuation">(</span>GPIOE<span class="token punctuation">,</span>GPIO_Pin_5<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//LED1引脚GPIOE.5拉低，亮 等同LED1=0;</span>        <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="按键输入"><a href="#按键输入" class="headerlink" title="按键输入"></a>按键输入</h2><h3 id="头文件-1"><a href="#头文件-1" class="headerlink" title="头文件"></a>头文件</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">__KEY_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__KEY_H</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"sys.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">KEY0</span>    <span class="token expression"><span class="token function">GPIO_ReadInputDataBit</span><span class="token punctuation">(</span>GPIOE<span class="token punctuation">,</span>GPIO_Pin_4<span class="token punctuation">)</span></span><span class="token comment">//读取按键0</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">KEY1</span>    <span class="token expression"><span class="token function">GPIO_ReadInputDataBit</span><span class="token punctuation">(</span>GPIOE<span class="token punctuation">,</span>GPIO_Pin_3<span class="token punctuation">)</span></span><span class="token comment">//读取按键1</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">WK_UP</span>   <span class="token expression"><span class="token function">GPIO_ReadInputDataBit</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span>GPIO_Pin_0<span class="token punctuation">)</span></span><span class="token comment">//读取按键3(WK_UP) </span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">KEY0_PRES</span>   <span class="token expression"><span class="token number">1</span></span><span class="token comment">//KEY0按下</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">KEY1_PRES</span>   <span class="token expression"><span class="token number">2</span></span><span class="token comment">//KEY1按下</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">WKUP_PRES</span>   <span class="token expression"><span class="token number">3</span></span><span class="token comment">//KEY_UP按下</span></span><span class="token keyword">void</span> <span class="token function">KEY_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//IO初始化</span>u8 <span class="token function">KEY_Scan</span><span class="token punctuation">(</span>u8<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//按键扫描函数</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="源文件-1"><a href="#源文件-1" class="headerlink" title="源文件"></a>源文件</h3><p>按键对应的端口要设置为<strong>上拉或下拉输入</strong><br>通过按键扫描函数的返回值确定是哪个按键被按下了</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"stm32f10x.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"key.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"sys.h"</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"delay.h"</span></span><span class="token keyword">void</span> <span class="token function">KEY_Init</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    GPIO_InitTypeDef GPIO_InitStructure<span class="token punctuation">;</span>    <span class="token function">RCC_APB2PeriphClockCmd</span><span class="token punctuation">(</span>RCC_APB2Periph_GPIOA<span class="token operator">|</span>RCC_APB2Periph_GPIOE<span class="token punctuation">,</span>ENABLE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//使能PORTA,PORTE时钟</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin  <span class="token operator">=</span> GPIO_Pin_4<span class="token operator">|</span>GPIO_Pin_3<span class="token punctuation">;</span>   <span class="token comment">//KEY0-KEY1</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_IPU<span class="token punctuation">;</span>           <span class="token comment">//上拉输入</span>    <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOE<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token comment">//初始化GPIOE3/4</span>    <span class="token comment">//初始化 WK_UP-->GPIOA.0  下拉输入</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Pin  <span class="token operator">=</span> GPIO_Pin_0<span class="token punctuation">;</span>    GPIO_InitStructure<span class="token punctuation">.</span>GPIO_Mode <span class="token operator">=</span> GPIO_Mode_IPD<span class="token punctuation">;</span> <span class="token comment">//PA0设置成输入，默认下拉  </span>    <span class="token function">GPIO_Init</span><span class="token punctuation">(</span>GPIOA<span class="token punctuation">,</span> <span class="token operator">&amp;</span>GPIO_InitStructure<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化GPIOA.0</span><span class="token punctuation">&#125;</span>u8 <span class="token function">KEY_Scan</span><span class="token punctuation">(</span>u8 mode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> u8 key_up <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment">//按键按松开标志</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mode<span class="token punctuation">)</span> key_up <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment">//支持连按</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>key_up <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>KEY0<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">||</span> KEY1<span class="token operator">==</span><span class="token number">0</span> <span class="token operator">||</span> WK_UP<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//去抖动 </span>        key_up <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>KEY0 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> KEY0_PRES<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>KEY1 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> KEY1_PRES<span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>WK_UP <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> WKUP_PRES<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>KEY0<span class="token operator">==</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> KEY1<span class="token operator">==</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> WK_UP<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> key_up <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>               <span class="token comment">// 无按键按下</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="main函数"><a href="#main函数" class="headerlink" title="main函数"></a>main函数</h3><p>根据按键扫描函数的返回值做相应的动作</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"led.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"delay.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"key.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"sys.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"beep.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    u8 key <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">delay_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//延时函数初始化</span>    <span class="token function">LED_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//初始化与LED连接的硬件接口</span>    <span class="token function">BEEP_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//初始化蜂鸣器端口</span>    <span class="token function">KEY_Init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//初始化与按键连接的硬件接口</span>    LED0 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token comment">//先点亮红灯</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        key <span class="token operator">=</span> <span class="token function">KEY_Scan</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//得到键值</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>              <span class="token comment">// 返回非0说明有按键被按下了</span>            <span class="token keyword">switch</span> <span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">case</span> WKUP_PRES<span class="token operator">:</span> <span class="token comment">//控制蜂鸣器</span>                    BEEP <span class="token operator">=</span> <span class="token operator">!</span>BEEP<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                 <span class="token keyword">case</span> KEY1_PRES<span class="token operator">:</span> <span class="token comment">//LED1翻转 </span>                    LED1 <span class="token operator">=</span> <span class="token operator">!</span>LED1<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>                <span class="token keyword">case</span> KEY0_PRES<span class="token operator">:</span> <span class="token comment">//LED0,LED1同时翻转 </span>                    LED0 <span class="token operator">=</span> <span class="token operator">!</span>LED0<span class="token punctuation">;</span>                    LED1 <span class="token operator">=</span> <span class="token operator">!</span>LED1<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token function">delay_ms</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 嵌入式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 嵌入式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>直升机动力学</title>
      <link href="2021/09/29/%E5%A4%9A%E6%97%8B%E7%BF%BC-%E7%9B%B4%E5%8D%87%E6%9C%BA%E5%8A%A8%E5%8A%9B%E5%AD%A6/"/>
      <url>2021/09/29/%E5%A4%9A%E6%97%8B%E7%BF%BC-%E7%9B%B4%E5%8D%87%E6%9C%BA%E5%8A%A8%E5%8A%9B%E5%AD%A6/</url>
      
        <content type="html"><![CDATA[<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><p>$t_{cD}$：相对于桨盘轴（disc axes）的推力系数，$t_{cD}=\frac{T_D}{\rho sA\Omega^2 R^2}$</p><p>$\bar{V}$：无量纲化前飞速度，除以推力速度，$\bar{V}=\frac{V}{v_0}=\hat{V}\frac{\Omega R}{v_0} \approx \mu_D \frac{\Omega R}{v_0}$</p><p>$\hat{V}$：前飞速度与叶尖速度的比值，$\hat{V}=\frac{V}{\Omega R}$</p><p>$v_{i0}$：平均诱导速度</p><p>$\bar{v_{i0}}$：无量纲化平均诱导速度，$\bar{v_{i0}}=\frac{v_{i0}}{v_0}$</p><p>$v_0$：悬停时的平均诱导速度（推力速度），$v_0=\sqrt{\frac{T}{2\rho A}}$</p><p>$\mu$：气流平行于桨盘平面的速度分量与叶尖速度的比值$\mu = \frac{V_\infty \cos \alpha_D}{\Omega R} \approx \frac{V_\infty}{\Omega R}\approx \hat{V}$</p><p>$\lambda_i$：悬停参数，$\lambda_i=\frac{v_{i0}}{\Omega R} or \frac{v_i}{\Omega R}$</p><h2 id="诱导功率"><a href="#诱导功率" class="headerlink" title="诱导功率"></a>诱导功率</h2><p>推力 = 质量流量 * 诱导速度的变化量</p><script type="math/tex; mode=display">\begin{equation}T = (2v)\rho A \sqrt{(V_\infty cos \alpha_{TPP})^2 + (V_\infty sin \alpha_{TPP} + v)^2}\end{equation}</script><p>$v$: 诱导速度<br>$\alpha_{TPP}$: 气流与桨盘平面的夹角<br>$V_\infty$: 气流速度</p><p>近似处理：$\alpha_{TPP} \approx 0, \cos \alpha_{TPP} \approx 1, \sin \alpha_{TPP} \approx 0$，简化为</p><script type="math/tex; mode=display">\begin{equation}T = (2v)\rho A \sqrt{V_\infty^2 + v^2}\end{equation}</script><p>前飞速度约等于气流速度$V \approx V_\infty$<br>悬停时，诱导速度$v_0=\sqrt{\frac{T}{2 \rho A}} \approx \sqrt{\frac{W}{2 \rho A}}$，代入上式可得</p><script type="math/tex; mode=display">\begin{equation}v = \sqrt{\sqrt{\frac{V^4}{4}+v_0^2}-\frac{V^2}{2}}=v_0\sqrt{\sqrt{\frac{V^4}{4v_0^4}+1}-\frac{V^2}{2v_0^2}}\end{equation}</script><p>所以诱导功率为</p><script type="math/tex; mode=display">\begin{equation}P_{indecued} = Tv \approx Wv = W v_0\sqrt{\sqrt{\frac{V^4}{4v_0^4}+1}-\frac{V^2}{2v_0^2}}\end{equation}</script><p>考虑非均匀诱导速度的影响，引入系数$\kappa \approx 1.1$</p><script type="math/tex; mode=display">\begin{equation}P_{indecued} = \kappa Tv \approx \kappa Wv = \kappa W v_0\sqrt{\sqrt{\frac{V^4}{4v_0^4}+1}-\frac{V^2}{2v_0^2}}\end{equation}</script><p><img src="/2021/09/29/%E5%A4%9A%E6%97%8B%E7%BF%BC-%E7%9B%B4%E5%8D%87%E6%9C%BA%E5%8A%A8%E5%8A%9B%E5%AD%A6/1111.svg" alt></p><h2 id="型阻功率"><a href="#型阻功率" class="headerlink" title="型阻功率"></a>型阻功率</h2><p>与螺旋桨转动方向相切的速度为</p><script type="math/tex; mode=display">\begin{equation}U_T = \Omega r + V_\infty \sin \psi\end{equation}</script><p>翼型阻力表示为</p><script type="math/tex; mode=display">\begin{equation}D^\prime = \frac{1}{2} \rho U_T^2 c C_{d,0}\end{equation}</script><p>型阻功率</p><script type="math/tex; mode=display">\begin{equation}P_{profile} = \frac{b}{2 * \pi} \int_{0}^{2\pi}{\int_{0}^{R}{D^\prime U_T dr d\psi}} = \frac{1}{8}\rho \sigma C_{d,0} A \Omega ^3 R^3 (1 + 3\mu^2)\end{equation}</script><p><img src="/2021/09/29/%E5%A4%9A%E6%97%8B%E7%BF%BC-%E7%9B%B4%E5%8D%87%E6%9C%BA%E5%8A%A8%E5%8A%9B%E5%AD%A6/222.svg" alt></p><h2 id="废阻功率"><a href="#废阻功率" class="headerlink" title="废阻功率"></a>废阻功率</h2><p>机身阻力</p><script type="math/tex; mode=display">\begin{equation}D = \frac{1}{2}\rho S_{FP} V^2\end{equation}</script><p>$S_{FP}$is equivalent flat plate area.</p><script type="math/tex; mode=display">\begin{equation}P_{parasite} = \frac{1}{2} \rho S_{FP} V^3\end{equation}</script><p><img src="/2021/09/29/%E5%A4%9A%E6%97%8B%E7%BF%BC-%E7%9B%B4%E5%8D%87%E6%9C%BA%E5%8A%A8%E5%8A%9B%E5%AD%A6/333.svg" alt></p><h2 id="总飞行功率"><a href="#总飞行功率" class="headerlink" title="总飞行功率"></a>总飞行功率</h2><p><img src="/2021/09/29/%E5%A4%9A%E6%97%8B%E7%BF%BC-%E7%9B%B4%E5%8D%87%E6%9C%BA%E5%8A%A8%E5%8A%9B%E5%AD%A6/total.svg" alt></p><h2 id="爬升功率"><a href="#爬升功率" class="headerlink" title="爬升功率"></a>爬升功率</h2><p>展开成一元二次方程形式</p><script type="math/tex; mode=display">\begin{equation}v^2+v_cv-\frac{W}{2\rho A} = 0\end{equation}</script><p>解出诱导速度</p><script type="math/tex; mode=display">\begin{equation}v = -\frac{1}{2}v_c+\frac{1}{2}\sqrt{v_c^2+\frac{2W}{\rho A}}\end{equation}</script><p>爬升功率表示为</p><script type="math/tex; mode=display">\begin{equation}P_{climb} = Wv_c\end{equation}</script><p>诱导功率</p><script type="math/tex; mode=display">\begin{equation}P_{induced} = Wv = -\frac{1}{2}Wv_c+\frac{1}{2}W\sqrt{v_c^2+\frac{2W}{\rho A}}\end{equation}</script><p>还要加上型阻功率</p><script type="math/tex; mode=display">\begin{equation}P_{prfile} = \frac{1}{8}C_{d,0}\rho A \sigma \Omega^3 R^3 \end{equation}</script><p>总爬升功率为</p><script type="math/tex; mode=display">\begin{equation}P_{prfile} + P_{induced} + P_{climb} = \frac{1}{8}C_{d,0}\rho A \sigma \Omega^3 R^3 + \frac{1}{2}Wv_c+\frac{1}{2}W\sqrt{v_c^2+\frac{2W}{\rho A}}\end{equation}</script><p><img src="/2021/09/29/%E5%A4%9A%E6%97%8B%E7%BF%BC-%E7%9B%B4%E5%8D%87%E6%9C%BA%E5%8A%A8%E5%8A%9B%E5%AD%A6/4444.svg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 多旋翼 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多旋翼 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>43-字符串相乘</title>
      <link href="2021/09/28/LeetCode-43-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B8%E4%B9%98/"/>
      <url>2021/09/28/LeetCode-43-%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9B%B8%E4%B9%98/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-43-Multiply-Strings"><a href="#LeetCode-43-Multiply-Strings" class="headerlink" title="LeetCode 43. Multiply Strings"></a>LeetCode 43. Multiply Strings</h2><p><a href="https://leetcode.com/problems/multiply-strings/">LeetCode-43</a></p><p>Given two <code>non-negative</code> integers <code>num1</code> and <code>num2</code> represented as strings, return the <strong>product</strong> of <code>num1</code> and <code>num2</code>, also represented as a <code>string</code>.</p><p>Note: You must not use any built-in BigInteger library or convert the inputs to integer directly.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> num1 <span class="token operator">=</span> <span class="token string">"2"</span><span class="token punctuation">,</span> num2 <span class="token operator">=</span> <span class="token string">"3"</span>Output<span class="token operator">:</span> <span class="token string">"6"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br>Example 2:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> num1 <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">,</span> num2 <span class="token operator">=</span> <span class="token string">"456"</span>Output<span class="token operator">:</span> <span class="token string">"56088"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h3 id="method-模拟高精乘法"><a href="#method-模拟高精乘法" class="headerlink" title="method: 模拟高精乘法"></a>method: 模拟高精乘法</h3><p>从最低位开始从后往前计算，先把结果放到数组里，因为要从前往后放结果，所以需要做一个转换，再把多余的零弹出，再反向转换到字符串</p><p>从后往前遍历的<code>index</code>转换为从前往后的对应位置是<code>size - index - 1</code><br>两个数组都是一样，所以<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">idx <span class="token operator">=</span> num1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">+</span> num2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> j <span class="token operator">-</span> <span class="token number">1</span>     <span class="token operator">=</span> num1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> num2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> i <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">string <span class="token function">multiply</span><span class="token punctuation">(</span>string num1<span class="token punctuation">,</span> string num2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">mul</span><span class="token punctuation">(</span>num1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> num2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> num1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> num2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> idx <span class="token operator">=</span> num1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> num2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> i <span class="token operator">-</span> j <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span>            mul<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token punctuation">(</span>num1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>num2<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 要用+=</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>mul<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token comment">// 需要进位</span>                mul<span class="token punctuation">[</span>idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> mul<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token comment">// 要用+=</span>                mul<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">%=</span> <span class="token number">10</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>mul<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> mul<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        mul<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 除去多余的0</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>mul<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">"0"</span><span class="token punctuation">;</span>        string res<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> mul<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>mul<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 反转</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模拟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python符号方程</title>
      <link href="2021/09/28/Python-Python%E7%AC%A6%E5%8F%B7%E6%96%B9%E7%A8%8B/"/>
      <url>2021/09/28/Python-Python%E7%AC%A6%E5%8F%B7%E6%96%B9%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="sympy求解符号方程"><a href="#sympy求解符号方程" class="headerlink" title="sympy求解符号方程"></a>sympy求解符号方程</h2><p><code>sympy.solve()</code>求解方程<br><code>evalf</code>代入数值</p><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token keyword">import</span> sympysympy<span class="token punctuation">.</span>init_printing<span class="token punctuation">(</span><span class="token punctuation">)</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> x <span class="token operator">=</span> sympy<span class="token punctuation">.</span>symbols<span class="token punctuation">(</span><span class="token string">'a, b, c, x'</span><span class="token punctuation">)</span>func <span class="token operator">=</span> a <span class="token operator">*</span> x <span class="token operator">*</span> x <span class="token operator">+</span> b <span class="token operator">*</span> x <span class="token operator">+</span> c<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'符号解:'</span><span class="token punctuation">,</span> sympy<span class="token punctuation">.</span>solve<span class="token punctuation">(</span>func<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'数值解:'</span><span class="token punctuation">,</span> sympy<span class="token punctuation">.</span>solve<span class="token punctuation">(</span>func<span class="token punctuation">.</span>evalf<span class="token punctuation">(</span>subs<span class="token operator">=</span><span class="token punctuation">&#123;</span>a<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> c<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">)</span>符号解<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">-</span>b <span class="token operator">+</span> sqrt<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">4</span><span class="token operator">*</span>a<span class="token operator">*</span>c <span class="token operator">+</span> b<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token punctuation">(</span>b <span class="token operator">+</span> sqrt<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">4</span><span class="token operator">*</span>a<span class="token operator">*</span>c <span class="token operator">+</span> b<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>a<span class="token punctuation">)</span><span class="token punctuation">]</span>数值解<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">1.00000000000000</span><span class="token punctuation">,</span> <span class="token number">2.00000000000000</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以这样写</p><pre class="line-numbers language-py" data-language="py"><code class="language-py">a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">,</span> x <span class="token operator">=</span> sympy<span class="token punctuation">.</span>symbols<span class="token punctuation">(</span><span class="token string">'a, b, c, x'</span><span class="token punctuation">)</span>func <span class="token operator">=</span> a <span class="token operator">*</span> x <span class="token operator">*</span> x <span class="token operator">+</span> b <span class="token operator">*</span> x <span class="token operator">+</span> cres <span class="token operator">=</span> sympy<span class="token punctuation">.</span>solve<span class="token punctuation">(</span>func<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>subs<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>subs<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>符号解<span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token operator">-</span>b <span class="token operator">+</span> sqrt<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">4</span><span class="token operator">*</span>a<span class="token operator">*</span>c <span class="token operator">+</span> b<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token punctuation">(</span>b <span class="token operator">+</span> sqrt<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">4</span><span class="token operator">*</span>a<span class="token operator">*</span>c <span class="token operator">+</span> b<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>a<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token number">2</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>73-矩阵置零</title>
      <link href="2021/09/27/LeetCode-73-%E7%9F%A9%E9%98%B5%E7%BD%AE%E9%9B%B6/"/>
      <url>2021/09/27/LeetCode-73-%E7%9F%A9%E9%98%B5%E7%BD%AE%E9%9B%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-73-Set-Matrix-Zeroes"><a href="#LeetCode-73-Set-Matrix-Zeroes" class="headerlink" title="LeetCode 73. Set Matrix Zeroes"></a>LeetCode 73. Set Matrix Zeroes</h2><p><a href="https://leetcode.com/problems/set-matrix-zeroes/">LeetCode-73</a></p><p>Given an <code>m x n</code> integer matrix matrix, if an element is <code>0</code>, set its entire <code>row</code> and <code>column</code> to <code>0&#39;s</code>, and return the matrix.</p><p>You must do it <strong>in place</strong>.</p><p>Example 1:<br><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/73/73_0.jpg" alt><br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> matrix <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br>Example 2:<br><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/73/73_1.jpg" alt><br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> matrix <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h3 id="method"><a href="#method" class="headerlink" title="method"></a>method</h3><p>如果<code>matrix[i][j]</code>为零，就把<code>matrix[i][0]</code>和<code>matrix[0][j]</code>置零，后面再遍历的时候就看<code>matrix[i][0]</code>和<code>matrix[0][j]</code>决定是否将元素置零</p><p>但是<code>matrix[0][0]</code>会出现混淆，无法确定是第<code>0</code>行还是第<code>0</code>列导致的置零，所以用两个变量来特判</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">setZeroes</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> matrix<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> matrix<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> m <span class="token operator">=</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> row0 <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">,</span> col0 <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 查看第一列</span>            col0 <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 查看第一行</span>            row0 <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment">// i行首元素置0</span>                matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment">// j列首元素置0</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>                matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment">// 行首或列首是0就置0</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>col0<span class="token punctuation">)</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 处理第一列</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> m<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>row0<span class="token punctuation">)</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 处理第一行</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模拟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>322/518-找零钱</title>
      <link href="2021/09/25/LeetCode-322-%E6%89%BE%E9%9B%B6%E9%92%B1/"/>
      <url>2021/09/25/LeetCode-322-%E6%89%BE%E9%9B%B6%E9%92%B1/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-322-Coin-Change"><a href="#LeetCode-322-Coin-Change" class="headerlink" title="LeetCode 322. Coin Change"></a>LeetCode 322. Coin Change</h2><p>You are given an integer array <code>coins</code> representing coins of different denominations and an integer <code>amount</code> representing a total amount of money.</p><p>Return the fewest number of coins that you need to make up that amount. If that amount of money cannot be made up by any combination of the coins, return <code>-1</code>.</p><p>You may assume that you have an <strong>infinite</strong> number of each kind of coin.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> coins <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> amount <span class="token operator">=</span> <span class="token number">11</span>Output<span class="token operator">:</span> <span class="token number">3</span>Explanation<span class="token operator">:</span> <span class="token number">11</span> <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br>Example 2:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> coins <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> amount <span class="token operator">=</span> <span class="token number">3</span>Output<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h3 id="method-完全背包"><a href="#method-完全背包" class="headerlink" title="method: 完全背包"></a>method: 完全背包</h3><p>硬币无穷多，所以是完全背包<br><code>dp[j]</code>：装满容量为<code>j</code>的背包的最少硬币数为<code>dp[j]</code></p><p><font color="LightSeaGreen">求最小数</font>，要求最少的硬币个数，递推公式为<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>j <span class="token operator">-</span> coins<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br>因为是最少，所以初始化为<code>INT_MAX</code>，并且<code>dp[0] = 0</code></p><p>必须满足<code>dp[j - coins[i]] != INT_MAX</code>才能更新当前的背包，不然装不满</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">coinChange</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> coins<span class="token punctuation">,</span> <span class="token keyword">int</span> amount<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">dp</span><span class="token punctuation">(</span>amount <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> INT_MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> coins<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> coins<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> amount<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j <span class="token operator">-</span> coins<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">!=</span> INT_MAX<span class="token punctuation">)</span>    <span class="token comment">// 条件</span>                dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>j <span class="token operator">-</span> coins<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>amount<span class="token punctuation">]</span> <span class="token operator">==</span> INT_MAX <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> dp<span class="token punctuation">[</span>amount<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="LeetCode-518-Coin-Change-2"><a href="#LeetCode-518-Coin-Change-2" class="headerlink" title="LeetCode 518. Coin Change 2"></a>LeetCode 518. Coin Change 2</h2><p>You are given an integer array <code>coins</code> representing coins of different denominations and an integer <code>amount</code> representing a total amount of money.</p><p>Return the number of <strong>combinations</strong> that make up that amount. If that amount of money cannot be made up by any combination of the coins, return 0.</p><p>You may assume that you have an <strong>infinite</strong> number of each kind of coin.</p><p>The answer is guaranteed to fit into a signed 32-bit integer.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> amount <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> coins <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token number">4</span>Explanation<span class="token operator">:</span> there are four ways to make up the amount<span class="token operator">:</span><span class="token number">5</span><span class="token operator">=</span><span class="token number">5</span><span class="token number">5</span><span class="token operator">=</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token number">5</span><span class="token operator">=</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">1</span><span class="token number">5</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h3 id="method"><a href="#method" class="headerlink" title="method"></a>method</h3><p><code>dp[j]</code>：组成<code>dp[j]</code>的组合数</p><p>典型的完全背包，要组合数，所以递推方程肯定是累加的形式<br><code>dp[j] += dp[j - coins[i]]</code></p><p><font color="LightSeaGreen">求组合数</font>，所以要先遍历物品，再遍历背包<br>如果是先遍历背包，在遍历物品就变成排列数了</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token keyword">int</span> amount<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> coins<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">dp</span><span class="token punctuation">(</span>amount <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> coins<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> coins<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> amount<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> dp<span class="token punctuation">[</span>j <span class="token operator">-</span> coins<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>amount<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 背包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>147-链表插入排序</title>
      <link href="2021/09/25/LeetCode-147-%E9%93%BE%E8%A1%A8%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/"/>
      <url>2021/09/25/LeetCode-147-%E9%93%BE%E8%A1%A8%E6%8F%92%E5%85%A5%E6%8E%92%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-147-Insertion-Sort-List"><a href="#LeetCode-147-Insertion-Sort-List" class="headerlink" title="LeetCode 147. Insertion Sort List"></a>LeetCode 147. Insertion Sort List</h2><p><a href="https://leetcode.com/problems/insertion-sort-list/">LeetCode-147</a></p><p>Given the <code>head</code> of a singly linked list, <code>sort</code> the list using <code>insertion sort</code>, and return the sorted list’s head.</p><p><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/147/147.jpg" alt><br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> head <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h3 id="method"><a href="#method" class="headerlink" title="method:"></a>method:</h3><p><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/147/147.png" alt></p><p><code>head</code>指向要插入的元素，<code>pre</code>遍历已排序的链表，找到第一个大于<code>head-&gt;val</code>的元素或者最末尾的元素，插入<code>head</code></p><p>插入分两步：</p><ol><li><code>head</code>的<code>next</code>指向<code>pre</code>的<code>next</code></li><li><code>pre</code>的<code>next</code>指向<code>head</code></li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">ListNode<span class="token operator">*</span> <span class="token function">insertionSortList</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ListNode <span class="token operator">*</span>dummy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ListNode <span class="token operator">*</span>pre <span class="token operator">=</span> dummy<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ListNode <span class="token operator">*</span>tmp <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>pre<span class="token operator">-></span>next <span class="token operator">&amp;&amp;</span> pre<span class="token operator">-></span>next<span class="token operator">-></span>val <span class="token operator">&lt;</span> head<span class="token operator">-></span>val<span class="token punctuation">)</span>             pre <span class="token operator">=</span> pre<span class="token operator">-></span>next<span class="token punctuation">;</span>        head<span class="token operator">-></span>next <span class="token operator">=</span> pre<span class="token operator">-></span>next<span class="token punctuation">;</span> <span class="token comment">// 1</span>        pre<span class="token operator">-></span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>       <span class="token comment">// 2</span>        head <span class="token operator">=</span> tmp<span class="token punctuation">;</span>     <span class="token comment">// head回到原来的链表</span>        pre <span class="token operator">=</span> dummy<span class="token punctuation">;</span>    <span class="token comment">// pre回到开头</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> dummy<span class="token operator">-></span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>474-零和一</title>
      <link href="2021/09/25/LeetCode-474-%E9%9B%B6%E5%92%8C%E4%B8%80/"/>
      <url>2021/09/25/LeetCode-474-%E9%9B%B6%E5%92%8C%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-474-Ones-and-Zeroes"><a href="#LeetCode-474-Ones-and-Zeroes" class="headerlink" title="LeetCode 474. Ones and Zeroes"></a>LeetCode 474. Ones and Zeroes</h2><p>You are given an array of binary strings <code>strs</code> and two integers <code>m</code> and <code>n</code>.</p><p>Return the size of the <strong>largest subset</strong> of <code>strs</code> such that there are at most <code>m 0&#39;s</code> and <code>n 1&#39;s</code> in the subset.</p><p>A set x is a subset of a set y if all elements of x are also elements of y.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> strs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"10"</span><span class="token punctuation">,</span><span class="token string">"0001"</span><span class="token punctuation">,</span><span class="token string">"111001"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"0"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token number">3</span>Output<span class="token operator">:</span> <span class="token number">4</span>Explanation<span class="token operator">:</span> The largest subset with at most <span class="token number">5</span> <span class="token number">0'</span>s <span class="token operator">and</span> <span class="token number">3</span> <span class="token number">1'</span>s is <span class="token punctuation">&#123;</span><span class="token string">"10"</span><span class="token punctuation">,</span> <span class="token string">"0001"</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> so the answer is <span class="token number">4.</span>Other valid but smaller subsets include <span class="token punctuation">&#123;</span><span class="token string">"0001"</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">&#125;</span> <span class="token operator">and</span> <span class="token punctuation">&#123;</span><span class="token string">"10"</span><span class="token punctuation">,</span> <span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string">"0"</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token punctuation">&#123;</span><span class="token string">"111001"</span><span class="token punctuation">&#125;</span> is an invalid subset because it contains <span class="token number">4</span> <span class="token number">1'</span>s<span class="token punctuation">,</span> greater than the maximum of <span class="token number">3.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h3 id="method"><a href="#method" class="headerlink" title="method"></a>method</h3><p>0的数量和1的数量是两个维度的背包，涉及到size，那状态转移方程就需要+1</p><p><code>dp[i][j]</code>：背包容量为i和j时的最大子集数</p><p>当前物品0的数量为zeorNum，1的数量为oneNum，考虑放不放当前物品，不放的话<code>dp[i][j]</code>不变，放的话，背包容量分别减少，即<code>i-zeroNum, j-oneNum</code>，然后子集数再<code>+1</code>，两者取较大值<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span>zeroNum<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span>oneNum<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">findMaxForm</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token operator">&amp;</span> strs<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">dp</span><span class="token punctuation">(</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> str <span class="token operator">:</span> strs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> zeroNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> oneNum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> c <span class="token operator">:</span> str<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">==</span> <span class="token string">'0'</span><span class="token punctuation">)</span> zeroNum<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> oneNum<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token comment">// 统计0和1的数量</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> m<span class="token punctuation">;</span> i <span class="token operator">>=</span> zeroNum<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 0的背包</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> n<span class="token punctuation">;</span> j <span class="token operator">>=</span> oneNum<span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token comment">// 1的背包</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> zeroNum<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> oneNum<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 背包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1046/1049-最后一块石头的重量</title>
      <link href="2021/09/25/LeetCode-1046-%E6%9C%80%E5%90%8E%E4%B8%80%E5%9D%97%E7%9F%B3%E5%A4%B4%E7%9A%84%E9%87%8D%E9%87%8F/"/>
      <url>2021/09/25/LeetCode-1046-%E6%9C%80%E5%90%8E%E4%B8%80%E5%9D%97%E7%9F%B3%E5%A4%B4%E7%9A%84%E9%87%8D%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-1046-Last-Stone-Weight"><a href="#LeetCode-1046-Last-Stone-Weight" class="headerlink" title="LeetCode 1046. Last Stone Weight"></a>LeetCode 1046. Last Stone Weight</h2><p>You are given an array of integers <code>stones</code> where <code>stones[i]</code> is the weight of the i^th^ stone.</p><p>We are playing a game with the stones. On each turn, we choose the heaviest two stones and smash them together. Suppose the heaviest two stones have weights <code>x</code> and <code>y</code> with <code>x &lt;= y</code>. The result of this smash is:</p><p>If <code>x == y</code>, both stones are destroyed, and<br>If <code>x != y</code>, the stone of weight <code>x</code> is destroyed, and the stone of weight y has new weight <code>y - x</code>.<br>At the end of the game, there is <strong>at most one</strong> stone left.</p><p>Return the smallest possible weight of the left stone. If there are no stones left, return <code>0</code>.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> stones <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token number">1</span>Explanation<span class="token operator">:</span> We combine <span class="token number">7</span> <span class="token operator">and</span> <span class="token number">8</span> to get <span class="token number">1</span> so the array converts to <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span> then<span class="token punctuation">,</span>we combine <span class="token number">2</span> <span class="token operator">and</span> <span class="token number">4</span> to get <span class="token number">2</span> so the array converts to <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span> then<span class="token punctuation">,</span>we combine <span class="token number">2</span> <span class="token operator">and</span> <span class="token number">1</span> to get <span class="token number">1</span> so the array converts to <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span> then<span class="token punctuation">,</span>we combine <span class="token number">1</span> <span class="token operator">and</span> <span class="token number">1</span> to get <span class="token number">0</span> so the array converts to <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> then that<span class="token number">'</span>s the value of the last stone<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h3 id="method-大根堆"><a href="#method-大根堆" class="headerlink" title="method: 大根堆"></a>method: 大根堆</h3><p>因为每个都要取最大的两个数，所以用大根堆从大到小排序</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">lastStoneWeight</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> stones<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    priority_queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">,</span> less<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> q<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> n <span class="token operator">:</span> stones<span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 至少两个数</span>        <span class="token keyword">int</span> x1 <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> x2 <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x1 <span class="token operator">></span> x2<span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x1 <span class="token operator">-</span> x2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 非空返回堆首</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="LeetCode-1049-Last-Stone-Weight-II"><a href="#LeetCode-1049-Last-Stone-Weight-II" class="headerlink" title="LeetCode 1049. Last Stone Weight II"></a>LeetCode 1049. Last Stone Weight II</h2><p>You are given an array of integers <code>stones</code> where <code>stones[i]</code> is the weight of the i^th^ stone.</p><p>We are playing a game with the stones. On each turn, we choose any two stones and smash them together. Suppose the stones have weights <code>x</code> and <code>y</code> with <code>x &lt;= y</code>. The result of this smash is:</p><p>If <code>x == y</code>, both stones are destroyed, and<br>If <code>x != y</code>, the stone of weight <code>x</code> is destroyed, and the stone of weight y has new weight <code>y - x</code>.<br>At the end of the game, there is <strong>at most one</strong> stone left.</p><p>Return the smallest possible weight of the left stone. If there are no stones left, return <code>0</code>.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> stones <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token number">1</span>Explanation<span class="token operator">:</span>We can combine <span class="token number">2</span> <span class="token operator">and</span> <span class="token number">4</span> to get <span class="token number">2</span><span class="token punctuation">,</span> so the array converts to <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span> then<span class="token punctuation">,</span>we can combine <span class="token number">7</span> <span class="token operator">and</span> <span class="token number">8</span> to get <span class="token number">1</span><span class="token punctuation">,</span> so the array converts to <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span> then<span class="token punctuation">,</span>we can combine <span class="token number">2</span> <span class="token operator">and</span> <span class="token number">1</span> to get <span class="token number">1</span><span class="token punctuation">,</span> so the array converts to <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span> then<span class="token punctuation">,</span>we can combine <span class="token number">1</span> <span class="token operator">and</span> <span class="token number">1</span> to get <span class="token number">0</span><span class="token punctuation">,</span> so the array converts to <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> then that<span class="token number">'</span>s the optimal value<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>Constraints:</p><ul><li><code>1 &lt;= stones.length &lt;= 30</code></li><li><code>1 &lt;= stones[i] &lt;= 100</code></li></ul><h3 id="method-01背包"><a href="#method-01背包" class="headerlink" title="method: 01背包"></a>method: 01背包</h3><p>把所有元素分成大小最接近的两堆，类似于<a href="https://kavinwkp.github.io/2021/09/25/LeetCode-416-%E5%88%86%E5%89%B2%E7%AD%89%E5%92%8C%E5%AD%90%E9%9B%86/">416-分割等和子集</a></p><p>用一个<code>sum/2</code>的背包去装，最大能装<code>dp[sum/2]</code>，肯定小于等于<code>sum - dp[sum/2]</code>，再做差就行</p><p><code>sum</code>最大为<code>3000</code>，所以背包最大为<code>1500</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">lastStoneWeightII</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">dp</span><span class="token punctuation">(</span><span class="token number">1501</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> n <span class="token operator">:</span> nums<span class="token punctuation">)</span> sum <span class="token operator">+=</span> n<span class="token punctuation">;</span>    <span class="token keyword">int</span> target <span class="token operator">=</span> sum <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> target<span class="token punctuation">;</span> j <span class="token operator">>=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>sum <span class="token operator">-</span> dp<span class="token punctuation">[</span>target<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> dp<span class="token punctuation">[</span>target<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 堆 </tag>
            
            <tag> 背包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>416-分割等和子集</title>
      <link href="2021/09/25/LeetCode-416-%E5%88%86%E5%89%B2%E7%AD%89%E5%92%8C%E5%AD%90%E9%9B%86/"/>
      <url>2021/09/25/LeetCode-416-%E5%88%86%E5%89%B2%E7%AD%89%E5%92%8C%E5%AD%90%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-416-Partition-Equal-Subset-Sum"><a href="#LeetCode-416-Partition-Equal-Subset-Sum" class="headerlink" title="LeetCode 416. Partition Equal Subset Sum"></a>LeetCode 416. Partition Equal Subset Sum</h2><p><a href="https://leetcode.com/problems/partition-equal-subset-sum/">LeetCode-416</a></p><p>Given a non-empty array <code>nums</code> containing only <code>positive</code> integers, find if the array can be partitioned into <code>two subsets</code> such that the sum of elements in both subsets is <code>equal</code>.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token boolean">true</span>Explanation<span class="token operator">:</span> The array can be partitioned as <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">and</span> <span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></p><h2 id="method-01背包"><a href="#method-01背包" class="headerlink" title="method: 01背包"></a>method: 01背包</h2><p>背包重量为数组和的一半，看最后是否能刚好放满</p><p>每个元素都是一件物品，重量和价值相等</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">canPartition</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">dp</span><span class="token punctuation">(</span><span class="token number">10010</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        sum <span class="token operator">+=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token comment">// 累加</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token comment">// 和为奇数直接返回</span>    sum <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">;</span>   <span class="token comment">// 背包重量</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> sum<span class="token punctuation">;</span> j <span class="token operator">>=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>sum<span class="token punctuation">]</span> <span class="token operator">==</span> sum<span class="token punctuation">;</span>  <span class="token comment">// 是否放满</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 背包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>223-矩形面积</title>
      <link href="2021/09/25/LeetCode-223-%E7%9F%A9%E5%BD%A2%E9%9D%A2%E7%A7%AF/"/>
      <url>2021/09/25/LeetCode-223-%E7%9F%A9%E5%BD%A2%E9%9D%A2%E7%A7%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-223-Rectangle-Area"><a href="#LeetCode-223-Rectangle-Area" class="headerlink" title="LeetCode 223. Rectangle Area"></a>LeetCode 223. Rectangle Area</h2><p><a href="https://leetcode.com/problems/rectangle-area/">LeetCode-223</a></p><p>Given the coordinates of two rectilinear rectangles in a 2D plane, return the total area covered by the two rectangles.</p><p>The first rectangle is defined by its bottom-left corner <code>(ax1, ay1)</code> and its top-right corner <code>(ax2, ay2)</code>.</p><p>The second rectangle is defined by its bottom-left corner <code>(bx1, by1)</code> and its top-right corner <code>(bx2, by2)</code>.</p><p>Example 1:</p><p><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/223/223.png" alt></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Rectangle AreaInput<span class="token operator">:</span> ax1 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span> ay1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> ax2 <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> ay2 <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> bx1 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> by1 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> bx2 <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">,</span> by2 <span class="token operator">=</span> <span class="token number">2</span>Output<span class="token operator">:</span> <span class="token number">45</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="method"><a href="#method" class="headerlink" title="method"></a>method</h2><p>要计算出重叠部分的面积，再用总面积减去重叠面积</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">computeArea</span><span class="token punctuation">(</span><span class="token keyword">int</span> ax1<span class="token punctuation">,</span> <span class="token keyword">int</span> ay1<span class="token punctuation">,</span> <span class="token keyword">int</span> ax2<span class="token punctuation">,</span> <span class="token keyword">int</span> ay2<span class="token punctuation">,</span> <span class="token keyword">int</span> bx1<span class="token punctuation">,</span> <span class="token keyword">int</span> by1<span class="token punctuation">,</span> <span class="token keyword">int</span> bx2<span class="token punctuation">,</span> <span class="token keyword">int</span> by2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> area <span class="token operator">=</span> <span class="token punctuation">(</span>ax2<span class="token operator">-</span>ax1<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>ay2<span class="token operator">-</span>ay1<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>bx2<span class="token operator">-</span>bx1<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>by2<span class="token operator">-</span>by1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> dx <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>ax2<span class="token punctuation">,</span> bx2<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">max</span><span class="token punctuation">(</span>ax1<span class="token punctuation">,</span> bx1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>dx <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> area<span class="token punctuation">;</span>    <span class="token comment">// x方向没有重叠</span>    <span class="token keyword">int</span> dy <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>ay2<span class="token punctuation">,</span> by2<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">max</span><span class="token punctuation">(</span>ay1<span class="token punctuation">,</span> by1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>dy <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> area<span class="token punctuation">;</span>    <span class="token comment">// y方向没有重叠</span>    <span class="token keyword">return</span> area <span class="token operator">-</span> dx <span class="token operator">*</span> dy<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git基本操作</title>
      <link href="2021/09/24/Linux-git%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
      <url>2021/09/24/Linux-git%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token operator">-</span>d  <span class="token operator">--</span><span class="token keyword">delete</span>：删除<span class="token operator">-</span>D  <span class="token operator">--</span><span class="token keyword">delete</span> <span class="token operator">--</span>force的快捷键<span class="token operator">-</span>f  <span class="token operator">--</span>force：强制<span class="token operator">-</span>m  <span class="token operator">--</span>move：移动或重命名<span class="token operator">-</span>M  <span class="token operator">--</span>move <span class="token operator">--</span>force的快捷键<span class="token operator">-</span>r  <span class="token operator">--</span>remote：远程<span class="token operator">-</span>a  <span class="token operator">--</span>all：所有<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="修改并提交"><a href="#修改并提交" class="headerlink" title="修改并提交"></a>修改并提交</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">git add <span class="token punctuation">.</span>git commit <span class="token operator">-</span>m <span class="token string">"***"</span>git push origin main <span class="token operator">-</span>u<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="子模块"><a href="#子模块" class="headerlink" title="子模块"></a>子模块</h3><h4 id="添加子模块"><a href="#添加子模块" class="headerlink" title="添加子模块"></a>添加子模块</h4><p>如果添加子项目，需要先执行<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">git submodule add 链接 放在哪个目录<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br>再提交</p><p><code>clone</code>的时候不会<code>clone</code>子项目，需要进入项目后执行<br><pre class="line-numbers language-none"><code class="language-none">git submodule update --init --recursive<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br>才会把子项目<code>clone</code>下来</p><h4 id="删除子模块"><a href="#删除子模块" class="headerlink" title="删除子模块"></a>删除子模块</h4><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> -rf 子模块目录 <span class="token comment"># 删除子模块目录及源码</span><span class="token function">vi</span> .gitmodules  <span class="token comment"># 删除.gitmodules文件中子模块相关条目</span><span class="token function">vi</span> .git/config  <span class="token comment"># 删除配置项中子模块相关条目</span><span class="token function">rm</span> .git/module/*  <span class="token comment"># 删除模块下的子模块目录</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>删除后提交</p><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><p>查看本地所有分支</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">$ git branch<span class="token operator">*</span> main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>查看远程所有分支<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">$ git branch <span class="token operator">-</span>r  origin<span class="token operator">/</span>HEAD <span class="token operator">-></span> origin<span class="token operator">/</span>main  origin<span class="token operator">/</span>main  origin<span class="token operator">/</span>master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></p><p>查看本地和远程所有分支<br>当前本地分支前带有<code>*</code>号且为绿色，远程分支为红色<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">$ git branch <span class="token operator">-</span>a<span class="token operator">*</span> main  remotes<span class="token operator">/</span>origin<span class="token operator">/</span>HEAD <span class="token operator">-></span> origin<span class="token operator">/</span>main  remotes<span class="token operator">/</span>origin<span class="token operator">/</span>main  remotes<span class="token operator">/</span>origin<span class="token operator">/</span>master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><center><img src="/2021/09/24/Linux-git%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/111.png#pic_center" width="40%" height="40%"></center><p>分支不存在则新建本地分支，存在则切换本地分支<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">git branch <span class="token operator">&lt;</span>branch<span class="token operator">-</span>name<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p><p>删除本地分支<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">git branch <span class="token operator">-</span>d <span class="token operator">&lt;</span>branch<span class="token operator">-</span>name<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p><p>删除远程分支<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">git branch <span class="token operator">-</span>d <span class="token operator">-</span>r <span class="token operator">&lt;</span>branch<span class="token operator">-</span>name<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br>删除后，还要推送到服务器上才行，即<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">git push origin <span class="token operator">:</span><span class="token operator">&lt;</span>branch<span class="token operator">-</span>name<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>148-排序链表</title>
      <link href="2021/09/24/LeetCode-148-%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8/"/>
      <url>2021/09/24/LeetCode-148-%E6%8E%92%E5%BA%8F%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-148-Sort-List"><a href="#LeetCode-148-Sort-List" class="headerlink" title="LeetCode 148. Sort List"></a>LeetCode 148. Sort List</h2><p><a href="https://leetcode.com/problems/sort-list/">LeetCode-148</a></p><p>Given the head of a linked list, return the list after <strong>sorting it in ascending order</strong>.</p><p>Example 1:<br><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/148/148.jpg" alt><br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> head <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h3 id="归并排序模板"><a href="#归并排序模板" class="headerlink" title="归并排序模板"></a>归并排序模板</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> mid<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">res</span><span class="token punctuation">(</span>r <span class="token operator">-</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 和区间大小相同的数组</span>    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> p1 <span class="token operator">=</span> l<span class="token punctuation">,</span> p2 <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment">// 左半区间和右半区间的指针</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p1 <span class="token operator">&lt;=</span> mid <span class="token operator">&amp;&amp;</span> p2 <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>p1<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>p2<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment">// 取较小值填充</span>            res<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>p1<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            res<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>p2<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p1 <span class="token operator">&lt;=</span> mid<span class="token punctuation">)</span> res<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>p1<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 如果还有</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p2 <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> res<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>p2<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> res<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        nums<span class="token punctuation">[</span>i <span class="token operator">+</span> l<span class="token punctuation">]</span> <span class="token operator">=</span> res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment">// 还原回去</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">mergeSort</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> l<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">>=</span> right<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>      <span class="token comment">// 递归结束条件，区间至少1个元素</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token function">mergeSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 递归左半区间</span>    <span class="token function">mergeSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 递归右半区间</span>    <span class="token function">merge</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> l<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> nums <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">mergeSort</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="method-归并排序"><a href="#method-归并排序" class="headerlink" title="method: 归并排序"></a>method: 归并排序</h3><p>把链表从中间位置断开，就像归并排序的<code>mid</code>一样<br>分成两串之后，就转化成合并排序链表，直接用<a href="https://kavinwkp.github.io/2021/09/18/LeetCode-21-%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%8E%92%E5%BA%8F%E7%9A%84%E9%93%BE%E8%A1%A8/">21-合并两个排序的链表</a></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">ListNode<span class="token operator">*</span> <span class="token function">merge</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> l1<span class="token punctuation">,</span> ListNode<span class="token operator">*</span> l2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ListNode <span class="token operator">*</span>dummy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ListNode <span class="token operator">*</span>head <span class="token operator">=</span> dummy<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>l1 <span class="token operator">&amp;&amp;</span> l2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l1<span class="token operator">-></span>val <span class="token operator">&lt;</span> l2<span class="token operator">-></span>val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            head<span class="token operator">-></span>next <span class="token operator">=</span> l1<span class="token punctuation">;</span>            l1 <span class="token operator">=</span> l1<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            head<span class="token operator">-></span>next <span class="token operator">=</span> l2<span class="token punctuation">;</span>            l2 <span class="token operator">=</span> l2<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        head <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l1<span class="token punctuation">)</span> head<span class="token operator">-></span>next <span class="token operator">=</span> l1<span class="token punctuation">;</span>    <span class="token comment">// 链表用if就可以了</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l2<span class="token punctuation">)</span> head<span class="token operator">-></span>next <span class="token operator">=</span> l2<span class="token punctuation">;</span>    <span class="token keyword">return</span> dummy<span class="token operator">-></span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ListNode<span class="token operator">*</span> <span class="token function">sortList</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>head <span class="token operator">||</span> <span class="token operator">!</span>head<span class="token operator">-></span>next<span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>  <span class="token comment">// 至少要有1个节点</span>    ListNode <span class="token operator">*</span>fast <span class="token operator">=</span> head<span class="token punctuation">;</span>    ListNode <span class="token operator">*</span>slow <span class="token operator">=</span> head<span class="token punctuation">;</span>    ListNode <span class="token operator">*</span>pre <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>    <span class="token comment">// slow的前一个节点，用来断开链表</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">&amp;&amp;</span> fast<span class="token operator">-></span>next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        pre <span class="token operator">=</span> slow<span class="token punctuation">;</span>        slow <span class="token operator">=</span> slow<span class="token operator">-></span>next<span class="token punctuation">;</span>        fast <span class="token operator">=</span> fast<span class="token operator">-></span>next<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    pre<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>    <span class="token comment">// 把链表从中间断开</span>    ListNode <span class="token operator">*</span>l1 <span class="token operator">=</span> <span class="token function">sortList</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 前半串</span>    ListNode <span class="token operator">*</span>l2 <span class="token operator">=</span> <span class="token function">sortList</span><span class="token punctuation">(</span>slow<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 后半串</span>    <span class="token keyword">return</span> <span class="token function">merge</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span> l2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>相关报道</title>
      <link href="2021/09/24/%E5%A4%9A%E6%97%8B%E7%BF%BC-%E7%9B%B8%E5%85%B3%E6%8A%A5%E9%81%93/"/>
      <url>2021/09/24/%E5%A4%9A%E6%97%8B%E7%BF%BC-%E7%9B%B8%E5%85%B3%E6%8A%A5%E9%81%93/</url>
      
        <content type="html"><![CDATA[<h2 id="外卖无人机"><a href="#外卖无人机" class="headerlink" title="外卖无人机"></a>外卖无人机</h2><p><a href="https://www.cnki.com.cn/Article/CJFDTotal-MHGL201806006.htm">中国首批无人机送餐航线获批准</a></p><p>无人机送餐、送生鲜好处很多，既降低了送餐成本和风险，又能在天气恶劣或地形复杂的送餐条件下尽快把外卖送到消费者手中。中国电子商务协会行业专家张健表示，从提高效率、增强体验度来说，无人机即时送餐业务符合新零售的特征。<br>苏宁金融研究院新产业研究中心评论称，首批无人机航线启用，标志着“未来物流”战略的落地迈出重要一步，即时配送行业加快从劳动密集型向技术密集型进化。</p><p><a href="https://baijiahao.baidu.com/s?id=1601792193483090627&amp;wfr=spider&amp;for=pc">饿了么获批中国首条外卖无人机配送航线，外卖平均 20 分钟送达</a></p><p>2018 年 5 月 29 日，饿了么在上海宣布获准开辟中国第一批无人机及时配送航线，将送餐无人机正式投入商业运营。<br>饿了么本次获准飞行的无人机航线共有 17 条，均在上海金山工业园区内，这些航线的平均路程为 2.2 公里，每条航线每天飞行 3-4 个架次，覆盖的配送面积为 58 平方公里，可以服务 100 多家外卖商家。</p><h2 id="物流无人机"><a href="#物流无人机" class="headerlink" title="物流无人机"></a>物流无人机</h2><p><a href="https://baike.baidu.com/tashuo/browse/content?id=82c735fad8ce6f2a5af719fd&amp;lemmaId=193664&amp;fromLemmaModule=pcBottom&amp;lemmaTitle=DHL">DHL 和亿航展开合作，在中国推出无人机送货服务</a></p><p>现在用无人机或无人车来送货，已经成了一件很普通的事。根据 Geek.com 的报道，DHL 早在 5 月 19 日就和亿航确定合作协议，并获得了无人机配送航线的批准。接下来，DHL 将会用亿航专供的无人机 Falcon 来完成配送任务。</p>]]></content>
      
      
      <categories>
          
          <category> 多旋翼 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多旋翼 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>129-根到叶子节点的和</title>
      <link href="2021/09/24/LeetCode-129-%E6%A0%B9%E5%88%B0%E5%8F%B6%E5%AD%90%E8%8A%82%E7%82%B9%E7%9A%84%E5%92%8C/"/>
      <url>2021/09/24/LeetCode-129-%E6%A0%B9%E5%88%B0%E5%8F%B6%E5%AD%90%E8%8A%82%E7%82%B9%E7%9A%84%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-129-Sum-Root-to-Leaf-Numbers"><a href="#LeetCode-129-Sum-Root-to-Leaf-Numbers" class="headerlink" title="LeetCode 129. Sum Root to Leaf Numbers"></a>LeetCode 129. Sum Root to Leaf Numbers</h2><p><a href="https://leetcode.com/problems/sum-root-to-leaf-numbers/">LeetCode-129</a></p><p>You are given the <code>root</code> of a binary tree containing digits from <code>0</code> to <code>9</code> only.</p><p>Each root-to-leaf path in the tree represents a <strong>number</strong>.</p><p>For example, the root-to-leaf path <code>1 -&gt; 2 -&gt; 3</code> represents the number <code>123</code>.<br>Return <strong>the total sum of all root-to-leaf numbers</strong>. Test cases are generated so that the answer will fit in a 32-bit integer.</p><p>A leaf node is a node with no children.</p><p>Example 1:<br><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/129/num1tree.jpg" alt><br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> root <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token number">25</span>Explanation<span class="token operator">:</span>The root<span class="token operator">-</span>to<span class="token operator">-</span>leaf path <span class="token number">1</span><span class="token operator">-></span><span class="token number">2</span> represents the number <span class="token number">12.</span>The root<span class="token operator">-</span>to<span class="token operator">-</span>leaf path <span class="token number">1</span><span class="token operator">-></span><span class="token number">3</span> represents the number <span class="token number">13.</span>Therefore<span class="token punctuation">,</span> sum <span class="token operator">=</span> <span class="token number">12</span> <span class="token operator">+</span> <span class="token number">13</span> <span class="token operator">=</span> <span class="token number">25.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h3 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h3><p>每条根到叶子节点的路径都可以组成一个数字，求这些数字的和</p><h3 id="method-回溯"><a href="#method-回溯" class="headerlink" title="method: 回溯"></a>method: 回溯</h3><p>简单的回溯，因为要检查是不是根节点，所以先确保不是空节点</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> res<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">traversal</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span>root<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token operator">-></span>left <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>root<span class="token operator">-></span>right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        res <span class="token operator">+=</span> num <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> root<span class="token operator">-></span>val<span class="token punctuation">;</span>    <span class="token comment">// 加上根节点的值</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">)</span> <span class="token function">traversal</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">,</span> num <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> root<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">)</span> <span class="token function">traversal</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">,</span> num <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> root<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">sumNumbers</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">traversal</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 回溯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>84-柱形图中最大矩形</title>
      <link href="2021/09/24/LeetCode-84-%E6%9F%B1%E5%BD%A2%E5%9B%BE%E4%B8%AD%E6%9C%80%E5%A4%A7%E7%9F%A9%E5%BD%A2/"/>
      <url>2021/09/24/LeetCode-84-%E6%9F%B1%E5%BD%A2%E5%9B%BE%E4%B8%AD%E6%9C%80%E5%A4%A7%E7%9F%A9%E5%BD%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-84-Largest-Rectangle-in-Histogram"><a href="#LeetCode-84-Largest-Rectangle-in-Histogram" class="headerlink" title="LeetCode 84. Largest Rectangle in Histogram"></a>LeetCode 84. Largest Rectangle in Histogram</h2><p><a href="https://leetcode.com/problems/largest-rectangle-in-histogram/">LeetCode-84</a></p><p>Given an array of integers <code>heights</code> representing the histogram’s bar height where the width of each bar is 1, return the area of the largest rectangle in the histogram.</p><p>Example 1:<br><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/84/84.jpg" alt><br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> heights <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token number">10</span>Explanation<span class="token operator">:</span> The above is a histogram where width of each bar is <span class="token number">1.</span>The largest rectangle is shown in the red area<span class="token punctuation">,</span> which has an area <span class="token operator">=</span> <span class="token number">10</span> units<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></p><h3 id="method-单调栈"><a href="#method-单调栈" class="headerlink" title="method: 单调栈"></a>method: 单调栈</h3><p>计算区间中元素个数</p><blockquote><ul><li>左闭右闭<code>[i, j]: i-j+1</code></li><li>左闭右开<code>[i, j): j-i</code></li><li>左开右开<code>(i, j): j-i-1</code></li></ul></blockquote><p>维护一个从栈底到栈顶单调递增的栈，如果<code>heights[i]</code>比栈顶元素大就入栈，小就栈顶元素出栈。<br>计算面积的逻辑，高度就是栈顶元素的高度，宽度的确定：</p><ul><li>如果栈是空的，说明从下标0开始的所有元素都比<code>topIdx</code>大，而<code>heights[i]</code>比他小，所以他能到达的宽度区间就是<code>[0, i)</code>，即为<code>i</code></li></ul><center><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/84/84.png" width="60%"></center><ul><li>如果栈非空，<code>top</code>肯定比刚弹出的<code>topIdx</code>小，并且<code>heights[i]</code>也比<code>topIdx</code>小，所以他能到达的宽度区间是<code>(st.top, i)</code>，即为<code>i-st.top-1</code></li></ul><p>栈非空有两种情况，为什么不是<code>i-topIdx</code>，因为现在的<code>top</code>和<code>topIdx</code>之间可能还有值，只不过已经弹出了</p><table><tr><td bgcolor="#dfe2e5"><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/84/84-1.png"></td><td bgcolor="#dfe2e5"><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/84/84-2.png"></td></tr></table><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">largestRectangleArea</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> heights<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> st<span class="token punctuation">;</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    heights<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> heights<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> heights<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> heights<span class="token punctuation">[</span>st<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> topIdx <span class="token operator">=</span> st<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            st<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> h <span class="token operator">=</span> heights<span class="token punctuation">[</span>topIdx<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> w <span class="token operator">=</span> st<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> i <span class="token operator">:</span> i <span class="token operator">-</span> st<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            res <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> h <span class="token operator">*</span> w<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        st<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单调栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>13-罗马数字转整数</title>
      <link href="2021/09/23/LeetCode-13-%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97%E8%BD%AC%E6%95%B4%E6%95%B0/"/>
      <url>2021/09/23/LeetCode-13-%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97%E8%BD%AC%E6%95%B4%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-13-Roman-to-Integer"><a href="#LeetCode-13-Roman-to-Integer" class="headerlink" title="LeetCode 13. Roman to Integer"></a>LeetCode 13. Roman to Integer</h2><p><a href="https://leetcode.com/problems/roman-to-integer/">LeetCode-13</a></p><p>Roman numerals are represented by seven different symbols: <code>I, V, X, L, C, D and M</code>.<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Symbol       ValueI             <span class="token number">1</span>V             <span class="token number">5</span>X             <span class="token number">10</span>L             <span class="token number">50</span>C             <span class="token number">100</span>D             <span class="token number">500</span>M             <span class="token number">1000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> s <span class="token operator">=</span> <span class="token string">"III"</span>Output<span class="token operator">:</span> <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br>Example 2:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> s <span class="token operator">=</span> <span class="token string">"IV"</span>Output<span class="token operator">:</span> <span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br>Example 3:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> s <span class="token operator">=</span> <span class="token string">"IX"</span>Output<span class="token operator">:</span> <span class="token number">9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br>Example 4:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> s <span class="token operator">=</span> <span class="token string">"LVIII"</span>Output<span class="token operator">:</span> <span class="token number">58</span>Explanation<span class="token operator">:</span> L <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">,</span> V<span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> III <span class="token operator">=</span> <span class="token number">3.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></p><h3 id="method"><a href="#method" class="headerlink" title="method"></a>method</h3><p>当前数字比他后面的数字小，就减去当前的数字，比后面数字大，就加上当前数字</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">romanToInt</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    unordered_map<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> hash<span class="token punctuation">;</span>    hash<span class="token punctuation">[</span><span class="token string">'I'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    hash<span class="token punctuation">[</span><span class="token string">'V'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    hash<span class="token punctuation">[</span><span class="token string">'X'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    hash<span class="token punctuation">[</span><span class="token string">'L'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span>    hash<span class="token punctuation">[</span><span class="token string">'C'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    hash<span class="token punctuation">[</span><span class="token string">'D'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">;</span>    hash<span class="token punctuation">[</span><span class="token string">'M'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> hash<span class="token punctuation">[</span>s<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>hash<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> hash<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> res <span class="token operator">-=</span> hash<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> res <span class="token operator">+=</span> hash<span class="token punctuation">[</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 哈希表 </tag>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>23-合并k个升序链表</title>
      <link href="2021/09/23/LeetCode-23-%E5%90%88%E5%B9%B6k%E4%B8%AA%E5%8D%87%E5%BA%8F%E9%93%BE%E8%A1%A8/"/>
      <url>2021/09/23/LeetCode-23-%E5%90%88%E5%B9%B6k%E4%B8%AA%E5%8D%87%E5%BA%8F%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-23-Merge-k-Sorted-Lists"><a href="#LeetCode-23-Merge-k-Sorted-Lists" class="headerlink" title="LeetCode 23. Merge k Sorted Lists"></a>LeetCode 23. Merge k Sorted Lists</h2><p><a href="https://leetcode.com/problems/merge-k-sorted-lists/">LeetCode-23</a></p><p>You are given an array of <code>k</code> linked-lists lists, each linked-list is sorted in <code>ascending</code> order.</p><p>Merge all the linked-lists into one sorted linked-list and return it.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> lists <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>Explanation<span class="token operator">:</span> The linked<span class="token operator">-</span>lists are<span class="token operator">:</span><span class="token punctuation">[</span>  <span class="token number">1</span><span class="token operator">-></span><span class="token number">4</span><span class="token operator">-></span><span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token operator">-></span><span class="token number">3</span><span class="token operator">-></span><span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token operator">-></span><span class="token number">6</span><span class="token punctuation">]</span>merging them into one sorted list<span class="token operator">:</span><span class="token number">1</span><span class="token operator">-></span><span class="token number">1</span><span class="token operator">-></span><span class="token number">2</span><span class="token operator">-></span><span class="token number">3</span><span class="token operator">-></span><span class="token number">4</span><span class="token operator">-></span><span class="token number">4</span><span class="token operator">-></span><span class="token number">5</span><span class="token operator">-></span><span class="token number">6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h3 id="method-小根堆"><a href="#method-小根堆" class="headerlink" title="method: 小根堆"></a>method: 小根堆</h3><p>把链表的<font color="LightSeaGreen">值和序号</font>放进小根堆排序，会按照值的大小从小到大排序，然后通过序号找到是哪条链表的，如果他还有值，就继续插入堆中</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">ListNode<span class="token operator">*</span> <span class="token function">mergeKLists</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>ListNode<span class="token operator">*</span><span class="token operator">></span><span class="token operator">&amp;</span> lists<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ListNode <span class="token operator">*</span>dummy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ListNode <span class="token operator">*</span>head <span class="token operator">=</span> dummy<span class="token punctuation">;</span>    priority_queue<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token punctuation">,</span> greater<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">></span> q<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> lists<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// 先把每条链的头结点放进来</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>lists<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">pair</span><span class="token punctuation">(</span>lists<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-></span>val<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>second<span class="token punctuation">;</span> <span class="token comment">// 取序号</span>        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        head<span class="token operator">-></span>next <span class="token operator">=</span> lists<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>        head <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>        lists<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> lists<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">-></span>next<span class="token punctuation">;</span>  <span class="token comment">// 序号链表移动</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>lists<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">pair</span><span class="token punctuation">(</span>lists<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">-></span>val<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 如果还有就继续放入</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> dummy<span class="token operator">-></span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 堆 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>背包问题</title>
      <link href="2021/09/23/LeetCode-%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/"/>
      <url>2021/09/23/LeetCode-%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="背包问题"><a href="#背包问题" class="headerlink" title="背包问题"></a>背包问题</h2><h3 id="01背包"><a href="#01背包" class="headerlink" title="01背包"></a>01背包</h3><h4 id="动态规划五部曲"><a href="#动态规划五部曲" class="headerlink" title="动态规划五部曲"></a>动态规划五部曲</h4><p>1、确定dp数组以及下标的含义</p><p>使用二维数组，<code>dp[i][j]</code>表示对于下标为<code>0~i</code>的物品，背包重量为<code>j</code>时的最大价值</p><center><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/01/01bag-1.png" width="60%"></center><p>2、确定递推公式</p><ul><li>不放物品<code>i</code>，则价值和<code>i-1</code>的一样，所以<code>dp[i][j] = dp[i-1][j]</code></li><li>放物品<code>i</code>，则背包重量要减少<code>weight[i]</code>，价值要增加<code>value[i]</code>，所以<code>dp[i][j] = dp[i-1][j-weight[i]] + value[i]</code></li></ul><p>如果放不进物品<code>i</code>，那只能是第一种，如果放得进，那就两种取较大值</p><p>3、dp数组初始化</p><p>第一列：首先背包重量为0时，一个物品都放不进来，所以第一列初始化为0<br>第一行：对于物品0，当背包重量小于物品0的重量时，都放不进来，所以初始化为0，当背包重量大于等于物品0的重量时，都放得进来，所以初始化为<code>value[0]</code></p><p>剩下的初始化为0就行</p><center><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/01/01bag-2.png" width="60%"></center><p>4、确定遍历顺序</p><p>先遍历物品，再遍历背包，比较容易理解</p><p>也可以先遍历背包，再遍历物品，因为<code>dp[i][j]</code>来源于它的左上角</p><p>5、举例推导dp数组</p><p>对于物品1，背包重量为4时，可以选择不放物品1，价值不变，为15<br>如果选择放物品1，背包重量变为1，原先的背包重量为1的最大价值为15，再加上物品1的价值20，所以总价值为35，所以将<code>dp[1][4]</code>更新为35</p><center><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/01/01bag-3.png" width="60%"></center><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> weight <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> value <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> bagWeight <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>  <span class="token comment">// 最大背包</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">dp</span><span class="token punctuation">(</span>weight<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span>bagWeight <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> weight<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> bagWeight<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// 第一行的初始化</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> weight<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// 遍历物品</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> bagWeight<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 遍历背包</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> weight<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 放不了</span>            <span class="token keyword">else</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> weight<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> value<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 0 15 15 15 15 </span><span class="token comment">// 0 15 15 20 35 </span><span class="token comment">// 0 15 15 20 35 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="状态压缩"><a href="#状态压缩" class="headerlink" title="状态压缩"></a>状态压缩</h4><p>既然<code>dp[i][j]</code>只跟上一行有关，就可以只用一个滚动数组，但要注意，因为跟前面的元素有关，所以一定要先更新后面的元素，再更新前面的元素，<strong>从后往前</strong></p><blockquote><ul><li>逆序遍历是为了保证每个物品只被放入一次</li><li>正序遍历会使得每个物品放入多次，变成完全背包</li></ul></blockquote><p>举例：物品0重量为1，价值为15<br>正序遍历<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span><span class="token number">1</span> <span class="token operator">-</span> weight<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> value<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">15</span>dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">-</span> weight<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> value<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">30</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br>这样物品0在背包2里面就放了两次</p><p>逆序遍历就不会出现这种状态的重叠<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">-</span> weight<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> value<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">15</span>   <span class="token comment">// dp[1]还没更新</span>dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span><span class="token number">1</span> <span class="token operator">-</span> weight<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> value<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">15</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> weight <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> value <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> bagWeight <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">dp</span><span class="token punctuation">(</span>bagWeight <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> weight<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// 遍历物品</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> bagWeight<span class="token punctuation">;</span> j <span class="token operator">>=</span> weight<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 从后往前遍历背包，直到放不进物品i</span>            dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j <span class="token operator">-</span> weight<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> value<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 0 15 15 15 15 </span><span class="token comment">// 0 15 15 20 35 </span><span class="token comment">// 0 15 15 20 35 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 背包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>链表总结</title>
      <link href="2021/09/23/LeetCode-%E9%93%BE%E8%A1%A8%E6%80%BB%E7%BB%93/"/>
      <url>2021/09/23/LeetCode-%E9%93%BE%E8%A1%A8%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h3 id="基础操作"><a href="#基础操作" class="headerlink" title="基础操作"></a>基础操作</h3><p>用数组获得链表，用尾插法，迭代正向输出，递归反向输出</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">ListNode</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> val<span class="token punctuation">;</span>    ListNode <span class="token operator">*</span>next<span class="token punctuation">;</span>    <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">val</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">val</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">next</span><span class="token punctuation">(</span><span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> ListNode <span class="token operator">*</span>ne<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">val</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">next</span><span class="token punctuation">(</span>ne<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">dispListNode</span><span class="token punctuation">(</span>ListNode <span class="token operator">*</span>head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> head<span class="token operator">-></span>val <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>        head <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">revDispListNode</span><span class="token punctuation">(</span>ListNode <span class="token operator">*</span>head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>head<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token function">revDispListNode</span><span class="token punctuation">(</span>head<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> head<span class="token operator">-></span>val <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 数组构建链表，尾插法</span>ListNode<span class="token operator">*</span> <span class="token function">getListNode</span><span class="token punctuation">(</span><span class="token keyword">const</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ListNode <span class="token operator">*</span>head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ListNode <span class="token operator">*</span>dummy <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> n <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ListNode <span class="token operator">*</span>node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        head<span class="token operator">-></span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>        head <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> dummy<span class="token operator">-></span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> nums <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    ListNode <span class="token operator">*</span>head <span class="token operator">=</span> <span class="token function">getListNode</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">dispListNode</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token function">revDispListNode</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 反向输出</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span><span class="token number">4</span> <span class="token number">3</span> <span class="token number">2</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="设计链表"><a href="#设计链表" class="headerlink" title="设计链表"></a>设计链表</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">MyLinkedList</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode <span class="token operator">*</span>_dummy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> _size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">MyLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 等于也不行，因为是空</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">>=</span> _size <span class="token operator">||</span> index <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        ListNode <span class="token operator">*</span>cur <span class="token operator">=</span> _dummy<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>index<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            cur <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token comment">// index-1</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> cur<span class="token operator">-></span>next<span class="token operator">-></span>val<span class="token punctuation">;</span>  <span class="token comment">// 返回next的值</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">void</span> <span class="token function">addAtHead</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ListNode <span class="token operator">*</span>node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        node<span class="token operator">-></span>next <span class="token operator">=</span> _dummy<span class="token operator">-></span>next<span class="token punctuation">;</span>        _dummy<span class="token operator">-></span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>        _size<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">void</span> <span class="token function">addAtTail</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ListNode <span class="token operator">*</span>cur <span class="token operator">=</span> _dummy<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>cur<span class="token operator">-></span>next<span class="token punctuation">)</span> cur <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">;</span>  <span class="token comment">// 找到最后一个元素</span>        ListNode <span class="token operator">*</span>node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        cur<span class="token operator">-></span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>        _size<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">void</span> <span class="token function">addAtIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">></span> _size<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token comment">// 等于可以，因为要新建元素</span>        ListNode <span class="token operator">*</span>cur <span class="token operator">=</span> _dummy<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>index<span class="token operator">--</span><span class="token punctuation">)</span> cur <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token comment">// index-1</span>        ListNode <span class="token operator">*</span>node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        node<span class="token operator">-></span>next <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">;</span>          <span class="token comment">// 插入到next位置</span>        cur<span class="token operator">-></span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>        _size<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">void</span> <span class="token function">deleteAtIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 等于也不行，因为是空</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">>=</span> _size <span class="token operator">||</span> index <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>         ListNode <span class="token operator">*</span>cur <span class="token operator">=</span> _dummy<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>index<span class="token operator">--</span><span class="token punctuation">)</span> cur <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token comment">// index-1</span>        cur<span class="token operator">-></span>next <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token comment">// 删除next</span>        _size<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="反转"><a href="#反转" class="headerlink" title="反转"></a>反转</h3><h4 id="全局反转"><a href="#全局反转" class="headerlink" title="全局反转"></a>全局反转</h4><p><a href="https://kavinwkp.github.io/2021/09/15/LeetCode-206-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/">206-反转链表</a></p><p>递归<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">ListNode<span class="token operator">*</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>head <span class="token operator">||</span> <span class="token operator">!</span>head<span class="token operator">-></span>next<span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>  <span class="token comment">// 空节点或最后一个节点</span>    ListNode <span class="token operator">*</span>node <span class="token operator">=</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>head<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>    head<span class="token operator">-></span>next<span class="token operator">-></span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token comment">// 下一个节点指向自己</span>    head<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>       <span class="token comment">// 自己指针置空</span>    <span class="token keyword">return</span> node<span class="token punctuation">;</span>    <span class="token comment">// 反转后的头结点</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><p>迭代<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">ListNode<span class="token operator">*</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>head<span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>    ListNode <span class="token operator">*</span>pre <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ListNode <span class="token operator">*</span>tmp <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>        head<span class="token operator">-></span>next <span class="token operator">=</span> pre<span class="token punctuation">;</span>        pre <span class="token operator">=</span> head<span class="token punctuation">;</span>        head <span class="token operator">=</span> tmp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> pre<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h4 id="局部反转"><a href="#局部反转" class="headerlink" title="局部反转"></a>局部反转</h4><p><a href="https://kavinwkp.github.io/2021/09/15/LeetCode-206-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/">92-反转链表II</a></p><p>反转<code>[left, right]</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 局部反转 [head, tail)</span>ListNode<span class="token operator">*</span> <span class="token function">reverse</span><span class="token punctuation">(</span>ListNode <span class="token operator">*</span>head<span class="token punctuation">,</span> ListNode<span class="token operator">*</span> tail<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ListNode <span class="token operator">*</span>pre <span class="token operator">=</span> tail<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>head <span class="token operator">!=</span> tail<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ListNode <span class="token operator">*</span>tmp <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>        head<span class="token operator">-></span>next <span class="token operator">=</span> pre<span class="token punctuation">;</span>        pre <span class="token operator">=</span> head<span class="token punctuation">;</span>        head <span class="token operator">=</span> tmp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> pre<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ListNode<span class="token operator">*</span> <span class="token function">reverseBetween</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ListNode <span class="token operator">*</span>dummy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> right <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>     <span class="token comment">// 先记录长度</span>    ListNode <span class="token operator">*</span>start <span class="token operator">=</span> dummy<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>left<span class="token punctuation">)</span> start <span class="token operator">=</span> start<span class="token operator">-></span>next<span class="token punctuation">;</span> <span class="token comment">// left的前一个，因为要做连接</span>    ListNode <span class="token operator">*</span>end <span class="token operator">=</span> start<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>len<span class="token operator">--</span><span class="token punctuation">)</span> end <span class="token operator">=</span> end<span class="token operator">-></span>next<span class="token punctuation">;</span>  <span class="token comment">// 指向right的后一个</span>    start<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token function">reverse</span><span class="token punctuation">(</span>start<span class="token operator">-></span>next<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 注意连接</span>    <span class="token keyword">return</span> dummy<span class="token operator">-></span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="环形链表"><a href="#环形链表" class="headerlink" title="环形链表"></a>环形链表</h3><h4 id="判断是否有环"><a href="#判断是否有环" class="headerlink" title="判断是否有环"></a>判断是否有环</h4><p><a href="https://kavinwkp.github.io/2021/06/06/LeetCode-141-%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8/">141-环形链表</a></p><p>双指针<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">hasCycle</span><span class="token punctuation">(</span>ListNode <span class="token operator">*</span>head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ListNode <span class="token operator">*</span>fast <span class="token operator">=</span> head<span class="token punctuation">;</span>    ListNode <span class="token operator">*</span>slow <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">&amp;&amp;</span> fast<span class="token operator">-></span>next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        fast <span class="token operator">=</span> fast<span class="token operator">-></span>next<span class="token operator">-></span>next<span class="token punctuation">;</span>        slow <span class="token operator">=</span> slow<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fast <span class="token operator">==</span> slow<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h4 id="判断环的位置"><a href="#判断环的位置" class="headerlink" title="判断环的位置"></a>判断环的位置</h4><p><a href="https://kavinwkp.github.io/2021/06/06/LeetCode-141-%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8/">142-环形链表II</a></p><p>相遇之后一个从相遇节点开始走，一个从头结点开始走，再次相遇的位置就是环入口</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">ListNode <span class="token operator">*</span><span class="token function">detectCycle</span><span class="token punctuation">(</span>ListNode <span class="token operator">*</span>head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ListNode <span class="token operator">*</span>fast <span class="token operator">=</span> head<span class="token punctuation">;</span>    ListNode <span class="token operator">*</span>slow <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">&amp;&amp;</span> fast<span class="token operator">-></span>next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        fast <span class="token operator">=</span> fast<span class="token operator">-></span>next<span class="token operator">-></span>next<span class="token punctuation">;</span>        slow <span class="token operator">=</span> slow<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>slow <span class="token operator">==</span> fast<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 一个相遇节点开始走</span>            slow <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token comment">// 另一个从头开始走</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>slow <span class="token operator">!=</span> fast<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                slow <span class="token operator">=</span> slow<span class="token operator">-></span>next<span class="token punctuation">;</span>                fast <span class="token operator">=</span> fast<span class="token operator">-></span>next<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> fast<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="相交链表"><a href="#相交链表" class="headerlink" title="相交链表"></a>相交链表</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">A<span class="token operator">:</span>          a1 → a2                    ↘                      c1 → c2 → c3                    ↗B<span class="token operator">:</span>    b1 → b2 → b3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">ListNode <span class="token operator">*</span><span class="token function">getIntersectionNode</span><span class="token punctuation">(</span>ListNode <span class="token operator">*</span>headA<span class="token punctuation">,</span> ListNode <span class="token operator">*</span>headB<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ListNode <span class="token operator">*</span>pA <span class="token operator">=</span> headA<span class="token punctuation">;</span>    ListNode <span class="token operator">*</span>pB <span class="token operator">=</span> headB<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>pA <span class="token operator">!=</span> pB<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pA<span class="token punctuation">)</span> pA <span class="token operator">=</span> pA<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token keyword">else</span> pA <span class="token operator">=</span> headB<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pB<span class="token punctuation">)</span> pB <span class="token operator">=</span> pB<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token keyword">else</span> pB <span class="token operator">=</span> headA<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> pA<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="删除重复元素"><a href="#删除重复元素" class="headerlink" title="删除重复元素"></a>删除重复元素</h3><h4 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">ListNode<span class="token operator">*</span> <span class="token function">deleteDuplicates</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>head<span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>    head<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token function">deleteDuplicates</span><span class="token punctuation">(</span>head<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token operator">-></span>next <span class="token operator">&amp;&amp;</span> head<span class="token operator">-></span>val <span class="token operator">==</span> head<span class="token operator">-></span>next<span class="token operator">-></span>val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>  <span class="token comment">// 直接返回下一个节点，当前节点就没了</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">ListNode<span class="token operator">*</span> <span class="token function">deleteDuplicates</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ListNode <span class="token operator">*</span>cur <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>cur<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>cur<span class="token operator">-></span>next <span class="token operator">&amp;&amp;</span> cur<span class="token operator">-></span>next<span class="token operator">-></span>val <span class="token operator">==</span> cur<span class="token operator">-></span>val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            cur<span class="token operator">-></span>next <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        cur <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数组总结</title>
      <link href="2021/09/23/LeetCode-%E6%95%B0%E7%BB%84%E6%80%BB%E7%BB%93/"/>
      <url>2021/09/23/LeetCode-%E6%95%B0%E7%BB%84%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h3 id="统计"><a href="#统计" class="headerlink" title="统计"></a>统计</h3><p>基础的，统计连续出现的1</p><p><a href="https://kavinwkp.github.io/2021/06/17/LeetCode-485-%E6%9C%80%E5%A4%A7%E8%BF%9E%E7%BB%AD1%E7%9A%84%E4%B8%AA%E6%95%B0/">485-最大连续1的个数</a><br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">findMaxConsecutiveOnes</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cnt <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">?</span> cnt <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        res <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><hr><p>统计相同的0和1的子串，尽管是字符串，但思想还是一样的</p><p><a href="https://kavinwkp.github.io/2021/06/16/LeetCode-696-%E8%AE%A1%E6%95%B0%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AD%90%E4%B8%B2/">696-计数二进制子串</a></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">countBinarySubstrings</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> pre <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> cur <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            cur<span class="token operator">++</span><span class="token punctuation">;</span>   <span class="token comment">// 记录相同的0或1</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            pre <span class="token operator">=</span> cur<span class="token punctuation">;</span>            cur <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 出现不同就置1</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pre <span class="token operator">>=</span> cur<span class="token punctuation">)</span> count<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token comment">// pre大于cur说明可以匹配</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> count<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>自己出题，统计排序数组中出现次数最多的数字，不能用哈希表</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">findMaxFreq</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> nums <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">uint32_t</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> cnt<span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token comment">// 边遍历边统计</span>        <span class="token keyword">else</span> cnt <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment">// 出现不连续就置1</span>        res <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 记录最大值</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>统计第<code>k</code>大的元素</p><p><a href="https://kavinwkp.github.io/2021/05/29/LeetCode-215-%E6%95%B0%E7%BB%84%E4%B8%AD%E7%AC%ACk%E4%B8%AA%E6%9C%80%E5%A4%A7%E5%85%83%E7%B4%A0/">215-数组中的第k个最大元素</a></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">findKthLargest</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    priority_queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">,</span> greater<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> q<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> k<span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 超过k个要把最小的出队</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>统计出现频率最高的k个元素</p><ul><li>需要统计所有数字的出现次数，用哈希表</li><li>凡是需要最高或最低的<code>k</code>个元素或第<code>k</code>个元素，都要用到优先队列</li></ul><p><a href="https://kavinwkp.github.io/2021/09/22/LeetCode-347-%E5%89%8Dk%E4%B8%AA%E9%AB%98%E9%A2%91%E5%85%83%E7%B4%A0/">347-前k个高频元素</a><br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">cmp</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> lhs<span class="token punctuation">.</span>second <span class="token operator">></span> rhs<span class="token punctuation">.</span>second<span class="token punctuation">;</span> <span class="token comment">// 跟sort不一样，反过来了</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">topKFrequent</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> hash<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> n <span class="token operator">:</span> nums<span class="token punctuation">)</span> hash<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    priority_queue<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token punctuation">,</span> cmp<span class="token operator">></span> q<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> it <span class="token operator">=</span> hash<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> hash<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">*</span>it<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> k<span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 大于k个要把最小的出队</span>    <span class="token punctuation">&#125;</span>     vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">res</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h3 id="双指针"><a href="#双指针" class="headerlink" title="双指针"></a>双指针</h3><p>移除某个特定元素</p><p><a href="https://kavinwkp.github.io/2021/05/27/LeetCode-27-%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/">27-移除元素</a></p><h4 id="method-1-同向双指针"><a href="#method-1-同向双指针" class="headerlink" title="method 1: 同向双指针"></a>method 1: 同向双指针</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">removeElement</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>r <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">!=</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span>            l<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        r<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> l<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="method-2-反向双指针"><a href="#method-2-反向双指针" class="headerlink" title="method 2: 反向双指针"></a>method 2: 反向双指针</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">removeElement</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">!=</span> val<span class="token punctuation">)</span> l<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">==</span> val<span class="token punctuation">)</span> r<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">==</span> val <span class="token operator">?</span> l <span class="token operator">:</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>保留<code>N</code>个重复项</p><p><a href="https://kavinwkp.github.io/2021/04/27/LeetCode-26-%E5%88%A0%E9%99%A4%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9/">26/80-删除有序数组中的重复项</a></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">removeDuplicates</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> N<span class="token punctuation">)</span> <span class="token keyword">return</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> index <span class="token operator">=</span> N<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> N<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> nums<span class="token punctuation">[</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            nums<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            index<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> index<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="奇怪的遍历方式"><a href="#奇怪的遍历方式" class="headerlink" title="奇怪的遍历方式"></a>奇怪的遍历方式</h3><p>螺旋遍历二维数组，注意区间都要一样左开右闭</p><p><a href="https://kavinwkp.github.io/2021/06/05/LeetCode-54-%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5/">54-螺旋矩阵</a></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">spiralOrder</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> matrix<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> matrix<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> m <span class="token operator">=</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">res</span><span class="token punctuation">(</span>n <span class="token operator">*</span> m<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n1 <span class="token operator">=</span> n<span class="token punctuation">,</span> m1 <span class="token operator">=</span> m<span class="token punctuation">;</span>    <span class="token keyword">int</span> offset <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> startx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> starty <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>n1 <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> m1 <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        i <span class="token operator">=</span> startx<span class="token punctuation">,</span> j <span class="token operator">=</span> starty<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> starty <span class="token operator">+</span> m <span class="token operator">-</span> offset<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> res<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> startx <span class="token operator">+</span> n <span class="token operator">-</span> offset<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> res<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> j <span class="token operator">></span> starty<span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> res<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 大于起始位置</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">></span> startx<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> res<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        n1 <span class="token operator">-=</span> <span class="token number">2</span><span class="token punctuation">;</span>        m1 <span class="token operator">-=</span> <span class="token number">2</span><span class="token punctuation">;</span>        offset <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>        startx<span class="token operator">++</span><span class="token punctuation">;</span>        starty<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    i <span class="token operator">=</span> startx<span class="token punctuation">,</span> j <span class="token operator">=</span> starty<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n1 <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> m1 <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> res<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 剩一个</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>n1 <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> m1 <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// 剩一行</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> starty <span class="token operator">+</span> m1<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> res<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>n1 <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> m1 <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// 剩一列</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> startx <span class="token operator">+</span> n1<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> res<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token comment">// 没剩下，直接返回</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>347-前k个高频元素</title>
      <link href="2021/09/22/LeetCode-347-%E5%89%8Dk%E4%B8%AA%E9%AB%98%E9%A2%91%E5%85%83%E7%B4%A0/"/>
      <url>2021/09/22/LeetCode-347-%E5%89%8Dk%E4%B8%AA%E9%AB%98%E9%A2%91%E5%85%83%E7%B4%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-347-Top-K-Frequent-Elements"><a href="#LeetCode-347-Top-K-Frequent-Elements" class="headerlink" title="LeetCode 347. Top K Frequent Elements"></a>LeetCode 347. Top K Frequent Elements</h2><p><a href="https://leetcode.com/problems/top-k-frequent-elements/">LeetCode-347</a></p><p>Given an integer array <code>nums</code> and an integer <code>k</code>, return the <code>k most frequent elements</code>. You may return the answer in any order.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">2</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h3 id="method-小根堆"><a href="#method-小根堆" class="headerlink" title="method: 小根堆"></a>method: 小根堆</h3><p>类似于<a href="https://kavinwkp.github.io/2021/05/29/LeetCode-215-%E6%95%B0%E7%BB%84%E4%B8%AD%E7%AC%ACk%E4%B8%AA%E6%9C%80%E5%A4%A7%E5%85%83%E7%B4%A0/">215-数组中的第k个最大元素</a></p><p>超过<code>k</code>个就弹出最小的，相当于排序之后砍掉前面<code>size-k</code>个，留下的就是最大的<code>k</code>个</p><p>哈希表存储每个数字出现次数<br>用<code>pair&lt;int,int&gt;</code>存储数值和出现的频率，所以要自定义优先队列的排序方式</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">cmp</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">const</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> lhs<span class="token punctuation">,</span> <span class="token keyword">const</span> pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> rhs<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> lhs<span class="token punctuation">.</span>second <span class="token operator">></span> rhs<span class="token punctuation">.</span>second<span class="token punctuation">;</span> <span class="token comment">// 跟sort不一样，反过来了</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">topKFrequent</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> hash<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> n <span class="token operator">:</span> nums<span class="token punctuation">)</span> hash<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    priority_queue<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token punctuation">,</span> cmp<span class="token operator">></span> q<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> it <span class="token operator">=</span> hash<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> hash<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token operator">*</span>it<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> k<span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 大于k个要把最小的出队</span>    <span class="token punctuation">&#125;</span>     vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 哈希表 </tag>
            
            <tag> 堆 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>25-k个为一组反转链表</title>
      <link href="2021/09/22/LeetCode-25-k%E4%B8%AA%E4%B8%80%E7%BB%84%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
      <url>2021/09/22/LeetCode-25-k%E4%B8%AA%E4%B8%80%E7%BB%84%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-25-Reverse-Nodes-in-k-Group"><a href="#LeetCode-25-Reverse-Nodes-in-k-Group" class="headerlink" title="LeetCode 25. Reverse Nodes in k-Group"></a>LeetCode 25. Reverse Nodes in k-Group</h2><p><a href="https://leetcode.com/problems/reverse-nodes-in-k-group/">LeetCode-25</a></p><p>Given a linked list, reverse the nodes of a linked list <code>k</code> at a time and return its modified list.</p><p><code>k</code> is a positive integer and is less than or equal to the length of the linked list. If the number of nodes is not a multiple of k then left-out nodes, in the end, should remain as it is.</p><p>You may not alter the values in the list’s nodes, only nodes themselves may be changed.</p><p>Example 1:<br><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/25/25.jpg" alt><br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> head <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">2</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h3 id="method-1-迭代"><a href="#method-1-迭代" class="headerlink" title="method 1: 迭代"></a>method 1: 迭代</h3><p>局部反转：反转<code>[first, last)</code>，就是把<code>pre</code>设置为<code>last</code>，条件改成<code>first != last</code>，逻辑与全局反转类似</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">ListNode<span class="token operator">*</span> <span class="token function">reverse</span><span class="token punctuation">(</span>ListNode <span class="token operator">*</span>first<span class="token punctuation">,</span> ListNode <span class="token operator">*</span>last<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ListNode <span class="token operator">*</span>pre <span class="token operator">=</span> last<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>first <span class="token operator">!=</span> last<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ListNode <span class="token operator">*</span>tmp <span class="token operator">=</span> first<span class="token operator">-></span>next<span class="token punctuation">;</span>        first<span class="token operator">-></span>next <span class="token operator">=</span> pre<span class="token punctuation">;</span>        pre <span class="token operator">=</span> first<span class="token punctuation">;</span>        first <span class="token operator">=</span> tmp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> pre<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ListNode<span class="token operator">*</span> <span class="token function">reverseKGroup</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ListNode <span class="token operator">*</span>dummy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span>    head <span class="token operator">=</span> dummy<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ListNode <span class="token operator">*</span>node <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token comment">// 先记录head的下一个节点</span>        ListNode <span class="token operator">*</span>cur <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token comment">// cur移动k步</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cur<span class="token punctuation">)</span> <span class="token keyword">return</span> dummy<span class="token operator">-></span>next<span class="token punctuation">;</span>   <span class="token comment">// 不够k个直接返回</span>            cur <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        head<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token function">reverse</span><span class="token punctuation">(</span>head<span class="token operator">-></span>next<span class="token punctuation">,</span> cur<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 反转[head->next,cur)</span>        head <span class="token operator">=</span> node<span class="token punctuation">;</span>    <span class="token comment">// 做连接，head指向cur前面的节点</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> dummy<span class="token operator">-></span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="method-2-递归"><a href="#method-2-递归" class="headerlink" title="method 2: 递归"></a>method 2: 递归</h3><p>每次反转完一段，<code>node</code>是这一段新的头结点，要返回的是<code>node</code><br>做连接：<code>head</code>反转完是这一段的尾节点，要指向下一段的头结点，也就是递归的返回值</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 局部反转</span>ListNode <span class="token operator">*</span><span class="token function">reverse</span><span class="token punctuation">(</span>ListNode <span class="token operator">*</span>head<span class="token punctuation">,</span> ListNode <span class="token operator">*</span>tail<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ListNode <span class="token operator">*</span>pre <span class="token operator">=</span> tail<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>head <span class="token operator">!=</span> tail<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ListNode <span class="token operator">*</span>tmp <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>        head<span class="token operator">-></span>next <span class="token operator">=</span> pre<span class="token punctuation">;</span>        pre <span class="token operator">=</span> head<span class="token punctuation">;</span>        head <span class="token operator">=</span> tmp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> pre<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ListNode<span class="token operator">*</span> <span class="token function">reverseKGroup</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ListNode <span class="token operator">*</span>cur <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cur<span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>  <span class="token comment">// 不够k个</span>        cur <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    ListNode <span class="token operator">*</span>node <span class="token operator">=</span> <span class="token function">reverse</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> cur<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 反转[head,cur)</span>    head<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token function">reverseKGroup</span><span class="token punctuation">(</span>head<span class="token operator">-></span>next<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 做连接，再处理下一段</span>    <span class="token keyword">return</span> node<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多旋翼动力学</title>
      <link href="2021/09/21/%E5%A4%9A%E6%97%8B%E7%BF%BC-%E5%A4%9A%E6%97%8B%E7%BF%BC%E5%8A%A8%E5%8A%9B%E5%AD%A6/"/>
      <url>2021/09/21/%E5%A4%9A%E6%97%8B%E7%BF%BC-%E5%A4%9A%E6%97%8B%E7%BF%BC%E5%8A%A8%E5%8A%9B%E5%AD%A6/</url>
      
        <content type="html"><![CDATA[<h2 id="多旋翼动量定理"><a href="#多旋翼动量定理" class="headerlink" title="多旋翼动量定理"></a>多旋翼动量定理</h2><h3 id="惯性系"><a href="#惯性系" class="headerlink" title="惯性系"></a>惯性系</h3><script type="math/tex; mode=display">m\dot{v} = mg + R \sum_{k=1}^{4}{F_k}</script><p>因为$F_k$是体轴系下多旋翼的升力，所以要左乘旋转矩阵转换到地理坐标系下<br>同时，因为$F_k$都是垂直于机体平面，沿体轴$z_b$方向，所以旋转矩阵只需要最后一列，展开写就是</p><script type="math/tex; mode=display">m\begin{bmatrix}\ddot{x} \\ \ddot{y} \\ \ddot{z}\end{bmatrix} = m\begin{bmatrix}0 \\ 0 \\ g\end{bmatrix} + (f_1+f_2+f_3+f_4)\begin{bmatrix}cos\psi sin\theta cos\phi + sin\psi sin\phi \\sin\psi sin\theta cos\phi - sin\phi cos\psi \\cos\theta cos\phi\end{bmatrix}</script><h3 id="体轴系"><a href="#体轴系" class="headerlink" title="体轴系"></a>体轴系</h3><script type="math/tex; mode=display">m(\dot{v} + \hat{\omega}_b v) = R^\mathrm{T}mg + \sum_{k=1}^{4}{F_k}</script><p>$mg$是地理坐标系下的，左乘旋转矩阵的转置转换到体轴系</p><p>写成矩阵形式，体轴系下角速度为$\omega_b = \begin{bmatrix}p &amp; q &amp; r\end{bmatrix}^\mathrm{T}$</p><script type="math/tex; mode=display">m\begin{bmatrix}\dot{u} \\ \dot{v} \\ \dot{w}\end{bmatrix} + m\begin{bmatrix}qw - rv \\ ru - pw \\pv - qw\end{bmatrix} = mg\begin{bmatrix}-sin\theta \\cos\theta sin\phi \\cos\theta cos\phi\end{bmatrix} - \begin{bmatrix}0 \\ 0 \\ f_1 + f_2 + f_3 + f_4\end{bmatrix}</script><h2 id="多旋翼动量矩定理"><a href="#多旋翼动量矩定理" class="headerlink" title="多旋翼动量矩定理"></a>多旋翼动量矩定理</h2><h3 id="体轴系-1"><a href="#体轴系-1" class="headerlink" title="体轴系"></a>体轴系</h3><p><img src="/2021/09/21/%E5%A4%9A%E6%97%8B%E7%BF%BC-%E5%A4%9A%E6%97%8B%E7%BF%BC%E5%8A%A8%E5%8A%9B%E5%AD%A6/multirotor.png" alt></p><script type="math/tex; mode=display">I\dot{\omega} + \hat{\omega} I \omega = \sum_{k=1}^{4}{r_k \times F_k} - \hat{\omega} \sum_{k=1}^{4}{I_k\omega_k} - \sum_{k=1}^{4}{\tilde{\tau}_k}</script><p>这里定义$z$轴垂直于机身向下<br>$\hat{\omega} \sum_{k=1}^{4}{I_k\omega_k}$称为陀螺力矩</p><p>$\omega_1 = \begin{bmatrix}0\\0\\ -\Omega_1 \end{bmatrix}\quad\omega_2 = \begin{bmatrix}0\\0\\ -\Omega_2 \end{bmatrix}\quad\omega_3 = \begin{bmatrix}0\\0\\ \Omega_3 \end{bmatrix}\quad\omega_4 = \begin{bmatrix}0\\0\\ \Omega_4 \end{bmatrix}$<br>$I_k$是螺旋桨的转动惯量，因为旋翼角速度垂直于自身，所以只需考虑旋翼$z$轴的转动惯量<br>所以</p><script type="math/tex; mode=display">I_k = \begin{bmatrix}0 & 0 & 0 \\0 & 0 & 0 \\0 & 0 & I_r\end{bmatrix}</script><p>所以</p><script type="math/tex; mode=display">\sum_{k=1}^{4}{I_k\omega_k} = I_r\begin{bmatrix}0 \\ 0 \\ -\Omega_1-\Omega_2+\Omega_3+\Omega_4\end{bmatrix} \\\hat{\omega} \sum_{k=1}^{4}{I_k\omega_k} = I_r\begin{bmatrix}0 & -r & q \\r & 0 & -p \\-q & p & 0 \end{bmatrix}\begin{bmatrix}0 \\ 0 \\ -\Omega_1-\Omega_2+\Omega_3+\Omega_4\end{bmatrix} = \begin{bmatrix}I_r q (-\Omega_1-\Omega_2+\Omega_3+\Omega_4) \\I_r p (\Omega_1+\Omega_2-\Omega_3-\Omega_4) \\0\end{bmatrix}</script><p>$\tilde{\tau}_k$是电机给螺旋桨的扭矩<br>$\tilde{\tau}_1 = \begin{bmatrix}0\\0\\ -\tau_1 \end{bmatrix}\quad\tilde{\tau}_2 = \begin{bmatrix}0\\0\\ -\tau_2 \end{bmatrix}\quad\tilde{\tau}_3 = \begin{bmatrix}0\\0\\ \tau_3 \end{bmatrix}\quad\tilde{\tau}_4 = \begin{bmatrix}0\\0\\ \tau_4 \end{bmatrix}$</p><p>所以机体动量矩定理展开就是</p><script type="math/tex; mode=display">\begin{align*}  & I_x\dot{p} + (I_z-I_y)qr = \frac{\sqrt{2}}{4}l(-f_1+f_2+f_3-f_4) + I_rq(\Omega_1+\Omega_2-\Omega_3-\Omega_4) \\  & I_y\dot{q} + (I_x-I_z)pr = \frac{\sqrt{2}}{4}l(f_1-f_2+f_3-f_4) - I_rp(\Omega_1+\Omega_2-\Omega_3-\Omega_4) \\  & I_z\dot{r} + (I_y-I_x)pq = \tau_1 + \tau_2 - \tau_3 - \tau_4 \\\end{align*}</script>]]></content>
      
      
      <categories>
          
          <category> 多旋翼 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多旋翼 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>56-区间合并</title>
      <link href="2021/09/21/LeetCode-56-%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/"/>
      <url>2021/09/21/LeetCode-56-%E5%8C%BA%E9%97%B4%E5%90%88%E5%B9%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-56-Merge-Intervals"><a href="#LeetCode-56-Merge-Intervals" class="headerlink" title="LeetCode 56. Merge Intervals"></a>LeetCode 56. Merge Intervals</h2><p><a href="https://leetcode.com/problems/merge-intervals/">LeetCode-56</a></p><p>Given an array of <code>intervals</code> where <code>intervals[i] = [starti, endi]</code>, merge all <strong>overlapping</strong> intervals, and return an array of the non-overlapping intervals that cover all the intervals in the input.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> intervals <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h3 id="method-模拟"><a href="#method-模拟" class="headerlink" title="method: 模拟"></a>method: 模拟</h3><p>先<font color="LightSeaGreen">按左区间排序</font>，左区间相同再按右区间排序<br>如果后一个区间的左区间小于当前区间的右区间，就可以合并，取两个区间的右区间的较大值</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">merge</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> intervals<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>intervals<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> intervals<span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>intervals<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> intervals<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 区间排序</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> res<span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>intervals<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> intervals<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> res<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment">// 可以合并</span>            res<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>             res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模拟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>21-合并两个排序的链表</title>
      <link href="2021/09/18/LeetCode-21-%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%8E%92%E5%BA%8F%E7%9A%84%E9%93%BE%E8%A1%A8/"/>
      <url>2021/09/18/LeetCode-21-%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%8E%92%E5%BA%8F%E7%9A%84%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-21-Merge-Two-Sorted-Lists"><a href="#LeetCode-21-Merge-Two-Sorted-Lists" class="headerlink" title="LeetCode 21. Merge Two Sorted Lists"></a>LeetCode 21. Merge Two Sorted Lists</h2><p><a href="https://leetcode.com/problems/merge-two-sorted-lists/">LeetCode-21</a></p><p>Merge two <strong>sorted</strong> linked lists and return it as a sorted list. The list should be made by splicing together the nodes of the first two lists.</p><p>Example 1:</p><p><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/21/21.jpg" alt></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> l1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> l2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="method-1-迭代"><a href="#method-1-迭代" class="headerlink" title="method 1: 迭代"></a>method 1: 迭代</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">ListNode<span class="token operator">*</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> l1<span class="token punctuation">,</span> ListNode<span class="token operator">*</span> l2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>l1<span class="token punctuation">)</span> <span class="token keyword">return</span> l2<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>l2<span class="token punctuation">)</span> <span class="token keyword">return</span> l1<span class="token punctuation">;</span>    ListNode <span class="token operator">*</span>dummy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ListNode <span class="token operator">*</span>head <span class="token operator">=</span> dummy<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>l1 <span class="token operator">&amp;&amp;</span> l2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l1<span class="token operator">-></span>val <span class="token operator">&lt;</span> l2<span class="token operator">-></span>val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            head<span class="token operator">-></span>next <span class="token operator">=</span> l1<span class="token punctuation">;</span>            l1 <span class="token operator">=</span> l1<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            head<span class="token operator">-></span>next <span class="token operator">=</span> l2<span class="token punctuation">;</span>            l2 <span class="token operator">=</span> l2<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        head <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l1<span class="token punctuation">)</span> head<span class="token operator">-></span>next <span class="token operator">=</span> l1<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l2<span class="token punctuation">)</span> head<span class="token operator">-></span>next <span class="token operator">=</span> l2<span class="token punctuation">;</span>    <span class="token keyword">return</span> dummy<span class="token operator">-></span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="method-2-递归"><a href="#method-2-递归" class="headerlink" title="method 2: 递归"></a>method 2: 递归</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">ListNode<span class="token operator">*</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> l1<span class="token punctuation">,</span> ListNode<span class="token operator">*</span> l2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>l1<span class="token punctuation">)</span> <span class="token keyword">return</span> l2<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>l2<span class="token punctuation">)</span> <span class="token keyword">return</span> l1<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>l1<span class="token operator">-></span>val <span class="token operator">&lt;</span> l2<span class="token operator">-></span>val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        l1<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>l1<span class="token operator">-></span>next<span class="token punctuation">,</span> l2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> l1<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        l2<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>l1<span class="token punctuation">,</span> l2<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> l2<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 递归 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>8-字符串转换整数</title>
      <link href="2021/09/18/LeetCode-8-%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E6%95%B4%E6%95%B0/"/>
      <url>2021/09/18/LeetCode-8-%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%BD%AC%E6%8D%A2%E6%95%B4%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-8-String-to-Integer-atoi"><a href="#LeetCode-8-String-to-Integer-atoi" class="headerlink" title="LeetCode 8. String to Integer (atoi)"></a>LeetCode 8. String to Integer (atoi)</h2><p><a href="https://leetcode.com/problems/string-to-integer-atoi/">LeetCode-8</a></p><p>Implement the <code>myAtoi(string s)</code> function, which converts a <strong>string</strong> to a <strong>32-bit signed integer</strong> (similar to C/C++’s atoi function).</p><p>The algorithm for myAtoi(string s) is as follows:</p><p>Read in and ignore <strong>any leading whitespace</strong>.<br>Check if the next character (if not already at the end of the string) is <code>&#39;-&#39;</code> or <code>&#39;+&#39;</code>. Read this character in if it is either. This determines if the final result is <strong>negative</strong> or <strong>positive</strong> respectively. Assume the result is positive if neither is present.<br>Read in next the characters until the next <strong>non-digit</strong> charcter or the end of the input is reached. The rest of the string is ignored.<br>Convert these digits into an integer (i.e. “123” -&gt; 123, “0032” -&gt; 32). If no digits were read, then the integer is 0. Change the sign as necessary (from step 2).<br>If the integer is out of the 32-bit signed integer range <code>[-2^31, 2^31 - 1]</code>, then clamp the integer so that it remains in the range. Specifically, integers less than <code>-2^31</code> should be clamped to <code>-2^31</code>, and integers greater than <code>2^31 - 1</code> should be clamped to <code>2^31 - 1</code>.<br>Return the integer as the final result.<br>Note:</p><p>Only the space character <code>&#39; &#39;</code> is considered a whitespace character.<br>Do not ignore any characters other than the leading whitespace or the rest of the string after the digits.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> s <span class="token operator">=</span> <span class="token string">"42"</span>Output<span class="token operator">:</span> <span class="token number">42</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br>Example 2:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> s <span class="token operator">=</span> <span class="token string">"   -42a"</span>Output<span class="token operator">:</span> <span class="token operator">-</span><span class="token number">42</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h3 id="method"><a href="#method" class="headerlink" title="method"></a>method</h3><p>先找到第一个字符的位置，判断正负号，再读取每个数字字符整合在一起</p><p>判断溢出逻辑：整数范围是<code>-21,4748,3648</code>到<code>21,4748,3647</code>，如果一个数已经大于<code>21,4748,364</code>，那再来一位什么数都会溢出。<br>或者一个数等于<code>21,4748,364</code>，再来一位大于7的数就会溢出，虽然负数的话，来个8也行，但这里就算来8，输出的也是<code>-21,4748,3648</code>，所以一起当成溢出处理</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">myAtoi</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> sign <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> base <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 符号和数值</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// 遍历的指针</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">)</span> i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token comment">// 找到第一个字符</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'-'</span> <span class="token operator">||</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'+'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'-'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            sign <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">>=</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>base <span class="token operator">></span> INT_MAX <span class="token operator">/</span> <span class="token number">10</span> <span class="token operator">||</span> <span class="token punctuation">(</span>base <span class="token operator">==</span> INT_MAX <span class="token operator">/</span> <span class="token number">10</span> <span class="token operator">&amp;&amp;</span> num <span class="token operator">></span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sign <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> INT_MAX<span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">return</span> INT_MIN<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        base <span class="token operator">=</span> base <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> num<span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> sign <span class="token operator">*</span> base<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
            <tag> 模拟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>卡尔曼滤波</title>
      <link href="2021/09/17/%E5%A4%9A%E6%97%8B%E7%BF%BC-%E5%8D%A1%E5%B0%94%E6%9B%BC%E6%BB%A4%E6%B3%A2/"/>
      <url>2021/09/17/%E5%A4%9A%E6%97%8B%E7%BF%BC-%E5%8D%A1%E5%B0%94%E6%9B%BC%E6%BB%A4%E6%B3%A2/</url>
      
        <content type="html"><![CDATA[<p>用处：在有噪声的情况下结合不同的传感器来找到数据的最佳估计值</p><p>在飞控上的应用：</p><ul><li>姿态角估计</li></ul><p>通过建立含有姿态角，角速度，加速度等状态量的模型，通过IMU的数据进行卡尔曼滤波，重新估计出状态量，间接得到姿态角数据</p><ul><li>位置估计</li></ul><p>加速度一次、二次积分得到速度、位置，GPS观测得到速度和位置，通过卡尔曼滤波进行互补，在不同噪声情况下选择最优估计值</p>]]></content>
      
      
      <categories>
          
          <category> 多旋翼 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多旋翼 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>66-加一</title>
      <link href="2021/09/17/LeetCode-66-%E5%8A%A0%E4%B8%80/"/>
      <url>2021/09/17/LeetCode-66-%E5%8A%A0%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-66-Plus-One"><a href="#LeetCode-66-Plus-One" class="headerlink" title="LeetCode 66. Plus One"></a>LeetCode 66. Plus One</h2><p><a href="https://leetcode.com/problems/plus-one/">LeetCode-66</a></p><p>You are given a large integer represented as an integer array digits, where each <code>digits[i]</code> is the ith digit of the integer. The digits are ordered from most significant to least significant in left-to-right order. The large integer does not contain any leading 0’s.</p><p>Increment the large integer by <strong>one</strong> and return the resulting array of digits.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> digits <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>Explanation<span class="token operator">:</span> The array represents the integer <span class="token number">123.</span>Incrementing by one gives <span class="token number">123</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">124.</span>Thus<span class="token punctuation">,</span> the result should be <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h3 id="method"><a href="#method" class="headerlink" title="method"></a>method</h3><p>设置进位为1，每次更新进位，如果进位为0，就可以直接返回</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">plusOne</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> digits<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> carry <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> digits<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>carry <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> digits<span class="token punctuation">;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> digits<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> carry<span class="token punctuation">;</span>        digits<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> sum <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>        carry <span class="token operator">=</span> sum <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>carry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 需要增加一位</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">res</span><span class="token punctuation">(</span>digits<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> digits<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模拟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4-两个正序数组的中位数</title>
      <link href="2021/09/16/LeetCode-4-%E4%B8%A4%E4%B8%AA%E6%AD%A3%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/"/>
      <url>2021/09/16/LeetCode-4-%E4%B8%A4%E4%B8%AA%E6%AD%A3%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-4-Median-of-Two-Sorted-Arrays"><a href="#LeetCode-4-Median-of-Two-Sorted-Arrays" class="headerlink" title="LeetCode 4. Median of Two Sorted Arrays"></a>LeetCode 4. Median of Two Sorted Arrays</h2><p><a href="https://leetcode.com/problems/median-of-two-sorted-arrays/">LeetCode-4</a></p><p>Given two <strong>sorted</strong> arrays <code>nums1</code> and <code>nums2</code> of size m and n respectively, return the <strong>median</strong> of the two sorted arrays.</p><p>The overall run time complexity should be $O(log (m+n))$.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> nums1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token number">2.00000</span>Explanation<span class="token operator">:</span> merged array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">and</span> median is <span class="token number">2.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br>Example 2:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> nums1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token number">2.50000</span>Explanation<span class="token operator">:</span> merged array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">and</span> median <span class="token function">is</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">2.5</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></p><h2 id="method-二分法"><a href="#method-二分法" class="headerlink" title="method: 二分法"></a>method: 二分法</h2><p>二分法只要出现<code>l = mid</code>，不管是在<code>if</code>分支还是在<code>else</code>分支，<code>mid</code>的计算都要用<code>(l+r+1)/2</code></p><p>让<code>nums1</code>是短的那条，以防计算<code>nums[j]</code>的时候越界</p><p>知道了两个数组的大小，也就知道了合并后数组的中位数的位置，这里将偶数情况和奇数情况统一起来，都用<code>(m + n + 1) / 2</code>，让奇数情况的前半部分比后半部分多一个元素</p><p>问题转化为在<code>nums1</code>中寻找合适的分割点，使得两个数组分割点左侧的元素都小于分割点右侧的元素</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">double</span> <span class="token function">findMedianSortedArrays</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums1<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> nums2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>nums1<span class="token punctuation">,</span> nums2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> m <span class="token operator">=</span> nums1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> n <span class="token operator">=</span> nums2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> totalLeft <span class="token operator">=</span> <span class="token punctuation">(</span>m <span class="token operator">+</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> m<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> l <span class="token operator">+</span> r <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// nums1分割点</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> totalLeft <span class="token operator">-</span> i<span class="token punctuation">;</span>  <span class="token comment">// nums2分割点</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> nums2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> l <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token comment">// 满足条件l右移</span>        <span class="token keyword">else</span> r <span class="token operator">=</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>     <span class="token comment">// 不满足条件r左移</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> l<span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> totalLeft <span class="token operator">-</span> i<span class="token punctuation">;</span>    <span class="token comment">// 四种极端情况</span>    <span class="token keyword">int</span> nums1Left <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> INT_MIN <span class="token operator">:</span> nums1<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> nums1Right <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> m<span class="token punctuation">)</span> <span class="token operator">?</span> INT_MAX <span class="token operator">:</span> nums1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> nums2Left <span class="token operator">=</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> INT_MIN <span class="token operator">:</span> nums2<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> nums2Right <span class="token operator">=</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> n<span class="token punctuation">)</span> <span class="token operator">?</span> INT_MAX <span class="token operator">:</span> nums2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>m <span class="token operator">+</span> n<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 合并后是奇数</span>        <span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span>nums1Left<span class="token punctuation">,</span> nums2Left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 合并后是偶数</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token function">max</span><span class="token punctuation">(</span>nums1Left<span class="token punctuation">,</span> nums2Left<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">min</span><span class="token punctuation">(</span>nums1Right<span class="token punctuation">,</span> nums2Right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2.0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>239-滑动窗口的最大值</title>
      <link href="2021/09/16/LeetCode-239-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC/"/>
      <url>2021/09/16/LeetCode-239-%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E7%9A%84%E6%9C%80%E5%A4%A7%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-239-Sliding-Window-Maximum"><a href="#LeetCode-239-Sliding-Window-Maximum" class="headerlink" title="LeetCode 239. Sliding Window Maximum"></a>LeetCode 239. Sliding Window Maximum</h2><p><a href="https://leetcode.com/problems/sliding-window-maximum/">LeetCode-239</a></p><p>You are given an array of integers nums, there is a sliding window of size <code>k</code> which is moving from the very left of the array to the very right. You can only see the <code>k</code> numbers in the window. Each time the sliding window moves right by one position.</p><p>Return the <strong>max</strong> sliding window.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">3</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span>Explanation<span class="token operator">:</span> Window position                Max<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>               <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token punctuation">[</span><span class="token number">1</span>  <span class="token number">3</span>  <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span><span class="token number">3</span>  <span class="token number">5</span>  <span class="token number">3</span>  <span class="token number">6</span>  <span class="token number">7</span>       <span class="token number">3</span> <span class="token number">1</span> <span class="token punctuation">[</span><span class="token number">3</span>  <span class="token operator">-</span><span class="token number">1</span>  <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token number">5</span>  <span class="token number">3</span>  <span class="token number">6</span>  <span class="token number">7</span>       <span class="token number">3</span> <span class="token number">1</span>  <span class="token number">3</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span>  <span class="token operator">-</span><span class="token number">3</span>  <span class="token number">5</span><span class="token punctuation">]</span> <span class="token number">3</span>  <span class="token number">6</span>  <span class="token number">7</span>       <span class="token number">5</span> <span class="token number">1</span>  <span class="token number">3</span>  <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span>  <span class="token number">5</span>  <span class="token number">3</span><span class="token punctuation">]</span> <span class="token number">6</span>  <span class="token number">7</span>       <span class="token number">5</span> <span class="token number">1</span>  <span class="token number">3</span>  <span class="token operator">-</span><span class="token number">1</span>  <span class="token operator">-</span><span class="token number">3</span> <span class="token punctuation">[</span><span class="token number">5</span>  <span class="token number">3</span>  <span class="token number">6</span><span class="token punctuation">]</span> <span class="token number">7</span>       <span class="token number">6</span> <span class="token number">1</span>  <span class="token number">3</span>  <span class="token operator">-</span><span class="token number">1</span>  <span class="token operator">-</span><span class="token number">3</span>  <span class="token number">5</span> <span class="token punctuation">[</span><span class="token number">3</span>  <span class="token number">6</span>  <span class="token number">7</span><span class="token punctuation">]</span>      <span class="token number">7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h2 id="method-单调队列"><a href="#method-单调队列" class="headerlink" title="method: 单调队列"></a>method: 单调队列</h2><blockquote><p>要维护单调，可以用栈，但是又要维护大小，就需要从头部弹出元素，所以用双端队列</p></blockquote><ol><li><p>类似于单调栈，维护一个从队首到队尾单调递减（不增）的队列<br>也就是，如果后面的元素比队尾元素大，队尾元素就要出队，直到队空</p></li><li><p>其次，要保证队内元素不超过<code>k</code>个，所以要判断新插入元素和队首元素的距离，所以入队的是元素的下标</p></li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">maxSlidingWindow</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>q<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            q<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">;</span>    res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> k<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>q<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            q<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 保持单调</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">-</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> k<span class="token punctuation">)</span>            q<span class="token punctuation">.</span><span class="token function">pop_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 判断距离是否超过k个</span>        q<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 队首元素就是最大值</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>36/37-有效数独</title>
      <link href="2021/09/15/LeetCode-36-%E6%9C%89%E6%95%88%E6%95%B0%E7%8B%AC/"/>
      <url>2021/09/15/LeetCode-36-%E6%9C%89%E6%95%88%E6%95%B0%E7%8B%AC/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-36-Valid-Sudoku"><a href="#LeetCode-36-Valid-Sudoku" class="headerlink" title="LeetCode 36. Valid Sudoku"></a>LeetCode 36. Valid Sudoku</h2><p><a href="https://leetcode.com/problems/valid-sudoku/">LeetCode-36</a></p><p>Determine if a <code>9 x 9</code> Sudoku board is valid. Only the filled cells need to be validated according to the following rules:</p><ul><li>Each row must contain the digits <code>1-9</code> without repetition.</li><li>Each column must contain the digits <code>1-9</code> without repetition.</li><li>Each of the nine <code>3 x 3</code> sub-boxes of the grid must contain the digits <code>1-9</code> without repetition.</li></ul><p>Note:</p><p>A Sudoku board (partially filled) could be valid but is not necessarily solvable.<br>Only the filled cells need to be validated according to the mentioned rules.</p><p>Example 1:<br><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/36/36.png" alt><br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> board <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"5"</span><span class="token punctuation">,</span><span class="token string">"3"</span><span class="token punctuation">,</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token string">"7"</span><span class="token punctuation">,</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token string">"."</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"6"</span><span class="token punctuation">,</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"9"</span><span class="token punctuation">,</span><span class="token string">"5"</span><span class="token punctuation">,</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token string">"."</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token string">"9"</span><span class="token punctuation">,</span><span class="token string">"8"</span><span class="token punctuation">,</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token string">"6"</span><span class="token punctuation">,</span><span class="token string">"."</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"8"</span><span class="token punctuation">,</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token string">"6"</span><span class="token punctuation">,</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token string">"3"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"4"</span><span class="token punctuation">,</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token string">"8"</span><span class="token punctuation">,</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token string">"3"</span><span class="token punctuation">,</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"7"</span><span class="token punctuation">,</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">,</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token string">"6"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token string">"6"</span><span class="token punctuation">,</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token string">"2"</span><span class="token punctuation">,</span><span class="token string">"8"</span><span class="token punctuation">,</span><span class="token string">"."</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token string">"4"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"9"</span><span class="token punctuation">,</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token string">"5"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token string">"8"</span><span class="token punctuation">,</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token string">"7"</span><span class="token punctuation">,</span><span class="token string">"9"</span><span class="token punctuation">]</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h3 id="method-模拟"><a href="#method-模拟" class="headerlink" title="method: 模拟"></a>method: 模拟</h3><p>每个数字对应一个27位的数组，前9位代表是否在某行出现，中间9位代表是否在某列出现，后9位代表是否在某个方框中出现</p><p>通过整体的<code>(i,j)</code>获取方框的下标：<code>i / 3 * 3 + j / 3</code>，</p><p><code>i</code>负责<code>0 3 6</code>，所以要再乘以3，<code>j</code>负责<code>0 1 2</code>，就不用乘3</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> used<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">27</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">isValidSudoku</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">>></span><span class="token operator">&amp;</span> board<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> k <span class="token operator">=</span> i <span class="token operator">/</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> j <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token comment">// 属于哪个方框</span>            <span class="token keyword">int</span> num <span class="token operator">=</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'1'</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>used<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">||</span> used<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">||</span> used<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            used<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            used<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            used<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">18</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>可以只用长度为9的数组记录，用时间换空间，每次用之前都要先清空<br>同样也是注意方框的遍历的写法</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> used<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token keyword">char</span> ch<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>ch <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> num <span class="token operator">=</span> ch <span class="token operator">-</span> <span class="token string">'1'</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>used<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> used<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> <span class="token function">isValidSudoku</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">>></span><span class="token operator">&amp;</span> board<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token comment">// 遍历0-8</span>        <span class="token function">fill</span><span class="token punctuation">(</span>used<span class="token punctuation">,</span> used <span class="token operator">+</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 清空</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// 判断行</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">check</span><span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">fill</span><span class="token punctuation">(</span>used<span class="token punctuation">,</span> used <span class="token operator">+</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// 判断列，注意是[j][i]</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">check</span><span class="token punctuation">(</span>board<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 判断每个方框</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> r <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> r<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token comment">// 行3个框</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> c <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">;</span> c<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// 列3个框</span>            <span class="token function">fill</span><span class="token punctuation">(</span>used<span class="token punctuation">,</span> used <span class="token operator">+</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> r <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> r <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> c <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> c <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">check</span><span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="LeetCode-37-Sudoku-Solver"><a href="#LeetCode-37-Sudoku-Solver" class="headerlink" title="LeetCode 37. Sudoku Solver"></a>LeetCode 37. Sudoku Solver</h2><p><a href="https://leetcode.com/problems/sudoku-solver/">LeetCode-37</a></p><p>Write a program to solve a <code>Sudoku</code> puzzle by filling the empty cells.</p><p>A sudoku solution must satisfy all of the following rules:</p><ol><li>Each of the digits 1-9 must occur exactly once in each row.</li><li>Each of the digits 1-9 must occur exactly once in each column.</li><li>Each of the digits 1-9 must occur exactly once in each of the 9 <code>3x3</code> sub-boxes of the grid.</li></ol><p>The <code>.</code> character indicates empty cells.</p><p>Example 1:</p><p><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/36/250px-Sudoku-by-L2G-20050714_solution.svg.png" alt></p><h3 id="method-回溯"><a href="#method-回溯" class="headerlink" title="method: 回溯"></a>method: 回溯</h3><p>先处理<code>used</code>数组，再回溯填数</p><p>递归需要返回，但又不需要对返回值进行处理，就设置为<code>bool</code>，如果最后返回<code>true</code>，那就一路返回<code>true</code>，不再回溯处理了</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> used<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">27</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">traversal</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">>></span><span class="token operator">&amp;</span> board<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">></span> <span class="token number">80</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment">// 到末尾说明前面都没问题了</span>    <span class="token keyword">int</span> m <span class="token operator">=</span> index <span class="token operator">/</span> <span class="token number">9</span><span class="token punctuation">;</span>          <span class="token comment">// 对应行</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> index <span class="token operator">%</span> <span class="token number">9</span><span class="token punctuation">;</span>          <span class="token comment">// 对应列</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> m <span class="token operator">/</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> n <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token comment">// 对应块</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>board<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// 这里是0-8</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>used<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">||</span> used<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">||</span> used<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            board<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token string">'1'</span><span class="token punctuation">;</span>            used<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            used<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            used<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">18</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">traversal</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>   <span class="token comment">// 如果下一层是true，就直接返回</span>            board<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">;</span>            used<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            used<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>n <span class="token operator">+</span> <span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            used<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">18</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">traversal</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token comment">// 不需要处理直接递归到下一层</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">solveSudoku</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">>></span><span class="token operator">&amp;</span> board<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// 先处理used数组</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> k <span class="token operator">=</span> i <span class="token operator">/</span> <span class="token number">3</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> j <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> num <span class="token operator">=</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'1'</span><span class="token punctuation">;</span>            used<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>       <span class="token comment">// 行</span>            used<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment">// 列</span>            used<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">[</span>k <span class="token operator">+</span> <span class="token number">18</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// 块</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">traversal</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 回溯 </tag>
            
            <tag> 模拟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>206-反转链表</title>
      <link href="2021/09/15/LeetCode-206-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
      <url>2021/09/15/LeetCode-206-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-206-Reverse-Linked-List"><a href="#LeetCode-206-Reverse-Linked-List" class="headerlink" title="LeetCode 206. Reverse Linked List"></a>LeetCode 206. Reverse Linked List</h2><p><a href="https://leetcode.com/problems/reverse-linked-list/">LeetCode-206</a></p><p>同<a href="https://kavinwkp.github.io/2021/05/25/%E5%89%91%E6%8C%87Offer-24-%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/">剑指Offer</a></p><p>Given the head of a singly linked list, <strong>reverse</strong> the list, and return the reversed list.</p><p>Example 1:<br><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/92/206.jpg" alt><br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> head <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h3 id="method-递归"><a href="#method-递归" class="headerlink" title="method: 递归"></a>method: 递归</h3><p>注意：<code>node</code>一直指向最后一个节点</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">ListNode<span class="token operator">*</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>head <span class="token operator">||</span> <span class="token operator">!</span>head<span class="token operator">-></span>next<span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>    ListNode <span class="token operator">*</span>node <span class="token operator">=</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>head<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>    head<span class="token operator">-></span>next<span class="token operator">-></span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token comment">// 下一个节点指向自己</span>    head<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>       <span class="token comment">// 自己指针置空</span>    <span class="token keyword">return</span> node<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>!head</code>是为了处理空节点<code>[]</code>的情况<br><code>!head-&gt;next</code>是为了最后一个就可以返回了</p><hr><h2 id="LeetCode-92-Reverse-Linked-List-II"><a href="#LeetCode-92-Reverse-Linked-List-II" class="headerlink" title="LeetCode 92. Reverse Linked List II"></a>LeetCode 92. Reverse Linked List II</h2><p><a href="https://leetcode.com/problems/reverse-linked-list-ii/">LeetCode-92</a></p><p>Given the head of a singly linked list and two integers <code>left</code> and <code>right</code> where <code>left &lt;= right</code>, reverse the nodes of the list from position left to position right, and return the reversed list.</p><p>Example 1:<br><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/92/92.jpg" alt><br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> head <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> left <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">4</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h3 id="method-1-模拟"><a href="#method-1-模拟" class="headerlink" title="method 1: 模拟"></a>method 1: 模拟</h3><p>因为后面要做连接，所以必须记录<code>left-1</code>的节点，然后<code>pre</code>指向<code>left</code>，<code>cur</code>指向<code>left+1</code>，进行<code>right-left</code>轮的迭代，再连接</p><div class="uk-alert uk-alert-danger"><i class="fas fa-exclamation-triangle"></i> 注意：<code>--left</code>之后<code>left</code>就变了，所以提前记录<code>len</code></div><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">ListNode<span class="token operator">*</span> <span class="token function">reverseBetween</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> right <span class="token operator">-</span> left<span class="token punctuation">;</span>    ListNode <span class="token operator">*</span>dummy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span>    head <span class="token operator">=</span> dummy<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>left<span class="token punctuation">)</span> head <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>   <span class="token comment">// 记录left-1的位置</span>    ListNode <span class="token operator">*</span>pre <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>    ListNode <span class="token operator">*</span>cur <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 做r-l次反转</span>        ListNode <span class="token operator">*</span>tmp <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">;</span>        cur<span class="token operator">-></span>next <span class="token operator">=</span> pre<span class="token punctuation">;</span>        pre <span class="token operator">=</span> cur<span class="token punctuation">;</span>        cur <span class="token operator">=</span> tmp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    head<span class="token operator">-></span>next<span class="token operator">-></span>next <span class="token operator">=</span> cur<span class="token punctuation">;</span>     <span class="token comment">// cur指向right+1，反转的头变成尾</span>    head<span class="token operator">-></span>next <span class="token operator">=</span> pre<span class="token punctuation">;</span>           <span class="token comment">// pre指向right，指向新的头结点</span>    <span class="token keyword">return</span> dummy<span class="token operator">-></span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以把<strong>局部反转</strong>写成递归函数</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 局部反转 [head, tail)</span>ListNode<span class="token operator">*</span> <span class="token function">reverse</span><span class="token punctuation">(</span>ListNode <span class="token operator">*</span>head<span class="token punctuation">,</span> ListNode<span class="token operator">*</span> tail<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ListNode <span class="token operator">*</span>pre <span class="token operator">=</span> tail<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>head <span class="token operator">!=</span> tail<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ListNode <span class="token operator">*</span>tmp <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>        head<span class="token operator">-></span>next <span class="token operator">=</span> pre<span class="token punctuation">;</span>        pre <span class="token operator">=</span> head<span class="token punctuation">;</span>        head <span class="token operator">=</span> tmp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> pre<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ListNode<span class="token operator">*</span> <span class="token function">reverseBetween</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ListNode <span class="token operator">*</span>dummy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> right <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>     <span class="token comment">// 先记录长度</span>    ListNode <span class="token operator">*</span>start <span class="token operator">=</span> dummy<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>left<span class="token punctuation">)</span> start <span class="token operator">=</span> start<span class="token operator">-></span>next<span class="token punctuation">;</span> <span class="token comment">// left的前一个，因为要做连接</span>    ListNode <span class="token operator">*</span>end <span class="token operator">=</span> start<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>len<span class="token operator">--</span><span class="token punctuation">)</span> end <span class="token operator">=</span> end<span class="token operator">-></span>next<span class="token punctuation">;</span>  <span class="token comment">// 指向right的后一个</span>    start<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token function">reverse</span><span class="token punctuation">(</span>start<span class="token operator">-></span>next<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 注意连接</span>    <span class="token keyword">return</span> dummy<span class="token operator">-></span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意这里的<code>start-&gt;next = reverse()</code>，反转之后返回的是新的头结点，所以要再连接上，容易忘记</p><h3 id="method-2-递归"><a href="#method-2-递归" class="headerlink" title="method 2: 递归"></a>method 2: 递归</h3><blockquote><ul><li>递归参数：节点、<code>left</code>、<code>right</code>、深度</li><li>递归结束条件：遇到<code>right</code>就返回</li><li>递归逻辑：<ul><li>先去处理下一个节点</li><li>如果大于等于<code>left</code>，反转，下一个节点指向自己，自己指针置空</li><li>如果等于<code>left-1</code>，做连接</li></ul></li></ul></blockquote><p><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/92/206_1.png" alt></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">ListNode <span class="token operator">*</span>tmp <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>    <span class="token comment">// 记录right的下一个节点</span>ListNode<span class="token operator">*</span> <span class="token function">traversal</span><span class="token punctuation">(</span>ListNode <span class="token operator">*</span>head<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">,</span> <span class="token keyword">int</span> depth<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>depth <span class="token operator">>=</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        tmp <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    ListNode <span class="token operator">*</span>node <span class="token operator">=</span> <span class="token function">traversal</span><span class="token punctuation">(</span>head<span class="token operator">-></span>next<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> depth <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>depth <span class="token operator">>=</span> left<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        head<span class="token operator">-></span>next<span class="token operator">-></span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>        head<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>depth <span class="token operator">==</span> left <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        head<span class="token operator">-></span>next<span class="token operator">-></span>next <span class="token operator">=</span> tmp<span class="token punctuation">;</span> <span class="token comment">// 连到right的下一个节点</span>        head<span class="token operator">-></span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>      <span class="token comment">// 连到right</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> node<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>ListNode<span class="token operator">*</span> <span class="token function">reverseBetween</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> left<span class="token punctuation">,</span> <span class="token keyword">int</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ListNode <span class="token operator">*</span>dummy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> head<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 头结点</span>    <span class="token function">traversal</span><span class="token punctuation">(</span>dummy<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> dummy<span class="token operator">-></span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>要记录<code>right</code>的下一个节点，不能写成<code>head-&gt;next-&gt;next = right-&gt;next</code>，因为这时<code>right</code>已经指向它的前一个节点了</p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 递归 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVX教程</title>
      <link href="2021/09/14/Math-MATLAB-CVX/"/>
      <url>2021/09/14/Math-MATLAB-CVX/</url>
      
        <content type="html"><![CDATA[<h2 id="CVX基本语法"><a href="#CVX基本语法" class="headerlink" title="CVX基本语法"></a>CVX基本语法</h2><p><strong>声明问题类型或控制屏幕输出</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">cvx_begin       <span class="token comment">// 开始优化</span>cvx_begin quiet <span class="token comment">// 不输出log</span>cvx_begin sdp   <span class="token comment">// 半定规划</span>cvx_begin gp   <span class="token comment">// 几何规划</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>定义变量</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">variable <span class="token function">x</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>      <span class="token comment">// 20维的决策变量</span>variable <span class="token function">y</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span> complex  <span class="token comment">// 20X30的复数矩阵</span>variable <span class="token function">X</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span> symmetric    <span class="token comment">// 20X20的对称方阵</span>variables <span class="token function">x</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span> <span class="token function">Y</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span>    <span class="token comment">// 同时定义多个变量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>目标函数（必须是凸函数）</strong></p><ul><li>线性：$c^{T}x, trace(A * X)$</li><li>二次：$x^{T}Qx$</li><li>二阶范数：$norm(Ax-b)$</li></ul><p><strong>约束条件</strong></p><ul><li>线性：$b^{T}x \leq a, A^{T}x \leq b$</li><li>二次：$x^{T}Qx \leq a$</li><li>SOCP：$x_1^2 + x_2^2 - x_3^2 \leq 0, x_3 \geq 0$</li><li>SDP：$X \geq 0$，X是半正定矩阵，特征值都大于等于0</li></ul><p><strong>定义集合</strong></p><ul><li>非负集：<code>x == nonnegative(n)</code>，等价于<code>x&gt;=0</code>，n维向量，两个等号表示属于</li><li>simplex：<code>x == simplex(n)</code>，等价于$\sum^{n}_{i=1}x_i = 1, x &gt;= 0$</li><li>半定矩阵：<code>X == semidefine(n)</code>，等价于$X &gt;= 0, symmetric$</li></ul><p><strong>调整精度</strong></p><p><code>cvx_precision default/low/medium/high/best</code></p><p><strong>选择求解器</strong></p><p><code>cvx_solver Mosek</code></p><h3 id="最小二乘问题"><a href="#最小二乘问题" class="headerlink" title="最小二乘问题"></a>最小二乘问题</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">m <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>n <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>A <span class="token operator">=</span> <span class="token function">randn</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>b <span class="token operator">=</span> <span class="token function">randn</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cvx_begin quiet    variable <span class="token function">x</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>   <span class="token comment">// n维变量</span>    <span class="token function">minimize</span><span class="token punctuation">(</span> <span class="token function">norm</span><span class="token punctuation">(</span>A<span class="token operator">*</span>x<span class="token operator">-</span>b<span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token comment">// 目标函数为二阶范数</span>cvx_end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="有约束的最小二乘问题"><a href="#有约束的最小二乘问题" class="headerlink" title="有约束的最小二乘问题"></a>有约束的最小二乘问题</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">m <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>n <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>A <span class="token operator">=</span> <span class="token function">randn</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>b <span class="token operator">=</span> <span class="token function">randn</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bnds <span class="token operator">=</span> <span class="token function">rand</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>l <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>bnds<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 每行的最小值组成的列</span>u <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>bnds<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 每行的最大值组成的列</span>cvx_begin quiet    variable <span class="token function">x</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>    <span class="token function">minimize</span><span class="token punctuation">(</span> <span class="token function">norm</span><span class="token punctuation">(</span>A<span class="token operator">*</span>x<span class="token operator">-</span>b<span class="token punctuation">)</span> <span class="token punctuation">)</span>    subject to        l <span class="token operator">&lt;=</span> x <span class="token operator">&lt;=</span> u<span class="token punctuation">;</span>cvx_end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>其他范数</strong></p><p>无穷范数</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">cvx_begin quiet    variable <span class="token function">x</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>    <span class="token function">minimize</span><span class="token punctuation">(</span> <span class="token function">norm</span><span class="token punctuation">(</span>A<span class="token operator">*</span>x<span class="token operator">-</span>b<span class="token punctuation">,</span> Inf<span class="token punctuation">)</span> <span class="token punctuation">)</span>cvx_end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>1阶范数</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">cvx_begin quiet    variable <span class="token function">x</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>    <span class="token function">minimize</span><span class="token punctuation">(</span> <span class="token function">norm</span><span class="token punctuation">(</span>A<span class="token operator">*</span>x<span class="token operator">-</span>b<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>cvx_end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>凸函数乘以一个整数或者和凸函数相加，结果还是凸函数</p><script type="math/tex; mode=display">\left \| Ax-b \right \|_2 + \gamma \left \| x \right \|_1</script><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">m <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>n <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>A <span class="token operator">=</span> <span class="token function">randn</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>b <span class="token operator">=</span> <span class="token function">randn</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>gamma <span class="token operator">=</span> <span class="token function">logspace</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>l2norm <span class="token operator">=</span> <span class="token function">zeros</span><span class="token punctuation">(</span><span class="token function">size</span><span class="token punctuation">(</span>gamma<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>l1norm <span class="token operator">=</span> <span class="token function">zeros</span><span class="token punctuation">(</span><span class="token function">size</span><span class="token punctuation">(</span>gamma<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">:</span><span class="token function">length</span><span class="token punctuation">(</span>gamma<span class="token punctuation">)</span>     <span class="token comment">// 不同gamma值对目标的影响</span>    cvx_begin        variable <span class="token function">x</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span>        <span class="token function">minimize</span><span class="token punctuation">(</span> <span class="token function">norm</span><span class="token punctuation">(</span>A<span class="token operator">*</span>x<span class="token operator">-</span>b<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">gamma</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">norm</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>    cvx_end    <span class="token function">l1norm</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">norm</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">l2norm</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">norm</span><span class="token punctuation">(</span>A<span class="token operator">*</span>x<span class="token operator">-</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="DCP-Disciplined-Convex-Programming"><a href="#DCP-Disciplined-Convex-Programming" class="headerlink" title="DCP(Disciplined Convex Programming)"></a>DCP(Disciplined Convex Programming)</h3><p>不能将$\sqrt{x^2+1}$写成<code>sqrt(x^2+1)</code>，因为开根号是一种非凸运算，但可以将其转化为</p><script type="math/tex; mode=display">\left \| [x, 1]\right \|_2</script><p>所以编写为<code>norm([x 1])</code>，这样就可以了</p><blockquote><p>不能直接写<code>1/x</code>，而是需要调用<code>inv_pos(x)</code>，其默认定义域为$\mathbb{R}_{++}$，所以是凸函数，单调递减</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Math </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Matlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Matlab字符变量</title>
      <link href="2021/09/14/Math-MATLAB-%E5%AD%97%E7%AC%A6%E5%8F%98%E9%87%8F/"/>
      <url>2021/09/14/Math-MATLAB-%E5%AD%97%E7%AC%A6%E5%8F%98%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="字符变量"><a href="#字符变量" class="headerlink" title="字符变量"></a>字符变量</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">syms a b real<span class="token punctuation">;</span>x <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token function">expand</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 展开 a^2 + 2*a*b + b^2</span>y <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token number">2</span> <span class="token operator">/</span> a<span class="token punctuation">;</span>    <span class="token comment">// 自动化简 a/4</span>z <span class="token operator">=</span> <span class="token function">sin</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token function">cos</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token function">simplify</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span>     <span class="token comment">// 简化</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="字符矩阵"><a href="#字符矩阵" class="headerlink" title="字符矩阵"></a>字符矩阵</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">A <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token operator">-</span>z y<span class="token punctuation">;</span> z <span class="token number">0</span> <span class="token operator">-</span>x<span class="token punctuation">;</span> <span class="token operator">-</span>y x <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">[</span>V<span class="token punctuation">,</span> D<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">eig</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 特征值和特征向量</span><span class="token function">det</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 行列式</span>A<span class="token number">'</span><span class="token punctuation">;</span>     <span class="token comment">// 转置</span><span class="token function">inv</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span>  <span class="token comment">// 求逆</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>求旋转矩阵<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">syms phi theta psi realRz <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token function">cos</span><span class="token punctuation">(</span>psi<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token function">sin</span><span class="token punctuation">(</span>psi<span class="token punctuation">)</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token function">sin</span><span class="token punctuation">(</span>psi<span class="token punctuation">)</span> <span class="token function">cos</span><span class="token punctuation">(</span>psi<span class="token punctuation">)</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>Ry <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token function">cos</span><span class="token punctuation">(</span>theta<span class="token punctuation">)</span> <span class="token number">0</span> <span class="token function">sin</span><span class="token punctuation">(</span>theta<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">-</span><span class="token function">sin</span><span class="token punctuation">(</span>theta<span class="token punctuation">)</span> <span class="token number">0</span> <span class="token function">cos</span><span class="token punctuation">(</span>theta<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>Rx <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token number">0</span> <span class="token function">cos</span><span class="token punctuation">(</span>phi<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token function">sin</span><span class="token punctuation">(</span>phi<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token number">0</span> <span class="token function">sin</span><span class="token punctuation">(</span>phi<span class="token punctuation">)</span> <span class="token function">cos</span><span class="token punctuation">(</span>phi<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>R <span class="token operator">=</span> Rz <span class="token operator">*</span> Ry <span class="token operator">*</span> Rx<span class="token punctuation">[</span> <span class="token function">cos</span><span class="token punctuation">(</span>psi<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">cos</span><span class="token punctuation">(</span>theta<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cos</span><span class="token punctuation">(</span>psi<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">sin</span><span class="token punctuation">(</span>phi<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">sin</span><span class="token punctuation">(</span>theta<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">cos</span><span class="token punctuation">(</span>phi<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">sin</span><span class="token punctuation">(</span>psi<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">sin</span><span class="token punctuation">(</span>phi<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">sin</span><span class="token punctuation">(</span>psi<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">cos</span><span class="token punctuation">(</span>phi<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">cos</span><span class="token punctuation">(</span>psi<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">sin</span><span class="token punctuation">(</span>theta<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span> <span class="token function">cos</span><span class="token punctuation">(</span>theta<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">sin</span><span class="token punctuation">(</span>psi<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cos</span><span class="token punctuation">(</span>phi<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">cos</span><span class="token punctuation">(</span>psi<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">sin</span><span class="token punctuation">(</span>phi<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">sin</span><span class="token punctuation">(</span>psi<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">sin</span><span class="token punctuation">(</span>theta<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">cos</span><span class="token punctuation">(</span>phi<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">sin</span><span class="token punctuation">(</span>psi<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">sin</span><span class="token punctuation">(</span>theta<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">cos</span><span class="token punctuation">(</span>psi<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">sin</span><span class="token punctuation">(</span>phi<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span>         <span class="token operator">-</span><span class="token function">sin</span><span class="token punctuation">(</span>theta<span class="token punctuation">)</span><span class="token punctuation">,</span>                              <span class="token function">cos</span><span class="token punctuation">(</span>theta<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">sin</span><span class="token punctuation">(</span>phi<span class="token punctuation">)</span><span class="token punctuation">,</span>                              <span class="token function">cos</span><span class="token punctuation">(</span>phi<span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">cos</span><span class="token punctuation">(</span>theta<span class="token punctuation">)</span><span class="token punctuation">]</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>]]></content>
      
      
      <categories>
          
          <category> Math </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Matlab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>48-翻转图像</title>
      <link href="2021/09/14/LeetCode-48-%E7%BF%BB%E8%BD%AC%E5%9B%BE%E5%83%8F/"/>
      <url>2021/09/14/LeetCode-48-%E7%BF%BB%E8%BD%AC%E5%9B%BE%E5%83%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-48-Rotate-Image"><a href="#LeetCode-48-Rotate-Image" class="headerlink" title="LeetCode 48. Rotate Image"></a>LeetCode 48. Rotate Image</h2><p><a href="https://leetcode.com/problems/rotate-image/">LeetCode-48</a></p><p>You are given an <code>n x n</code> 2D matrix representing an image, rotate the image by <code>90 degrees</code> (clockwise).</p><p>You have to rotate the image in-place, which means you have to modify the input 2D matrix <strong>directly</strong>. DO NOT allocate another 2D matrix and do the rotation.</p><p>Example 1:<br><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/48/48.jpg" alt><br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> matrix <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h3 id="method"><a href="#method" class="headerlink" title="method"></a>method</h3><p><code>i</code>表示要处理的行数，<code>j</code>表示要处理的列数，<code>i</code>可以就<code>n/2</code>，但<code>j</code>要<code>(n+1)/2</code>，囊括要处理的区域</p><p>难点：下标的推导</p><p><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/48/48_1.png" alt></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">rotate</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> matrix<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> matrix<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> tmp <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            matrix<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            matrix<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            matrix<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模拟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>848-字母移位</title>
      <link href="2021/09/13/LeetCode-848-%E5%AD%97%E6%AF%8D%E7%A7%BB%E4%BD%8D/"/>
      <url>2021/09/13/LeetCode-848-%E5%AD%97%E6%AF%8D%E7%A7%BB%E4%BD%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-848-Shifting-Letters"><a href="#LeetCode-848-Shifting-Letters" class="headerlink" title="LeetCode 848. Shifting Letters"></a>LeetCode 848. Shifting Letters</h2><p><a href="https://leetcode.com/problems/shifting-letters/">LeetCode-848</a></p><p>You are given a string s of <strong>lowercase</strong> English letters and an integer array shifts of the same length.</p><p>Call the <code>shift()</code> of a letter, the next letter in the alphabet, (wrapping around so that ‘z’ becomes ‘a’).</p><p>For example, <code>shift(&#39;a&#39;) = &#39;b&#39;</code>, <code>shift(&#39;t&#39;) = &#39;u&#39;</code>, and <code>shift(&#39;z&#39;) = &#39;a&#39;</code>.<br>Now for each <code>shifts[i] = x</code>, we want to shift the first i + 1 letters of s, x times.</p><p>Return the final string after all such shifts to s are applied.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> s <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">,</span> shifts <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token string">"rpl"</span>Explanation<span class="token operator">:</span> We start with <span class="token string">"abc"</span><span class="token punctuation">.</span>After shifting the first <span class="token number">1</span> letters of s by <span class="token number">3</span><span class="token punctuation">,</span> we have <span class="token string">"dbc"</span><span class="token punctuation">.</span>After shifting the first <span class="token number">2</span> letters of s by <span class="token number">5</span><span class="token punctuation">,</span> we have <span class="token string">"igc"</span><span class="token punctuation">.</span>After shifting the first <span class="token number">3</span> letters of s by <span class="token number">9</span><span class="token punctuation">,</span> we have <span class="token string">"rpl"</span><span class="token punctuation">,</span> the answer<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h2 id="method-前缀和"><a href="#method-前缀和" class="headerlink" title="method: 前缀和"></a>method: 前缀和</h2><p>从后往前进行前缀和，注意要模以26</p><p>字母移位逻辑：先减去<code>&#39;a&#39;</code>，映射到<code>[0,25]</code>，再加上要移动的位数，注意也要模以26</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">string <span class="token function">shiftingLetters</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span>        nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">26</span><span class="token punctuation">;</span>    nums<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%=</span> <span class="token number">26</span><span class="token punctuation">;</span>  <span class="token comment">// 最后一个元素也要取模</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'a'</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">26</span> <span class="token operator">+</span> <span class="token string">'a'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以合起来一起写，用一个数记录前缀和</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">string <span class="token function">shiftingLetters</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'a'</span> <span class="token operator">+</span> <span class="token punctuation">(</span>num <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">26</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">26</span> <span class="token operator">+</span> <span class="token string">'a'</span><span class="token punctuation">;</span>        num <span class="token operator">=</span> <span class="token punctuation">(</span>num <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">26</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>669-修剪二叉搜索树</title>
      <link href="2021/09/13/LeetCode-669-%E4%BF%AE%E5%89%AA%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/"/>
      <url>2021/09/13/LeetCode-669-%E4%BF%AE%E5%89%AA%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-669-Trim-a-Binary-Search-Tree"><a href="#LeetCode-669-Trim-a-Binary-Search-Tree" class="headerlink" title="LeetCode 669. Trim a Binary Search Tree"></a>LeetCode 669. Trim a Binary Search Tree</h2><p><a href="https://leetcode.com/problems/trim-a-binary-search-tree/">LeetCode-669</a></p><p>Given the root of a binary search tree and the <strong>lowest</strong> and <strong>highest</strong> boundaries as <code>low</code> and <code>high</code>, trim the tree so that all its elements lies in <code>[low, high]</code>. Trimming the tree should not change the relative structure of the elements that will remain in the tree (i.e., any node’s descendant should remain a descendant). It can be proven that there is a unique answer.</p><p>Return the root of the trimmed binary search tree. Note that the root may change depending on the given bounds.</p><p>Example 1:</p><p><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/669/669_1.jpg" alt></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> root <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> low <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> high <span class="token operator">=</span> <span class="token number">2</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Example 2:<br><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/669/669_2.jpg" alt><br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> root <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span>null<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> low <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> high <span class="token operator">=</span> <span class="token number">3</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h2 id="method"><a href="#method" class="headerlink" title="method"></a>method</h2><p>如果节点值小于左区间，返回递归处理的右子树，因为左子树肯定也都小于，直接扔掉<br>如果节点值大于右区间，返回递归处理的左子树，扔掉右子树<br>否则，分别递归处理左子树和右子树</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">TreeNode<span class="token operator">*</span> <span class="token function">trimBST</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> low<span class="token punctuation">,</span> <span class="token keyword">int</span> high<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-></span>val <span class="token operator">&lt;</span> low<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">trimBST</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-></span>val <span class="token operator">></span> high<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">trimBST</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>    root<span class="token operator">-></span>left <span class="token operator">=</span> <span class="token function">trimBST</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 递归左子树</span>    root<span class="token operator">-></span>right <span class="token operator">=</span> <span class="token function">trimBST</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 递归右子树</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>450-删除二叉搜索树中的节点</title>
      <link href="2021/09/13/LeetCode-450-%E5%88%A0%E9%99%A4%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/"/>
      <url>2021/09/13/LeetCode-450-%E5%88%A0%E9%99%A4%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-450-Delete-Node-in-a-BST"><a href="#LeetCode-450-Delete-Node-in-a-BST" class="headerlink" title="LeetCode 450. Delete Node in a BST"></a>LeetCode 450. Delete Node in a BST</h2><p><a href="https://leetcode.com/problems/delete-node-in-a-bst/">LeetCode-450</a></p><p>Given a <strong>root</strong> node reference of a BST and a key, delete the node with the given key in the BST. Return the <strong>root</strong> node reference (possibly updated) of the BST.</p><p>Basically, the deletion can be divided into two stages:</p><p>Search for a node to remove.<br>If the node is found, delete the node.<br>Follow up: Can you solve it with time complexity O(height of tree)?</p><p>Example 1:<br><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/450/450.jpg" alt><br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> root <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token number">3</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span>null<span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h3 id="method"><a href="#method" class="headerlink" title="method"></a>method</h3><blockquote><ul><li>空节点是没找到，直接返回</li><li><code>key</code>比当前节点值小，往左子树找</li><li><code>key</code>比当前节点值大，往右子树找</li></ul></blockquote><p>正好等于当前节点值，删除的逻辑</p><blockquote><ul><li>左子树空，返回右子树</li><li>右子树空，返回左子树</li><li>都不空，把左子树放到右子树的最左边的叶子节点，删掉当前节点，返回右子树节点</li></ul></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">TreeNode<span class="token operator">*</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">==</span> root<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token operator">-></span>left<span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token operator">-></span>right<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token operator">-></span>right<span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token operator">-></span>left<span class="token punctuation">;</span>        TreeNode <span class="token operator">*</span>cur <span class="token operator">=</span> root<span class="token operator">-></span>right<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>cur<span class="token operator">-></span>left<span class="token punctuation">)</span> cur <span class="token operator">=</span> cur<span class="token operator">-></span>left<span class="token punctuation">;</span>  <span class="token comment">// 找到左下角节点</span>        cur<span class="token operator">-></span>left <span class="token operator">=</span> root<span class="token operator">-></span>left<span class="token punctuation">;</span>     <span class="token comment">// 左子树移过去</span>        TreeNode <span class="token operator">*</span>tmp <span class="token operator">=</span> root<span class="token punctuation">;</span>        root <span class="token operator">=</span> root<span class="token operator">-></span>right<span class="token punctuation">;</span>        <span class="token keyword">delete</span> tmp<span class="token punctuation">;</span>     <span class="token comment">// 删掉头结点</span>        <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token comment">// 返回右节点</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">&lt;</span> root<span class="token operator">-></span>val<span class="token punctuation">)</span> root<span class="token operator">-></span>left <span class="token operator">=</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">></span> root<span class="token operator">-></span>val<span class="token punctuation">)</span> root<span class="token operator">-></span>right <span class="token operator">=</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无人机运动学</title>
      <link href="2021/09/13/%E5%A4%9A%E6%97%8B%E7%BF%BC-%E5%A4%9A%E6%97%8B%E7%BF%BC%E8%BF%90%E5%8A%A8%E5%AD%A6/"/>
      <url>2021/09/13/%E5%A4%9A%E6%97%8B%E7%BF%BC-%E5%A4%9A%E6%97%8B%E7%BF%BC%E8%BF%90%E5%8A%A8%E5%AD%A6/</url>
      
        <content type="html"><![CDATA[<p>运动学与质量和受力无关，只研究位置，速度，姿态，角速度等参量</p><h2 id="坐标系变换与旋转矩阵"><a href="#坐标系变换与旋转矩阵" class="headerlink" title="坐标系变换与旋转矩阵"></a>坐标系变换与旋转矩阵</h2><p><img src="/2021/09/13/%E5%A4%9A%E6%97%8B%E7%BF%BC-%E5%A4%9A%E6%97%8B%E7%BF%BC%E8%BF%90%E5%8A%A8%E5%AD%A6/dcm.png" alt></p><p>$p$在$\mathcal{A}$中的坐标为$\begin{bmatrix}p_1&amp;p_2&amp;p_3\end{bmatrix}^\mathrm{T}$，$p^{\prime}$在$\mathcal{B}$中的坐标也是$\begin{bmatrix}p_1&amp;p_2&amp;p_3\end{bmatrix}^\mathrm{T}$，旋转矩阵$R$的每一列是$\mathcal{B}$的三个基向量在$\mathcal{A}$中的投影。</p><script type="math/tex; mode=display">\begin{bmatrix}\mathbf{x_B} & \mathbf{y_B} & \mathbf{z_B}\end{bmatrix} = \begin{bmatrix}\mathbf{x_A} & \mathbf{y_A} & \mathbf{z_A}\end{bmatrix} \cdot R</script><p>两边同乘以$\begin{bmatrix}p_1&amp;p_2&amp;p_3\end{bmatrix}^\mathrm{T}$，得到</p><script type="math/tex; mode=display">\begin{bmatrix}\mathbf{x_B} & \mathbf{y_B} & \mathbf{z_B}\end{bmatrix}\begin{bmatrix}p_1\\p_2\\p_3\end{bmatrix} = \begin{bmatrix}\mathbf{x_A} & \mathbf{y_A} & \mathbf{z_A}\end{bmatrix} \cdot R\begin{bmatrix}p_1\\p_2\\p_3\end{bmatrix}</script><p>也就是$p^{\prime}$在$\mathcal{A}$中的坐标是$R\begin{bmatrix}p_1&amp;p_2&amp;p_3\end{bmatrix}^\mathrm{T}$<br>即把$p^{\prime}$移动到$\mathcal{A}$中，记为$q$，要得到$q$在$\mathcal{A}$中的坐标，需要左乘旋转矩阵$R$</p><script type="math/tex; mode=display">\begin{bmatrix}q_1\\q_2\\q_3\end{bmatrix}=R\begin{bmatrix}p_1\\p_2\\p_3\end{bmatrix}</script><p>即</p><script type="math/tex; mode=display">\mathbf{q}=R\mathbf{p}</script><p>这也可以看成在$\mathcal{A}$坐标系中，向量$p$通过旋转得到向量$q$。</p><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><p><img src="/2021/09/13/%E5%A4%9A%E6%97%8B%E7%BF%BC-%E5%A4%9A%E6%97%8B%E7%BF%BC%E8%BF%90%E5%8A%A8%E5%AD%A6/example.png" alt><br>$\mathcal{A}$绕$z$轴旋转$60^{\circ}$得到$\mathcal{B}$，则$\mathcal{B}$中向量$\begin{bmatrix}1&amp;0&amp;0\end{bmatrix}^\mathrm{T}$在$\mathcal{A}$中的坐标为</p><script type="math/tex; mode=display">\begin{bmatrix}\frac{1}{2} & -\frac{\sqrt{3}}{2} & 0 \\\frac{\sqrt{3}}{2} & \frac{1}{2} & 0 \\ 0 & 0 & 1\end{bmatrix} \cdot \begin{bmatrix}1\\0\\0\end{bmatrix} = \begin{bmatrix}\frac{1}{2} \\\frac{\sqrt{3}}{2}\\ 0\end{bmatrix}</script><p>也可以看成是$\mathcal{A}$中的向量$\mathbf{p}=\begin{bmatrix}1&amp;0&amp;0\end{bmatrix}^\mathrm{T}$绕$z$轴旋转$60^{\circ}$得到向量$\mathbf{q}=\begin{bmatrix}\frac{1}{2} &amp;\frac{\sqrt{3}}{2}&amp; 0\end{bmatrix}^\mathrm{T}$</p><h3 id="旋转矩阵姿态运动学方程"><a href="#旋转矩阵姿态运动学方程" class="headerlink" title="旋转矩阵姿态运动学方程"></a>旋转矩阵姿态运动学方程</h3><p>对$\mathbf{q}=R\mathbf{p}$微分可得</p><script type="math/tex; mode=display">\dot{\mathbf{q}}=\dot{R}\mathbf{p}</script><p>$\dot{\mathbf{q}}$是惯性系下的速度<br>两边同乘以$R^\mathrm{T}$，可得</p><script type="math/tex; mode=display">R^\mathrm{T}\dot{\mathbf{q}}=R^\mathrm{T}\dot{R}\mathbf{p}</script><p>将方程转换到体轴系下，$R^\mathrm{T}\dot{\mathbf{q}}$是体轴系下的速度，根据</p><script type="math/tex; mode=display">\dot{r}=\omega \times r</script><p>或者写成反对称阵形式</p><script type="math/tex; mode=display">\dot{r}=\hat{\omega} \cdot r</script><p>$p$是体轴系下的向量，所以$R^\mathrm{T}\dot{R}$就是体轴系下的角速度的反对称形式，记为</p><script type="math/tex; mode=display">\hat{\omega}_{b} = R^\mathrm{T}\dot{R}</script><p>也可以写成</p><script type="math/tex; mode=display">\dot{R} = R\hat{\omega}_{b}</script><p>同理，由$\mathbf{q}=R\mathbf{p}$可得$\mathbf{p} = R^\mathrm{T}\mathbf{q}$，代入微分方程可得</p><script type="math/tex; mode=display">\dot{\mathbf{q}}=\dot{R} R^\mathrm{T} \mathbf{p}</script><p>则$\dot{R} R^\mathrm{T}$就是惯性系下的角速度，记为</p><script type="math/tex; mode=display">\hat{\omega}_{s} = \dot{R} R^\mathrm{T}</script><p>也可以写成</p><script type="math/tex; mode=display">\dot{R} = \hat{\omega}_{s}R</script><p>参考<a href="https://www.coursera.org/learn/robotics-flight/lecture/eOweb/angular-velocity">Aerial Robotics</a></p><h2 id="Rodrigues公式"><a href="#Rodrigues公式" class="headerlink" title="Rodrigues公式"></a>Rodrigues公式</h2><p>任意旋转都可以用一个旋转轴$u$和一个旋转角$\phi$刻画</p><script type="math/tex; mode=display">R(u, \phi) = Icos\phi + uu^\mathrm{T}(1-cos\phi) + \hat{u}sin\phi</script><p>$\hat{u}$是反对称阵(skew-symmetric matrix)，即$u=\begin{bmatrix}x&amp;y&amp;z\end{bmatrix}$</p><script type="math/tex; mode=display">\hat{u}=\begin{bmatrix} 0 & -z &  y \\ z &  0 & -x \\-y &  x &  0\end{bmatrix}</script><p>即当已知旋转轴和旋转角度后，就可以通过Rodrigues公式求出旋转矩阵</p><h2 id="欧拉角"><a href="#欧拉角" class="headerlink" title="欧拉角"></a>欧拉角</h2><p><img src="/2021/09/13/%E5%A4%9A%E6%97%8B%E7%BF%BC-%E5%A4%9A%E6%97%8B%E7%BF%BC%E8%BF%90%E5%8A%A8%E5%AD%A6/euler00.png" alt></p><p>根据Rodrigues公式，可以写出绕$z$轴、$y$轴、$x$轴的旋转矩阵</p><p>绕$z$轴旋转$\psi$</p><script type="math/tex; mode=display">R_Z(\psi) = \begin{bmatrix} cos\psi & -sin\psi &  0 \\ sin\psi &  cos\psi & 0 \\0 &  0 &  1\end{bmatrix}</script><p>绕$y$轴旋转$\theta$</p><script type="math/tex; mode=display">R_Y(\theta) = \begin{bmatrix} cos\theta & 0 &  sin\theta \\ 0 &  1 & 0 \\ -sin\theta &  0 &  cos\theta\end{bmatrix}</script><p>绕$x$轴旋转$\phi$</p><script type="math/tex; mode=display">R_X(\phi) = \begin{bmatrix} 1 & 0 &  0 \\ 0 & cos\phi & -sin\phi \\ 0 &  sin\phi &  cos\phi\end{bmatrix}</script><p>按Z-Y-X的顺序组成三次旋转的复合旋转矩阵</p><script type="math/tex; mode=display">R_Z(\psi)R_Y(\theta)R_X(\phi) = \begin{bmatrix}cos\psi cos\theta&cos\psi sin\theta \sin\phi-sin\psi cos\phi&cos\psi sin\theta cos\phi+sin\psi sin\phi\\sin\psi cos\theta&sin\psi sin\theta sin\phi+cos\psi cos\phi&sin\psi sin\theta cos\phi-cos\psi sin\phi\\-sin\theta&cos\theta sin\phi&cos\theta cos\phi\end{bmatrix}</script><p>这里每个旋转矩阵都是在新的坐标系中描述的，所以是右乘<br>如果是相对于原始坐标系，就要左乘。所以也可以看成是相对于原始坐标系的描述的X-Y-Z旋转复合</p><h3 id="欧拉角姿态运动方程"><a href="#欧拉角姿态运动方程" class="headerlink" title="欧拉角姿态运动方程"></a>欧拉角姿态运动方程</h3><p><img src="/2021/09/13/%E5%A4%9A%E6%97%8B%E7%BF%BC-%E5%A4%9A%E6%97%8B%E7%BF%BC%E8%BF%90%E5%8A%A8%E5%AD%A6/euler.png" alt></p><p>机体角速度可以表示为</p><script type="math/tex; mode=display">\mathbf{\omega}= \begin{bmatrix}\mathbf{i}_3 & \mathbf{j}_3 & \mathbf{k}_3\end{bmatrix}\begin{bmatrix}p \\ q \\ r\end{bmatrix}</script><p>可以分解为三次变换的欧拉角速度组合</p><script type="math/tex; mode=display">\mathbf{\omega} = \dot{\psi}\mathbf{k}_1 + \dot{\theta}\mathbf{j}_2 + \dot{\phi}\mathbf{i}_3</script><p>因为</p><script type="math/tex; mode=display">\begin{bmatrix}\mathbf{i}_3 & \mathbf{j}_3 & \mathbf{k}_3\end{bmatrix} = \begin{bmatrix}\mathbf{i}_2 & \mathbf{j}_2 & \mathbf{k}_2\end{bmatrix} R_{32}</script><p>所以</p><script type="math/tex; mode=display">\begin{bmatrix}\mathbf{i}_2 & \mathbf{j}_2 & \mathbf{k}_2\end{bmatrix} = \begin{bmatrix}\mathbf{i}_3 & \mathbf{j}_3 & \mathbf{k}_3\end{bmatrix} R_{32}^\mathrm{T}</script><p>所以</p><script type="math/tex; mode=display">\mathbf{j}_2 = \begin{bmatrix}\mathbf{i}_3 & \mathbf{j}_3 & \mathbf{k}_3\end{bmatrix}\begin{bmatrix}0 \\ cos\phi \\ -sin\phi \end{bmatrix}</script><p>同理</p><script type="math/tex; mode=display">\begin{bmatrix}\mathbf{i}_3 & \mathbf{j}_3 & \mathbf{k}_3\end{bmatrix} = \begin{bmatrix}\mathbf{i}_1 & \mathbf{j}_1 & \mathbf{k}_1\end{bmatrix} R_{21}R_{32}</script><p>所以</p><script type="math/tex; mode=display">\begin{bmatrix}\mathbf{i}_1 & \mathbf{j}_1 & \mathbf{k}_1\end{bmatrix} = \begin{bmatrix}\mathbf{i}_3 & \mathbf{j}_3 & \mathbf{k}_3\end{bmatrix} R_{32}^{\mathrm{T}} R_{21}^{\mathrm{T}}</script><p>所以</p><script type="math/tex; mode=display">\mathbf{k}_1 = \begin{bmatrix}\mathbf{i}_3 & \mathbf{j}_3 & \mathbf{k}_3\end{bmatrix}\begin{bmatrix}-sin\theta \\ sin\phi cos\theta \\ cos\phi cos\theta \end{bmatrix}</script><p>组合起来就是</p><script type="math/tex; mode=display">\dot{\psi}\begin{bmatrix}-sin\theta \\ sin\phi cos\theta \\ cos\phi cos\theta \end{bmatrix} + \dot{\theta}\begin{bmatrix}0 \\ cos\phi \\ -sin\phi \end{bmatrix} +\dot{\phi}\begin{bmatrix}1 \\ 0 \\ 0 \end{bmatrix} = \begin{bmatrix}1 & 0 & -sin\theta \\0 & cos\phi & sin\phi cos\theta \\0 & -sin\phi & cos\phi cos\theta\end{bmatrix}\begin{bmatrix}\dot{\phi} \\ \dot{\theta} \\ \dot{\psi}\end{bmatrix}</script><p>所以</p><script type="math/tex; mode=display">\begin{bmatrix}p \\ q \\ r\end{bmatrix} = \begin{bmatrix}1 & 0 & -sin\theta \\0 & cos\phi & sin\phi cos\theta \\0 & -sin\phi & cos\phi cos\theta\end{bmatrix}\begin{bmatrix}\dot{\phi} \\ \dot{\theta} \\ \dot{\psi}\end{bmatrix}</script><p>也可以写成</p><script type="math/tex; mode=display">\begin{bmatrix}\dot{\phi} \\ \dot{\theta} \\ \dot{\psi}\end{bmatrix} = \begin{bmatrix}1 & sin\phi tan\theta & cos\phi tan\theta \\0 & cos\phi & -sin\phi \\0 & sin\phi/cos\theta & cos\phi/cos\theta\end{bmatrix}\begin{bmatrix}p \\ q \\ r\end{bmatrix}</script><h2 id="四元数"><a href="#四元数" class="headerlink" title="四元数"></a>四元数</h2><script type="math/tex; mode=display">q = (q_0, q_1, q_2, q_3)</script><p>或写成</p><script type="math/tex; mode=display">q = (q_0, \mathbf{q})</script><p>加减法</p><script type="math/tex; mode=display">p \pm q = (q_0 \pm q_0, \mathbf{p} \pm \mathbf{q})</script><p>乘法</p><script type="math/tex; mode=display">p \otimes q = (p_0q_0-\mathbf{p}^\mathrm{T}\mathbf{q}, p_0\mathbf{q}+q_0\mathbf{p}+\mathbf{p} \times \mathbf{q})</script><p>共轭</p><script type="math/tex; mode=display">q^{*} = (q_0, -\mathbf{q})</script><p>逆</p><script type="math/tex; mode=display">q^{-1} = \frac{q^{*}}{||q||}</script><p>已知旋转轴$u=\begin{bmatrix}u_1&amp;u_2&amp;u_3\end{bmatrix}^\mathrm{T}$和旋转角度$\phi$，可以写出四元数</p><script type="math/tex; mode=display">q = (cos(\frac{\phi}{2}), u_1sin(\frac{\phi}{2}), u_2sin(\frac{\phi}{2}), u_3sin(\frac{\phi}{2}))</script><p>要对一个向量$p$进行旋转，先将向量写成四元数形式$p=(0, \mathbf{p})$，再左乘四元数$q$，右乘四元数的共轭$q^{-1}$</p><script type="math/tex; mode=display">p^{\prime} = qpq^{*} = (0, \mathbf{p^{\prime}})</script><p>如果$q_1$是坐标系$\mathcal{A}$的四元数，$q_2$也是坐标系$\mathcal{A}$的四元数，则两次四元数的复合旋转是</p><script type="math/tex; mode=display">q = q_2q_1</script><p>如果$q_1$是坐标系$\mathcal{A}$的四元数，旋转之后得到坐标系$\mathcal{B}$，$q_2$是坐标系$\mathcal{B}$的四元数，则两次旋转的复合是</p><script type="math/tex; mode=display">q = q_1q_2</script><h3 id="四元数姿态运动方程"><a href="#四元数姿态运动方程" class="headerlink" title="四元数姿态运动方程"></a>四元数姿态运动方程</h3><script type="math/tex; mode=display">\dot{q} = \frac{\mathbf{\omega}}{2} q</script><p>写成矩阵形式</p><script type="math/tex; mode=display">\begin{bmatrix}\dot{q_0} \\\dot{q_1} \\\dot{q_2} \\\dot{q_3} \\\end{bmatrix} = \frac{1}{2}\begin{bmatrix}0 & -\omega_x & -\omega_y & -\omega_z \\\omega_x & 0 & \omega_z & -\omega_y \\\omega_y & -\omega_z & 0 & \omega_x \\\omega_z & \omega_y & -\omega_x & 0\end{bmatrix}\begin{bmatrix}q_0 \\q_1 \\q_2 \\q_3 \\\end{bmatrix}</script><h4 id="一阶龙格库塔求解"><a href="#一阶龙格库塔求解" class="headerlink" title="一阶龙格库塔求解"></a>一阶龙格库塔求解</h4><script type="math/tex; mode=display">\begin{bmatrix}q_0 \\q_1 \\q_2 \\q_3 \\\end{bmatrix}_{t+\Delta t} = \begin{bmatrix}q_0 \\q_1 \\q_2 \\q_3 \\\end{bmatrix}_t + \frac{\Delta t}{2} \begin{bmatrix}0 & -\omega_x & -\omega_y & -\omega_z \\\omega_x & 0 & \omega_z & -\omega_y \\\omega_y & -\omega_z & 0 & \omega_x \\\omega_z & \omega_y & -\omega_x & 0\end{bmatrix}\begin{bmatrix}q_0 \\q_1 \\q_2 \\q_3 \\\end{bmatrix}_t</script><p>代码实现<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">q0 <span class="token operator">=</span> q0 <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">-</span>q1<span class="token operator">*</span>wx <span class="token operator">-</span> q2<span class="token operator">*</span>wy <span class="token operator">-</span> q3<span class="token operator">*</span>wz<span class="token punctuation">)</span><span class="token operator">*</span>halfT<span class="token punctuation">;</span>q1 <span class="token operator">=</span> q1 <span class="token operator">+</span> <span class="token punctuation">(</span>q0<span class="token operator">*</span>wx <span class="token operator">+</span> q2<span class="token operator">*</span>wz <span class="token operator">-</span> q3<span class="token operator">*</span>wy<span class="token punctuation">)</span><span class="token operator">*</span>halfT<span class="token punctuation">;</span>q2 <span class="token operator">=</span> q2 <span class="token operator">+</span> <span class="token punctuation">(</span>q0<span class="token operator">*</span>wy <span class="token operator">-</span> q1<span class="token operator">*</span>wz <span class="token operator">+</span> q3<span class="token operator">*</span>wx<span class="token punctuation">)</span><span class="token operator">*</span>halfT<span class="token punctuation">;</span>q3 <span class="token operator">=</span> q3 <span class="token operator">+</span> <span class="token punctuation">(</span>q0<span class="token operator">*</span>wz <span class="token operator">+</span> q1<span class="token operator">*</span>wy <span class="token operator">-</span> q2<span class="token operator">*</span>wx<span class="token punctuation">)</span><span class="token operator">*</span>halfT<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></p><h3 id="四元数转欧拉角"><a href="#四元数转欧拉角" class="headerlink" title="四元数转欧拉角"></a>四元数转欧拉角</h3><script type="math/tex; mode=display">\begin{bmatrix}\phi \\ \theta \\\psi\end{bmatrix} = \begin{bmatrix}arctan(\frac{2(q_0q_1+q_2q_3)}{1-2(q_1^2+q_2^2)}) \\arcsin(2(q_0q_2-q_1q_3)) \\arctan(\frac{2(q_0q_3+q_1q_2)}{1-2(q_2^2+q_3^2)})\end{bmatrix}</script><h3 id="四元数表示旋转矩阵"><a href="#四元数表示旋转矩阵" class="headerlink" title="四元数表示旋转矩阵"></a>四元数表示旋转矩阵</h3><p>坐标系$\mathcal{A}$到坐标系$\mathcal{B}$的旋转用四元数描述是$q$<br>则旋转矩阵可以表示为</p><script type="math/tex; mode=display">R^A_B = \begin{bmatrix}q_0^2+q_1^2-q_2^2-q_3^2 & 2(q_1q_2-q_0q_3) & 2(q_1q_3+q_0q_2) \\2(q_1q_2 + q_0q_3) & q_0^2-q_1^2+q_2^2-q_3^2 & 2(q_2q_3-q_0q_1) \\2(q_1q_3-q_0q_2) & 2(q_2q_3+q_0q_1) & q_0^2-q_1^2-q_2^2+q_3^2\end{bmatrix}</script><h3 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h3><h4 id="坐标变换"><a href="#坐标变换" class="headerlink" title="坐标变换"></a>坐标变换</h4><p><img src="/2021/09/13/%E5%A4%9A%E6%97%8B%E7%BF%BC-%E5%A4%9A%E6%97%8B%E7%BF%BC%E8%BF%90%E5%8A%A8%E5%AD%A6/example.png" alt></p><p>旋转轴$u=\begin{bmatrix}0&amp;0&amp;1\end{bmatrix}^\mathrm{T}$，旋转角度$60^{\circ}$</p><script type="math/tex; mode=display">\mathbf{q} = \begin{bmatrix}\frac{\sqrt{3}}{2} \\ 0 \\ 0 \\ \frac{1}{2}\end{bmatrix}</script><p>$q$在坐标系$\mathcal{A}$中的表示为</p><script type="math/tex; mode=display">\begin{bmatrix}\frac{\sqrt{3}}{2} \\ 0 \\ 0 \\ \frac{1}{2}\end{bmatrix} \otimes\begin{bmatrix}0 \\ 1 \\ 0 \\ 0\end{bmatrix} \otimes\begin{bmatrix}\frac{\sqrt{3}}{2} \\ 0 \\ 0 \\ -\frac{1}{2}\end{bmatrix} = \begin{bmatrix}0 \\ \frac{1}{2} \\ \frac{\sqrt{3}}{2} \\ 0 \end{bmatrix}</script><p>所以在坐标系$\mathcal{A}$中向量$\mathbf{q}=\begin{bmatrix}\frac{1}{2} &amp;\frac{\sqrt{3}}{2}&amp; 0\end{bmatrix}^\mathrm{T}$</p><h4 id="旋转复合"><a href="#旋转复合" class="headerlink" title="旋转复合"></a>旋转复合</h4><p><img src="/2021/09/13/%E5%A4%9A%E6%97%8B%E7%BF%BC-%E5%A4%9A%E6%97%8B%E7%BF%BC%E8%BF%90%E5%8A%A8%E5%AD%A6/quaternion_2.png" alt></p><p>坐标系$\mathcal{A}$通过$q_1$旋转到坐标系$\mathcal{B}$，再通过$q_2$旋转到坐标系$\mathcal{C}$，其中$q_2$是在坐标系$\mathcal{B}$中的描述，$q_2^{\prime}$是在$\mathcal{A}$中的描述</p><script type="math/tex; mode=display">q_1 = \begin{bmatrix}\frac{\sqrt{3}}{2} & 0 & 0 & \frac{1}{2}\end{bmatrix}^\mathrm{T}</script><script type="math/tex; mode=display">q_2 = \begin{bmatrix}\frac{\sqrt{2}}{2} & \frac{\sqrt{2}}{2} & 0 & 0\end{bmatrix}^\mathrm{T}</script><p>$q_2^{\prime}$的旋转轴是$\begin{bmatrix}\frac{1}{2} &amp;\frac{\sqrt{3}}{2}&amp; 0\end{bmatrix}^\mathrm{T}$</p><script type="math/tex; mode=display">q_2^{\prime} = \begin{bmatrix}\frac{\sqrt{2}}{2} & \frac{\sqrt{2}}{4} & \frac{\sqrt{6}}{4} & 0\end{bmatrix}^\mathrm{T}</script><p>两种表达的复合结果应该是一样的，只是乘的顺序不一样</p><script type="math/tex; mode=display">q = q_1 \otimes q_2 = \begin{bmatrix}\frac{\sqrt{3}}{2} \\ 0 \\ 0 \\ \frac{1}{2}\end{bmatrix} \otimes \begin{bmatrix}\frac{\sqrt{2}}{2} \\ \frac{\sqrt{2}}{2} \\ 0 \\ 0\end{bmatrix} = \begin{bmatrix}\frac{\sqrt{6}}{4} \\ \frac{\sqrt{6}}{4} \\ \frac{\sqrt{2}}{4} \\ \frac{\sqrt{2}}{4} \end{bmatrix}</script><script type="math/tex; mode=display">q = q_2^{\prime} \otimes q_1 = \begin{bmatrix}\frac{\sqrt{2}}{2} \\ \frac{\sqrt{2}}{4} \\ \frac{\sqrt{6}}{4} \\ 0\end{bmatrix} \otimes \begin{bmatrix}\frac{\sqrt{3}}{2} \\ 0 \\ 0 \\ \frac{1}{2}\end{bmatrix}  = \begin{bmatrix}\frac{\sqrt{6}}{4} \\ \frac{\sqrt{6}}{4} \\ \frac{\sqrt{2}}{4} \\ \frac{\sqrt{2}}{4} \end{bmatrix}</script><p>坐标系$\mathcal{C}$中的向量$r=\begin{bmatrix}0 &amp; 1 &amp; 0 \end{bmatrix}^\mathrm{T}$在$\mathcal{A}$中的表示为</p><script type="math/tex; mode=display">r^{\prime} = \begin{bmatrix}\frac{\sqrt{6}}{4} \\ \frac{\sqrt{6}}{4} \\ \frac{\sqrt{2}}{4} \\ \frac{\sqrt{2}}{4} \end{bmatrix} \otimes \begin{bmatrix}0 \\ 0 \\ 1 \\ 0 \end{bmatrix} \otimes\begin{bmatrix}\frac{\sqrt{6}}{4} \\ -\frac{\sqrt{6}}{4} \\ -\frac{\sqrt{2}}{4} \\ -\frac{\sqrt{2}}{4} \end{bmatrix} = \begin{bmatrix}0 \\ 0 \\ 0 \\ 1 \end{bmatrix}</script><p>由图可知是正确的</p><p><strong>tips</strong>：四元数乘法的<code>matlab</code>编程实现<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">function result <span class="token operator">=</span> <span class="token function">quaternionMultiplication</span><span class="token punctuation">(</span>q1<span class="token punctuation">,</span>q2<span class="token punctuation">)</span>    <span class="token function">result</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">q1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">q2</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">q1</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">q2</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">q1</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">q2</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">q1</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">q2</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">result</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">q1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">q2</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">q1</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">q2</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">q1</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">q2</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">q1</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">q2</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">result</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">q1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">q2</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">q1</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">q2</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">q1</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">q2</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">q1</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">q2</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">result</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">q1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">q2</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">q1</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">q2</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token function">q1</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">q2</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">q1</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token function">q2</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>]]></content>
      
      
      <categories>
          
          <category> 多旋翼 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多旋翼 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>701-二叉搜索树中的插入操作</title>
      <link href="2021/09/12/LeetCode-701-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E6%8F%92%E5%85%A5%E6%93%8D%E4%BD%9C/"/>
      <url>2021/09/12/LeetCode-701-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E6%8F%92%E5%85%A5%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-701-Insert-into-a-Binary-Search-Tree"><a href="#LeetCode-701-Insert-into-a-Binary-Search-Tree" class="headerlink" title="LeetCode 701. Insert into a Binary Search Tree"></a>LeetCode 701. Insert into a Binary Search Tree</h2><p><a href="https://leetcode.com/problems/insert-into-a-binary-search-tree/">LeetCode-701</a></p><p>You are given the <strong>root</strong> node of a binary search tree (BST) and a <strong>value</strong> to insert into the tree. Return the <strong>root</strong> node of the BST after the insertion. It is guaranteed that the new value does not exist in the original BST.</p><p>Notice that there may exist multiple valid ways for the insertion, as long as the tree remains a BST after insertion. You can return any of them.</p><p>Example 1:</p><p><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/701/701.jpg" alt></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> root <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> val <span class="token operator">=</span> <span class="token number">5</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="method"><a href="#method" class="headerlink" title="method"></a>method</h3><p>按照二叉搜索树的规则进行遍历，遇到空节点就是需要插入的位置，新建并返回该节点</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">TreeNode<span class="token operator">*</span> <span class="token function">insertIntoBST</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        TreeNode <span class="token operator">*</span>node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">TreeNode</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> node<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">&lt;</span> root<span class="token operator">-></span>val<span class="token punctuation">)</span> root<span class="token operator">-></span>left <span class="token operator">=</span> <span class="token function">insertIntoBST</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> root<span class="token operator">-></span>right <span class="token operator">=</span> <span class="token function">insertIntoBST</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>530-二叉搜索树的最小绝对差</title>
      <link href="2021/09/11/LeetCode-530-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E6%9C%80%E5%B0%8F%E7%BB%9D%E5%AF%B9%E5%B7%AE/"/>
      <url>2021/09/11/LeetCode-530-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E6%9C%80%E5%B0%8F%E7%BB%9D%E5%AF%B9%E5%B7%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-530-Minimum-Absolute-Difference-in-BST"><a href="#LeetCode-530-Minimum-Absolute-Difference-in-BST" class="headerlink" title="LeetCode 530. Minimum Absolute Difference in BST"></a>LeetCode 530. Minimum Absolute Difference in BST</h2><p><a href="https://leetcode.com/problems/minimum-absolute-difference-in-bst/">LeetCode-530</a></p><p>Given the root of a Binary Search Tree (BST), return the <strong>minimum absolute difference</strong> between the values of any two different nodes in the tree.</p><p>Example 1:<br><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/530/530.jpg" alt><br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> root <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h3 id="method-中序遍历"><a href="#method-中序遍历" class="headerlink" title="method: 中序遍历"></a>method: 中序遍历</h3><p><font color="LightSeaGreen">中序遍历</font>，相当于遍历一个有序数组，求出两两之前的差值，更新其最小值</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">TreeNode <span class="token operator">*</span>pre <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span><span class="token keyword">int</span> result <span class="token operator">=</span> INT_MAX<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">traversal</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token function">traversal</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pre<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        result <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> root<span class="token operator">-></span>val <span class="token operator">-</span> pre<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 更新最小值</span>    <span class="token punctuation">&#125;</span>    pre <span class="token operator">=</span> root<span class="token punctuation">;</span>    <span class="token function">traversal</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">getMinimumDifference</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">traversal</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>501-二叉搜索树的众数</title>
      <link href="2021/09/10/LeetCode-501-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E4%BC%97%E6%95%B0/"/>
      <url>2021/09/10/LeetCode-501-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E7%9A%84%E4%BC%97%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-501-Find-Mode-in-Binary-Search-Tree"><a href="#LeetCode-501-Find-Mode-in-Binary-Search-Tree" class="headerlink" title="LeetCode 501. Find Mode in Binary Search Tree"></a>LeetCode 501. Find Mode in Binary Search Tree</h2><p><a href="https://leetcode.com/problems/find-mode-in-binary-search-tree/submissions/">LeetCode-501</a></p><p>Given the <code>root</code> of a binary search tree (BST) with duplicates, return all the <code>mode(s)</code> (i.e., the <strong>most frequently occurred element</strong>) in it.</p><p>If the tree has more than one mode, return them in <strong>any order</strong>.</p><p><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/501/501.jpg" alt></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> root <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="method-中序遍历"><a href="#method-中序遍历" class="headerlink" title="method: 中序遍历"></a>method: 中序遍历</h3><p><font color="LightSeaGreen">中序遍历</font>，像查找有序数组的众数一样，记录每个数字出现的频率</p><p>记录频率的逻辑：</p><blockquote><ul><li>前面没有节点，频率置1</li><li>前面节点的值与当前节点的值相同，频率加1</li><li>前面节点的值与当前节点的值不同，频率置1</li></ul></blockquote><p>数组更新的逻辑：</p><blockquote><ul><li>如果当前频率与最大频率相等，就插入当前元素</li><li>如果当前频率大于最大频率，就把数组清空，放入当前元素</li></ul></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">;</span>TreeNode <span class="token operator">*</span>pre <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span><span class="token keyword">int</span> count<span class="token punctuation">,</span> maxCount<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">traversal</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span>cur<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cur<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token function">traversal</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>pre<span class="token punctuation">)</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pre<span class="token operator">-></span>val <span class="token operator">==</span> cur<span class="token operator">-></span>val<span class="token punctuation">)</span> count<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    pre <span class="token operator">=</span> cur<span class="token punctuation">;</span>  <span class="token comment">// 注意当前节点处理完就变成了前节点</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> maxCount<span class="token punctuation">)</span> res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">></span> maxCount<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        maxCount <span class="token operator">=</span> count<span class="token punctuation">;</span>        res<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 清空数组</span>        res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token function">traversal</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">findMode</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">traversal</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>108/109-数组转为二叉搜索树</title>
      <link href="2021/09/07/LeetCode-108-%E6%95%B0%E7%BB%84%E8%BD%AC%E4%B8%BA%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/"/>
      <url>2021/09/07/LeetCode-108-%E6%95%B0%E7%BB%84%E8%BD%AC%E4%B8%BA%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-108-Convert-Sorted-Array-to-Binary-Search-Tree"><a href="#LeetCode-108-Convert-Sorted-Array-to-Binary-Search-Tree" class="headerlink" title="LeetCode 108. Convert Sorted Array to Binary Search Tree"></a>LeetCode 108. Convert Sorted Array to Binary Search Tree</h2><p><a href="https://leetcode.com/problems/convert-sorted-array-to-binary-search-tree/">LeetCode-108</a></p><p>Given an integer array nums where the elements are sorted in <strong>ascending order</strong>, convert it to a <strong>height-balanced</strong> binary search tree.</p><p>A <strong>height-balanced</strong> binary tree is a binary tree in which the depth of the two subtrees of every node never differs by more than one.</p><p>Example:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">or</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br>Explanation:</p><table><tr><td bgcolor="#dfe2e5"><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/108/108_1.jpg"></td><td bgcolor="#dfe2e5"><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/108/108_2.jpg"></td></tr></table><h3 id="method"><a href="#method" class="headerlink" title="method"></a>method</h3><p>数组中间节点为根节点，递归处理左边数组和右边数组<br>注意还是左闭右开<code>[begin, end)</code><br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">TreeNode<span class="token operator">*</span> <span class="token function">traversal</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> begin<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>begin <span class="token operator">>=</span> end<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> begin <span class="token operator">+</span> end <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>    TreeNode <span class="token operator">*</span>root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">TreeNode</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    root<span class="token operator">-></span>left <span class="token operator">=</span> <span class="token function">traversal</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> begin<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>    root<span class="token operator">-></span>right <span class="token operator">=</span> <span class="token function">traversal</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>TreeNode<span class="token operator">*</span> <span class="token function">sortedArrayToBST</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">traversal</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><hr><h2 id="LeetCode-109-Convert-Sorted-List-to-Binary-Search-Tree"><a href="#LeetCode-109-Convert-Sorted-List-to-Binary-Search-Tree" class="headerlink" title="LeetCode 109. Convert Sorted List to Binary Search Tree"></a>LeetCode 109. Convert Sorted List to Binary Search Tree</h2><p>Given the head of a singly linked list where elements are <strong>sorted in ascending order</strong>, convert it to a height <strong>balanced BST</strong>.</p><p>For this problem, a height-balanced binary tree is defined as a binary tree in which the depth of the two subtrees of every node never differ by more than 1.</p><p>Example 1:</p><p><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/108/linked.jpg" alt></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> head <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>Explanation<span class="token operator">:</span> One possible answer is <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> which represents the shown height balanced BST<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="method-1"><a href="#method-1" class="headerlink" title="method"></a>method</h3><p>跟数组一样维护一个左闭右开的区间<code>[head, tail)</code>，然后找中间节点</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">TreeNode<span class="token operator">*</span> <span class="token function">traversal</span><span class="token punctuation">(</span>ListNode <span class="token operator">*</span>head<span class="token punctuation">,</span> ListNode <span class="token operator">*</span>tail<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> tail<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>   <span class="token comment">// 空节点</span>    ListNode <span class="token operator">*</span>fast <span class="token operator">=</span> head<span class="token punctuation">;</span>    ListNode <span class="token operator">*</span>slow <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">!=</span> tail <span class="token operator">&amp;&amp;</span> fast<span class="token operator">-></span>next <span class="token operator">!=</span> tail<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 注意这里是tail</span>        fast <span class="token operator">=</span> fast<span class="token operator">-></span>next<span class="token operator">-></span>next<span class="token punctuation">;</span>        slow <span class="token operator">=</span> slow<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    TreeNode <span class="token operator">*</span>root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">TreeNode</span><span class="token punctuation">(</span>slow<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    root<span class="token operator">-></span>left <span class="token operator">=</span> <span class="token function">traversal</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> slow<span class="token punctuation">)</span><span class="token punctuation">;</span>    root<span class="token operator">-></span>right <span class="token operator">=</span> <span class="token function">traversal</span><span class="token punctuation">(</span>slow<span class="token operator">-></span>next<span class="token punctuation">,</span> tail<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>TreeNode<span class="token operator">*</span> <span class="token function">sortedListToBST</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">traversal</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>98-验证二叉搜索树</title>
      <link href="2021/09/07/LeetCode-98-%E9%AA%8C%E8%AF%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/"/>
      <url>2021/09/07/LeetCode-98-%E9%AA%8C%E8%AF%81%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-98-Validate-Binary-Search-Tree"><a href="#LeetCode-98-Validate-Binary-Search-Tree" class="headerlink" title="LeetCode 98. Validate Binary Search Tree"></a>LeetCode 98. Validate Binary Search Tree</h2><p><a href="https://leetcode.com/problems/validate-binary-search-tree/">LeetCode-98</a></p><p>Given the root of a binary tree, determine if it is a valid binary search tree (BST).</p><p>A valid BST is defined as follows:</p><p>The left subtree of a node contains only nodes with keys less than the node’s key.<br>The right subtree of a node contains only nodes with keys greater than the node’s key.<br>Both the left and right subtrees must also be binary search trees.</p><p>Example 1:</p><p><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/98/98.jpg" alt></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> root <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="method"><a href="#method" class="headerlink" title="method"></a>method</h3><p>按照<font color="LightSeaGreen">中序遍历</font>，就相当于在遍历一个有序数组，如果前面一个元素大于或等于当前元素，就说明不是有序的</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">TreeNode <span class="token operator">*</span>pre <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">isValidBST</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> left <span class="token operator">=</span> <span class="token function">isValidBST</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pre <span class="token operator">&amp;&amp;</span> pre<span class="token operator">-></span>val <span class="token operator">>=</span> root<span class="token operator">-></span>val<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    pre <span class="token operator">=</span> root<span class="token punctuation">;</span>     <span class="token comment">// 记录前一个节点</span>    <span class="token keyword">bool</span> right <span class="token operator">=</span> <span class="token function">isValidBST</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> left <span class="token operator">&amp;&amp;</span> right<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>700-二叉搜索树中的搜索</title>
      <link href="2021/09/06/LeetCode-700-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E6%90%9C%E7%B4%A2/"/>
      <url>2021/09/06/LeetCode-700-%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91%E4%B8%AD%E7%9A%84%E6%90%9C%E7%B4%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-700-Search-in-a-Binary-Search-Tree"><a href="#LeetCode-700-Search-in-a-Binary-Search-Tree" class="headerlink" title="LeetCode 700. Search in a Binary Search Tree"></a>LeetCode 700. Search in a Binary Search Tree</h2><p><a href="https://leetcode.com/problems/search-in-a-binary-search-tree/">LeetCode-700</a></p><p>You are given the root of a <strong>binary search tree</strong> (BST) and an integer val.</p><p>Find the node in the BST that the node’s value <strong>equals val</strong> and return the <strong>subtree rooted with that node</strong>. If such a node does not exist, return null.</p><p><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/700/700.jpg" alt><br><pre class="line-numbers language-cp" data-language="cp"><code class="language-cp">Input: root &#x3D; [4,2,7,1,3], val &#x3D; 2Output: [2,1,3]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h3 id="method-递归"><a href="#method-递归" class="headerlink" title="method: 递归"></a>method: 递归</h3><p>递归结束条件：如果节点为空，说明没找到，返回空节点；如果等于<code>val</code>，说明找到，也返回当前节点<br>单层逻辑：当前节点值比<code>val</code>大，往左子树找，比<code>val</code>小，往右子树找</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">TreeNode<span class="token operator">*</span> <span class="token function">searchBST</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root <span class="token operator">||</span> root<span class="token operator">-></span>val <span class="token operator">==</span> val<span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-></span>val <span class="token operator">></span> val<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">searchBST</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token function">searchBST</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>617-合并二叉树</title>
      <link href="2021/09/05/LeetCode-617-%E5%90%88%E5%B9%B6%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
      <url>2021/09/05/LeetCode-617-%E5%90%88%E5%B9%B6%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-617-Merge-Two-Binary-Trees"><a href="#LeetCode-617-Merge-Two-Binary-Trees" class="headerlink" title="LeetCode 617. Merge Two Binary Trees"></a>LeetCode 617. Merge Two Binary Trees</h2><p><a href="https://leetcode.com/problems/merge-two-binary-trees/">LeetCode-617</a></p><p>You are given two binary trees <strong>root1</strong> and <strong>root2</strong>.</p><p>Imagine that when you put one of them to cover the other, some nodes of the two trees are overlapped while the others are not. You need to merge the two trees into a new binary tree. The merge rule is that if two nodes overlap, then <strong>sum node values up</strong> as the new value of the merged node. Otherwise, the NOT null node will be used as the node of the new tree.</p><p>Return the merged tree.</p><p>Note: The merging process must start from the root nodes of both trees.</p><p><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/617/617.jpg" alt></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> root1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> root2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="method-递归"><a href="#method-递归" class="headerlink" title="method: 递归"></a>method: 递归</h3><p>递归结束条件：如果一个节点为空，返回另一棵树的节点，如果他也是空，那这个位置就是空节点<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">TreeNode<span class="token operator">*</span> <span class="token function">mergeTrees</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root1<span class="token punctuation">,</span> TreeNode<span class="token operator">*</span> root2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root1 <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span> root2<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root2 <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span> root1<span class="token punctuation">;</span>    root1<span class="token operator">-></span>val <span class="token operator">+=</span> root2<span class="token operator">-></span>val<span class="token punctuation">;</span>   <span class="token comment">// 直接在root1上改</span>    root1<span class="token operator">-></span>left <span class="token operator">=</span> <span class="token function">mergeTrees</span><span class="token punctuation">(</span>root1<span class="token operator">-></span>left<span class="token punctuation">,</span> root2<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    root1<span class="token operator">-></span>right <span class="token operator">=</span> <span class="token function">mergeTrees</span><span class="token punctuation">(</span>root1<span class="token operator">-></span>right<span class="token punctuation">,</span> root2<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> root1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>654-最大二叉树</title>
      <link href="2021/09/05/LeetCode-654-%E6%9C%80%E5%A4%A7%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
      <url>2021/09/05/LeetCode-654-%E6%9C%80%E5%A4%A7%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-654-Maximum-Binary-Tree"><a href="#LeetCode-654-Maximum-Binary-Tree" class="headerlink" title="LeetCode 654. Maximum Binary Tree"></a>LeetCode 654. Maximum Binary Tree</h2><p><a href="https://leetcode.com/problems/maximum-binary-tree/">LeetCode-654</a></p><p>You are given an integer array <strong>nums</strong> with no duplicates. A <strong>maximum binary tree</strong> can be built recursively from nums using the following algorithm:</p><p>Create a root node whose value is the maximum value in nums.<br>Recursively build the left subtree on the subarray prefix to the left of the maximum value.<br>Recursively build the right subtree on the subarray suffix to the right of the maximum value.<br>Return the maximum binary tree built from nums.</p><p><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/654/654.jpg" alt></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span>null<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="method-递归"><a href="#method-递归" class="headerlink" title="method: 递归"></a>method: 递归</h3><blockquote><ul><li>递归参数：一个数组</li><li>返回值：二叉树节点指针</li><li>递归结束条件：如果数组大小为1，返回以该元素构成的节点</li><li>单层递归逻辑：找到数组最大值，最大值左边的数组构造左子树，最大值右边的数组构造右子树</li></ul></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">TreeNode<span class="token operator">*</span> <span class="token function">constructMaximumBinaryTree</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> maxIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>maxIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            maxIndex <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    TreeNode <span class="token operator">*</span>root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">TreeNode</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>maxIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 构造左数组，递归处理左子树</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">leftNums</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> maxIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    root<span class="token operator">-></span>left <span class="token operator">=</span> <span class="token function">constructMaximumBinaryTree</span><span class="token punctuation">(</span>leftNums<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 构造右数组，递归处理右子树，注意不包括最大值那个点</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">rightNums</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> maxIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    root<span class="token operator">-></span>right <span class="token operator">=</span> <span class="token function">constructMaximumBinaryTree</span><span class="token punctuation">(</span>rightNums<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h3><p>可以直接传下标，不用再构造数组</p><blockquote><ul><li>用个<code>maxIndex</code>就可以了，不需要<code>maxValue</code></li><li><code>begin==end</code>说明前面最大值在边界，传的是<code>[begin,end)</code>，相等的话就是空</li></ul></blockquote><div class="uk-alert uk-alert-danger"><i class="fas fa-exclamation-triangle"></i> 下标要从<code>begin</code>开始了。<code>maxIndex</code>已经是下标了，就不用再<code>begin+maxIndex</code></div><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">TreeNode<span class="token operator">*</span> <span class="token function">traversal</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> begin<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>begin <span class="token operator">>=</span> end<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>   <span class="token comment">// 最大值在最右边或最左边</span>    <span class="token keyword">int</span> maxIndex <span class="token operator">=</span> begin<span class="token punctuation">;</span>   <span class="token comment">// 从begin开始</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> begin<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> end<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 从begin开始</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>maxIndex<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            maxIndex <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    TreeNode<span class="token operator">*</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">TreeNode</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>maxIndex<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    root<span class="token operator">-></span>left <span class="token operator">=</span> <span class="token function">traversal</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> begin<span class="token punctuation">,</span> maxIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 左闭右开</span>    root<span class="token operator">-></span>right <span class="token operator">=</span> <span class="token function">traversal</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> maxIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>TreeNode<span class="token operator">*</span> <span class="token function">constructMaximumBinaryTree</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">traversal</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>类似题目：<a href="https://kavinwkp.github.io/2021/09/07/LeetCode-108-%E6%95%B0%E7%BB%84%E8%BD%AC%E4%B8%BA%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/">108-数组转为二叉搜索树</a></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>105/106-从先序与中序遍历构造二叉树</title>
      <link href="2021/09/03/LeetCode-106-%E4%BB%8E%E4%B8%AD%E5%BA%8F%E4%B8%8E%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
      <url>2021/09/03/LeetCode-106-%E4%BB%8E%E4%B8%AD%E5%BA%8F%E4%B8%8E%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-105-Construct-Binary-Tree-from-Preorder-and-Inorder-Traversal"><a href="#LeetCode-105-Construct-Binary-Tree-from-Preorder-and-Inorder-Traversal" class="headerlink" title="LeetCode 105. Construct Binary Tree from Preorder and Inorder Traversal"></a>LeetCode 105. Construct Binary Tree from Preorder and Inorder Traversal</h2><p><a href="https://leetcode.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/">LeetCode-105</a></p><p>Given two integer arrays <strong>preorder</strong> and <strong>inorder</strong> where preorder is the preorder traversal of a binary tree and inorder is the inorder traversal of the same tree, construct and return the binary tree.</p><p><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/106/106.jpg" alt></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> preorder <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span> inorder <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span>null<span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="method-递归"><a href="#method-递归" class="headerlink" title="method: 递归"></a>method: 递归</h3><p>以先序遍历的第一个点作为分割点，分割中序遍历数组</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">TreeNode<span class="token operator">*</span> <span class="token function">buildTree</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> preorder<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> inorder<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>preorder<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>    TreeNode<span class="token operator">*</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">TreeNode</span><span class="token punctuation">(</span>preorder<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> cutIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> cutIndex <span class="token operator">&lt;</span> inorder<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> cutIndex<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>inorder<span class="token punctuation">[</span>cutIndex<span class="token punctuation">]</span> <span class="token operator">==</span> preorder<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">leftInorder</span><span class="token punctuation">(</span>inorder<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> inorder<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> cutIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">rightInorder</span><span class="token punctuation">(</span>inorder<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> cutIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> inorder<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> begin <span class="token operator">=</span> preorder<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// 从1开始</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">leftPreorder</span><span class="token punctuation">(</span>begin<span class="token punctuation">,</span> begin <span class="token operator">+</span> leftInorder<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">rightPreorder</span><span class="token punctuation">(</span>begin <span class="token operator">+</span> leftInorder<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> preorder<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    root<span class="token operator">-></span>left <span class="token operator">=</span> <span class="token function">traversal</span><span class="token punctuation">(</span>leftPreorder<span class="token punctuation">,</span> leftInorder<span class="token punctuation">)</span><span class="token punctuation">;</span>    root<span class="token operator">-></span>right <span class="token operator">=</span> <span class="token function">traversal</span><span class="token punctuation">(</span>rightPreorder<span class="token punctuation">,</span> rightInorder<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="LeetCode-106-Construct-Binary-Tree-from-Inorder-and-Postorder-Traversal"><a href="#LeetCode-106-Construct-Binary-Tree-from-Inorder-and-Postorder-Traversal" class="headerlink" title="LeetCode 106. Construct Binary Tree from Inorder and Postorder Traversal"></a>LeetCode 106. Construct Binary Tree from Inorder and Postorder Traversal</h2><p><a href="https://leetcode.com/problems/construct-binary-tree-from-inorder-and-postorder-traversal/">LeetCode-106</a></p><p>Given two integer arrays <strong>inorder</strong> and <strong>postorder</strong> where inorder is the inorder traversal of a binary tree and postorder is the postorder traversal of the same tree, construct and return the <strong>binary tree</strong>.</p><p><img src="/2021/09/03/LeetCode-106-%E4%BB%8E%E4%B8%AD%E5%BA%8F%E4%B8%8E%E5%90%8E%E5%BA%8F%E9%81%8D%E5%8E%86%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91/106.jpg" alt></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> inorder <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span> postorder <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span>null<span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="method-递归-1"><a href="#method-递归-1" class="headerlink" title="method: 递归"></a>method: 递归</h3><p>后序遍历的最后一个元素是根节点，用根节点来切割中序遍历，用<code>3</code>把中序遍历切割为<code>[9]</code>和<code>[15,20,7]</code>，以相同的数量切割后序遍历(除去最后一个元素)，切割为<code>[9]</code>和<code>[15,7,20]</code>，以此递归，直到后序遍历数组无元素</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">TreeNode<span class="token operator">*</span> <span class="token function">buildTree</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> inorder<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> postorder<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>postorder<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>    TreeNode<span class="token operator">*</span> root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">TreeNode</span><span class="token punctuation">(</span>postorder<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> cutIndex <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 找到中序遍历切割点</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> cutIndex <span class="token operator">&lt;</span> inorder<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> cutIndex<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>inorder<span class="token punctuation">[</span>cutIndex<span class="token punctuation">]</span> <span class="token operator">==</span> postorder<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 以切割点切割中序遍历 [begin,cut) 和 [cut+1,end)</span>    <span class="token comment">// 不包括切割点</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">leftInorder</span><span class="token punctuation">(</span>inorder<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> inorder<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> cutIndex<span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">rightInorder</span><span class="token punctuation">(</span>inorder<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> cutIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> inorder<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 切割相同数量的后序遍历，不包括最后一个元素</span>    postorder<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 去掉最后一个元素</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">leftPostorder</span><span class="token punctuation">(</span>postorder<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> postorder<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> leftInorder<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">rightPostorder</span><span class="token punctuation">(</span>postorder<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> leftInorder<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> postorder<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    root<span class="token operator">-></span>left <span class="token operator">=</span> <span class="token function">traversal</span><span class="token punctuation">(</span>leftInorder<span class="token punctuation">,</span> leftPostorder<span class="token punctuation">)</span><span class="token punctuation">;</span>    root<span class="token operator">-></span>right <span class="token operator">=</span> <span class="token function">traversal</span><span class="token punctuation">(</span>rightInorder<span class="token punctuation">,</span> rightPostorder<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装库</title>
      <link href="2021/09/01/Linux-%E5%AE%89%E8%A3%85%E5%BA%93/"/>
      <url>2021/09/01/Linux-%E5%AE%89%E8%A3%85%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h2 id="Eigen"><a href="#Eigen" class="headerlink" title="Eigen"></a>Eigen</h2><p>把Eigen拷贝到外面，就可以直接 <code>#include &lt;Eigen/Dense&gt;</code><br><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">cp</span> -r /usr/local/include/eigen3/Eigen /usr/local/include<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p><p>直接可以编译<br><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">g++ eigen_text.cpp -o eigen_text<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p><p>不需要再在CMakeLists.txt里面添加库文件</p><h3 id="查看位置"><a href="#查看位置" class="headerlink" title="查看位置"></a>查看位置</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> updatedb<span class="token function">locate</span> eigen3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="安装-git"><a href="#安装-git" class="headerlink" title="安装 git"></a>安装 git</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ssh-keygen -t rsa -C <span class="token string">"1817136760@qq.com"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Generating public/private rsa key pair.Enter <span class="token function">file</span> <span class="token keyword">in</span> <span class="token function">which</span> to save the key <span class="token punctuation">(</span>/home/kavin/.ssh/id_rsa<span class="token punctuation">)</span>: Enter passphrase <span class="token punctuation">(</span>empty <span class="token keyword">for</span> no passphrase<span class="token punctuation">)</span>: Enter same passphrase again: Your identification has been saved <span class="token keyword">in</span> /home/kavin/.ssh/id_rsa.Your public key has been saved <span class="token keyword">in</span> /home/kavin/.ssh/id_rsa.pub.The key fingerprint is:SHA256:P7HncHBT/wUO3TcCtkTmGfBohby+UKhwSwomxkMzXsQ <span class="token number">1817136760</span>@qq.comThe key's randomart image is:+---<span class="token punctuation">[</span>RSA <span class="token number">2048</span><span class="token punctuation">]</span>----+<span class="token operator">|</span>  o.    <span class="token punctuation">..</span>+O     <span class="token operator">|</span><span class="token operator">|</span> + E     oO <span class="token operator">=</span>. <span class="token builtin class-name">.</span> <span class="token operator">|</span><span class="token operator">|</span>+ +     .o.<span class="token operator">=</span><span class="token punctuation">..</span>+.o<span class="token operator">|</span><span class="token operator">|</span>.B <span class="token builtin class-name">.</span> o <span class="token punctuation">..</span>o   +.oo<span class="token operator">|</span><span class="token operator">|</span>+ o <span class="token operator">=</span> o S o o <span class="token builtin class-name">.</span> o<span class="token operator">|</span><span class="token operator">|</span>   <span class="token builtin class-name">.</span> o <span class="token builtin class-name">.</span> o <span class="token operator">=</span> <span class="token builtin class-name">.</span>  o<span class="token operator">|</span><span class="token operator">|</span>        <span class="token builtin class-name">.</span> * o   <span class="token builtin class-name">.</span><span class="token operator">|</span><span class="token operator">|</span>         <span class="token builtin class-name">.</span> *     <span class="token operator">|</span><span class="token operator">|</span>            <span class="token builtin class-name">.</span>    <span class="token operator">|</span>+----<span class="token punctuation">[</span>SHA256<span class="token punctuation">]</span>-----+<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> .ssh/id_rsa.pubssh-rsa AAAAB<span class="token punctuation">..</span>. <span class="token number">1817136760</span>@qq.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> -T git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Hi kavinwkp! You’ve successfully authenticated, but GitHub does not provide shell access.</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> config --global user.name <span class="token string">"kavinwkp"</span><span class="token function">git</span> config --global user.email <span class="token number">1817136760</span>@qq.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> <span class="token function">add</span> <span class="token builtin class-name">.</span><span class="token function">git</span> commit -m <span class="token string">"***"</span><span class="token function">git</span> push -u origin master<span class="token function">rm</span> -rf test.txt     <span class="token comment"># 删除本地仓库文件</span><span class="token function">git</span> <span class="token function">rm</span> test.txt     <span class="token comment"># 删除远程仓库文件</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代理网络连接错误"><a href="#代理网络连接错误" class="headerlink" title="代理网络连接错误"></a>代理网络连接错误</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">Failed to receive SOCKS4 connect request ack.<span class="token function">git</span> config --global http.proxy <span class="token string">'socks5://127.0.0.1:1080'</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu常见问题</title>
      <link href="2021/09/01/Linux-Ubuntu%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
      <url>2021/09/01/Linux-Ubuntu%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="bash-和-zsh-切换"><a href="#bash-和-zsh-切换" class="headerlink" title="bash 和 zsh 切换"></a>bash 和 zsh 切换</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">chsh -s /bin/bashchsh -s /bin/zsh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="tar解压"><a href="#tar解压" class="headerlink" title="tar解压"></a>tar解压</h2><p>单个文件<br><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">tar</span> -zxvf ***.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p><p>多个文件<br><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">ls</span> model.tar.g* <span class="token operator">|</span> <span class="token function">xargs</span> -n1 <span class="token function">tar</span> xzvf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><h3 id="Python位置"><a href="#Python位置" class="headerlink" title="Python位置"></a>Python位置</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># kavin @ ubuntu in /usr/lib</span>$ <span class="token function">ls</span> -d python*python2.7  python3  python3.6  python3.7  python3.8<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># kavin @ ubuntu in /usr/bin</span>$ <span class="token function">ls</span> python*python            python2-config  python3.6-config   python3mpython2           python2-qr      python3.6m         python3m-configpython2.7         python3         python3.6m-config  python-configpython2.7-config  python3.6       python3-config<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="pip-出错"><a href="#pip-出错" class="headerlink" title="pip 出错"></a>pip 出错</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">requests.exceptions.InvalidSchema: Missing dependencies <span class="token keyword">for</span> SOCKS support.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解决方法<br><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">unset</span> all_proxy <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">unset</span> ALL_PROXY<span class="token function">printenv</span> <span class="token operator">|</span> <span class="token function">grep</span> all_proxy没有输出即可<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></p><h3 id="pip3-install-—user"><a href="#pip3-install-—user" class="headerlink" title="pip3 install —user "></a>pip3 install —user <package_name></package_name></h3><p>功能包会被安装在<code>~/.local/lib/python3.6/site-packages</code></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># kavin @ ubuntu in ~/.local/lib/python3.6/site-packages</span>$ <span class="token function">ls</span>em.py                       numpy                     pyparsing-2.4.7.dist-infoempy-3.3.4.dist-info        numpy-1.19.5.dist-info    pyparsing.pyjinja2                      numpy.libs                tomlJinja2-3.0.1.dist-info      packaging                 toml-0.10.2.dist-infomarkupsafe                  packaging-20.9.dist-infoMarkupSafe-2.0.1.dist-info  __pycache__<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="添加环境变量"><a href="#添加环境变量" class="headerlink" title="添加环境变量"></a>添加环境变量</h2><h3 id="错误方式"><a href="#错误方式" class="headerlink" title="错误方式"></a>错误方式</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> ~/.zshrc<span class="token builtin class-name">export</span> <span class="token assign-left variable">PKG_CONFIG_PATH</span><span class="token operator">=</span>~/Library/opencv-3.3.1/build/installed/lib/$ <span class="token builtin class-name">export</span> <span class="token operator">|</span> <span class="token function">grep</span> LD_LIBRARY_PATH<span class="token assign-left variable">LD_LIBRARY_PATH</span><span class="token operator">=</span>/home/kavin/Library/opencv-3.3.1/build/installed/lib<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>原来的<code>LD_LIBRARY_PATH</code>会被<strong>覆盖</strong></p><h3 id="正确方式"><a href="#正确方式" class="headerlink" title="正确方式"></a>正确方式</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> ~/.zshrc<span class="token builtin class-name">export</span> <span class="token assign-left variable">LD_LIBRARY_PATH</span><span class="token operator">=</span>~/Library/opencv-3.3.1/build/installed/lib:<span class="token variable">$LD_LIBRARY_PATH</span>$ <span class="token builtin class-name">export</span> <span class="token operator">|</span> <span class="token function">grep</span> LD_LIBRARY_PATH<span class="token assign-left variable">LD_LIBRARY_PATH</span><span class="token operator">=</span>/home/kavin/Library/opencv-3.3.1/build/installed/lib:/home/kavin/ROSProjects/Prometheus/devel/lib:/opt/ros/melodic/lib<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>513-找树左下角的值</title>
      <link href="2021/07/19/LeetCode-513-%E6%89%BE%E6%A0%91%E5%B7%A6%E4%B8%8B%E8%A7%92%E7%9A%84%E5%80%BC/"/>
      <url>2021/07/19/LeetCode-513-%E6%89%BE%E6%A0%91%E5%B7%A6%E4%B8%8B%E8%A7%92%E7%9A%84%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-513-Find-Bottom-Left-Tree-Value"><a href="#LeetCode-513-Find-Bottom-Left-Tree-Value" class="headerlink" title="LeetCode 513. Find Bottom Left Tree Value"></a>LeetCode 513. Find Bottom Left Tree Value</h2><p><a href="https://leetcode.com/problems/find-bottom-left-tree-value/">LeetCode-513</a></p><p>Given the root of a binary tree, return the <strong>leftmost</strong> value in the <strong>last row</strong> of the tree.</p><p>Example 1:</p><p><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/513/513.jpg" alt></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> root <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="method-1-递归"><a href="#method-1-递归" class="headerlink" title="method 1: 递归"></a>method 1: 递归</h3><p>需要找到最底层的左边节点，用先序遍历，如果当前深度比记录的深度大，就更新深度和结果值<br>因为是遍历整棵树，所以不需要返回值</p><blockquote><p>更新深度的时候，该节点肯定是当前深度的第一个节点</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> maxDepth <span class="token operator">=</span> INT_MIN<span class="token punctuation">;</span> <span class="token comment">// 记录最大深度</span><span class="token keyword">int</span> ret<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">traversal</span><span class="token punctuation">(</span>TreeNode <span class="token operator">*</span>root<span class="token punctuation">,</span> <span class="token keyword">int</span> depth<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token operator">-></span>left <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>root<span class="token operator">-></span>right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>depth <span class="token operator">></span> maxDepth<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            maxDepth <span class="token operator">=</span> depth<span class="token punctuation">;</span>            ret <span class="token operator">=</span> root<span class="token operator">-></span>val<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">)</span> <span class="token function">traversal</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">,</span> depth <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">)</span> <span class="token function">traversal</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">,</span> depth <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">findBottomLeftValue</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">traversal</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h3 id="method-2-层序遍历"><a href="#method-2-层序遍历" class="headerlink" title="method 2: 层序遍历"></a>method 2: 层序遍历</h3><p>记录每层的第一个节点</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">findBottomLeftValue</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    queue<span class="token operator">&lt;</span>TreeNode<span class="token operator">*</span><span class="token operator">></span> q<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> size <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            TreeNode <span class="token operator">*</span>top <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> res <span class="token operator">=</span> top<span class="token operator">-></span>val<span class="token punctuation">;</span> <span class="token comment">// 记录每层第一个节点</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>top<span class="token operator">-></span>left<span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>top<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>top<span class="token operator">-></span>right<span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>top<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多旋翼文献</title>
      <link href="2021/07/18/%E5%A4%9A%E6%97%8B%E7%BF%BC-%E6%97%A0%E4%BA%BA%E6%9C%BA%E6%96%87%E7%8C%AE/"/>
      <url>2021/07/18/%E5%A4%9A%E6%97%8B%E7%BF%BC-%E6%97%A0%E4%BA%BA%E6%9C%BA%E6%96%87%E7%8C%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="无人机文献"><a href="#无人机文献" class="headerlink" title="无人机文献"></a>无人机文献</h2><h4 id="记录一些好的句子，提高英语表达能力。"><a href="#记录一些好的句子，提高英语表达能力。" class="headerlink" title="记录一些好的句子，提高英语表达能力。"></a>记录一些好的句子，提高英语表达能力。</h4><ol><li>However, most research fails to <strong>account</strong> adequately <strong>for</strong> limited energy on each UAV, which <strong>involves in</strong> many factors such as different operations for performing a task and various movement patterns besides the distance and turns that have been commonly considered.<br>然而，大多数研究未能充分<strong>考虑</strong>每架无人机上有限的能量，这<strong>涉及</strong>许多因素，例如执行任务的不同操作以及除了通常考虑的距离和转弯之外的各种运动模式。</li></ol><ol><li>By contrast, we conduct a series of experiments to obtain the energy model of UAVs.<br>相比之下，我们进行了一系列实验来获得无人机的能量模型。</li></ol><ol><li>Unmanned aerial vehicles (UAVs) are receiving increased attention by humanitarian organizations as they can help overcoming <strong>last-mile distribution problems</strong>.<br>无人驾驶飞行器越来越受到人道主义组织的关注，因为它们有助于克服<strong>最后一英里的分配问题</strong></li></ol><ol><li>Energy–aware drone routing problems are considered in [8,11,28] where the energy consumption of the drone is assumed to depend on one or more of the flight related parameters: payload, speed, distance and altitude.<br>在[8,11,28]中考虑了能量感知无人机航路问题，其中假设无人机的能量消耗取决于一个或多个飞行相关参数：有效载荷、速度、距离和高度。</li></ol><ol><li>We <strong>mathematically</strong> derive and <strong>experimentally</strong> validate an energy consumption model for multirotor drones, <strong>demonstrating</strong> that energy consumption varies approximately linearly with payload and battery weight.<br>我们<strong>从数学上</strong>推导并通过实验验证了多旋翼无人机的能耗模型，证明了能耗随有效载荷和电池重量近似线性变化。</li></ol><ol><li>Predicting the performance of a specific UAV, in terms of ability to complete a mission, is a challenging task, since a number of variables are to be considered such as the UAV payload, path direction, waypoint spacing in a three- dimensional space, etc. Nevertheless, having realistic models to predict the performance of the UAV is fundamental to the success of these applications.<br>从无人机完成任务的能力来看，预测特定无人机的性能是一项具有挑战性的任务，因为需要考虑许多变量，如无人机有效载荷、路径方向、在三维空间中的路径点间距等。然而，拥有真实的模型来预测无人机的性能是这些应用成功的基础。</li></ol>]]></content>
      
      
      <categories>
          
          <category> 多旋翼 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多旋翼 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>112-路径总和</title>
      <link href="2021/07/17/LeetCode-112-%E8%B7%AF%E5%BE%84%E6%80%BB%E5%92%8C/"/>
      <url>2021/07/17/LeetCode-112-%E8%B7%AF%E5%BE%84%E6%80%BB%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-112-Path-Sum"><a href="#LeetCode-112-Path-Sum" class="headerlink" title="LeetCode 112. Path Sum"></a>LeetCode 112. Path Sum</h2><p><a href="https://leetcode.com/problems/path-sum/">LeetCode-112</a></p><p>Given the root of a binary tree and an integer targetSum, return true if the tree has a <strong>root-to-leaf</strong> path such that adding up all the values along the path equals targetSum.</p><p>A leaf is a node with no children.</p><p>Example 1:<br><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/112/112.jpg" alt><br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> root <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span>null<span class="token punctuation">,</span>null<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> targetSum <span class="token operator">=</span> <span class="token number">22</span>Output<span class="token operator">:</span> <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h3 id="method-回溯"><a href="#method-回溯" class="headerlink" title="method: 回溯"></a>method: 回溯</h3><p>这里不需要遍历整棵树，只要找到一个解就可以返回，所以需要返回值</p><p><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/112/00.png" alt></p><p>这里是先判断左右节点非空才递归，也可以不管空不空先递归，再判断节点是否为空<br>用减法可以少个参数<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">traversal</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> cur<span class="token punctuation">,</span> <span class="token keyword">int</span> count<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cur<span class="token operator">-></span>left <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>cur<span class="token operator">-></span>right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> cur<span class="token operator">-></span>val<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token operator">-></span>left<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">traversal</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>left<span class="token punctuation">,</span> count <span class="token operator">-</span> cur<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token punctuation">)</span>             <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token operator">-></span>right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">traversal</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>right<span class="token punctuation">,</span> count <span class="token operator">-</span> cur<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token punctuation">)</span>             <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> <span class="token function">hasPathSum</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> targetSum<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">traversal</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> targetSum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><blockquote><p>可以先直接递归，遇到空节点再判空</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">dfs</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> targetSum<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token operator">-></span>left <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>root<span class="token operator">-></span>right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>targetSum <span class="token operator">==</span> root<span class="token operator">-></span>val<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">bool</span> leftSum <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">,</span> targetSum <span class="token operator">-</span> root<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> rightSum <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">,</span> targetSum <span class="token operator">-</span> root<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>leftSum <span class="token operator">||</span> rightSum<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 找到一个解就行</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> <span class="token function">hasPathSum</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> targetSum<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> targetSum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="LeetCode-113-Path-Sum-II"><a href="#LeetCode-113-Path-Sum-II" class="headerlink" title="LeetCode 113. Path Sum II"></a>LeetCode 113. Path Sum II</h2><p><a href="https://leetcode.com/problems/path-sum-ii/">LeetCode-113</a></p><p>Given the root of a binary tree and an integer <strong>targetSum</strong>, return all <strong>root-to-leaf</strong> paths where the sum of the node values in the path equals targetSum. Each path should be returned as a list of the node values, not node references.</p><p>A <strong>root-to-leaf</strong> path is a path starting from the root and ending at any leaf node. A leaf is a node with no children.</p><p><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/112/113.jpg" alt></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> root <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span>null<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> targetSum <span class="token operator">=</span> <span class="token number">22</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span>Explanation<span class="token operator">:</span> There are two paths whose sum equals targetSum<span class="token operator">:</span><span class="token number">5</span> <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">11</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">22</span><span class="token number">5</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">=</span> <span class="token number">22</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="method-回溯-1"><a href="#method-回溯-1" class="headerlink" title="method: 回溯"></a>method: 回溯</h3><blockquote><p>可以把<code>path</code>插值和<code>target</code>减法提到开头位置</p></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> res<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> path<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    path<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>root<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// path插值</span>    target <span class="token operator">-=</span> root<span class="token operator">-></span>val<span class="token punctuation">;</span>        <span class="token comment">// target减法</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token operator">-></span>left <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>root<span class="token operator">-></span>right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment">// 到叶子节点不管怎样都要返回</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 这边就不用再减了</span>        path<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span>        path<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">pathSum</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> targetSum<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> targetSum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
            <tag> 回溯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多旋翼</title>
      <link href="2021/07/16/%E5%A4%9A%E6%97%8B%E7%BF%BC-%E5%A4%9A%E6%97%8B%E7%BF%BC/"/>
      <url>2021/07/16/%E5%A4%9A%E6%97%8B%E7%BF%BC-%E5%A4%9A%E6%97%8B%E7%BF%BC/</url>
      
        <content type="html"><![CDATA[<!-- toc --><h2 id="4-反扭力与偏航运动"><a href="#4-反扭力与偏航运动" class="headerlink" title="4. 反扭力与偏航运动"></a>4. 反扭力与偏航运动</h2><p>基本原理：作用力与反作用力<br>多旋翼的动力系来源于高速电机带动螺旋桨转动而产生的拉力。假设电机带动螺旋桨顺时针运动，由于桨叶螺距对空气作用的效果，会产生一个<strong>向下的推力</strong>与<strong>水平方向的推力</strong>，如下图：<br><img src="/2021/07/16/%E5%A4%9A%E6%97%8B%E7%BF%BC-%E5%A4%9A%E6%97%8B%E7%BF%BC/4-1.png" alt></p><p>其中向下的推力是桨对空气的作用力，根据反作用力原理，空气就会对桨产生一个向上的推力。这就是空气对桨进而作用到机身垂直方向的拉力。而水平方向对空气的推力同样会产生一个空气对桨的反作用力，方向与作用力相反，其作用到多旋翼的轴臂上，就产生了我们所说的反扭力，也称<font color="red" size="4">反扭力矩</font>。</p><p>根据多旋翼结构上的对称性，假设四个电机转动方向同，它们都是顺时针转动，那么就会对四个轴臂产生逆时针的四个反扭力，而这四个力作用在轴臂上时，使得机身会以自身中心为转轴进行旋转。就是说这四个反扭力的方向都是垂直于轴臂的，也就是我们通常所说的力矩。<br><img src="/2021/07/16/%E5%A4%9A%E6%97%8B%E7%BF%BC-%E5%A4%9A%E6%97%8B%E7%BF%BC/4-2.png" alt></p><p>为了克服无人机的自旋，我们可以让对角线上的两个电机转动方向相同，而让相邻的两个电机转动方向相反，使它们所产生的反扭矩相互抵消，无人机就不会再出现自旋了。如下图：<br><img src="/2021/07/16/%E5%A4%9A%E6%97%8B%E7%BF%BC-%E5%A4%9A%E6%97%8B%E7%BF%BC/4-3.png" alt></p><p>但是我们并不希望永远消除反扭矩，而是希望可以通过控制使其产生偏航运动，于是我们可以根据需要适当地同时增加电机0和电机2的转速，并同时减小电机1和电机3的转速。这样飞机整体向上的拉力不变，而电机0和电机2产生的反扭矩大于电机1和电机3产生的反扭矩，所以飞机会按逆时针方向作偏航运动。如下图：<br><img src="/2021/07/16/%E5%A4%9A%E6%97%8B%E7%BF%BC-%E5%A4%9A%E6%97%8B%E7%BF%BC/4-4.png" alt></p><p>而对于偏航运动<code>(yaw)</code>的加速度，也就是偏航角加速度$\ddot{\psi}$等于力矩$M$除以转动惯量$I$，即：</p><script type="math/tex; mode=display">\ddot{\psi}=\frac{M}{I}</script>]]></content>
      
      
      <categories>
          
          <category> 多旋翼 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多旋翼 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VSCode运行C++</title>
      <link href="2021/07/16/ROS-VSCode%E8%BF%90%E8%A1%8CC/"/>
      <url>2021/07/16/ROS-VSCode%E8%BF%90%E8%A1%8CC/</url>
      
        <content type="html"><![CDATA[<h2 id="VS-Code-调试-C"><a href="#VS-Code-调试-C" class="headerlink" title="VS Code 调试 C++"></a>VS Code 调试 C++</h2><p><code>launch</code>文件用来调试，<code>tasks</code>文件用于在调试前生成可执行文件</p><h3 id="launch-json"><a href="#launch-json" class="headerlink" title="launch.json"></a>launch.json</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">&#123;</span>    <span class="token string">"version"</span><span class="token operator">:</span> <span class="token string">"0.2.0"</span><span class="token punctuation">,</span>    <span class="token string">"configurations"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>            <span class="token string">"name"</span><span class="token operator">:</span> <span class="token string">"g++ - Build and debug active file"</span><span class="token punctuation">,</span>            <span class="token string">"type"</span><span class="token operator">:</span> <span class="token string">"cppdbg"</span><span class="token punctuation">,</span>            <span class="token string">"request"</span><span class="token operator">:</span> <span class="token string">"launch"</span><span class="token punctuation">,</span>            <span class="token string">"program"</span><span class="token operator">:</span> <span class="token string">"$&#123;fileDirname&#125;/build/main"</span><span class="token punctuation">,</span> <span class="token comment">// 调试的文件位置</span>            <span class="token string">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token string">"stopAtEntry"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token string">"cwd"</span><span class="token operator">:</span> <span class="token string">"$&#123;fileDirname&#125;"</span><span class="token punctuation">,</span>            <span class="token string">"environment"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token string">"externalConsole"</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>            <span class="token string">"MIMode"</span><span class="token operator">:</span> <span class="token string">"gdb"</span><span class="token punctuation">,</span>            <span class="token string">"setupCommands"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token punctuation">&#123;</span>                    <span class="token string">"description"</span><span class="token operator">:</span> <span class="token string">"Enable pretty-printing for gdb"</span><span class="token punctuation">,</span>                    <span class="token string">"text"</span><span class="token operator">:</span> <span class="token string">"-enable-pretty-printing"</span><span class="token punctuation">,</span>                    <span class="token string">"ignoreFailures"</span><span class="token operator">:</span> <span class="token boolean">true</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token string">"preLaunchTask"</span><span class="token operator">:</span> <span class="token string">"Build"</span><span class="token punctuation">,</span>   <span class="token comment">// 跟tasks.json的label一样</span>            <span class="token string">"miDebuggerPath"</span><span class="token operator">:</span> <span class="token string">"/usr/bin/gdb"</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="tasks-json"><a href="#tasks-json" class="headerlink" title="tasks.json"></a>tasks.json</h3><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">&#123;</span>    <span class="token string">"version"</span><span class="token operator">:</span> <span class="token string">"2.0.0"</span><span class="token punctuation">,</span>    <span class="token string">"options"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">"cwd"</span><span class="token operator">:</span> <span class="token string">"$&#123;workspaceFolder&#125;/build"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token string">"tasks"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>            <span class="token string">"type"</span><span class="token operator">:</span> <span class="token string">"shell"</span><span class="token punctuation">,</span>            <span class="token string">"label"</span><span class="token operator">:</span> <span class="token string">"cmake"</span><span class="token punctuation">,</span>            <span class="token string">"command"</span><span class="token operator">:</span> <span class="token string">"cmake"</span><span class="token punctuation">,</span>            <span class="token string">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span>                <span class="token string">".."</span>            <span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>            <span class="token string">"label"</span><span class="token operator">:</span> <span class="token string">"make"</span><span class="token punctuation">,</span>            <span class="token string">"group"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>                <span class="token string">"kind"</span><span class="token operator">:</span> <span class="token string">"build"</span><span class="token punctuation">,</span>                <span class="token string">"isDefault"</span><span class="token operator">:</span> <span class="token boolean">true</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token string">"command"</span><span class="token operator">:</span> <span class="token string">"make"</span><span class="token punctuation">,</span>            <span class="token string">"args"</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span>            <span class="token string">"label"</span><span class="token operator">:</span> <span class="token string">"Build"</span><span class="token punctuation">,</span>            <span class="token string">"dependsOrder"</span><span class="token operator">:</span> <span class="token string">"sequence"</span><span class="token punctuation">,</span>            <span class="token string">"dependsOn"</span><span class="token operator">:</span><span class="token punctuation">[</span>                <span class="token string">"cmake"</span><span class="token punctuation">,</span>                <span class="token string">"make"</span>            <span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：<strong>CMakeLists.txt</strong>里面要设置为<strong>Debug</strong>模式</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token function">set</span><span class="token punctuation">(</span><span class="token constant">CMAKE_BUILD_TYPE</span> Debug<span class="token punctuation">)</span>     <span class="token comment">// 要启用F5调试一定要用这一条</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> ROS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VS Code运行ROS</title>
      <link href="2021/07/16/ROS-VSCode%E8%BF%90%E8%A1%8CROS/"/>
      <url>2021/07/16/ROS-VSCode%E8%BF%90%E8%A1%8CROS/</url>
      
        <content type="html"><![CDATA[<h2 id="ROS初始化"><a href="#ROS初始化" class="headerlink" title="ROS初始化"></a>ROS初始化</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vim</span> /etc/hosts<span class="token number">185.199</span>.108.133 raw.githubusercontent.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vim</span> /usr/lib/python2.7/dist-packages/rosdep2/sources_list.py<span class="token assign-left variable">url</span><span class="token operator">=</span><span class="token string">"https://ghproxy.com/"</span>+url<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2021/07/16/ROS-VSCode%E8%BF%90%E8%A1%8CROS/1.png" alt></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vim</span> /usr/lib/python2.7/dist-packages/rosdistro/__init__.pyDEFAULT_INDEX_URL <span class="token operator">=</span> <span class="token string">'https://ghproxy.com/https://raw.githubusercontent.com/ros/rosdistro/master/index-v4.yaml'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="/2021/07/16/ROS-VSCode%E8%BF%90%E8%A1%8CROS/2.png" alt></p><h2 id="VS-Code-for-ROS"><a href="#VS-Code-for-ROS" class="headerlink" title="VS Code for ROS"></a>VS Code for ROS</h2><p>新建工作空间和功能包</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> -p ~/catkin_ws/src<span class="token builtin class-name">cd</span> ~/catkin_ws/srccatkin_init_workspace<span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>catkin_make<span class="token builtin class-name">cd</span> srccatkin_create_pkg <span class="token operator">&lt;</span>功能包名称<span class="token operator">></span> std_msgs rospy roscpp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="添加json文件"><a href="#添加json文件" class="headerlink" title="添加json文件"></a>添加json文件</h3><p>添加<code>c_cpp_properties.json</code>，找到<code>ROS</code>头文件目录</p><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">&#123;</span>  <span class="token string">"configurations"</span><span class="token operator">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>      <span class="token string">"browse"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">"databaseFilename"</span><span class="token operator">:</span> <span class="token string">""</span><span class="token punctuation">,</span>        <span class="token string">"limitSymbolsToIncludedHeaders"</span><span class="token operator">:</span> <span class="token boolean">true</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token string">"includePath"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"$&#123;catkin_ws&#125;/devel/include/**"</span><span class="token punctuation">,</span>        <span class="token string">"/opt/ros/melodic/include/**"</span><span class="token punctuation">,</span>        <span class="token string">"/usr/include/**"</span>      <span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token string">"name"</span><span class="token operator">:</span> <span class="token string">"ROS"</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token string">"version"</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加<code>settings.json</code>文件，找到<code>python</code>库<br><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token punctuation">&#123;</span>    <span class="token string">"python.autoComplete.extraPaths"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"$&#123;catkin_ws&#125;/devel/lib/python2.7/dist-packages"</span><span class="token punctuation">,</span>        <span class="token string">"/opt/ros/melodic/lib/python2.7/dist-packages"</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"python.analysis.extraPaths"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token string">"$&#123;catkin_ws&#125;/devel/lib/python2.7/dist-packages"</span><span class="token punctuation">,</span>        <span class="token string">"/opt/ros/melodic/lib/python2.7/dist-packages"</span>    <span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token string">"files.associations"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">"iostream"</span><span class="token operator">:</span> <span class="token string">"cpp"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h2 id="编译cv-bridge"><a href="#编译cv-bridge" class="headerlink" title="编译cv_bridge"></a>编译cv_bridge</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> python-catkin-tools python3-dev python3-catkin-pkg-modules python3-numpy python3-yaml ros-melodic-cv-bridge<span class="token function">mkdir</span> -p catkin_ws/src<span class="token builtin class-name">cd</span> catkin_wscatkin config -DPYTHON_EXECUTABLE<span class="token operator">=</span>/usr/bin/python3 -DPYTHON_INCLUDE_DIR<span class="token operator">=</span>/usr/include/python3.6m -DPYTHON_LIBRARY<span class="token operator">=</span>/usr/lib/x86_64-linux-gnu/libpython3.6m.so<span class="token function">git</span> clone https://github.com/ros-perception/vision_opencv.git src/vision_opencv<span class="token function">apt-cache</span> show ros-melodic-cv-bridge <span class="token operator">|</span> <span class="token function">grep</span> Version<span class="token builtin class-name">cd</span> src/vision_opencv/<span class="token function">git</span> checkout <span class="token number">1.13</span>.0<span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>/<span class="token punctuation">..</span>/catkin build 或者 catkin build cv_bridge<span class="token builtin class-name">source</span> ~/catkin_ws/devel/setup.zsh --extend <span class="token comment"># --extend 参数的作用是让这次的路径配置不影响之前配置好的路径，否则这一次source会覆盖掉之前配置的路径。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> ROS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Octomap</title>
      <link href="2021/07/16/ROS-Octomap/"/>
      <url>2021/07/16/ROS-Octomap/</url>
      
        <content type="html"><![CDATA[<h2 id="Octomap"><a href="#Octomap" class="headerlink" title="Octomap"></a>Octomap</h2><p>可以将点云数据转换为栅格数据<code>(OccupancyGrid)</code></p><h2 id="源文件"><a href="#源文件" class="headerlink" title="源文件"></a>源文件</h2><p>加载点云数据并发布话题<code>/pointcloud/output</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sstream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ros/ros.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pcl/point_cloud.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pcl_conversions/pcl_conversions.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sensor_msgs/PointCloud2.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;pcl/io/pcd_io.h></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    std<span class="token operator">::</span>string topic<span class="token punctuation">,</span> path<span class="token punctuation">,</span> frame_id<span class="token punctuation">;</span>    <span class="token keyword">int</span> hz <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    ros<span class="token operator">::</span><span class="token function">init</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token string">"publish_pointcloud"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ros<span class="token operator">::</span>NodeHandle nh<span class="token punctuation">;</span>    nh<span class="token punctuation">.</span>param<span class="token operator">&lt;</span>std<span class="token operator">::</span>string<span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">,</span> path<span class="token punctuation">,</span> <span class="token string">"/home/kavin/ROSProjects/ros_learning/catkin_ws_cv/src/publish_pointcloud/data/test2.pcd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    nh<span class="token punctuation">.</span>param<span class="token operator">&lt;</span>std<span class="token operator">::</span>string<span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"frame_id"</span><span class="token punctuation">,</span> frame_id<span class="token punctuation">,</span> <span class="token string">"camera"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    nh<span class="token punctuation">.</span>param<span class="token operator">&lt;</span>std<span class="token operator">::</span>string<span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"topic"</span><span class="token punctuation">,</span> topic<span class="token punctuation">,</span> <span class="token string">"/pointcloud/output"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    nh<span class="token punctuation">.</span>param<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"hz"</span><span class="token punctuation">,</span> hz<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ros<span class="token operator">::</span>Publisher pcl_pub <span class="token operator">=</span> nh<span class="token punctuation">.</span>advertise<span class="token operator">&lt;</span>sensor_msgs<span class="token operator">::</span>PointCloud2<span class="token operator">></span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pcl<span class="token operator">::</span>PointCloud<span class="token operator">&lt;</span>pcl<span class="token operator">::</span>PointXYZ<span class="token operator">></span> cloud<span class="token punctuation">;</span>    sensor_msgs<span class="token operator">::</span>PointCloud2 output<span class="token punctuation">;</span>    pcl<span class="token operator">::</span>io<span class="token operator">::</span><span class="token function">loadPCDFile</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> cloud<span class="token punctuation">)</span><span class="token punctuation">;</span>    pcl<span class="token operator">::</span><span class="token function">toROSMsg</span><span class="token punctuation">(</span>cloud<span class="token punctuation">,</span> output<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 转换成ROS下的数据类型, 最终通过topic发布</span>    output<span class="token punctuation">.</span>header<span class="token punctuation">.</span>stamp <span class="token operator">=</span> ros<span class="token operator">::</span><span class="token class-name">Time</span><span class="token operator">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    output<span class="token punctuation">.</span>header<span class="token punctuation">.</span>frame_id <span class="token operator">=</span> frame_id<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"path = "</span> <span class="token operator">&lt;&lt;</span> path <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"frame_id = "</span> <span class="token operator">&lt;&lt;</span> frame_id <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"topic = "</span> <span class="token operator">&lt;&lt;</span> topic <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"hz = "</span> <span class="token operator">&lt;&lt;</span> hz <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    ros<span class="token operator">::</span>Rate <span class="token function">loop_rate</span><span class="token punctuation">(</span>hz<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>ros<span class="token operator">::</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        pcl_pub<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">;</span>        ros<span class="token operator">::</span><span class="token function">spinOnce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        loop_rate<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="launch文件"><a href="#launch文件" class="headerlink" title="launch文件"></a>launch文件</h2><h3 id="启动octomap-server节点"><a href="#启动octomap-server节点" class="headerlink" title="启动octomap_server节点"></a>启动octomap_server节点</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token operator">&lt;</span>launch<span class="token operator">></span>  <span class="token operator">&lt;</span>node pkg<span class="token operator">=</span><span class="token string">"octomap_server"</span> type<span class="token operator">=</span><span class="token string">"octomap_server_node"</span> name<span class="token operator">=</span><span class="token string">"octomap_server"</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> resolution in meters per pixel <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"resolution"</span> value<span class="token operator">=</span><span class="token string">"0.05"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> name of the fixed frame<span class="token punctuation">,</span> needs to be <span class="token string">"/map"</span> <span class="token keyword">for</span> SLAM <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"frame_id"</span> type<span class="token operator">=</span><span class="token string">"string"</span> value<span class="token operator">=</span><span class="token string">"/camera"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> max range <span class="token operator">/</span> depth resolution of the kinect in meter <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"sensor_model/max_range"</span> value<span class="token operator">=</span><span class="token string">"100.0"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"latch"</span> value<span class="token operator">=</span><span class="token string">"true"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> max<span class="token operator">/</span>min height <span class="token keyword">for</span> occupancy map<span class="token punctuation">,</span> should be in meters <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"pointcloud_max_z"</span> value<span class="token operator">=</span><span class="token string">"1000"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"pointcloud_min_z"</span> value<span class="token operator">=</span><span class="token string">"0"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> topic from where pointcloud2 messages are subscribed <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>remap from<span class="token operator">=</span><span class="token string">"/cloud_in"</span> to<span class="token operator">=</span><span class="token string">"/pointcloud/output"</span> <span class="token operator">/</span><span class="token operator">></span>   <span class="token operator">&lt;</span><span class="token operator">/</span>node<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>launch<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="启动点云发布节点"><a href="#启动点云发布节点" class="headerlink" title="启动点云发布节点"></a>启动点云发布节点</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>launch<span class="token operator">></span>   <span class="token operator">&lt;</span>node name<span class="token operator">=</span><span class="token string">"publish_pointcloud"</span> pkg<span class="token operator">=</span><span class="token string">"publish_pointcloud"</span> type<span class="token operator">=</span><span class="token string">"publish_pointcloud"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"path"</span> value<span class="token operator">=</span><span class="token string">"$(find publish_pointcloud)/data/test.pcd"</span> type<span class="token operator">=</span><span class="token string">"str"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"frame_id"</span> value<span class="token operator">=</span><span class="token string">"camera"</span> type<span class="token operator">=</span><span class="token string">"str"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"topic"</span> value<span class="token operator">=</span><span class="token string">"/pointcloud/output"</span> type<span class="token operator">=</span><span class="token string">"str"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>param name<span class="token operator">=</span><span class="token string">"hz"</span> value<span class="token operator">=</span><span class="token string">"2"</span> type<span class="token operator">=</span><span class="token string">"int"</span> <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>node<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> Load ocotmap launch <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>include file<span class="token operator">=</span><span class="token string">"$(find publish_pointcloud)/launch/octomaptransform.launch"</span> <span class="token operator">/</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> RViz <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>node pkg<span class="token operator">=</span><span class="token string">"rviz"</span> type<span class="token operator">=</span><span class="token string">"rviz"</span> name<span class="token operator">=</span><span class="token string">"$(anon rviz)"</span> respawn<span class="token operator">=</span><span class="token string">"false"</span> output<span class="token operator">=</span><span class="token string">"screen"</span> args<span class="token operator">=</span><span class="token string">"-d $(find publish_pointcloud)/rviz/OctomapShow.rviz"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>launch<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="CMakeLists-txt"><a href="#CMakeLists-txt" class="headerlink" title="CMakeLists.txt"></a>CMakeLists.txt</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">cmake_minimum_required</span><span class="token punctuation">(</span>VERSION <span class="token number">2.8</span><span class="token punctuation">.</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token function">project</span><span class="token punctuation">(</span>publish_pointcloud<span class="token punctuation">)</span><span class="token function">find_package</span><span class="token punctuation">(</span>catkin REQUIRED COMPONENTS    roscpp    rospy    std_msgs    rostime     sensor_msgs     message_filters <span class="token punctuation">)</span><span class="token function">set</span><span class="token punctuation">(</span>OpenCV_DIR <span class="token string">"~/Library/opencv-3.3.1/build"</span><span class="token punctuation">)</span><span class="token function">find_package</span><span class="token punctuation">(</span>OpenCV REQUIRED<span class="token punctuation">)</span><span class="token function">find_package</span><span class="token punctuation">(</span>OpenMP<span class="token punctuation">)</span><span class="token function">find_package</span><span class="token punctuation">(</span>PCL REQUIRED<span class="token punctuation">)</span><span class="token function">catkin_package</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">include_directories</span><span class="token punctuation">(</span>    $<span class="token punctuation">&#123;</span>catkin_INCLUDE_DIRS<span class="token punctuation">&#125;</span>    $<span class="token punctuation">&#123;</span>OpenCV_INCLUDE_DIRS<span class="token punctuation">&#125;</span>    $<span class="token punctuation">&#123;</span>PCL_INCLUDE_DIRS<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// 生成可执行文件</span><span class="token function">add_executable</span><span class="token punctuation">(</span>publish_pointcloud src<span class="token operator">/</span>publish_pointcloud<span class="token punctuation">.</span>cpp<span class="token punctuation">)</span><span class="token comment">// 链接库文件</span><span class="token function">target_link_libraries</span><span class="token punctuation">(</span>publish_pointcloud    $<span class="token punctuation">&#123;</span>catkin_LIBRARIES<span class="token punctuation">&#125;</span>    $<span class="token punctuation">&#123;</span>OpenCV_LIBRARIES<span class="token punctuation">&#125;</span>    $<span class="token punctuation">&#123;</span>PCL_LIBRARIES<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">install</span><span class="token punctuation">(</span>TARGETS publish_pointcloudRUNTIME DESTINATION $<span class="token punctuation">&#123;</span>CATKIN_PACKAGE_BIN_DESTINATION<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> ROS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>404-左叶子之和</title>
      <link href="2021/07/15/LeetCode-404-%E5%B7%A6%E5%8F%B6%E5%AD%90%E4%B9%8B%E5%92%8C/"/>
      <url>2021/07/15/LeetCode-404-%E5%B7%A6%E5%8F%B6%E5%AD%90%E4%B9%8B%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-404-Sum-of-Left-Leaves"><a href="#LeetCode-404-Sum-of-Left-Leaves" class="headerlink" title="LeetCode 404. Sum of Left Leaves"></a>LeetCode 404. Sum of Left Leaves</h2><p><a href="https://leetcode.com/problems/sum-of-left-leaves/">LeetCode-404</a></p><p>Given the root of a binary tree, return the sum of all <strong>left leaves</strong>.</p><p>Example 1:<br><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/404/404.jpg" alt><br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> root <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span>null<span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token number">24</span>Explanation<span class="token operator">:</span> There are two left leaves in the binary tree<span class="token punctuation">,</span> with values <span class="token number">9</span> <span class="token operator">and</span> <span class="token number">15</span> respectively<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></p><h3 id="method-递归"><a href="#method-递归" class="headerlink" title="method: 递归"></a>method: 递归</h3><p>左叶子的判断：当前节点的左节点不为空，左节点的左节点和右节点为空</p><blockquote><ul><li>递归计算左右子树的结果</li><li>如果当前节点满足右节点是叶子节点的条件，就加上，没有就算了</li></ul></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">sumOfLeftLeaves</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> leftSum <span class="token operator">=</span> <span class="token function">sumOfLeftLeaves</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> rightSum <span class="token operator">=</span> <span class="token function">sumOfLeftLeaves</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> midSum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token comment">// 算当前点的结果</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-></span>left <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>root<span class="token operator">-></span>left<span class="token operator">-></span>left <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>root<span class="token operator">-></span>left<span class="token operator">-></span>right<span class="token punctuation">)</span>         midSum <span class="token operator">=</span> root<span class="token operator">-></span>left<span class="token operator">-></span>val<span class="token punctuation">;</span>    <span class="token keyword">return</span> midSum <span class="token operator">+</span> leftSum <span class="token operator">+</span> rightSum<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>257-二叉树的所有路径</title>
      <link href="2021/07/14/LeetCode-257-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%89%80%E6%9C%89%E8%B7%AF%E5%BE%84/"/>
      <url>2021/07/14/LeetCode-257-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%89%80%E6%9C%89%E8%B7%AF%E5%BE%84/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-257-Binary-Tree-Paths"><a href="#LeetCode-257-Binary-Tree-Paths" class="headerlink" title="LeetCode 257. Binary Tree Paths"></a>LeetCode 257. Binary Tree Paths</h2><p><a href="https://leetcode.com/problems/binary-tree-paths/">LeetCode-257</a></p><p>Given the root of a binary tree, return all <strong>root-to-leaf</strong> paths in any order.</p><p>A leaf is a node with no children.</p><p>Example 1:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> root <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>   <span class="token number">1</span> <span class="token operator">/</span>   \<span class="token number">2</span>     <span class="token number">3</span> \  <span class="token number">5</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"1->2->5"</span><span class="token punctuation">,</span><span class="token string">"1->3"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="method-回溯"><a href="#method-回溯" class="headerlink" title="method: 回溯"></a>method: 回溯</h3><p>用<code>vector</code>存储路径和回溯比较方便，后面再转成<code>string</code></p><blockquote><ul><li>函数参数和返回值：前序遍历的当前节点</li><li>递归结束条件：节点为叶子节点</li><li>左右子树非空才进行递归，回溯时要把左右子树的节点<code>pop</code>出来</li></ul></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> path<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span> ret<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">traversal</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    path<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>root<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 已经保证节点非空</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token operator">-></span>left <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>root<span class="token operator">-></span>right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        string s<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> path<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            s <span class="token operator">+=</span> <span class="token function">to_string</span><span class="token punctuation">(</span>path<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            s <span class="token operator">+=</span> <span class="token string">"->"</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        s <span class="token operator">+=</span> <span class="token function">to_string</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ret<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">traversal</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 先递归</span>        path<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">traversal</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        path<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">binaryTreePaths</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">traversal</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
            <tag> 回溯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>6.4-函数重载</title>
      <link href="2021/07/13/C-Primer-6-4-%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD/"/>
      <url>2021/07/13/C-Primer-6-4-%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<h2 id="6-4-函数重载"><a href="#6-4-函数重载" class="headerlink" title="6.4 函数重载"></a>6.4 函数重载</h2><p>如果同一作用域内的几个函数名字相同但形参列表不同，称之为<strong>重载(overload)函数</strong>。</p><p><strong>tips</strong>：</p><ul><li>不允许两个函数除了返回类型外其他所有的要素都相同。</li><li>一个拥有顶层<code>const</code>的形参无法和另一个没有顶层<code>const</code>的形参区分开来。</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Record <span class="token function">lookup</span><span class="token punctuation">(</span>Phone<span class="token punctuation">)</span><span class="token punctuation">;</span>Record <span class="token function">lookup</span><span class="token punctuation">(</span><span class="token keyword">const</span> Phone<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 一样的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>如果形参是某种类型的指针或引用，则通过区分其指向的是常量对象还是非常量对象可以实现函数重载，此时的const是底层的</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Record <span class="token function">lookup</span><span class="token punctuation">(</span>Account<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Record <span class="token function">lookup</span><span class="token punctuation">(</span><span class="token keyword">const</span> Account<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 新函数，作用于常量引用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>注意</strong>：当传递一个<strong>非常量对象</strong>或者<strong>非常量对象的指针</strong>时，编译器会优先选用<strong>非常量</strong>版本的函数</p><h3 id="const-cast和重载"><a href="#const-cast和重载" class="headerlink" title="const_cast和重载"></a>const_cast和重载</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> string<span class="token operator">&amp;</span> <span class="token function">shorterString</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> s1<span class="token punctuation">,</span> <span class="token keyword">const</span> string<span class="token operator">&amp;</span> s2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> s1<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> s2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> s1 <span class="token operator">:</span> s2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这里返回常量引用，当传入非常量对象时，需要一个非常量的版本，返回非常量引用</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">string<span class="token operator">&amp;</span> <span class="token function">shorterString</span><span class="token punctuation">(</span>string<span class="token operator">&amp;</span> s1<span class="token punctuation">,</span> string<span class="token operator">&amp;</span> s2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">auto</span><span class="token operator">&amp;</span> r <span class="token operator">=</span> <span class="token function">shorterString</span><span class="token punctuation">(</span><span class="token keyword">const_cast</span><span class="token operator">&lt;</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span><span class="token operator">></span> s1<span class="token punctuation">,</span> <span class="token keyword">const_cast</span><span class="token operator">&lt;</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span><span class="token operator">></span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">const_cast</span><span class="token operator">&lt;</span>string<span class="token operator">&amp;</span><span class="token operator">></span> <span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>先把非常量引用转为常量引用，调用常量引用版本的函数，再把返回的常量结果转为非常量</p><h2 id="6-5-特殊用途语言特性"><a href="#6-5-特殊用途语言特性" class="headerlink" title="6.5 特殊用途语言特性"></a>6.5 特殊用途语言特性</h2><h3 id="6-5-1-默认实参"><a href="#6-5-1-默认实参" class="headerlink" title="6.5.1 默认实参"></a>6.5.1 默认实参</h3><p><strong>注意</strong>：一旦某个形参被赋予了默认值，它后面的所有形参都必须有默认值</p><p>在给定的作用域中一个形参只能被赋予一次默认实参，不能重复声明</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">string <span class="token function">screen</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">;</span>string <span class="token function">screen</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">=</span> <span class="token string">'*'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 错误：重复声明</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>局部变量不能作为默认实参，只要表达式的类型能转换为形参所需要的类型，该表达式就能作为默认实参<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">ht</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> wd <span class="token operator">=</span> <span class="token number">80</span><span class="token punctuation">;</span><span class="token keyword">char</span> def <span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">;</span>     <span class="token comment">// 全局变量</span>string <span class="token function">screen</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">=</span> <span class="token function">ht</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">=</span> wd<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">=</span> def<span class="token punctuation">)</span><span class="token punctuation">;</span>string window <span class="token operator">=</span> <span class="token function">screen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 调用screen(ht(), 80, ' ');</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><p>如果是在函数作用域里面</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">fun2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    def <span class="token operator">=</span> <span class="token string">'*'</span><span class="token punctuation">;</span>  <span class="token comment">// 修改了全局变量def</span>    <span class="token keyword">int</span> wd <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>   <span class="token comment">// 局部变量不影响全局变量</span>    window <span class="token operator">=</span> <span class="token function">screen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 调用screen(ht(), 80, '*');</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-5-2-内联函数和constexpr函数"><a href="#6-5-2-内联函数和constexpr函数" class="headerlink" title="6.5.2 内联函数和constexpr函数"></a>6.5.2 内联函数和constexpr函数</h3><p>内联函数可避免函数调用的开销，将函数指定为<strong>内联函数(inline)</strong>，通常就是将它在每个调用点上“内联地”展开。</p>]]></content>
      
      
      
        <tags>
            
            <tag> C++Primer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>110-平衡二叉树</title>
      <link href="2021/07/13/LeetCode-110-%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
      <url>2021/07/13/LeetCode-110-%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-110-Balanced-Binary-Tree"><a href="#LeetCode-110-Balanced-Binary-Tree" class="headerlink" title="LeetCode 110. Balanced Binary Tree"></a>LeetCode 110. Balanced Binary Tree</h2><p><a href="https://leetcode.com/problems/balanced-binary-tree/">LeetCode-110</a></p><p>Given a <strong>binary tree</strong>, determine if it is height-balanced.</p><p>For this problem, a height-balanced binary tree is defined as:</p><p>a binary tree in which the left and right subtrees of every node differ in height by <strong>no more than 1</strong>.</p><p>Example 1:<br><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/110/110.jpg" alt><br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> root <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span>null<span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h3 id="method-递归"><a href="#method-递归" class="headerlink" title="method: 递归"></a>method: 递归</h3><p>平衡二叉树：左子树和右子树的高度差的绝对值小于1</p><blockquote><ul><li>这里用-1表示不满足的情况</li><li>如果左右子树出现不满足的情况，就可以直接返回了</li><li>都满足的话就取左右子树的较大者加1作为当前节点的深度返回</li></ul></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">getDepth</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> leftDepth <span class="token operator">=</span> <span class="token function">getDepth</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>leftDepth <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> rightDepth <span class="token operator">=</span> <span class="token function">getDepth</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>rightDepth <span class="token operator">==</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">abs</span><span class="token punctuation">(</span>leftDepth <span class="token operator">-</span> rightDepth<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">:</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token function">max</span><span class="token punctuation">(</span>leftDepth<span class="token punctuation">,</span> rightDepth<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> <span class="token function">isBalanced</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">getDepth</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>222-完全二叉树的节点</title>
      <link href="2021/07/12/LeetCode-222-%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E8%8A%82%E7%82%B9/"/>
      <url>2021/07/12/LeetCode-222-%E5%AE%8C%E5%85%A8%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E8%8A%82%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="222-Count-Complete-Tree-Nodes"><a href="#222-Count-Complete-Tree-Nodes" class="headerlink" title="222. Count Complete Tree Nodes"></a>222. Count Complete Tree Nodes</h2><p><a href="https://leetcode.com/problems/count-complete-tree-nodes/">LeetCode-222</a></p><p>Given the root of a <strong>complete binary tree</strong>, return the number of the nodes in the tree.</p><p>According to Wikipedia, every level, except possibly the last, is completely filled in a complete binary tree, and all nodes in the last level are as far left as possible. It can have between 1 and $2^h$ nodes inclusive at the last level <code>h</code>.</p><p>Design an algorithm that runs in less than $O(n)$ time complexity.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> root <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token number">6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h3 id="method-1-递归"><a href="#method-1-递归" class="headerlink" title="method 1: 递归"></a>method 1: 递归</h3><p>分别计算左节点数和右节点数，在加上当前节点的<code>1</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">countNodes</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> leftNum <span class="token operator">=</span> <span class="token function">countNodes</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> rightNum <span class="token operator">=</span> <span class="token function">countNodes</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> leftNum <span class="token operator">+</span> rightNum <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间复杂度：$O(n)$<br>空间复杂度：$O(logn)$，算上了递归系统栈占用的空间</p><h3 id="method-2-层序遍历"><a href="#method-2-层序遍历" class="headerlink" title="method 2: 层序遍历"></a>method 2: 层序遍历</h3><p>累计每层的节点数</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">countNodes</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    queue<span class="token operator">&lt;</span>TreeNode<span class="token operator">*</span><span class="token operator">></span> q<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> size <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        count <span class="token operator">+=</span> size<span class="token punctuation">;</span>  <span class="token comment">// 每一层的节点数</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            TreeNode<span class="token operator">*</span> cur <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token operator">-></span>left<span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token operator">-></span>right<span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> count<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间复杂度：$O(n)$<br>空间复杂度：$O(n)$</p><h3 id="method-3-利用完全二叉树性质"><a href="#method-3-利用完全二叉树性质" class="headerlink" title="method 3: 利用完全二叉树性质"></a>method 3: 利用完全二叉树性质</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">countNodes</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    TreeNode<span class="token operator">*</span> leftNode <span class="token operator">=</span> root<span class="token operator">-></span>left<span class="token punctuation">;</span>    TreeNode<span class="token operator">*</span> rightNode <span class="token operator">=</span> root<span class="token operator">-></span>right<span class="token punctuation">;</span>    <span class="token keyword">int</span> leftDepth <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> rightDepth <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>leftNode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        leftNode <span class="token operator">=</span> leftNode<span class="token operator">-></span>left<span class="token punctuation">;</span>        leftDepth<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>rightNode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        rightNode <span class="token operator">=</span> rightNode<span class="token operator">-></span>right<span class="token punctuation">;</span>        rightDepth<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>leftDepth <span class="token operator">==</span> rightDepth<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">&lt;&lt;</span> leftDepth<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token function">countNodes</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">countNodes</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间复杂度：$O(logn * logn)$<br>空间复杂度：$O(logn)$</p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>111-二叉树的最小深度</title>
      <link href="2021/07/11/LeetCode-111-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%B0%8F%E6%B7%B1%E5%BA%A6/"/>
      <url>2021/07/11/LeetCode-111-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%B0%8F%E6%B7%B1%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-111-Minimum-Depth-of-Binary-Tree"><a href="#LeetCode-111-Minimum-Depth-of-Binary-Tree" class="headerlink" title="LeetCode 111. Minimum Depth of Binary Tree"></a>LeetCode 111. Minimum Depth of Binary Tree</h2><p><a href="https://leetcode.com/problems/minimum-depth-of-binary-tree/">LeetCode-111</a></p><p>Given a binary tree, find its <strong>minimum depth</strong>.</p><p>The <strong>minimum depth</strong> is the number of nodes along the shortest path from the root node down to the nearest leaf node.</p><p>Note: A leaf is a node with <strong>no children</strong>.</p><p>Example 1:<br><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/111/111.jpg" alt><br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> root <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span>null<span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h3 id="method-1-递归"><a href="#method-1-递归" class="headerlink" title="method 1: 递归"></a>method 1: 递归</h3><p>如果子树为空的话不能算深度为0，因为只有叶子节点才算深度</p><blockquote><ul><li>左子树为空，右子树非空，返回右子树高度+1</li><li>右子树为空，左子树非空，返回左子树高度+1</li><li>左右子树都非空，返回较小者+1；叶子结点也算在这种情况里</li></ul></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">minDepth</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> leftDepth <span class="token operator">=</span> <span class="token function">minDepth</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> rightDepth <span class="token operator">=</span> <span class="token function">minDepth</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-></span>left <span class="token operator">==</span> <span class="token keyword">nullptr</span> <span class="token operator">&amp;&amp;</span> root<span class="token operator">-></span>right<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">+</span> rightDepth<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root<span class="token operator">-></span>left <span class="token operator">&amp;&amp;</span> root<span class="token operator">-></span>right <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span> <span class="token operator">+</span> leftDepth<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">min</span><span class="token punctuation">(</span>leftDepth<span class="token punctuation">,</span> rightDepth<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="method-2-层序遍历"><a href="#method-2-层序遍历" class="headerlink" title="method 2: 层序遍历"></a>method 2: 层序遍历</h3><h4 id="错误写法"><a href="#错误写法" class="headerlink" title="错误写法"></a>错误写法</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">minDepth</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    queue<span class="token operator">&lt;</span>TreeNode<span class="token operator">*</span><span class="token operator">></span> q<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> depth <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> size <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        depth<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            TreeNode<span class="token operator">*</span> cur <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token operator">-></span>left<span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token operator">-></span>right<span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 不能用else</span>            <span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span>     <span class="token comment">// 不能用break</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> depth<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>else</code> 是分支语句，执行了if就不会执行 <code>else</code>，这样右节点就不会被放进来</li><li><code>break</code> 退出当前 <code>for</code> 循环，但外面还有一个 <code>while</code> 循环，破坏了层序遍历的结构</li></ul><h4 id="正确写法"><a href="#正确写法" class="headerlink" title="正确写法"></a>正确写法</h4><p>三种情况分别用三个<code>if</code>判断<br>没有左子树和右子树，说明是叶子节点，可以返回了</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">minDepth</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    queue<span class="token operator">&lt;</span>TreeNode<span class="token operator">*</span><span class="token operator">></span> q<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> depth <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> size <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        depth<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            TreeNode<span class="token operator">*</span> cur <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token operator">-></span>left<span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token operator">-></span>right<span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cur<span class="token operator">-></span>left <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>cur<span class="token operator">-></span>right<span class="token punctuation">)</span> <span class="token keyword">return</span> depth<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> depth<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>104-二叉树的最大深度</title>
      <link href="2021/07/11/LeetCode-104-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6/"/>
      <url>2021/07/11/LeetCode-104-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-104-Maximum-Depth-of-Binary-Tree"><a href="#LeetCode-104-Maximum-Depth-of-Binary-Tree" class="headerlink" title="LeetCode 104. Maximum Depth of Binary Tree"></a>LeetCode 104. Maximum Depth of Binary Tree</h2><p><a href="https://leetcode.com/problems/maximum-depth-of-binary-tree/">LeetCode-104</a></p><p>Given the root of a binary tree, return its <strong>maximum depth</strong>.</p><p>A binary tree’s <strong>maximum depth</strong> is the number of nodes along the longest path from the root node down to the farthest leaf node.</p><p>Example 1:<br><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/104/104.jpg" alt></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> root <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span>null<span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="method-1-递归"><a href="#method-1-递归" class="headerlink" title="method 1: 递归"></a>method 1: 递归</h3><ul><li>递归参数：节点</li><li>递归结束条件：节点为空，返回0</li><li>单层递归逻辑：当前节点的左子树高度和右子树高度的较大值+1，就是该节点子树的高度</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> leftDepth <span class="token operator">=</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> rightDepth <span class="token operator">=</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span>leftDepth<span class="token punctuation">,</span> rightDepth<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="method-2-层序遍历"><a href="#method-2-层序遍历" class="headerlink" title="method 2: 层序遍历"></a>method 2: 层序遍历</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    queue<span class="token operator">&lt;</span>TreeNode<span class="token operator">*</span><span class="token operator">></span> q<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> depth <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// 记录有多少层</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> size <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        depth<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            TreeNode<span class="token operator">*</span> top <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>top<span class="token operator">-></span>left<span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>top<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>top<span class="token operator">-></span>right<span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>top<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> depth<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="LeetCode-559-Maximum-Depth-of-N-ary-Tree"><a href="#LeetCode-559-Maximum-Depth-of-N-ary-Tree" class="headerlink" title="LeetCode 559. Maximum Depth of N-ary Tree"></a>LeetCode 559. Maximum Depth of N-ary Tree</h2><p><a href="https://leetcode.com/problems/maximum-depth-of-n-ary-tree/">LeetCode-559</a></p><p>Given a n-ary tree, find its <strong>maximum depth</strong>.</p><p>The <strong>maximum depth</strong> is the number of nodes along the longest path from the root node down to the farthest leaf node.</p><p>Nary-Tree input serialization is represented in their level order traversal, each group of children is separated by the null value.</p><p>Example 1:<br><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/104/2.png" alt><br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> root <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h3 id="method-递归"><a href="#method-递归" class="headerlink" title="method: 递归"></a>method: 递归</h3><p>注意：二叉树只有两个结果所以直接<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span>leftDepth<span class="token punctuation">,</span> rightDepth<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p><p>这里有<code>N</code>个结果，显然不能一个一个列出来，所以换一种写法，记录每一次的结果</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    depth <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>depth<span class="token punctuation">,</span> childrenDepth<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> depth<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> depth <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> root<span class="token operator">-></span>children<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        depth <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>depth<span class="token punctuation">,</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token operator">-></span>children<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> depth <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
            <tag> 递归 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>100/101-对称二叉树</title>
      <link href="2021/07/04/LeetCode-101-%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
      <url>2021/07/04/LeetCode-101-%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-101-Symmetric-Tree"><a href="#LeetCode-101-Symmetric-Tree" class="headerlink" title="LeetCode 101. Symmetric Tree"></a>LeetCode 101. Symmetric Tree</h2><p><a href="https://leetcode.com/problems/symmetric-tree/">LeetCode-101</a></p><p>Given the root of a binary tree, check whether it is a <strong>mirror</strong> of itself.</p><p>Example:<br><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/101/101.jpg" alt></p><h2 id="method-递归"><a href="#method-递归" class="headerlink" title="method:递归"></a>method:递归</h2><p>分别比较外侧节点和内侧节点</p><blockquote><ul><li>外侧：左子树的左节点，右子树的右节点</li><li>内侧：左子树的右节点，右子树的左节点</li></ul></blockquote><p>递归参数：在不引起争议的情况下，统称为左节点和右节点</p><p>结束条件：</p><blockquote><ol><li>左节点空，右节点也空，返回<code>true</code></li><li>左节点非空，右节点空，返回<code>false</code></li><li>左节点空，右节点非空，返回<code>false</code></li><li>左右节点都不空，但是不相等，返回<code>false</code></li></ol></blockquote><p>单层遍历逻辑：分别遍历内侧节点和外侧节点</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">compare</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> left<span class="token punctuation">,</span> TreeNode<span class="token operator">*</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">==</span> <span class="token keyword">nullptr</span> <span class="token operator">&amp;&amp;</span> right <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">!=</span> <span class="token keyword">nullptr</span> <span class="token operator">&amp;&amp;</span> right <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">==</span> <span class="token keyword">nullptr</span> <span class="token operator">&amp;&amp;</span> right <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>left<span class="token operator">-></span>val <span class="token operator">!=</span> right<span class="token operator">-></span>val<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment">// 剩下的就是节点非空且值相同的情况</span>    <span class="token keyword">bool</span> outSide <span class="token operator">=</span> <span class="token function">compare</span><span class="token punctuation">(</span>left<span class="token operator">-></span>left<span class="token punctuation">,</span> right<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> inSide <span class="token operator">=</span> <span class="token function">compare</span><span class="token punctuation">(</span>left<span class="token operator">-></span>right<span class="token punctuation">,</span> right<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> outSide <span class="token operator">&amp;&amp;</span> inSide<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> <span class="token function">isSymmetric</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">compare</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">,</span> root<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="LeetCode-100-Same-Tree"><a href="#LeetCode-100-Same-Tree" class="headerlink" title="LeetCode 100. Same Tree"></a>LeetCode 100. Same Tree</h2><p><a href="https://leetcode.com/problems/same-tree/">LeetCode-100</a></p><p>Given the <code>roots</code> of two binary trees <code>p</code> and <code>q</code>, write a function to check if they are <strong>the same or not</strong>.</p><p>Two binary trees are considered the same if they are structurally identical, and the nodes have the same value.</p><p>Example 1:<br><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/101/100.jpg" alt><br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> p <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> q <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h3 id="method"><a href="#method" class="headerlink" title="method"></a>method</h3><p>把对称二叉树的左右换一下就可以了</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">isSameTree</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> p<span class="token punctuation">,</span> TreeNode<span class="token operator">*</span> q<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>p <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>q<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>p <span class="token operator">&amp;&amp;</span> q<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>q<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token operator">-></span>val <span class="token operator">!=</span> q<span class="token operator">-></span>val<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> leftSide <span class="token operator">=</span> <span class="token function">isSameTree</span><span class="token punctuation">(</span>p<span class="token operator">-></span>left<span class="token punctuation">,</span> q<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> rightSide <span class="token operator">=</span> <span class="token function">isSameTree</span><span class="token punctuation">(</span>p<span class="token operator">-></span>right<span class="token punctuation">,</span> q<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> leftSide <span class="token operator">&amp;&amp;</span> rightSide<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>226-翻转二叉树</title>
      <link href="2021/07/03/LeetCode-226-%E7%BF%BB%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
      <url>2021/07/03/LeetCode-226-%E7%BF%BB%E8%BD%AC%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-226-Invert-Binary-Tree"><a href="#LeetCode-226-Invert-Binary-Tree" class="headerlink" title="LeetCode 226. Invert Binary Tree"></a>LeetCode 226. Invert Binary Tree</h2><p><a href="https://leetcode.com/problems/invert-binary-tree/">LeetCode-226</a></p><p>Given the root of a binary tree, <strong>invert</strong> the tree, and return its <strong>root</strong>.</p><p>Example:</p><p><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/226/226.jpg" alt></p><h3 id="method-递归"><a href="#method-递归" class="headerlink" title="method: 递归"></a>method: 递归</h3><p>翻转每个节点的左右节点</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">TreeNode<span class="token operator">*</span> <span class="token function">invertTree</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span> root<span class="token punctuation">;</span>    <span class="token function">swap</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">,</span> root<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">invertTree</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 递归处理左右子树</span>    <span class="token function">invertTree</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> root<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
            <tag> 递归 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>429-N叉树的层序遍历</title>
      <link href="2021/06/28/LeetCode-429-N%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
      <url>2021/06/28/LeetCode-429-N%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-429-N-ary-Tree-Level-Order-Traversal"><a href="#LeetCode-429-N-ary-Tree-Level-Order-Traversal" class="headerlink" title="LeetCode 429. N-ary Tree Level Order Traversal"></a>LeetCode 429. N-ary Tree Level Order Traversal</h2><p><a href="https://leetcode.com/problems/n-ary-tree-level-order-traversal/">LeetCode-429</a></p><p>Given an <code>n-ary</code> tree, return the level order traversal of its nodes’ values.</p><p><code>Nary-Tree</code> input serialization is represented in their level order traversal, each group of children is separated by the null value (See examples).</p><p>Example 1:<br><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/429/429.png" alt><br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> root <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h3 id="method"><a href="#method" class="headerlink" title="method"></a>method</h3><p>遍历每个节点的子节点</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">levelOrder</span><span class="token punctuation">(</span>Node<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    queue<span class="token operator">&lt;</span>Node<span class="token operator">*</span><span class="token operator">></span> q<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> ret<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> size <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> vec<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            Node<span class="token operator">*</span> cur <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            vec<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> cur<span class="token operator">-></span>children<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>children<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        ret<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>vec<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>332-重新安排行程</title>
      <link href="2021/06/27/LeetCode-332-%E9%87%8D%E6%96%B0%E5%AE%89%E6%8E%92%E8%A1%8C%E7%A8%8B/"/>
      <url>2021/06/27/LeetCode-332-%E9%87%8D%E6%96%B0%E5%AE%89%E6%8E%92%E8%A1%8C%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-332-Reconstruct-Itinerary"><a href="#LeetCode-332-Reconstruct-Itinerary" class="headerlink" title="LeetCode 332. Reconstruct Itinerary"></a>LeetCode 332. Reconstruct Itinerary</h2><p><a href="https://leetcode.com/problems/reconstruct-itinerary/">LeetCode-332</a></p><p>You are given a list of airline <code>tickets</code> where <code>tickets[i] = [from, to]</code> represent the departure and the arrival airports of one flight. Reconstruct the itinerary in order and return it.</p><p>All of the tickets belong to a man who departs from <code>&quot;JFK&quot;</code>, thus, the itinerary must begin with <code>&quot;JFK&quot;</code>. If there are multiple valid itineraries, you should return the itinerary that has the <strong>smallest lexical order</strong> when read as a single string.</p><ul><li>For example, the itinerary <code>[&quot;JFK&quot;, &quot;LGA&quot;]</code> has a smaller lexical order than <code>[&quot;JFK&quot;, &quot;LGB&quot;]</code>.</li></ul><p>You may assume all tickets form at least one valid itinerary. You must <strong>use all the tickets once and only once</strong>.</p><p>Example 1:<br><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/332/00.png" alt><br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> tickets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"MUC"</span><span class="token punctuation">,</span><span class="token string">"LHR"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"JFK"</span><span class="token punctuation">,</span><span class="token string">"MUC"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"SFO"</span><span class="token punctuation">,</span><span class="token string">"SJC"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"LHR"</span><span class="token punctuation">,</span><span class="token string">"SFO"</span><span class="token punctuation">]</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"JFK"</span><span class="token punctuation">,</span><span class="token string">"MUC"</span><span class="token punctuation">,</span><span class="token string">"LHR"</span><span class="token punctuation">,</span><span class="token string">"SFO"</span><span class="token punctuation">,</span><span class="token string">"SJC"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br>Example 2:<br><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/332/11.png" alt><br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> tickets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"JFK"</span><span class="token punctuation">,</span><span class="token string">"SFO"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"JFK"</span><span class="token punctuation">,</span><span class="token string">"ATL"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"SFO"</span><span class="token punctuation">,</span><span class="token string">"ATL"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"ATL"</span><span class="token punctuation">,</span><span class="token string">"JFK"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"ATL"</span><span class="token punctuation">,</span><span class="token string">"SFO"</span><span class="token punctuation">]</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"JFK"</span><span class="token punctuation">,</span><span class="token string">"ATL"</span><span class="token punctuation">,</span><span class="token string">"JFK"</span><span class="token punctuation">,</span><span class="token string">"SFO"</span><span class="token punctuation">,</span><span class="token string">"ATL"</span><span class="token punctuation">,</span><span class="token string">"SFO"</span><span class="token punctuation">]</span>Explanation<span class="token operator">:</span> Another possible reconstruction is <span class="token punctuation">[</span><span class="token string">"JFK"</span><span class="token punctuation">,</span><span class="token string">"SFO"</span><span class="token punctuation">,</span><span class="token string">"ATL"</span><span class="token punctuation">,</span><span class="token string">"JFK"</span><span class="token punctuation">,</span><span class="token string">"ATL"</span><span class="token punctuation">,</span><span class="token string">"SFO"</span><span class="token punctuation">]</span> but it is larger in lexical order<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></p><h2 id="method-回溯"><a href="#method-回溯" class="headerlink" title="method: 回溯"></a>method: 回溯</h2><p>难点一：回溯三部曲</p><blockquote><ul><li>递归函数参数<br>机票总数，作为结束条件判断，也可以作为全局变量</li><li>递归结束条件<br>最终行程数组比机票数大1，说明找到了一组可行的解，返回<code>true</code>，因为只需要一组解</li><li>单层循环逻辑<br>因为每个起始点可能有多个终点，所以要遍历这些终点</li></ul></blockquote><p>难点二：选择<strong>合适的数据结构</strong></p><p>首先一个起点对应多个终点，可以想到用<code>unordered_map</code><br>其次，机票是可以重复的，所以还需要记录<font color="LightSeaGreen">每个起止点出现的次数</font>，也需要一个映射关系，而且用了一次之后次数要减少，也就是还要可以<font color="LightSeaGreen">删改</font></p><blockquote><p>所以选择用<code>unordered_map&lt;string, map&lt;string, int&gt;&gt;</code>，后面用<code>map</code>是因为需要对终点进行排序，字典序小的放在前面</p></blockquote><p>例如有三张票是<code>[A-&gt;B],[A-&gt;C],[A-&gt;C]</code>，那么<code>targets[&quot;A&quot;]</code>就对应了这三张票，可以对他们进行遍历<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> target <span class="token operator">:</span> targets<span class="token punctuation">[</span><span class="token string">"A"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    cout <span class="token operator">&lt;&lt;</span> target<span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> <span class="token string">"->"</span> <span class="token operator">&lt;&lt;</span> target<span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>B<span class="token operator">-></span><span class="token number">1</span>    <span class="token comment">// A到B有一张票   已经排好序了</span>C<span class="token operator">-></span><span class="token number">2</span>    <span class="token comment">// A到C有两张票</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><div class="uk-alert uk-alert-success"><i class="fa fa-check-circle"></i> 因为要对票数直接修改，所以遍历的时候要用<font color="LightSalmon">引用</font></div><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">unordered_map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> map<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">>></span> targets<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span> res<span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> ticketNum<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> ticketNum <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment">// 站点数等于票数+1</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> target <span class="token operator">:</span> targets<span class="token punctuation">[</span>res<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 这里要用引用</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token punctuation">.</span>second <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 如果有票就用，已经排好序了</span>            target<span class="token punctuation">.</span>second<span class="token operator">--</span><span class="token punctuation">;</span>            res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span>first<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>ticketNum<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            target<span class="token punctuation">.</span>second<span class="token operator">++</span><span class="token punctuation">;</span>            res<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">findItinerary</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>string<span class="token operator">>></span><span class="token operator">&amp;</span> tickets<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> t <span class="token operator">:</span> tickets<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        targets<span class="token punctuation">[</span>t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>t<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token string">"JFK"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 把起点放进来</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>tickets<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 哈希表 </tag>
            
            <tag> 回溯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>169-多数元素</title>
      <link href="2021/06/27/LeetCode-169-%E5%A4%9A%E6%95%B0%E5%85%83%E7%B4%A0/"/>
      <url>2021/06/27/LeetCode-169-%E5%A4%9A%E6%95%B0%E5%85%83%E7%B4%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-169-Majority-Element"><a href="#LeetCode-169-Majority-Element" class="headerlink" title="LeetCode 169. Majority Element"></a>LeetCode 169. Majority Element</h2><p><a href="https://leetcode.com/problems/majority-element/">LeetCode-169</a></p><p>Given an array <code>nums</code> of size n, return the majority element.</p><p>The majority element is the element that appears more than $\lfloor n / 2 \rfloor$ times. You may assume that the majority element always exists in the array.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br>Example 2:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h2 id="method-1-哈希表"><a href="#method-1-哈希表" class="headerlink" title="method 1: 哈希表"></a>method 1: 哈希表</h2><p><code>hash</code>记录每个数字出现的次数</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">majorityElement</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    n <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">;</span>    unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> hash<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        hash<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>hash<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">></span> n<span class="token punctuation">)</span> <span class="token keyword">return</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间复杂度：$O(n)$<br>空间复杂度：$O(n)$</p><h2 id="method-2-双指针"><a href="#method-2-双指针" class="headerlink" title="method 2: 双指针"></a>method 2: 双指针</h2><p>先排序，把相同元素放在一起，再用双指针找相同元素出现次数<br><code>[l,r)</code>区间内都是相同的元素</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">majorityElement</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> size <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    size <span class="token operator">/=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>r <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>r <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span> r<span class="token operator">++</span><span class="token punctuation">;</span>        cnt <span class="token operator">=</span> r <span class="token operator">-</span> l<span class="token punctuation">;</span>    <span class="token comment">// [l,r)区间的元素个数</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cnt <span class="token operator">></span> size<span class="token punctuation">)</span> <span class="token keyword">return</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> l <span class="token operator">=</span> r<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间复杂度：$O(nlogn+n)$<br>空间复杂度：如果使用语言自带的排序算法，需要使用$O(logn)$的栈空间</p><p>由于众数出现的频率大于<code>n/2</code>，所以在排序之后众数必存在于下标<code>[n/2]</code>处，直接返回</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">majorityElement</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> nums<span class="token punctuation">[</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>时间复杂度：$O(nlogn)$<br>空间复杂度：$O(nlogn)$</p><h2 id="method-3-摩尔投票法"><a href="#method-3-摩尔投票法" class="headerlink" title="method 3: 摩尔投票法"></a>method 3: 摩尔投票法</h2><p>众数：出现次数大于<code>n/2</code>的数<br>遇到相同的数，就投一票，遇到不同的数，就减一票，最后还存在票的数就是众数</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">majorityElement</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> num <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> ret <span class="token operator">=</span> num<span class="token punctuation">;</span>  <span class="token comment">// count=0就重新取值</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> ret<span class="token punctuation">)</span> count<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token comment">// 相同就加票</span>        <span class="token keyword">else</span> count<span class="token operator">--</span><span class="token punctuation">;</span>               <span class="token comment">// 不同就减票</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间复杂度：$O(n)$<br>空间复杂度：$O(1)$</p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 哈希表 </tag>
            
            <tag> 双指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>637-二叉树的层平均值</title>
      <link href="2021/06/26/LeetCode-637-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%B9%B3%E5%9D%87%E5%80%BC/"/>
      <url>2021/06/26/LeetCode-637-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%B9%B3%E5%9D%87%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-637-Average-of-Levels-in-Binary-Tree"><a href="#LeetCode-637-Average-of-Levels-in-Binary-Tree" class="headerlink" title="LeetCode 637. Average of Levels in Binary Tree"></a>LeetCode 637. Average of Levels in Binary Tree</h2><p><a href="https://leetcode.com/problems/average-of-levels-in-binary-tree/">LeetCode-637</a></p><p>Given the root of a binary tree, return the <strong>average value</strong> of the nodes on <strong>each level</strong> in the form of an array. Answers within $10^{-5}$ of the actual answer will be accepted.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span>     <span class="token number">3</span>   <span class="token operator">/</span> \  <span class="token number">9</span>  <span class="token number">20</span>    <span class="token operator">/</span>  \   <span class="token number">15</span>   <span class="token number">7</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">3.00000</span><span class="token punctuation">,</span><span class="token number">14.50000</span><span class="token punctuation">,</span><span class="token number">11.00000</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h2 id="method"><a href="#method" class="headerlink" title="method"></a>method</h2><p>记录每层的节点总和，遍历完一层后记录平均值</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span> <span class="token function">averageOfLevels</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span> ret<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    queue<span class="token operator">&lt;</span>TreeNode<span class="token operator">*</span><span class="token operator">></span> q<span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> size <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            TreeNode<span class="token operator">*</span> cur <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            sum <span class="token operator">+=</span> cur<span class="token operator">-></span>val<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token operator">-></span>left<span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token operator">-></span>right<span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        ret<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>sum <span class="token operator">/</span> size<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>102-二叉树的层序遍历</title>
      <link href="2021/06/26/LeetCode-102-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86/"/>
      <url>2021/06/26/LeetCode-102-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-102-Binary-Tree-Level-Order-Traversal"><a href="#LeetCode-102-Binary-Tree-Level-Order-Traversal" class="headerlink" title="LeetCode 102. Binary Tree Level Order Traversal"></a>LeetCode 102. Binary Tree Level Order Traversal</h2><p><a href="https://leetcode.com/problems/binary-tree-level-order-traversal/">LeetCode-102</a></p><p>Given the root of a binary tree, return the level order traversal of its nodes’ values.</p><p>Example 1:</p><p><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/102/22.jpg" alt></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> root <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span>null<span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="method-1-队列"><a href="#method-1-队列" class="headerlink" title="method 1: 队列"></a>method 1: 队列</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">levelOrder</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> ret<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    queue<span class="token operator">&lt;</span>TreeNode<span class="token operator">*</span><span class="token operator">></span> q<span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> size <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 先记录size，后面会变</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> path<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            TreeNode<span class="token operator">*</span> cur <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            path<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token operator">-></span>left<span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token operator">-></span>right<span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        ret<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>vec<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="method-2-递归"><a href="#method-2-递归" class="headerlink" title="method 2: 递归"></a>method 2: 递归</h3><p>先序遍历，把节点插入到相同深度的<code>vector</code>中</p><p>后面要索引，所以先插入一个空的<code>vector</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> res<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">traversal</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> cur<span class="token punctuation">,</span> <span class="token keyword">int</span> depth<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cur<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> depth<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 先插入一个空的vector</span>    <span class="token punctuation">&#125;</span>    res<span class="token punctuation">[</span>depth<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token operator">-></span>left<span class="token punctuation">)</span> <span class="token function">traversal</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>left<span class="token punctuation">,</span> depth <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token operator">-></span>right<span class="token punctuation">)</span> <span class="token function">traversal</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>right<span class="token punctuation">,</span> depth <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">levelOrder</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">traversal</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="LeetCode-103-Binary-Tree-Zigzag-Level-Order-Traversal"><a href="#LeetCode-103-Binary-Tree-Zigzag-Level-Order-Traversal" class="headerlink" title="LeetCode 103. Binary Tree Zigzag Level Order Traversal"></a>LeetCode 103. Binary Tree Zigzag Level Order Traversal</h2><p><a href="https://leetcode.com/problems/binary-tree-zigzag-level-order-traversal/">LeetCode-103</a></p><p>Given the <code>root</code> of a binary tree, return the <code>zigzag</code> level order traversal of its nodes’ values.</p><p>Example 1:</p><p><img src="/2021/06/26/LeetCode-102-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86/22.jpg" alt></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> root <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span>null<span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="method"><a href="#method" class="headerlink" title="method"></a>method</h3><p>奇数层的<code>vector</code>要反转</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">zigzagLevelOrder</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> res<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> res<span class="token punctuation">;</span>    queue<span class="token operator">&lt;</span>TreeNode<span class="token operator">*</span><span class="token operator">></span> q<span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> depth <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// 记录深度</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> size <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> path<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            TreeNode <span class="token operator">*</span>cur <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            path<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token operator">-></span>left<span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token operator">-></span>right<span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>depth <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token function">reverse</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> path<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 反转</span>        res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        depth<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token comment">// 深度增加</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="LeetCode-107-Binary-Tree-Level-Order-Traversal-II"><a href="#LeetCode-107-Binary-Tree-Level-Order-Traversal-II" class="headerlink" title="LeetCode 107. Binary Tree Level Order Traversal II"></a>LeetCode 107. Binary Tree Level Order Traversal II</h2><p><a href="https://leetcode.com/problems/binary-tree-level-order-traversal-ii/">LeetCode-107</a></p><p>Given the root of a binary tree, return the <strong>bottom-up</strong> level order traversal of its nodes’ values. (i.e., from left to right, level by level from leaf to root).</p><p>Example 1:</p><p><img src="/2021/06/26/LeetCode-102-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86/22.jpg" alt></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> root <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span>null<span class="token punctuation">,</span>null<span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="method-1"><a href="#method-1" class="headerlink" title="method"></a>method</h3><p>层序遍历最后反转即可</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">levelOrder</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> ret<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    queue<span class="token operator">&lt;</span>TreeNode<span class="token operator">*</span><span class="token operator">></span> q<span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> size <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> path<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            TreeNode<span class="token operator">*</span> cur <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            path<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token operator">-></span>left<span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token operator">-></span>right<span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        ret<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>vec<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">reverse</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ret<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 最后反转即可</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="LeetCode-199-Binary-Tree-Right-Side-View"><a href="#LeetCode-199-Binary-Tree-Right-Side-View" class="headerlink" title="LeetCode 199. Binary Tree Right Side View"></a>LeetCode 199. Binary Tree Right Side View</h2><p><a href="https://leetcode.com/problems/binary-tree-right-side-view/">LeetCode-199</a></p><p>Given the root of a binary tree, imagine yourself standing on the <strong>right side</strong> of it, return the values of the nodes you can see ordered from top to bottom.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span>    <span class="token number">1</span>        <span class="token operator">&lt;</span><span class="token operator">--</span><span class="token operator">-</span> <span class="token operator">/</span>   \<span class="token number">2</span>     <span class="token number">3</span>     <span class="token operator">&lt;</span><span class="token operator">--</span><span class="token operator">-</span> \     \  <span class="token number">5</span>     <span class="token number">4</span>   <span class="token operator">&lt;</span><span class="token operator">--</span><span class="token operator">-</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h2 id="method-2"><a href="#method-2" class="headerlink" title="method"></a>method</h2><p>每层遍历到最右边的时候记录节点</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">rightSideView</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> ret<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    queue<span class="token operator">&lt;</span>TreeNode<span class="token operator">*</span><span class="token operator">></span> q<span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> size <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            TreeNode<span class="token operator">*</span> cur <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> size <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> ret<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 最右边的位置</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token operator">-></span>left<span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token operator">-></span>right<span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>46/47-全排列</title>
      <link href="2021/06/26/LeetCode-46-%E5%85%A8%E6%8E%92%E5%88%97/"/>
      <url>2021/06/26/LeetCode-46-%E5%85%A8%E6%8E%92%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-46-Permutations"><a href="#LeetCode-46-Permutations" class="headerlink" title="LeetCode 46. Permutations"></a>LeetCode 46. Permutations</h2><p><a href="https://leetcode.com/problems/permutations/">LeetCode-46</a></p><p>Given an array nums of distinct integers, return all the possible permutations. You can return the answer in <strong>any order</strong>.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h3 id="method-回溯"><a href="#method-回溯" class="headerlink" title="method: 回溯"></a>method: 回溯</h3><p>因为下一个<code>for</code>循环还是要从头开始，所以不需要<code>index</code>，跟组合问题不一样<br>因为用过的元素不能再用，所以在每一棵子树上维护一个<code>used</code>数组，保证用过的数不能再用</p><ul><li>因为<strong>从头开始遍历</strong>，所以就会碰到刚才取过的元素，可以用<code>used</code>数组去重，这种重复是因为每次都要从头开始遍历，所以用<code>used</code>将用过的<code>index</code>标记就可以了</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> ret<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> path<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span><span class="token operator">&amp;</span> used<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ret<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>used<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>  <span class="token comment">// 用过了就不能再用了</span>        used<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        path<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> used<span class="token punctuation">)</span><span class="token punctuation">;</span>        path<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        used<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">permute</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span> <span class="token function">used</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> used<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="LeetCode-47-Permutations-II"><a href="#LeetCode-47-Permutations-II" class="headerlink" title="LeetCode 47. Permutations II"></a>LeetCode 47. Permutations II</h2><p><a href="https://leetcode.com/problems/permutations-ii/">LeetCode-47</a></p><p>Given a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>Output<span class="token operator">:</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h3 id="method"><a href="#method" class="headerlink" title="method"></a>method</h3><p>重复的<code>element</code>不能使用，本质上是同一个树杈的去重，可以用两种方式去重：</p><blockquote><p>1.哈希表<br>2.排序+比较<code>i&gt;0 &amp;&amp; nums[i] == nums[i-1]</code></p></blockquote><p>两步去重</p><ul><li><code>used</code>数组负责同一颗子树上的去重</li><li><code>hash</code>哈希表负责同一树杈上的去重，因为数组元素在<code>[-10,10]</code>之间，就直接用数组当哈希表</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> ret<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> path<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span><span class="token operator">&amp;</span> used<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ret<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> hash<span class="token punctuation">[</span><span class="token number">21</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>     <span class="token comment">// 树杈去重</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>hash<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">||</span> used<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        hash<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        path<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        used<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> used<span class="token punctuation">)</span><span class="token punctuation">;</span>        used<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        path<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">permuteUnique</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span> <span class="token function">used</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> used<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>可以只用一个<code>used</code></p></blockquote><p>不过要先<strong>排序</strong>，让相同的元素在一起<br>在上面的全排列问题中，<code>used</code>数组用于同一子树的去重，但是在同一树层，如果两个元素相同，并且前一个元素的<code>used[i-1]=false</code>，说明前一个元素肯定会在另一个分支上被用，当前元素就不能再用了，所以也起到了同一树杈去重的功能</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> ret<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> path<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span><span class="token operator">&amp;</span> used<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ret<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>used<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>   <span class="token comment">// number去重</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>used<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>  <span class="token comment">// index去重</span>        path<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        used<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> used<span class="token punctuation">)</span><span class="token punctuation">;</span>        used<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        path<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">permuteUnique</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">bool</span><span class="token operator">></span> <span class="token function">used</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> used<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 回溯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>491-递增子序列</title>
      <link href="2021/06/26/LeetCode-491-%E9%80%92%E5%A2%9E%E5%AD%90%E5%BA%8F%E5%88%97/"/>
      <url>2021/06/26/LeetCode-491-%E9%80%92%E5%A2%9E%E5%AD%90%E5%BA%8F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-491-Increasing-Subsequences"><a href="#LeetCode-491-Increasing-Subsequences" class="headerlink" title="LeetCode 491. Increasing Subsequences"></a>LeetCode 491. Increasing Subsequences</h2><p><a href="https://leetcode.com/problems/increasing-subsequences/">LeetCode-491</a></p><p>Given an integer array nums, return all the different possible increasing subsequences of the given array with <strong>at least two elements</strong>. You may return the answer in <strong>any order</strong>.</p><p>The given array may contain <strong>duplicates</strong>, and two equal integers should also be considered a special case of increasing sequence.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h3 id="method-回溯"><a href="#method-回溯" class="headerlink" title="method: 回溯"></a>method: 回溯</h3><p>元素不能重复使用，所以<code>i+1</code><br>类似子集问题，收集所有含有两个元素以上的子节点<br>数组有重复，但是子集不能重复，所以要同一树层的去重<br>但是又不能排序，不能使用<a href="https://kavinwkp.github.io/2021/06/23/LeetCode-39-%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C/">数组总和II</a>的去重方法</p><p><strong>解决办法</strong>：使用一个集合记录元素是否被使用过</p><p>两个判断条件：</p><ul><li>如果<code>nums[i]</code>比子集最后一个元素小，就不能放进来了</li><li>同一分支下，相同元素已经被记录使用过了就不能再用了</li></ul><p><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/491/491.png" alt></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> ret<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> path<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ret<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 不用return</span>    <span class="token punctuation">&#125;</span>    unordered_set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> st<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> index<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">!</span>path<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> path<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> st<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                 <span class="token keyword">continue</span><span class="token punctuation">;</span>        path<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        st<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 记录已使用过</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 不能重复使用</span>        path<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">findSubsequences</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h3><p>题目限制数组元素大小为<code>[-100,100]</code>，所以可以用数组替换<code>unordered_set</code>，速度更快一点</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> ret<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> path<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ret<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> used<span class="token punctuation">[</span><span class="token number">201</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> index<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">!</span>path<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> path<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                 <span class="token operator">||</span> used<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        path<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        used<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        path<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">findSubsequences</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 回溯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>78/90-子集</title>
      <link href="2021/06/26/LeetCode-78-%E5%AD%90%E9%9B%86/"/>
      <url>2021/06/26/LeetCode-78-%E5%AD%90%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-78-Subsets"><a href="#LeetCode-78-Subsets" class="headerlink" title="LeetCode 78. Subsets"></a>LeetCode 78. Subsets</h2><p><a href="https://leetcode.com/problems/subsets/">LeetCode-78</a></p><p>Given an integer array nums of <strong>unique</strong> elements, return all possible subsets (the power set).</p><p>The solution set must not contain <strong>duplicate subsets</strong>. Return the solution in <strong>any order</strong>.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h3 id="method-回溯"><a href="#method-回溯" class="headerlink" title="method: 回溯"></a>method: 回溯</h3><p>组合问题是收集树的叶子节点，子集问题是收集树的所有节点<br>不能包含重复元素，所以从<code>i+1</code>开始</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> ret<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> path<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">traversal</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ret<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 收集所有节点</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> index<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        path<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">traversal</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        path<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">subsets</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">traversal</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="LeetCode-90-Subsets-II"><a href="#LeetCode-90-Subsets-II" class="headerlink" title="LeetCode 90. Subsets II"></a>LeetCode 90. Subsets II</h2><p><a href="https://leetcode.com/problems/subsets-ii/">LeetCode-90</a></p><p>Given an integer array nums that <strong>may contain duplicates</strong>, return all possible subsets (the power set).</p><p>The solution set must not contain duplicate subsets. Return the solution in any order.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h3 id="method-回溯-1"><a href="#method-回溯-1" class="headerlink" title="method: 回溯"></a>method: 回溯</h3><p>数组里有重复元素，但是要求子集不能重复<br>和<a href="https://kavinwkp.github.io/2021/06/23/LeetCode-39-%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C/">组合总和II</a>一样的去重方式</p><ol><li>排序</li><li>如果当前元素和上一个元素相同就跳过</li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> ret<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> path<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">traversal</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ret<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> index<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> index <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>  <span class="token comment">// 2</span>        path<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">traversal</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        path<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">subsetsWithDup</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>    <span class="token function">traversal</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 回溯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>93-复原IP地址</title>
      <link href="2021/06/25/LeetCode-93-%E5%A4%8D%E5%8E%9FIP%E5%9C%B0%E5%9D%80/"/>
      <url>2021/06/25/LeetCode-93-%E5%A4%8D%E5%8E%9FIP%E5%9C%B0%E5%9D%80/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-93-Restore-IP-Addresses"><a href="#LeetCode-93-Restore-IP-Addresses" class="headerlink" title="LeetCode 93. Restore IP Addresses"></a>LeetCode 93. Restore IP Addresses</h2><p><a href="https://leetcode.com/problems/restore-ip-addresses/">LeetCode-93</a></p><p>Given a string <code>s</code> containing only digits, return all possible valid IP addresses that can be obtained from s. You can return them in <strong>any order</strong>.</p><p>A <code>valid IP address</code> consists of exactly four integers, each integer is between <code>0 and 255</code>, separated by single dots and cannot have leading zeros. For example, “0.1.2.201” and “192.168.1.1” are <code>valid</code> IP addresses and “0.011.255.245”, “192.168.1.312” and “192.168@1.1” are <code>invalid</code> IP addresses. </p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> s <span class="token operator">=</span> <span class="token string">"25525511135"</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"255.255.11.135"</span><span class="token punctuation">,</span><span class="token string">"255.255.111.35"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br>Example 2:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> s <span class="token operator">=</span> <span class="token string">"1111"</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"1.1.1.1"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h3 id="method-回溯"><a href="#method-回溯" class="headerlink" title="method: 回溯"></a>method: 回溯</h3><blockquote><p><code>substr(pos, len)</code> 返回从<code>pos</code>开始的<code>len</code>个字符组成的字符串</p></blockquote><hr><blockquote><ol><li><code>str.erase(pos)</code> 删除从<code>pos</code>开始的所有元素</li><li><code>str.erase(pos, num)</code> 删除从<code>pos</code>开始的<code>num</code>个元素</li><li><code>st.erase(iterator)</code> 删除迭代器指向的元素</li></ol></blockquote><hr><blockquote><ol><li><code>str.insert(pos, string)</code> 在<code>pos</code>的位置插入一个字符串</li><li><code>str.insert(iterator, char)</code> 在迭代器指向的位置插入一个字符</li></ol></blockquote><hr><p>类似于分割回文串，有些不同点：<code>IP</code>有效性，固定分割4块，直接在字符串上操作</p><p><code>IP</code>地址有效性的判断：</p><ul><li>不能有前导0</li><li>不能有特殊符号</li><li>不能超过255</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span>string<span class="token operator">></span> ret<span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">isValid</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>start<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'0'</span> <span class="token operator">&amp;&amp;</span> start <span class="token operator">!=</span> end<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token comment">// 不是单独的0</span>    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> start<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> end<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token string">'0'</span> <span class="token operator">||</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token comment">// 不能是其他字符</span>        num <span class="token operator">=</span> num <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">></span> <span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment">// 不能超过255</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>string<span class="token operator">&amp;</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 插入3个点就可以结束了</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isValid</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> index<span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            ret<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> index<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> index <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isValid</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> index<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 在i+1的位置插入点</span>            <span class="token function">dfs</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 从i+2的位置继续遍历</span>            s<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 回溯删掉点</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token keyword">break</span><span class="token punctuation">;</span> <span class="token comment">// 如果这个点不行，后面也肯定不行</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">restoreIpAddresses</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">12</span><span class="token punctuation">)</span> <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>进入<code>for</code>循环是要对<code>index</code>操作，还是对<code>i</code>操作要分清楚</p></blockquote><ul><li>递归结束条件：如果已经插入<code>3</code>个分割点了，后面的子串自动成为第<code>4</code>个地址，如果有效，直接可以保存了</li></ul><p>因为只考虑<code>3</code>个分割点，所以不会在最末尾插入<code>.</code>，不然会出现<code>1.1.11.</code>，<br>所以判断条件是<code>i &lt; s.size() - 1</code><br>或者在有效性判断里边加上<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">if</span> <span class="token punctuation">(</span>start <span class="token operator">></span> end<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>此时 start <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span>，end <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><p><a href="https://kavinwkp.github.io/2021/06/24/LeetCode-131-%E5%88%86%E5%89%B2%E5%9B%9E%E6%96%87%E4%B8%B2/">分割回文串</a>里面是这个分割点不行，换到下一个分割点，所以用<code>continue</code><br>这里是如果这个分割点不行，再往后面肯定也不行，如<code>256</code>不行，再往后<code>2561</code>，<code>25610</code>肯定也不行，所以直接<code>break</code></p><p>因为在第<code>i</code>个位置分割，所以在<code>i+1</code>的位置插入分割点，后面的遍历就要从<code>i+2</code>的位置开始</p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
            <tag> 回溯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>94/144/145-二叉树的遍历</title>
      <link href="2021/06/24/LeetCode-94-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/"/>
      <url>2021/06/24/LeetCode-94-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-94-Binary-Tree-Inorder-Traversal"><a href="#LeetCode-94-Binary-Tree-Inorder-Traversal" class="headerlink" title="LeetCode 94. Binary Tree Inorder Traversal"></a>LeetCode 94. Binary Tree Inorder Traversal</h2><p><a href="https://leetcode.com/problems/binary-tree-inorder-traversal/">LeetCode-94</a></p><p>Given the <code>root</code> of a binary tree, return the <code>inorder traversal</code> of its nodes’ values.</p><h3 id="method"><a href="#method" class="headerlink" title="method"></a>method</h3><p>中序遍历：<strong>左-根-右</strong></p><ul><li>递归</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">inorder</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> cur<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> ret<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token function">inorder</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>left<span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>    ret<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">inorder</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>right<span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">inorderTraversal</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> ret<span class="token punctuation">;</span>    <span class="token function">inorder</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>迭代</li></ul><ol><li>一直往左子树深度遍历，期间把元素插入栈中，直到空<br>空的话说明到了无左子树的节点，开始弹出元素，同时查看是否有右节点</li><li>有右节点，返回1</li><li>无右节点，继续弹出元素</li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">inorderTraversal</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> ret<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    stack<span class="token operator">&lt;</span>TreeNode<span class="token operator">*</span><span class="token operator">></span> st<span class="token punctuation">;</span>    TreeNode<span class="token operator">*</span> cur <span class="token operator">=</span> root<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>cur <span class="token operator">||</span> <span class="token operator">!</span>st<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            st<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">;</span>            cur <span class="token operator">=</span> cur<span class="token operator">-></span>left<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// cur空，但栈里有元素，就要弹出</span>            cur <span class="token operator">=</span> st<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            st<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            ret<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            cur <span class="token operator">=</span> cur<span class="token operator">-></span>right<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="LeetCode-144-Binary-Tree-Preorder-Traversal"><a href="#LeetCode-144-Binary-Tree-Preorder-Traversal" class="headerlink" title="LeetCode 144. Binary Tree Preorder Traversal"></a>LeetCode 144. Binary Tree Preorder Traversal</h2><p><a href="https://leetcode.com/problems/binary-tree-preorder-traversal/">LeetCode-144</a></p><p>Given the <code>root</code> of a binary tree, return the <code>preorder traversal</code> of its nodes’ values.</p><h3 id="method-1"><a href="#method-1" class="headerlink" title="method"></a>method</h3><p>前序遍历：<strong>根-左-右</strong></p><ul><li>递归法</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">preorder</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> cur<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> ret<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    ret<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">preorder</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>left<span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">preorder</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>right<span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">preorderTraversal</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> ret<span class="token punctuation">;</span>    <span class="token function">preorder</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>迭代法</li></ul><p>先放右节点，再放左节点，待会取的时候就是先左再右</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">preorderTraversal</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> ret<span class="token punctuation">;</span>    stack<span class="token operator">&lt;</span>TreeNode<span class="token operator">*</span><span class="token operator">></span> st<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    st<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        TreeNode<span class="token operator">*</span> cur <span class="token operator">=</span> st<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        st<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ret<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token operator">-></span>right<span class="token punctuation">)</span> st<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token operator">-></span>left<span class="token punctuation">)</span> st<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="LeetCode-145-Binary-Tree-Postorder-Traversal"><a href="#LeetCode-145-Binary-Tree-Postorder-Traversal" class="headerlink" title="LeetCode 145. Binary Tree Postorder Traversal"></a>LeetCode 145. Binary Tree Postorder Traversal</h2><p><a href="https://leetcode.com/problems/binary-tree-postorder-traversal/">LeetCode-145</a></p><p>Given the <code>root</code> of a binary tree, return the <code>postorder traversal</code> of its nodes’ values.</p><h3 id="method-2"><a href="#method-2" class="headerlink" title="method"></a>method</h3><p>后序遍历：<strong>左-右-根</strong></p><ul><li>递归法</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">postorder</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> cur<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> ret<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cur <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token function">postorder</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>left<span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">postorder</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>right<span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>    ret<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">postorderTraversal</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> ret<span class="token punctuation">;</span>    <span class="token function">postOrder</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> ret<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>迭代法</li></ul><p>后序<strong>左右根</strong>，反过来就是<strong>根右左</strong>，与先序遍历差不多，最后反转就可以了</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">postorderTraversal</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> ret<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    stack<span class="token operator">&lt;</span>TreeNode<span class="token operator">*</span><span class="token operator">></span> st<span class="token punctuation">;</span>    st<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        TreeNode<span class="token operator">*</span> cur <span class="token operator">=</span> st<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        st<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ret<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token operator">-></span>left<span class="token punctuation">)</span> st<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token operator">-></span>right<span class="token punctuation">)</span> st<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">reverse</span><span class="token punctuation">(</span>ret<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ret<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二叉树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>131-分割回文串</title>
      <link href="2021/06/24/LeetCode-131-%E5%88%86%E5%89%B2%E5%9B%9E%E6%96%87%E4%B8%B2/"/>
      <url>2021/06/24/LeetCode-131-%E5%88%86%E5%89%B2%E5%9B%9E%E6%96%87%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-131-Palindrome-Partitioning"><a href="#LeetCode-131-Palindrome-Partitioning" class="headerlink" title="LeetCode 131. Palindrome Partitioning"></a>LeetCode 131. Palindrome Partitioning</h2><p><a href="https://leetcode.com/problems/palindrome-partitioning/">LeetCode-131</a></p><p>Given a string s, partition s such that every substring of the partition is a <code>palindrome</code>. Return all possible palindrome partitioning of s.</p><p>A <code>palindrome</code> string is a string that reads the same backward as forward.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> s <span class="token operator">=</span> <span class="token string">"aab"</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token string">"aa"</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h3 id="method-回溯"><a href="#method-回溯" class="headerlink" title="method: 回溯"></a>method: 回溯</h3><blockquote><p><code>string.substr(pos, number)</code> 截取从<code>pos</code>开始的<code>number</code>个字符</p></blockquote><p>枚举每一个分割点，如果分割出来的子串<code>string[index, i]</code>是回文，就继续递归，否则这个分割点不行，跳到下一个分割点</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>string<span class="token operator">>></span> ret<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span> path<span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>string<span class="token operator">&amp;</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>        j<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">traversal</span><span class="token punctuation">(</span>string<span class="token operator">&amp;</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ret<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> index<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isPalindrome</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> index<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// s[index,i]</span>            path<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> i <span class="token operator">-</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 左闭右闭</span>            <span class="token function">traversal</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            path<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>  <span class="token comment">// 如果不是回文，就跳到下一个分割点</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>string<span class="token operator">>></span> <span class="token function">partition</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">traversal</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 回溯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>39/40/216-组合总和</title>
      <link href="2021/06/23/LeetCode-39-%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C/"/>
      <url>2021/06/23/LeetCode-39-%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-39-Combination-Sum"><a href="#LeetCode-39-Combination-Sum" class="headerlink" title="LeetCode 39. Combination Sum"></a>LeetCode 39. Combination Sum</h2><p><a href="https://leetcode.com/problems/combination-sum/">LeetCode-39</a></p><p>Given an array of distinct integers candidates and a target integer target, return a list of all <strong>unique combinations</strong> of candidates where the chosen numbers <strong>sum to target</strong>. You may return the combinations in any order.</p><p>The same number may be chosen from candidates an <strong>unlimited number of times</strong>. Two combinations are <strong>unique</strong> if the frequency of at least one of the chosen numbers is different.</p><p>It is guaranteed that the number of unique combinations that sum up to target is less than 150 combinations for the given input.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> candidates <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token number">7</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h3 id="method-回溯"><a href="#method-回溯" class="headerlink" title="method: 回溯"></a>method: 回溯</h3><p>因为不限次数，所以下次还是可以从<code>i</code>开始取<br>加上<code>nums[i]</code>转换成<code>target-nums[i]</code>，可以减少一个参数，最后<code>target=0</code>就行<br><strong>剪枝</strong>：<code>target-nums[i]</code>必须大于<code>0</code>，小于<code>0</code>说明取的数的总和已经超过<code>target</code>了，元素又都是正数，所以没必要再取了</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> ret<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> path<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 减到等于0就可以了</span>        ret<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> index<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> target <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        path<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 可以从i再继续取</span>        path<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">combinationSum</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> target<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="LeetCode-40-Combination-Sum-II"><a href="#LeetCode-40-Combination-Sum-II" class="headerlink" title="LeetCode 40. Combination Sum II"></a>LeetCode 40. Combination Sum II</h2><p><a href="https://leetcode.com/problems/combination-sum-ii/">LeetCode-40</a></p><p>Given a collection of candidate numbers and a target number, find all unique combinations in candidates where the candidate numbers sum to target.</p><p>Each number in candidates may only be used <strong>once</strong> in the combination.</p><p>Note: The solution set must not contain <strong>duplicate combinations</strong>.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> candidates <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token number">8</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h3 id="method"><a href="#method" class="headerlink" title="method"></a>method</h3><p>与39题不同之处：</p><ul><li>只能使用一次，所以从<code>i + 1</code>开始取</li><li>数组有重复，但是组合不能重复</li></ul><p><code>[1, 1, 2]</code>不能出现<code>[1, 2], [1, 2]</code>，尽管是不同的<code>1</code></p><ul><li>先排序让相同的元素排在一起</li><li><code>index=0</code>的时候，如果<code>i=1 &amp;&amp; nums[i]==nums[i - 1]</code>，说明出现了重复</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> ret<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> path<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ret<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> index<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> target <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> index <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>   <span class="token comment">// 同一个树杈的去重</span>        path<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        path<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">combinationSum2</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> target<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="LeetCode-216-Combination-Sum-III"><a href="#LeetCode-216-Combination-Sum-III" class="headerlink" title="LeetCode 216. Combination Sum III"></a>LeetCode 216. Combination Sum III</h2><p><a href="https://leetcode.com/problems/combination-sum-iii/">LeetCode-216</a></p><p>Find all valid combinations of <code>k</code> numbers that <strong>sum</strong> up to <code>n</code> such that the following conditions are true:</p><ul><li>Only numbers 1 through 9 are used.</li><li>Each number is used <strong>at most once</strong>.</li></ul><p>Return a list of all possible valid combinations. The list must not contain the same combination twice, and the combinations may be returned in any order.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> k <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token number">7</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span>Explanation<span class="token operator">:</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">=</span> <span class="token number">7</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></p><h3 id="method-回溯-剪枝"><a href="#method-回溯-剪枝" class="headerlink" title="method: 回溯+剪枝"></a>method: 回溯+剪枝</h3><p><code>1-9</code>数组大小固定，选择大小<code>k</code>固定，且只能用一次</p><p><code>path</code>大小固定为<code>k</code></p><ul><li>终止条件<code>path.size() == k</code></li><li>剪枝<code>i &lt;= nums.size() - (k - path.size()) + 1</code>和<code>target &gt; 0</code></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> ret<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> path<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token comment">// 取了k个不管怎样都要返回</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>target <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> ret<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> index<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">9</span> <span class="token operator">-</span> <span class="token punctuation">(</span>k <span class="token operator">-</span> path<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> target <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        path<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> target <span class="token operator">-</span> i<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        path<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">combinationSum3</span><span class="token punctuation">(</span><span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> n<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/39/39.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 回溯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>77-组合</title>
      <link href="2021/06/23/LeetCode-77-%E7%BB%84%E5%90%88/"/>
      <url>2021/06/23/LeetCode-77-%E7%BB%84%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-77-Combinations"><a href="#LeetCode-77-Combinations" class="headerlink" title="LeetCode 77. Combinations"></a>LeetCode 77. Combinations</h2><p><a href="https://leetcode.com/problems/combinations/">LeetCode-77</a></p><p>Given two integers <code>n</code> and <code>k</code>, return <strong>all possible</strong> combinations of <code>k</code> numbers out of the range <code>[1, n]</code>.</p><p>You may return the answer in <strong>any order</strong>.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> n <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">2</span>Output<span class="token operator">:</span><span class="token punctuation">[</span>  <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h3 id="method-回溯"><a href="#method-回溯" class="headerlink" title="method: 回溯"></a>method: 回溯</h3><center><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/77/77.png#pic_center" width="100%" height="100%"></center><ul><li>不能重复取，所以下一个要<code>i+1</code></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> ret<span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> path<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token comment">// 取了k个，记录结果返回</span>        ret<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> index<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n <span class="token operator">-</span> <span class="token punctuation">(</span>k <span class="token operator">-</span> path<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        path<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> k<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        path<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">combine</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> k<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>剪枝</strong>：现在已经取了<code>path.size()</code>个，还需要<code>k-path.size()</code>个，但是总共只有<code>n</code>个，所以必须从小于等于<code>n-(k-path.size())+1</code>开始取，超过这个范围就取不了<code>k</code>个了，<code>+1</code>是因为下标从<code>1</code>开始，如果从<code>0</code>开始就不用了<br>比如<code>n=4,k=3</code>，现在取了<code>0</code>个，接下来的取数不能大于<code>4-(3-0)+1=2</code>，也就是只可以从<code>1,2</code>开始取，超过<code>2</code>就取不到<code>3</code>个数了</p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 回溯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>50-Pow</title>
      <link href="2021/06/23/LeetCode-50-Pow/"/>
      <url>2021/06/23/LeetCode-50-Pow/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-50-Pow"><a href="#LeetCode-50-Pow" class="headerlink" title="LeetCode 50. Pow"></a>LeetCode 50. Pow</h2><p><a href="https://leetcode.com/problems/powx-n/">LeetCode</a></p><p>Implement <code>pow(x, n)</code>, which calculates <code>x</code> raised to the power <code>n</code>.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> x <span class="token operator">=</span> <span class="token number">2.00000</span><span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token number">10</span>Output<span class="token operator">:</span> <span class="token number">1024.00000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br>Example 2:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> x <span class="token operator">=</span> <span class="token number">2.10000</span><span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token number">3</span>Output<span class="token operator">:</span> <span class="token number">9.26100</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br>Example 3:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> x <span class="token operator">=</span> <span class="token number">2.00000</span><span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span>Output<span class="token operator">:</span> <span class="token number">0.25000</span>Explanation<span class="token operator">:</span> <span class="token number">2</span><span class="token operator">^</span><span class="token operator">-</span><span class="token number">2</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">/</span><span class="token number">2</span><span class="token operator">^</span><span class="token number">2</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">/</span><span class="token number">4</span> <span class="token operator">=</span> <span class="token number">0.25</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></p><h3 id="method-递归"><a href="#method-递归" class="headerlink" title="method: 递归"></a>method: 递归</h3><p>在算<code>Pow(x, n/2)</code>的时候可以把结果记录下来，后面就不用再算了，因为两颗子树是完全一样的，只算一边就可以了<br>注意<code>n &lt; 0</code>的情况，要变成倒数</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">double</span> <span class="token function">myPow</span><span class="token punctuation">(</span><span class="token keyword">double</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1.0</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> tmp <span class="token operator">=</span> <span class="token function">myPow</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> tmp <span class="token operator">*</span> tmp<span class="token punctuation">;</span>   <span class="token comment">// 偶数直接相乘</span>    ele <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> tmp <span class="token operator">*</span> tmp <span class="token operator">*</span> x<span class="token punctuation">;</span>    <span class="token comment">// 奇数要再乘个x</span>    <span class="token keyword">return</span> tmp <span class="token operator">*</span> tmp <span class="token operator">/</span> x<span class="token punctuation">;</span>   <span class="token comment">// 小于0要乘以倒数</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间复杂度：$O(logn)$<br><code>n &lt; 0</code>应该是<code>tmp * tmp * (1/x)</code>，为了防止<code>tmp * tmp</code>溢出，把除法提到前面</p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 记忆化搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>18/454-四数之和</title>
      <link href="2021/06/22/LeetCode-18-%E5%9B%9B%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
      <url>2021/06/22/LeetCode-18-%E5%9B%9B%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-18-4Sum"><a href="#LeetCode-18-4Sum" class="headerlink" title="LeetCode 18. 4Sum"></a>LeetCode 18. 4Sum</h2><p><a href="https://leetcode.com/problems/4sum/">LeetCode-18</a></p><p>Given an array nums of n integers, return an array of all the unique quadruplets <code>[nums[a], nums[b], nums[c], nums[d]]</code> such that:</p><ul><li><code>0 &lt;= a, b, c, d &lt; n</code></li><li><code>a, b, c, and d are distinct.</code></li><li><code>nums[a] + nums[b] + nums[c] + nums[d] == target</code></li></ul><p>You may return the answer in any order.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token number">0</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h3 id="method-双指针"><a href="#method-双指针" class="headerlink" title="method: 双指针"></a>method: 双指针</h3><p>在三数之和的基础上再套一层循环，变成四个指针<code>i, j, l, r</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">fourSum</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> ret<span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">></span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> l <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> r <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> l<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">></span> target<span class="token punctuation">)</span> r<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    ret<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">&#123;</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> l<span class="token operator">++</span><span class="token punctuation">;</span>                    <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>r <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> r<span class="token operator">--</span><span class="token punctuation">;</span>                    l<span class="token operator">++</span><span class="token punctuation">;</span>                    r<span class="token operator">--</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="LeetCode-454-4Sum-II"><a href="#LeetCode-454-4Sum-II" class="headerlink" title="LeetCode 454. 4Sum II"></a>LeetCode 454. 4Sum II</h2><p><a href="https://leetcode.com/problems/4sum-ii/">LeetCode-454</a></p><p>Given four integer arrays <code>nums1</code>, <code>nums2</code>, <code>nums3</code>, and <code>nums4</code> all of length <code>n</code>, return the number of tuples <code>(i, j, k, l)</code> such that:</p><p><code>0 &lt;= i, j, k, l &lt; nnums1[i] + nums2[j] + nums3[k] + nums4[l] == 0</code></p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> nums1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token number">2</span>Explanation<span class="token operator">:</span>The two tuples are<span class="token operator">:</span><span class="token number">1.</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token number">2.</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0</span> <span class="token operator">=</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h3 id="method-哈希表"><a href="#method-哈希表" class="headerlink" title="method: 哈希表"></a>method: 哈希表</h3><p><strong>题意</strong>：从4个数组里各取一个数，加起来为0，不用去重<br>用哈希表存<code>A</code>和<code>B</code>之和的结果及其出现次数，看<code>C</code>和<code>D</code>之和有没有其相反数</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">fourSumCount</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> A<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> B<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> C<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> D<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> hash<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> a <span class="token operator">:</span> A<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> b <span class="token operator">:</span> B<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            hash<span class="token punctuation">[</span>a <span class="token operator">+</span> b<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>  <span class="token comment">// A+B和的可能</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> c <span class="token operator">:</span> C<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> d <span class="token operator">:</span> D<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            cnt <span class="token operator">+=</span> hash<span class="token punctuation">[</span><span class="token operator">-</span><span class="token punctuation">(</span>c <span class="token operator">+</span> d<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// C+D和的可能，互为相反数就可以</span>        <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> cnt<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 哈希表 </tag>
            
            <tag> 双指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>150-逆波兰表达式</title>
      <link href="2021/06/22/LeetCode-150-%E9%80%86%E6%B3%A2%E5%85%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
      <url>2021/06/22/LeetCode-150-%E9%80%86%E6%B3%A2%E5%85%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-150-Evaluate-Reverse-Polish-Notation"><a href="#LeetCode-150-Evaluate-Reverse-Polish-Notation" class="headerlink" title="LeetCode 150. Evaluate Reverse Polish Notation"></a>LeetCode 150. Evaluate Reverse Polish Notation</h2><p><a href="https://leetcode.com/problems/evaluate-reverse-polish-notation/">LeetCode-150</a></p><p>Evaluate the value of an arithmetic expression in Reverse Polish Notation.</p><p>Valid operators are <code>+, -, *, and /</code>. Each operand may be an integer or another expression.</p><p>Note that division between two integers should truncate toward zero.</p><p>It is guaranteed that the given RPN expression is always valid. That means the expression would always evaluate to a result, and there will not be any division by zero operation.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> tokens <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"2"</span><span class="token punctuation">,</span><span class="token string">"1"</span><span class="token punctuation">,</span><span class="token string">"+"</span><span class="token punctuation">,</span><span class="token string">"3"</span><span class="token punctuation">,</span><span class="token string">"*"</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token number">9</span>Explanation<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></p><h3 id="method-栈"><a href="#method-栈" class="headerlink" title="method: 栈"></a>method: 栈</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">stoi</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 将 string 转换为 int</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果是运算符，就将栈顶的两个元素弹出进行运算，再将结果入栈<br><strong>注意</strong>：减法和除法，第一个弹出的是减数（除数），第二个弹出的是被减数（被除数）</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">evalRPN</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span><span class="token operator">&amp;</span> tokens<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> st<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> s <span class="token operator">:</span> tokens<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token string">"+"</span> <span class="token operator">||</span> s <span class="token operator">==</span> <span class="token string">"-"</span> <span class="token operator">||</span> s <span class="token operator">==</span> <span class="token string">"*"</span> <span class="token operator">||</span> s <span class="token operator">==</span> <span class="token string">"/"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> num1 <span class="token operator">=</span> st<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            st<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> num2 <span class="token operator">=</span> st<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            st<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token string">"+"</span><span class="token punctuation">)</span> st<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>num2 <span class="token operator">+</span> num1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token string">"-"</span><span class="token punctuation">)</span> st<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>num2 <span class="token operator">-</span> num1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token string">"*"</span><span class="token punctuation">)</span> st<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>num2 <span class="token operator">*</span> num1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token string">"/"</span><span class="token punctuation">)</span> st<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>num2 <span class="token operator">/</span> num1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> st<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token function">stoi</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// stoi()将string转为int</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> st<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1047-删除字符串中的相邻重复项</title>
      <link href="2021/06/22/LeetCode-1047-%E5%88%A0%E9%99%A4%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E7%9B%B8%E9%82%BB%E9%87%8D%E5%A4%8D%E9%A1%B9/"/>
      <url>2021/06/22/LeetCode-1047-%E5%88%A0%E9%99%A4%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E7%9B%B8%E9%82%BB%E9%87%8D%E5%A4%8D%E9%A1%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-1047-Remove-All-Adjacent-Duplicates-In-String"><a href="#LeetCode-1047-Remove-All-Adjacent-Duplicates-In-String" class="headerlink" title="LeetCode 1047. Remove All Adjacent Duplicates In String"></a>LeetCode 1047. Remove All Adjacent Duplicates In String</h2><p><a href="https://leetcode.com/problems/remove-all-adjacent-duplicates-in-string/">LeetCode-1047</a></p><p>You are given a string s consisting of lowercase English letters. A <strong>duplicate removal</strong> consists of choosing two <strong>adjacent</strong> and <strong>equal</strong> letters and removing them.</p><p>We repeatedly make duplicate removals on s until we no longer can.</p><p>Return the final string after all such duplicate removals have been made. It can be proven that the answer is <strong>unique</strong>.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> s <span class="token operator">=</span> <span class="token string">"abbaca"</span>Output<span class="token operator">:</span> <span class="token string">"ca"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h3 id="method-栈"><a href="#method-栈" class="headerlink" title="method: 栈"></a>method: 栈</h3><p>题意：消掉相邻的重复字符，消掉之后又有重复相邻要继续消掉</p><p>直接用字符串当栈，如果当前元素和栈顶元素相同，就出栈</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">string <span class="token function">removeDuplicates</span><span class="token punctuation">(</span>string str<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    string ret<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> s <span class="token operator">:</span> str<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>ret<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> ret<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> s<span class="token punctuation">)</span> ret<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> ret<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>17-电话号码的字母组合</title>
      <link href="2021/06/22/LeetCode-17-%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E7%9A%84%E5%AD%97%E6%AF%8D%E7%BB%84%E5%90%88/"/>
      <url>2021/06/22/LeetCode-17-%E7%94%B5%E8%AF%9D%E5%8F%B7%E7%A0%81%E7%9A%84%E5%AD%97%E6%AF%8D%E7%BB%84%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-17-Letter-Combinations-of-a-Phone-Number"><a href="#LeetCode-17-Letter-Combinations-of-a-Phone-Number" class="headerlink" title="LeetCode 17. Letter Combinations of a Phone Number"></a>LeetCode 17. Letter Combinations of a Phone Number</h2><p><a href="https://leetcode.com/problems/letter-combinations-of-a-phone-number/">LeetCode-17</a></p><p>Given a string containing digits from 2-9 inclusive, return all possible letter combinations that the number could represent. Return the answer in <code>any order</code>.</p><p>A mapping of digit to letters (just like on the telephone buttons) is given below. Note that 1 does not map to any letters.</p><p><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/17/11.png" width="50%" height="50%"></p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> digits <span class="token operator">=</span> <span class="token string">"23"</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"ad"</span><span class="token punctuation">,</span><span class="token string">"ae"</span><span class="token punctuation">,</span><span class="token string">"af"</span><span class="token punctuation">,</span><span class="token string">"bd"</span><span class="token punctuation">,</span><span class="token string">"be"</span><span class="token punctuation">,</span><span class="token string">"bf"</span><span class="token punctuation">,</span><span class="token string">"cd"</span><span class="token punctuation">,</span><span class="token string">"ce"</span><span class="token punctuation">,</span><span class="token string">"cf"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h3 id="method-回溯"><a href="#method-回溯" class="headerlink" title="method: 回溯"></a>method: 回溯</h3><p>回溯三部曲：</p><ol><li>确定回溯函数参数<br>对于给定的数字进行遍历，抓出每个数字对应的字符串，所以参数是给定的数字字符串<code>digits</code>和遍历的下标<code>index</code></li></ol><p><strong>注意</strong>：是<code>index</code>在纵向遍历字符串<code>digits</code>，所以下一次递归的参数是<code>index + 1</code><br>而<code>i</code>是在横向遍历每个数字对应的字母，每次都从0开始，与上一次递归无关</p><ol><li><p>确定终止条件<br>当下标遍历完整个<code>digits</code>时返回，即<code>index == digits.size()</code>，或者<code>path.size() == digits.size()</code></p></li><li><p>确定单层循环逻辑<br>对于每个数字对应的字符串，如<code>index=0 -&gt; digits[0] -&gt; 2 -&gt; letterMap[2] -&gt; &quot;abc&quot;</code>，要再进行遍历表示<strong>取或者不取</strong>，如可以取<code>&#39;a&#39;</code>，或者取<code>&#39;b&#39;</code>，或者取<code>&#39;c&#39;</code></p></li></ol><center><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/17/111.png#pic_center" width="100%" height="100%"></center><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> string letterMap<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">""</span><span class="token punctuation">,</span>    <span class="token string">""</span><span class="token punctuation">,</span>    <span class="token string">"abc"</span><span class="token punctuation">,</span>    <span class="token string">"def"</span><span class="token punctuation">,</span>    <span class="token string">"ghi"</span><span class="token punctuation">,</span>    <span class="token string">"jkl"</span><span class="token punctuation">,</span>    <span class="token string">"mno"</span><span class="token punctuation">,</span>    <span class="token string">"pqrs"</span><span class="token punctuation">,</span>    <span class="token string">"tuv"</span><span class="token punctuation">,</span>    <span class="token string">"wxyz"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token comment">// 数字与字母对应关系</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span> res<span class="token punctuation">;</span>string path<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">traversal</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> digits<span class="token punctuation">,</span> <span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> digits<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> num <span class="token operator">=</span> digits<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token string">'0'</span><span class="token punctuation">;</span>   <span class="token comment">// 取出index对应的数字</span>    string letters <span class="token operator">=</span> letterMap<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 用数字拿到字母</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> letters<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        path<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>letters<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>digits<span class="token punctuation">,</span> index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 递归的是index+1</span>        path<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>vector<span class="token operator">&lt;</span>string<span class="token operator">></span> <span class="token function">letterCombinations</span><span class="token punctuation">(</span>string digits<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>digits<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token function">reaversal</span><span class="token punctuation">(</span>digits<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
            <tag> 回溯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>15-三数之和</title>
      <link href="2021/06/21/LeetCode-15-%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
      <url>2021/06/21/LeetCode-15-%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-15-3Sum"><a href="#LeetCode-15-3Sum" class="headerlink" title="LeetCode 15. 3Sum"></a>LeetCode 15. 3Sum</h2><p><a href="https://leetcode.com/problems/3sum/">LeetCode-15</a></p><p>Given an integer array nums, return all the triplets <code>[nums[i], nums[j], nums[k]]</code> such that <code>i != j, i != k, and j != k</code>, and <code>nums[i] + nums[j] + nums[k] == 0</code>.</p><p>Notice that the solution set must not contain duplicate triplets.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h2 id="题意解析"><a href="#题意解析" class="headerlink" title="题意解析"></a>题意解析</h2><p>找到三个数和为0，不能重复使用同一个元素，也不能有相同的结果</p><h2 id="method-双指针"><a href="#method-双指针" class="headerlink" title="method: 双指针"></a>method: 双指针</h2><p>其实有三个指针，<code>i, l, r</code>，<code>i</code>负责遍历数组，<code>l</code>到<code>r</code>维护区间<code>[i+1, end)</code><br><strong>注意去重</strong></p><p><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/15/15.png" alt></p><p>时间复杂度：$O(n^2)$</p><ul><li><p>剪枝：因为是从小到大排序，如果第一个<code>nums[i]</code>大于<code>0</code>，后面肯定都大于<code>0</code>，所以直接返回</p></li><li><p>去重：因为已经排好序了，如果元素相同，指针就一直往后或往前移</p></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">threeSum</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> ret<span class="token punctuation">;</span>    <span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 排序</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> ret<span class="token punctuation">;</span>    <span class="token comment">// 剪枝</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>  <span class="token comment">// i的去重</span>        <span class="token keyword">int</span> l <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> r <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> r<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> l<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                ret<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">&#123;</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> l<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>r <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> r<span class="token operator">--</span><span class="token punctuation">;</span>                l<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token comment">// 还要再移一格</span>                r<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 双指针 </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二阶常系数齐次线性微分方程</title>
      <link href="2021/06/20/Math-%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B-%E4%BA%8C%E9%98%B6%E5%B8%B8%E7%B3%BB%E6%95%B0%E9%BD%90%E6%AC%A1%E7%BA%BF%E6%80%A7%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B/"/>
      <url>2021/06/20/Math-%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B-%E4%BA%8C%E9%98%B6%E5%B8%B8%E7%B3%BB%E6%95%B0%E9%BD%90%E6%AC%A1%E7%BA%BF%E6%80%A7%E5%BE%AE%E5%88%86%E6%96%B9%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p><strong>二阶常系数齐次线性微分方程</strong>的形式为：</p><script type="math/tex; mode=display">a{y}^{\prime \prime}+b{y}^{\prime}+cy=0</script><p>由于是二阶线性微分方程，所以它有两个解，记为$y_1, y_2$<br>它的特征方程为：</p><script type="math/tex; mode=display">ar^2+br+c=0</script><p>写出微分方程的特征方程后即可以用<strong>求根公式</strong>求出特征方程的解：</p><script type="math/tex; mode=display">r_{1,2} = {-b \pm \sqrt{b^2-4ac}\over 2a}</script><p>以下分情况讨论：</p><ol><li><p>当$\Delta &gt; 0$时，$r_1,r_2$是两个不相等的实根</p><script type="math/tex; mode=display">r_{1} = {-b + \sqrt{\Delta}\over 2a}, r_{2} = {-b - \sqrt{\Delta}\over 2a}</script><p>微分方程的通解为：</p><script type="math/tex; mode=display">y = C_1e^{r_1x} + C_2e^{r_2x}</script></li><li><p>当$\Delta = 0$时，$r_1,r_2$是两个相等的实根</p><script type="math/tex; mode=display">r_{1} = r_{2} = {-b \over 2a}</script><p>微分方程的通解为：</p><script type="math/tex; mode=display">y = C_1e^{r_1x} + C_2xe^{r_2x}</script></li><li><p>当$\Delta &lt; 0$时，$r_1,r_2$是一对共轭复根</p><script type="math/tex; mode=display">r_{1} = \alpha + \beta i, r_{2} = \alpha - \beta i</script><p>其中</p><script type="math/tex; mode=display">\alpha = {-b \over 2a}, \beta = {\sqrt{-\Delta}\over 2a}</script><p>微分方程的通解为：</p><script type="math/tex; mode=display">y = e^{\alpha x}(C_1 cos\beta x + C_2 sin\beta x)</script></li></ol>]]></content>
      
      
      <categories>
          
          <category> 数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>202-快乐数</title>
      <link href="2021/06/20/LeetCode-202-%E5%BF%AB%E4%B9%90%E6%95%B0/"/>
      <url>2021/06/20/LeetCode-202-%E5%BF%AB%E4%B9%90%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-202-Happy-Number"><a href="#LeetCode-202-Happy-Number" class="headerlink" title="LeetCode 202. Happy Number"></a>LeetCode 202. Happy Number</h2><p><a href="https://leetcode.com/problems/happy-number/">LeetCode</a></p><p>Write an algorithm to determine if a number n is happy.</p><p>A <code>happy number</code> is a number defined by the following process:</p><ul><li>Starting with any positive integer, replace the number by the sum of the squares of its digits.</li><li>Repeat the process until the number equals 1, or <code>it loops endlessly in a cycle</code> which does not include 1.</li><li>Those numbers for which this process <code>ends in 1</code> are happy.</li></ul><p>Return true if n is a happy number, and false if not.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> n <span class="token operator">=</span> <span class="token number">19</span>Output<span class="token operator">:</span> <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br>Explanation:<br>$1^2 + 9^2 = 82$<br>$8^2 + 2^2 = 68$<br>$6^2 + 8^2 = 100$<br>$1^2 + 0^2 + 0^2 = 1$</p><p>Example 2:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> n <span class="token operator">=</span> <span class="token number">2</span>Output<span class="token operator">:</span> <span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h2 id="method-哈希表"><a href="#method-哈希表" class="headerlink" title="method: 哈希表"></a>method: 哈希表</h2><p>记录每次平方和结果，如果出现循环返回<code>false</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">squareSum</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        sum <span class="token operator">+=</span> <span class="token punctuation">(</span>x <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>x <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        x <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> sum<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> <span class="token function">isHappy</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    unordered_set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> hash<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        n <span class="token operator">=</span> <span class="token function">squareSum</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>hash<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">!=</span> hash<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> hash<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 哈希表 </tag>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>349-两个数组的交集</title>
      <link href="2021/06/20/LeetCode-349-%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E4%BA%A4%E9%9B%86/"/>
      <url>2021/06/20/LeetCode-349-%E4%B8%A4%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E4%BA%A4%E9%9B%86/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-349-Intersection-of-Two-Arrays"><a href="#LeetCode-349-Intersection-of-Two-Arrays" class="headerlink" title="LeetCode 349. Intersection of Two Arrays"></a>LeetCode 349. Intersection of Two Arrays</h2><p><a href="https://leetcode.com/problems/intersection-of-two-arrays/">LeetCode-349</a></p><p>Given two integer arrays nums1 and nums2, return an array of their intersection. Each element in the result must be <code>unique</code> and you may return the result in <code>any order</code>.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> nums1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br>Example 2:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> nums1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>Explanation<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span> is also accepted<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></p><h2 id="method-哈希表"><a href="#method-哈希表" class="headerlink" title="method: 哈希表"></a>method: 哈希表</h2><p>求两个数组的交集，重复的只算一个</p><p>哈希值置1和置0可以达到去重的目的，不管出现多少次，哈希值都是1</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">intersection</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums1<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> hash<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> ret<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> n <span class="token operator">:</span> nums1<span class="token punctuation">)</span> hash<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> n <span class="token operator">:</span> nums2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>hash<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            ret<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>            hash<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 哈希表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>242/383-有效的字母异位词</title>
      <link href="2021/06/20/LeetCode-242-%E6%9C%89%E6%95%88%E7%9A%84%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D/"/>
      <url>2021/06/20/LeetCode-242-%E6%9C%89%E6%95%88%E7%9A%84%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-242-Valid-Anagram"><a href="#LeetCode-242-Valid-Anagram" class="headerlink" title="LeetCode 242. Valid Anagram"></a>LeetCode 242. Valid Anagram</h2><p><a href="https://leetcode.com/problems/valid-anagram/">LeetCode-242</a></p><p>Given two strings <code>s</code> and <code>t</code>, return <strong>true</strong> if <code>t</code> is an anagram of <code>s</code>, and <strong>false</strong> otherwise.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> s <span class="token operator">=</span> <span class="token string">"anagram"</span><span class="token punctuation">,</span> t <span class="token operator">=</span> <span class="token string">"nagaram"</span>Output<span class="token operator">:</span> <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br>Example 2:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> s <span class="token operator">=</span> <span class="token string">"rat"</span><span class="token punctuation">,</span> t <span class="token operator">=</span> <span class="token string">"car"</span>Output<span class="token operator">:</span> <span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h3 id="method-哈希表"><a href="#method-哈希表" class="headerlink" title="method: 哈希表"></a>method: 哈希表</h3><ul><li>题意：就是看出现的字符数是不是一样的</li></ul><p>用大小为<code>26</code>的数组存储每个字母出现的次数</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">isAnagram</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> string t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> num1<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> num2<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> n <span class="token operator">:</span> s<span class="token punctuation">)</span> num1<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> n <span class="token operator">:</span> t<span class="token punctuation">)</span> num2<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">26</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>num1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> num2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="LeetCode-383-Ransom-Note"><a href="#LeetCode-383-Ransom-Note" class="headerlink" title="LeetCode 383. Ransom Note"></a>LeetCode 383. Ransom Note</h2><p><a href="https://leetcode.com/problems/ransom-note/">LeetCode-383</a></p><p>Given two stings <code>ransomNote</code> and <code>magazine</code>, return <strong>true</strong> if ransomNote can be <code>constructed from magazine</code> and <strong>false</strong> otherwise.</p><p>Each letter in magazine can only be used <strong>once</strong> in ransomNote.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> ransomNote <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">,</span> magazine <span class="token operator">=</span> <span class="token string">"b"</span>Output<span class="token operator">:</span> <span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br>Example 2:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> ransomNote <span class="token operator">=</span> <span class="token string">"aa"</span><span class="token punctuation">,</span> magazine <span class="token operator">=</span> <span class="token string">"ab"</span>Output<span class="token operator">:</span> <span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br>Example 3:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> ransomNote <span class="token operator">=</span> <span class="token string">"aa"</span><span class="token punctuation">,</span> magazine <span class="token operator">=</span> <span class="token string">"aab"</span>Output<span class="token operator">:</span> <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h3 id="method"><a href="#method" class="headerlink" title="method"></a>method</h3><ul><li>题意：看<code>magazine</code>的字符是不是比<code>ransomNote</code>的字符多</li></ul><p>同样用哈希表存字符出现次数，用一个就可以了</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">canConstruct</span><span class="token punctuation">(</span>string ransomNote<span class="token punctuation">,</span> string magazine<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> hash<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> n <span class="token operator">:</span> magazine<span class="token punctuation">)</span> hash<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> n <span class="token operator">:</span> ransomNote<span class="token punctuation">)</span> hash<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token string">'a'</span><span class="token punctuation">]</span><span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> n <span class="token operator">:</span> hash<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 哈希表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>58-翻转单词顺序</title>
      <link href="2021/06/19/%E5%89%91%E6%8C%87Offer-58-%E7%BF%BB%E8%BD%AC%E5%8D%95%E8%AF%8D%E9%A1%BA%E5%BA%8F/"/>
      <url>2021/06/19/%E5%89%91%E6%8C%87Offer-58-%E7%BF%BB%E8%BD%AC%E5%8D%95%E8%AF%8D%E9%A1%BA%E5%BA%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="剑指-Offer-58-I-翻转单词顺序"><a href="#剑指-Offer-58-I-翻转单词顺序" class="headerlink" title="剑指 Offer 58 - I. 翻转单词顺序"></a>剑指 Offer 58 - I. 翻转单词顺序</h2><p>输入一个英文句子，翻转句子中单词的顺序，但单词内字符的顺序不变。为简单起见，标点符号和普通字母一样处理。</p><p>示例 1：<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">输入<span class="token operator">:</span> <span class="token string">"the sky is blue"</span>输出<span class="token operator">:</span> <span class="token string">"blue is sky the"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br>示例 2：<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">输入<span class="token operator">:</span> <span class="token string">"  hello world!  "</span>输出<span class="token operator">:</span> <span class="token string">"world! hello"</span>解释<span class="token operator">:</span> 输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></p><h2 id="method-1"><a href="#method-1" class="headerlink" title="method 1"></a>method 1</h2><p>用双指针把单词找出来，按逆序重新添加到新的串中<br>时间复杂度：$O(n)$<br>空间复杂度：$O(n)$</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">string <span class="token function">reverseWords</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    string res<span class="token punctuation">;</span>    <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> l<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isspace</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> l<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            r <span class="token operator">=</span> l<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>r <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isspace</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> r<span class="token operator">++</span><span class="token punctuation">;</span>            res <span class="token operator">=</span> <span class="token string">' '</span> <span class="token operator">+</span> s<span class="token punctuation">.</span><span class="token function">substr</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> r <span class="token operator">-</span> l<span class="token punctuation">)</span> <span class="token operator">+</span> res<span class="token punctuation">;</span>            l <span class="token operator">=</span> r<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> res<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 删掉第一个空格</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="method-2-不使用额外空间"><a href="#method-2-不使用额外空间" class="headerlink" title="method 2: 不使用额外空间"></a>method 2: 不使用额外空间</h2><ol><li>删除字符串中多余的空格</li><li>反转整个字符串</li><li>反转每个单词，跟<code>method 1</code>一样，找到单词区间<code>[l, r-1]</code></li></ol><p>时间复杂度：$O(n)$<br>空间复杂度：$O(1)$</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">reverse</span><span class="token punctuation">(</span>string<span class="token operator">&amp;</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;</span> end<span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>start<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>end<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">removeExtraSpaces</span><span class="token punctuation">(</span>string<span class="token operator">&amp;</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> fast <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> slow <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>fast<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">)</span> fast<span class="token operator">++</span><span class="token punctuation">;</span>   <span class="token comment">// 前面的空格</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> fast <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>fast<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fast <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>fast <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>fast<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>fast<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>    <span class="token comment">// 跳过相连的空格</span>        <span class="token keyword">else</span> s<span class="token punctuation">[</span>slow<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>fast<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>slow <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>slow <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">)</span> s<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>slow <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> s<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>slow<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 末尾如果有空格，也要删掉</span><span class="token punctuation">&#125;</span>string <span class="token function">reverseWords</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">removeExtraSpaces</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">reverse</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">' '</span><span class="token punctuation">)</span> j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token function">reverse</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        i <span class="token operator">=</span> j<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="剑指-Offer-58-II-左旋转字符串"><a href="#剑指-Offer-58-II-左旋转字符串" class="headerlink" title="剑指 Offer 58 - II. 左旋转字符串"></a>剑指 Offer 58 - II. 左旋转字符串</h2><p>字符串的左旋转操作是把字符串前面的若干个字符转移到字符串的尾部。请定义一个函数实现字符串左旋转操作的功能。</p><p>示例 1：<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">输入<span class="token operator">:</span> s <span class="token operator">=</span> <span class="token string">"abcdefg"</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">2</span>输出<span class="token operator">:</span> <span class="token string">"cdefgab"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h2 id="method"><a href="#method" class="headerlink" title="method"></a>method</h2><ul><li>反转<code>[0, k)</code></li><li>反转<code>[k, end)</code></li><li>反转整个字符串</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">reverse</span><span class="token punctuation">(</span>string<span class="token operator">&amp;</span> s<span class="token punctuation">,</span> <span class="token keyword">int</span> start<span class="token punctuation">,</span> <span class="token keyword">int</span> end<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>start <span class="token operator">&lt;</span> end<span class="token punctuation">)</span> <span class="token function">swap</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>start<span class="token operator">++</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>end<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>string <span class="token function">reverseLeftWords</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">reverse</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">reverse</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> k<span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">reverse</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 剑指Offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>485-最大连续1的个数</title>
      <link href="2021/06/17/LeetCode-485-%E6%9C%80%E5%A4%A7%E8%BF%9E%E7%BB%AD1%E7%9A%84%E4%B8%AA%E6%95%B0/"/>
      <url>2021/06/17/LeetCode-485-%E6%9C%80%E5%A4%A7%E8%BF%9E%E7%BB%AD1%E7%9A%84%E4%B8%AA%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-485-Max-Consecutive-Ones"><a href="#LeetCode-485-Max-Consecutive-Ones" class="headerlink" title="LeetCode 485. Max Consecutive Ones"></a>LeetCode 485. Max Consecutive Ones</h2><p><a href="https://leetcode.com/problems/max-consecutive-ones/">LeetCode-485</a></p><p>Given a binary array nums, return the maximum number of <code>consecutive 1&#39;s</code> in the array.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h2 id="method"><a href="#method" class="headerlink" title="method"></a>method</h2><p>数组元素是1，<code>cnt</code>就加1，否则<code>cnt</code>置零<br><code>res</code>记录<code>cnt</code>的最大值</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">findMaxConsecutiveOnes</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cnt <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">?</span> cnt <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        res <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> cnt<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>7-整数反转</title>
      <link href="2021/06/17/LeetCode-7-%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/"/>
      <url>2021/06/17/LeetCode-7-%E6%95%B4%E6%95%B0%E5%8F%8D%E8%BD%AC/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-7-Reverse-Integer"><a href="#LeetCode-7-Reverse-Integer" class="headerlink" title="LeetCode 7. Reverse Integer"></a>LeetCode 7. Reverse Integer</h2><p><a href="https://leetcode.com/problems/reverse-integer/">LeetCode-7</a></p><p>Given a signed <strong>32-bit</strong> integer x, return x with its <strong>digits reversed</strong>. If reversing x causes the value to go outside the signed 32-bit integer range <code>[-2^31, 2^31 - 1]</code>, then return 0.</p><h3 id="method"><a href="#method" class="headerlink" title="method"></a>method</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">INT_MIN <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">4748</span><span class="token punctuation">,</span><span class="token number">3648</span>INT_MAX <span class="token operator">=</span>  <span class="token number">21</span><span class="token punctuation">,</span><span class="token number">4748</span><span class="token punctuation">,</span><span class="token number">3647</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>最大最小数都是十位数，如果一个9位数已经比<code>INT_MAX / 10 = 21,4748,364</code>还大了，那再加任何一位数都会溢出<br>虽然等于<code>INT_MAX / 10</code>也可能会溢出，比如<code>21,4748,3649</code>，但是注意原数是在整数范围内的，所以并不会出现这种情况</p><ul><li>要先判断再加数</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">reverse</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token punctuation">(</span>INT_MIN <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">||</span> num <span class="token operator">></span> <span class="token punctuation">(</span>INT_MAX <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        num <span class="token operator">=</span> num <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> x <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>        x <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> num<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模拟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>566-重塑矩阵</title>
      <link href="2021/06/17/LeetCode-566-%E9%87%8D%E5%A1%91%E7%9F%A9%E9%98%B5/"/>
      <url>2021/06/17/LeetCode-566-%E9%87%8D%E5%A1%91%E7%9F%A9%E9%98%B5/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-566-Reshape-the-Matrix"><a href="#LeetCode-566-Reshape-the-Matrix" class="headerlink" title="LeetCode 566. Reshape the Matrix"></a>LeetCode 566. Reshape the Matrix</h2><p><a href="https://leetcode.com/problems/reshape-the-matrix/">LeetCode-566</a></p><p>In MATLAB, there is a handy function called <code>reshape</code> which can reshape an <code>m x n</code> matrix into a new one with a different size <code>r x c</code> keeping its original data.</p><p>You are given an <code>m x n</code> matrix mat and two integers r and c representing the row number and column number of the wanted reshaped matrix.</p><p>The reshaped matrix should be filled with all the elements of the original matrix in the same row-traversing order as they were.</p><p>If the reshape operation with given parameters is possible and legal, output the new reshaped matrix; Otherwise, output the <code>original matrix</code>.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> mat <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> c <span class="token operator">=</span> <span class="token number">4</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h3 id="method"><a href="#method" class="headerlink" title="method"></a>method</h3><p>给出二维下标<code>[i,j]</code>计算二维数组拉长的<code>index</code>，公式为<br><code>index = i * m + j</code><br>其中，<code>m</code>是二维数组的列数，可以看出<code>i</code>是<code>index</code>除以<code>m</code>的商，<code>j</code>是余数<br>所以，用一维<code>index</code>从二维数组中取值<br><code>matrix[index / m][index % m]</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">matrixReshape</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> mat<span class="token punctuation">,</span> <span class="token keyword">int</span> r<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> m <span class="token operator">=</span> mat<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> n <span class="token operator">=</span> mat<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">*</span> c <span class="token operator">!=</span> m <span class="token operator">*</span> n<span class="token punctuation">)</span> <span class="token keyword">return</span> mat<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">res</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> idx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> r<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> c<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> mat<span class="token punctuation">[</span>idx <span class="token operator">/</span> n<span class="token punctuation">]</span><span class="token punctuation">[</span>idx <span class="token operator">%</span> n<span class="token punctuation">]</span><span class="token punctuation">;</span>            idx<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>696-计数二进制子串</title>
      <link href="2021/06/16/LeetCode-696-%E8%AE%A1%E6%95%B0%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AD%90%E4%B8%B2/"/>
      <url>2021/06/16/LeetCode-696-%E8%AE%A1%E6%95%B0%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AD%90%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-696-Count-Binary-Substrings"><a href="#LeetCode-696-Count-Binary-Substrings" class="headerlink" title="LeetCode 696. Count Binary Substrings"></a>LeetCode 696. Count Binary Substrings</h2><p><a href="https://leetcode.com/problems/count-binary-substrings/">LeetCode-696</a></p><p>Give a binary string <code>s</code>, return the number of non-empty substrings that have the <code>same number of 0&#39;s and 1&#39;s</code>, and all the <code>0&#39;s</code> and all the <code>1&#39;s</code> in these substrings are grouped consecutively.</p><p>Substrings that occur multiple times are counted the number of times they occur.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> s <span class="token operator">=</span> <span class="token string">"00110011"</span>Output<span class="token operator">:</span> <span class="token number">6</span>Explanation<span class="token operator">:</span> There are <span class="token number">6</span> substrings that have equal number of consecutive <span class="token number">1'</span>s <span class="token operator">and</span> <span class="token number">0'</span>s<span class="token operator">:</span> <span class="token string">"0011"</span><span class="token punctuation">,</span> <span class="token string">"01"</span><span class="token punctuation">,</span> <span class="token string">"1100"</span><span class="token punctuation">,</span> <span class="token string">"10"</span><span class="token punctuation">,</span> <span class="token string">"0011"</span><span class="token punctuation">,</span> <span class="token operator">and</span> <span class="token string">"01"</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></p><h3 id="method"><a href="#method" class="headerlink" title="method"></a>method</h3><p><code>preLen</code>记录之前出现的连续0或1的个数，<code>curLen</code>记录当前出现的1或0的个数</p><p>如果一直与前一个字符相同，<code>curLen</code>就一直加1<br>如果不同，就记录为<code>preLen</code>，<code>curLen</code>变为1<br>如果<code>preLen &gt;= curLen</code>，说明前面可以与后面对应，计数加1</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">countBinarySubstrings</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> preLen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> curLen <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> curLen<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            preLen <span class="token operator">=</span> curLen<span class="token punctuation">;</span>    <span class="token comment">// 记录这段有多少相同</span>            curLen <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>         <span class="token comment">// 不同就重新置1</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>preLen <span class="token operator">>=</span> curLen<span class="token punctuation">)</span> res<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>647-回文子串</title>
      <link href="2021/06/15/LeetCode-647-%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/"/>
      <url>2021/06/15/LeetCode-647-%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-647-Palindromic-Substrings"><a href="#LeetCode-647-Palindromic-Substrings" class="headerlink" title="LeetCode 647. Palindromic Substrings"></a>LeetCode 647. Palindromic Substrings</h2><p><a href="https://leetcode.com/problems/palindromic-substrings/">LeetCode-647</a></p><p>Given a string <code>s</code>, return the number of <strong>palindromic substrings</strong> in it.</p><p>A string is a palindrome when it <strong>reads the same backward as forward</strong>.</p><p>A substring is a <strong>contiguous sequence</strong> of characters within the string.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> s <span class="token operator">=</span> <span class="token string">"abcb"</span>Output<span class="token operator">:</span> <span class="token number">5</span>Explanation<span class="token operator">:</span> Three palindromic strings<span class="token operator">:</span> <span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"c"</span><span class="token punctuation">,</span> <span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token string">"bcb"</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></p><h2 id="method"><a href="#method" class="headerlink" title="method"></a>method</h2><p>中心是单个字符，会形成奇数回文，如<code>aba</code><br>中心是两个字符，会形成偶数回文，如<code>baab</code><br>在字符串中用两个指针从中心向两边扩展，如果相同就继续扩展，否则该中心结束</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">isValue</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 这里用while，如果是回文可以一直扩展下去</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cnt<span class="token operator">++</span><span class="token punctuation">;</span>        i<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token comment">// i往左扩展</span>        j<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token comment">// j往右扩展</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">countSubstrings</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">isValue</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> i<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 奇数个回文</span>        <span class="token function">isValue</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> i<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 偶数个回文</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> cnt<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
            <tag> 双指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>205-同构字符串</title>
      <link href="2021/06/14/LeetCode-205-%E5%90%8C%E6%9E%84%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>2021/06/14/LeetCode-205-%E5%90%8C%E6%9E%84%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-205-Isomorphic-Strings"><a href="#LeetCode-205-Isomorphic-Strings" class="headerlink" title="LeetCode 205. Isomorphic Strings"></a>LeetCode 205. Isomorphic Strings</h2><p><a href="https://leetcode.com/problems/isomorphic-strings/">LeetCode-205</a></p><p>Given two strings <code>s</code> and <code>t</code>, determine if they are <strong>isomorphic</strong>.</p><p>Two strings s and t are <strong>isomorphic</strong> if <code>the characters in s can be replaced to get t</code>.</p><p>All occurrences of a character must be replaced with another character while preserving the order of characters. No two characters may map to the same character, but a character may map to itself.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> s <span class="token operator">=</span> <span class="token string">"egg"</span><span class="token punctuation">,</span> t <span class="token operator">=</span> <span class="token string">"add"</span>Output<span class="token operator">:</span> <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h3 id="method"><a href="#method" class="headerlink" title="method"></a>method</h3><p>注意：数组要给个数，不然会随机初始化<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// 2147 3181 -976355383 都是随机的</span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 1 0 0 第一个元素有赋值，其他初始化为0 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><p>用一个长度为<code>256</code>的数组记录每个字符上一次出现的位置<br>如果两个字符上一次出现的位置相同，就更新为这一次的位置，继续<br>否则直接返回<code>false</code><br>因为数组初始化为<code>0</code>，所以下标的位置就从<code>1</code>开始，不然第一个元素的位置会赋值为<code>i=0</code>，就跟初始化一样了</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">isIsomorphic</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> string t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> preS<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// 给个第一个元素，其他初始化为0</span>    <span class="token keyword">int</span> preT<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>preS<span class="token punctuation">[</span><span class="token keyword">int</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">!=</span> preT<span class="token punctuation">[</span><span class="token keyword">int</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        preS<span class="token punctuation">[</span><span class="token keyword">int</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">// 更新出现位置</span>        preT<span class="token punctuation">[</span><span class="token keyword">int</span><span class="token punctuation">(</span>t<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">// 下标从1开始</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>409-最长回文串</title>
      <link href="2021/06/14/LeetCode-409-%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E4%B8%B2/"/>
      <url>2021/06/14/LeetCode-409-%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-409-Longest-Palindrome"><a href="#LeetCode-409-Longest-Palindrome" class="headerlink" title="LeetCode 409. Longest Palindrome"></a>LeetCode 409. Longest Palindrome</h2><p><a href="https://leetcode.com/problems/longest-palindrome/">LeetCode-409</a></p><p>Given a string str which consists of <code>lowercase or uppercase</code> letters, return the length of the <code>longest palindrome</code> that can be built with those letters.</p><p>Letters are case sensitive, for example, “Aa” is not considered a palindrome here.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> s <span class="token operator">=</span> <span class="token string">"abccccdd"</span>Output<span class="token operator">:</span> <span class="token number">7</span>Explanation<span class="token operator">:</span>One longest palindrome that can be built is <span class="token string">"dccaccd"</span><span class="token punctuation">,</span> whose length is <span class="token number">7.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></p><h3 id="method"><a href="#method" class="headerlink" title="method"></a>method</h3><p>题意：统计用所给字符能组成的最长回文串，区分大小写</p><p>统计每个字母出现的次数，因为区分大小写，所以直接用<code>256</code>长度的数组</p><p>因为奇数也可以用来组成回文，比如<code>aaa</code>，长度是<code>3</code>，但我们需要的数其中的偶数，所以<code>(3 / 2) * 2 = 2</code>，就是我们要的长度<br>如果是偶数经过运算还是一样的<br>如果有奇数，经过运算就会没掉一些，所以长度会比<code>str</code>短，就加个<code>1</code>，因为奇数可以放在回文的中间</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">longestPalindrome</span><span class="token punctuation">(</span>string str<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> nums<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// 一定要给个数，不然会随机初始化</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> s <span class="token operator">:</span> str<span class="token punctuation">)</span> nums<span class="token punctuation">[</span><span class="token keyword">int</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> n <span class="token operator">:</span> nums<span class="token punctuation">)</span>        sum <span class="token operator">+=</span> <span class="token punctuation">(</span>n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> sum <span class="token operator">&lt;</span> str<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> sum <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> sum<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>20-有效括号</title>
      <link href="2021/06/11/LeetCode-20-%E6%9C%89%E6%95%88%E6%8B%AC%E5%8F%B7/"/>
      <url>2021/06/11/LeetCode-20-%E6%9C%89%E6%95%88%E6%8B%AC%E5%8F%B7/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-20-Valid-Parentheses"><a href="#LeetCode-20-Valid-Parentheses" class="headerlink" title="LeetCode 20. Valid Parentheses"></a>LeetCode 20. Valid Parentheses</h2><p><a href="https://leetcode.com/problems/valid-parentheses/">LeetCode-20</a></p><p>Given a string s containing just the characters <code>&#39;(&#39;</code>, <code>&#39;)&#39;</code>, <code>&#39;&#123;&#39;</code>, <code>&#39;&#125;&#39;</code>, <code>&#39;[&#39; and &#39;]&#39;</code>, determine if the input string <code>is valid</code>.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> s <span class="token operator">=</span> <span class="token string">"()[]&#123;&#125;"</span>Output<span class="token operator">:</span> <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br>Example 2:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> s <span class="token operator">=</span> <span class="token string">"(]"</span>Output<span class="token operator">:</span> <span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h3 id="method-栈"><a href="#method-栈" class="headerlink" title="method: 栈"></a>method: 栈</h3><p>用栈存储左边的括号，看右边的括号能不能跟左边的对上，能对上就<code>pop()</code><br>最后返回<code>st.empty()</code>是因为</p><ul><li>如果栈是空的，说明前面都对上了，返回<code>true</code></li><li>如果栈非空，说明有左边的括号没能对上右边括号留了下来，返回<code>false</code></li></ul><p>三种情况只要有一种没对上就返回<code>false</code><br>最后看栈是不是空的，栈非空说明有没对上的，栈空才是都对上了</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">isValid</span><span class="token punctuation">(</span>string str<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    stack<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span> st<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> s <span class="token operator">:</span> str<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token string">'('</span> <span class="token operator">||</span> s <span class="token operator">==</span><span class="token string">'['</span> <span class="token operator">||</span> s <span class="token operator">==</span> <span class="token string">'&#123;'</span><span class="token punctuation">)</span> st<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>st<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token comment">// 出现右括号，但栈空，直接返回</span>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">bool</span> b1 <span class="token operator">=</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token string">')'</span> <span class="token operator">&amp;&amp;</span> st<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">'('</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 列出不行的情况</span>            <span class="token keyword">bool</span> b2 <span class="token operator">=</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token string">']'</span> <span class="token operator">&amp;&amp;</span> st<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">'['</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">bool</span> b3 <span class="token operator">=</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> <span class="token string">'&#125;'</span> <span class="token operator">&amp;&amp;</span> st<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token string">'&#123;'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>b1 <span class="token operator">||</span> b2 <span class="token operator">||</span> b3<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>   <span class="token comment">// 只要出现一种不行，就直接返回</span>            <span class="token keyword">else</span> st<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> st<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>61-旋转链表</title>
      <link href="2021/06/10/LeetCode-61-%E6%97%8B%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
      <url>2021/06/10/LeetCode-61-%E6%97%8B%E8%BD%AC%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-61-Rotate-List"><a href="#LeetCode-61-Rotate-List" class="headerlink" title="LeetCode 61. Rotate List"></a>LeetCode 61. Rotate List</h2><p><a href="https://leetcode.com/problems/rotate-list/">LeetCode-61</a></p><p>Given the head of a linked list, rotate the list to the right by <code>k</code> places.</p><p>Example 1:<br><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/61/rotate1.jpg" alt><br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> head <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">2</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h3 id="method"><a href="#method" class="headerlink" title="method"></a>method</h3><p>连接成环，然后从尾部走<code>len-k</code>步，下一个节点就是新的头结点，因为<code>k</code>可能比<code>len</code>大，所以要模以<code>len</code>，所以是<code>len-(k % len)</code></p><center><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/61/111.png#pic_center" width="100%" height="100%"></center><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">ListNode<span class="token operator">*</span> <span class="token function">rotateRight</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token operator">!</span>head <span class="token operator">||</span> <span class="token operator">!</span>head<span class="token operator">-></span>next<span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    ListNode <span class="token operator">*</span>cur <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>cur<span class="token operator">-></span>next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        len<span class="token operator">++</span><span class="token punctuation">;</span>        cur <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token punctuation">(</span>k <span class="token operator">%</span> len<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 计算要走几步</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> len<span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>    cur<span class="token operator">-></span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>   <span class="token comment">// 连接成环</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>count<span class="token operator">--</span><span class="token punctuation">)</span> cur <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">;</span>  <span class="token comment">// 移动len-k</span>    ListNode <span class="token operator">*</span>node <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">;</span>  <span class="token comment">// 新的头结点</span>    cur<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>    <span class="token comment">// 要断开</span>    <span class="token keyword">return</span> node<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>86-分隔链表</title>
      <link href="2021/06/10/LeetCode-86-%E5%88%86%E9%9A%94%E9%93%BE%E8%A1%A8/"/>
      <url>2021/06/10/LeetCode-86-%E5%88%86%E9%9A%94%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-86-Partition-List"><a href="#LeetCode-86-Partition-List" class="headerlink" title="LeetCode 86. Partition List"></a>LeetCode 86. Partition List</h2><p><a href="https://leetcode.com/problems/partition-list/">LeetCode-86</a></p><p>Given the head of a linked list and a value <code>x</code>, partition it such that all nodes less than <code>x</code> come before nodes greater than or equal to <code>x</code>.</p><p>You should <code>preserve the original relative order</code> of the nodes in each of the two partitions.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> head <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> x <span class="token operator">=</span> <span class="token number">3</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h3 id="method"><a href="#method" class="headerlink" title="method"></a>method</h3><p>题意：小于<code>x</code>的节点在前，大于等于<code>x</code>的节点在后</p><p>一个指针<code>head</code>负责遍历，另外两个指针<code>small</code>和<code>large</code>记录满足条件的节点</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">ListNode<span class="token operator">*</span> <span class="token function">partition</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>head <span class="token operator">||</span> <span class="token operator">!</span>head<span class="token operator">-></span>next<span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>    ListNode <span class="token operator">*</span>small <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ListNode <span class="token operator">*</span>large <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ListNode <span class="token operator">*</span>smallHead <span class="token operator">=</span> small<span class="token punctuation">;</span>    <span class="token comment">// 记录small头</span>    ListNode <span class="token operator">*</span>largeHead <span class="token operator">=</span> large<span class="token punctuation">;</span>    <span class="token comment">// 记录large头</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token operator">-></span>val <span class="token operator">&lt;</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            small<span class="token operator">-></span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>            small <span class="token operator">=</span> small<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            large<span class="token operator">-></span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>            large <span class="token operator">=</span> large<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        head <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    small<span class="token operator">-></span>next <span class="token operator">=</span> largeHead<span class="token operator">-></span>next<span class="token punctuation">;</span>  <span class="token comment">// small链接large</span>    large<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>          <span class="token comment">// 断开large</span>    <span class="token keyword">return</span> smallHead<span class="token operator">-></span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>225-用队列实现栈</title>
      <link href="2021/06/10/LeetCode-225-%E7%94%A8%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88/"/>
      <url>2021/06/10/LeetCode-225-%E7%94%A8%E9%98%9F%E5%88%97%E5%AE%9E%E7%8E%B0%E6%A0%88/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-225-Implement-Stack-using-Queues"><a href="#LeetCode-225-Implement-Stack-using-Queues" class="headerlink" title="LeetCode 225. Implement Stack using Queues"></a>LeetCode 225. Implement Stack using Queues</h2><p><a href="https://leetcode.com/problems/implement-stack-using-queues/">LeetCode-225</a></p><p>Implement a last in first out (LIFO) stack using only two queues. The implemented stack should support all the functions of a normal queue <code>(push, top, pop, and empty)</code>.</p><p>Implement the <code>MyStack</code> class:</p><p><code>void push(int x)</code> Pushes element x to the top of the stack.<br><code>int pop()</code> Removes the element on the top of the stack and returns it.<br><code>int top()</code> Returns the element on the top of the stack.<br><code>boolean empty()</code> Returns true if the stack is empty, false otherwise.</p><h3 id="method"><a href="#method" class="headerlink" title="method"></a>method</h3><p>往队里插入元素时，默认是在队尾插入的，所以要实现先入后出，就要先把之前的元素<strong>弹出再插入</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">MyStack</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">;</span>    <span class="token function">MyStack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> size <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 记录当前队里的元素数量</span>        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>size<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 前面的所有元素要先弹出再插入</span>            <span class="token keyword">int</span> tmp <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">bool</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈 </tag>
            
            <tag> 队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>232-用栈实现队列</title>
      <link href="2021/06/09/LeetCode-232-%E7%94%A8%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/"/>
      <url>2021/06/09/LeetCode-232-%E7%94%A8%E6%A0%88%E5%AE%9E%E7%8E%B0%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-232-Implement-Queue-using-Stacks"><a href="#LeetCode-232-Implement-Queue-using-Stacks" class="headerlink" title="LeetCode 232. Implement Queue using Stacks"></a>LeetCode 232. Implement Queue using Stacks</h2><p><a href="https://leetcode.com/problems/implement-queue-using-stacks/">LeetCode-232</a></p><p>Implement a first in first out (FIFO) queue using <code>only two stacks</code>. The implemented queue should support all the functions of a normal queue <code>(push, peek, pop, and empty)</code>.</p><p>Implement the MyQueue class:</p><p><code>void push(int x)</code> Pushes element x to the back of the queue.<br><code>int pop()</code> Removes the element from the front of the queue and returns it.<br><code>int peek()</code> Returns the element at the front of the queue.<br><code>boolean empty()</code> Returns true if the queue is empty, false otherwise.</p><h3 id="method"><a href="#method" class="headerlink" title="method"></a>method</h3><p>用两个栈模拟队列，需要<code>pop()</code>和<code>top()</code>的时候就把一个栈里面的输出来放到另一个栈里，在这过程中顺序就反了</p><p>注意：<br>如果<code>out</code>非空，那<code>top()</code>和<code>pop()</code>的操作都可以在<code>out</code>中实现，不需要用到<code>in</code>里面的元素，只有当<code>out</code>里面没元素了，才需要把<code>in</code>里的元素搞过来</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">MyQueue</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> in<span class="token punctuation">;</span>    stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> out<span class="token punctuation">;</span>    <span class="token function">MyQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">push</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        in<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">in2out</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> out<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        out<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">in2out</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> out<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">in2out</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>out<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// out是空才需要移动</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>in<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// 把in的所有元素都移到out</span>                <span class="token keyword">int</span> x <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                in<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                out<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">bool</span> <span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> in<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> out<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈 </tag>
            
            <tag> 队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>725-分块链表</title>
      <link href="2021/06/09/LeetCode-725-%E5%88%86%E5%9D%97%E9%93%BE%E8%A1%A8/"/>
      <url>2021/06/09/LeetCode-725-%E5%88%86%E5%9D%97%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-725-Split-Linked-List-in-Parts"><a href="#LeetCode-725-Split-Linked-List-in-Parts" class="headerlink" title="LeetCode 725. Split Linked List in Parts"></a>LeetCode 725. Split Linked List in Parts</h2><p><a href="https://leetcode.com/problems/split-linked-list-in-parts/">LeetCode-725</a></p><p>Given a (singly) linked list with head node root, write a function to split the linked list into <code>k consecutive linked list &quot;parts&quot;</code>.</p><p>The length of each part should be <code>as equal as possible</code>: no two parts should have a size <code>differing by more than 1</code>. This may lead to some parts being null.</p><p>The parts should be in order of occurrence in the input list, and parts occurring earlier should always have a size <code>greater than or equal parts occurring later</code>.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> root <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">3</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></p><h3 id="method"><a href="#method" class="headerlink" title="method"></a>method</h3><p><code>mod</code>余数要分配到前面的<code>num</code>每一个，也就是前面的每个<code>num</code>都要加1，直到余数减到0</p><p>注意：<code>k</code>会比链表长度大，多的就是空</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span>ListNode<span class="token operator">*</span><span class="token operator">></span> <span class="token function">splitListToParts</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// 求链表长度</span>    ListNode <span class="token operator">*</span>cur <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>cur<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        len<span class="token operator">++</span><span class="token punctuation">;</span>        cur <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> num <span class="token operator">=</span> len <span class="token operator">/</span> k<span class="token punctuation">;</span>  <span class="token comment">// 每块有多少个</span>    <span class="token keyword">int</span> mod <span class="token operator">=</span> len <span class="token operator">%</span> k<span class="token punctuation">;</span>  <span class="token comment">// 还剩多少个，要均匀分配</span>    vector<span class="token operator">&lt;</span>ListNode<span class="token operator">*</span><span class="token operator">></span> <span class="token function">res</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// k会比len大，所以只能这样初始化</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> head <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> k<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// k会比len大，但是head没有了就可以退出了</span>        res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> mod<span class="token operator">--</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> num <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> num<span class="token punctuation">;</span>    <span class="token comment">// 有余数就加1</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>count<span class="token punctuation">)</span> head <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span><span class="token comment">// 从第一个节点开始走，走count-1步</span>        ListNode <span class="token operator">*</span>tmp <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>        head<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>   <span class="token comment">// 断开之后块就分出来了</span>        head <span class="token operator">=</span> tmp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>83-删除链表重复元素</title>
      <link href="2021/06/07/LeetCode-83-%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0/"/>
      <url>2021/06/07/LeetCode-83-%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E9%87%8D%E5%A4%8D%E5%85%83%E7%B4%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-83-Remove-Duplicates-from-Sorted-List"><a href="#LeetCode-83-Remove-Duplicates-from-Sorted-List" class="headerlink" title="LeetCode 83. Remove Duplicates from Sorted List"></a>LeetCode 83. Remove Duplicates from Sorted List</h2><p><a href="https://leetcode.com/problems/remove-duplicates-from-sorted-list/">LeetCode</a></p><p>Given the head of a sorted linked list, delete all <strong>duplicates</strong> such that each element appears only once. Return the linked list sorted as well.</p><p>Example 1:<br><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/83/83.jpg" alt></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> head <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="method-1-递归"><a href="#method-1-递归" class="headerlink" title="method 1: 递归"></a>method 1: 递归</h3><p>如果当前节点和下一个节点重复了，就返回下一个节点<br>没有重复，就返回当前节点</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">ListNode<span class="token operator">*</span> <span class="token function">deleteDuplicates</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>head<span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>    head<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token function">deleteDuplicates</span><span class="token punctuation">(</span>head<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token operator">-></span>next <span class="token operator">&amp;&amp;</span> head<span class="token operator">-></span>val <span class="token operator">==</span> head<span class="token operator">-></span>next<span class="token operator">-></span>val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="method-2-迭代"><a href="#method-2-迭代" class="headerlink" title="method 2: 迭代"></a>method 2: 迭代</h3><p>如果当前节点的值与下一个节点的值相同，就删掉下一个节点<br>可能有多个值相同，所以要用循环<code>while</code></p><p>不管相同不相同，<code>cur</code>都要往后走，所以要再嵌套一层<code>while (cur)</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">ListNode<span class="token operator">*</span> <span class="token function">deleteDuplicates</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ListNode <span class="token operator">*</span>cur <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>cur<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>cur<span class="token operator">-></span>next <span class="token operator">&amp;&amp;</span> cur<span class="token operator">-></span>next<span class="token operator">-></span>val <span class="token operator">==</span> cur<span class="token operator">-></span>val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            cur<span class="token operator">-></span>next <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        cur <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 递归 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>160-相交链表</title>
      <link href="2021/06/07/LeetCode-160-%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8/"/>
      <url>2021/06/07/LeetCode-160-%E7%9B%B8%E4%BA%A4%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-160-Intersection-of-Two-Linked-Lists"><a href="#LeetCode-160-Intersection-of-Two-Linked-Lists" class="headerlink" title="LeetCode 160. Intersection of Two Linked Lists"></a>LeetCode 160. Intersection of Two Linked Lists</h2><p><a href="https://leetcode.com/problems/intersection-of-two-linked-lists/">LeetCode-160</a></p><p>Given the heads of two singly linked-lists headA and headB, return the node at which the <code>two lists intersect</code>. If the two linked lists have no intersection at all, return null.</p><p>It is guaranteed that there are <code>no cycles</code> anywhere in the entire linked structure.</p><p>Note that the linked lists must <code>retain their original structure</code> after the function returns.</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">A<span class="token operator">:</span>          a1 → a2                    ↘                      c1 → c2 → c3                    ↗B<span class="token operator">:</span>    b1 → b2 → b3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Example 1:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> intersectVal <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">,</span> listA <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> listB <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> skipA <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> skipB <span class="token operator">=</span> <span class="token number">3</span>Output<span class="token operator">:</span> Intersected at <span class="token string">'8'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="method-1-右端对齐"><a href="#method-1-右端对齐" class="headerlink" title="method 1: 右端对齐"></a>method 1: 右端对齐</h3><p>把短的链表往后移到跟长的链表右端对齐，长的链表的指针移动相同距离，然后两指针开始遍历</p><ul><li>指针相遇说明相交，返回当前指针</li><li>没相遇会一直找到末尾<code>nullptr</code>，退出循环，也返回当前指针<code>nullptr</code></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">ListNode <span class="token operator">*</span><span class="token function">getIntersectionNode</span><span class="token punctuation">(</span>ListNode <span class="token operator">*</span>headA<span class="token punctuation">,</span> ListNode <span class="token operator">*</span>headB<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> lenA <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> lenB <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    ListNode <span class="token operator">*</span>curA <span class="token operator">=</span> headA<span class="token punctuation">;</span>    ListNode <span class="token operator">*</span>curB <span class="token operator">=</span> headB<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>curA<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 得到A的长度</span>        lenA<span class="token operator">++</span><span class="token punctuation">;</span>        curA <span class="token operator">=</span> curA<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>curB<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 得到B的长度</span>        lenB<span class="token operator">++</span><span class="token punctuation">;</span>        curB <span class="token operator">=</span> curB<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    curA <span class="token operator">=</span> headA<span class="token punctuation">;</span>    curB <span class="token operator">=</span> headB<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>lenB <span class="token operator">></span> lenA<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 交换，让A是长的那条</span>        <span class="token function">swap</span><span class="token punctuation">(</span>lenA<span class="token punctuation">,</span> lenB<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">swap</span><span class="token punctuation">(</span>curA<span class="token punctuation">,</span> curB<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> lenA <span class="token operator">-</span> lenB<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>len<span class="token operator">--</span><span class="token punctuation">)</span> curA <span class="token operator">=</span> curA<span class="token operator">-></span>next<span class="token punctuation">;</span>  <span class="token comment">// A移动到与B对应的地方</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>curA<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>curA <span class="token operator">==</span> curB<span class="token punctuation">)</span> <span class="token keyword">return</span> curA<span class="token punctuation">;</span>        curA <span class="token operator">=</span> curA<span class="token operator">-></span>next<span class="token punctuation">;</span>        curB <span class="token operator">=</span> curB<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> curA<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="method-2-指针交叉遍历"><a href="#method-2-指针交叉遍历" class="headerlink" title="method 2: 指针交叉遍历"></a>method 2: 指针交叉遍历</h3><p>一个链表的指针遍历完了，就换到另一条链表继续遍历，两个指针相遇说明有相交，没相遇最后会都等于<code>nullptr</code>返回</p><center><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/160/160.png#pic_center" width="100%" height="100%"></center><p>情况一：两个链表相交</p><p>链表 <code>headA</code> 和 <code>headB</code> 的长度分别是 <code>m</code> 和 <code>n</code></p><ul><li>如果 <code>a = b</code>，则两个指针会同时到达两个链表相交的节点；</li><li>如果 <code>a != b</code>，在指针 <code>pA</code> 移动了 <code>a+c+b</code> 次、指针 <code>pB</code> 移动了 <code>b+c+a</code> 次之后，两个指针会<strong>同时到达两个链表相交的节点</strong>，该节点也是两个指针第一次同时指向的节点。</li></ul><p>情况二：两个链表不相交</p><ul><li>如果 <code>m = n</code>，则两个指针会同时到达两个链表的尾节点，然后同时变成空值 <code>null</code>，此时返回 <code>null</code>；</li><li>如果 <code>m != n</code>，则由于两个链表没有公共节点，两个指针也不会同时到达两个链表的尾节点，因此两个指针都会遍历完两个链表，在指针 <code>pA</code> 移动了 <code>m+n</code> 次、指针 <code>pB</code> 移动了 <code>n+m</code> 次之后，两个指针会同时变成空值 <code>null</code>，此时返回 <code>null</code>。</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">ListNode <span class="token operator">*</span><span class="token function">getIntersectionNode</span><span class="token punctuation">(</span>ListNode <span class="token operator">*</span>headA<span class="token punctuation">,</span> ListNode <span class="token operator">*</span>headB<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ListNode <span class="token operator">*</span>pA <span class="token operator">=</span> headA<span class="token punctuation">;</span>    ListNode <span class="token operator">*</span>pB <span class="token operator">=</span> headB<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>pA <span class="token operator">!=</span> pB<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pA<span class="token punctuation">)</span> pA <span class="token operator">=</span> pA<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token keyword">else</span> pA <span class="token operator">=</span> headB<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pB<span class="token punctuation">)</span> pB <span class="token operator">=</span> pB<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token keyword">else</span> pB <span class="token operator">=</span> headA<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> pA<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>时间复杂度：$O(m+n)$，其中 <code>m</code> 和 <code>n</code> 是分别是链表 <code>headA</code> 和 <code>headB</code> 的长度。两个指针同时遍历两个链表，每个指针遍历两个链表各一次。</li><li>空间复杂度：$O(1)$</li></ul>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>707-设计链表</title>
      <link href="2021/06/06/LeetCode-707-%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8/"/>
      <url>2021/06/06/LeetCode-707-%E8%AE%BE%E8%AE%A1%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-707-Design-Linked-List"><a href="#LeetCode-707-Design-Linked-List" class="headerlink" title="LeetCode 707. Design Linked List"></a>LeetCode 707. Design Linked List</h2><p><a href="https://leetcode.com/problems/design-linked-list/">LeetCode-707</a></p><p>Design your implementation of the linked list. You can choose to use a singly or doubly linked list.<br>A node in a singly linked list should have two attributes: val and next. val is the value of the current node, and next is a pointer/reference to the next node.<br>If you want to use the doubly linked list, you will need one more attribute prev to indicate the previous node in the linked list. Assume all nodes in the linked list are 0-indexed.</p><p>Implement the MyLinkedList class:</p><p><code>MyLinkedList()</code> Initializes the MyLinkedList object.</p><p><code>int get(int index)</code> Get the value of the indexth node in the `linked list. If the index is invalid, return <strong>-1</strong>.</p><p>void addAtHead(int val) `Add a node of value val before the first element of the linked list. After the insertion, the new node will be the first node of the linked list.</p><p><code>void addAtTail(int val)</code> Append a node of value val as the last element of the linked list.</p><p><code>void addAtIndex(int index, int val)</code> Add a node of value val before the indexth node in the linked list. If index equals the length of the linked list, the node will be appended to the end of the linked list. If index is greater than the length, the node will not be inserted.</p><p><code>void deleteAtIndex(int index)</code> Delete the indexth node in the linked list, if the index is valid.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token punctuation">[</span><span class="token string">"MyLinkedList"</span><span class="token punctuation">,</span> <span class="token string">"addAtHead"</span><span class="token punctuation">,</span> <span class="token string">"addAtTail"</span><span class="token punctuation">,</span> <span class="token string">"addAtIndex"</span><span class="token punctuation">,</span> <span class="token string">"get"</span><span class="token punctuation">,</span> <span class="token string">"deleteAtIndex"</span><span class="token punctuation">,</span> <span class="token string">"get"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>Output<span class="token punctuation">[</span>null<span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> null<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h3 id="method"><a href="#method" class="headerlink" title="method"></a>method</h3><p>取节点和删节点的<code>index</code>不能到最后一个元素的下一个<code>_size</code><br>增加节点可以到最后一个元素的下一个<code>_size</code></p><p>不管是索引、插入还是删除<code>index</code>的元素，指针都是从头结点开始，通过循环<code>while(index--)</code>走到<code>index-1</code>的位置，再对<code>next</code>进行操作</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">MyLinkedList</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    ListNode <span class="token operator">*</span>_dummy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> _size <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">MyLinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 等于也不行，因为是空</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">>=</span> _size <span class="token operator">||</span> index <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        ListNode <span class="token operator">*</span>cur <span class="token operator">=</span> _dummy<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>index<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            cur <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token comment">// index-1</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> cur<span class="token operator">-></span>next<span class="token operator">-></span>val<span class="token punctuation">;</span>  <span class="token comment">// 返回next的值</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">void</span> <span class="token function">addAtHead</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ListNode <span class="token operator">*</span>node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        node<span class="token operator">-></span>next <span class="token operator">=</span> _dummy<span class="token operator">-></span>next<span class="token punctuation">;</span>        _dummy<span class="token operator">-></span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>        _size<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">void</span> <span class="token function">addAtTail</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ListNode <span class="token operator">*</span>cur <span class="token operator">=</span> _dummy<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>cur<span class="token operator">-></span>next<span class="token punctuation">)</span> cur <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">;</span>  <span class="token comment">// 找到最后一个元素</span>        ListNode <span class="token operator">*</span>node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        cur<span class="token operator">-></span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>        _size<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">void</span> <span class="token function">addAtIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">></span> _size<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>  <span class="token comment">// 等于可以，因为要新建元素</span>        ListNode <span class="token operator">*</span>cur <span class="token operator">=</span> _dummy<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>index<span class="token operator">--</span><span class="token punctuation">)</span> cur <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token comment">// index-1</span>        ListNode <span class="token operator">*</span>node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        node<span class="token operator">-></span>next <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">;</span>          <span class="token comment">// 插入到next位置</span>        cur<span class="token operator">-></span>next <span class="token operator">=</span> node<span class="token punctuation">;</span>        _size<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">void</span> <span class="token function">deleteAtIndex</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 等于也不行，因为是空</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">>=</span> _size <span class="token operator">||</span> index <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>         ListNode <span class="token operator">*</span>cur <span class="token operator">=</span> _dummy<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>index<span class="token operator">--</span><span class="token punctuation">)</span> cur <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token comment">// index-1</span>        cur<span class="token operator">-></span>next <span class="token operator">=</span> cur<span class="token operator">-></span>next<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token comment">// 删除next</span>        _size<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>141/142-环形链表</title>
      <link href="2021/06/06/LeetCode-141-%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8/"/>
      <url>2021/06/06/LeetCode-141-%E7%8E%AF%E5%BD%A2%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-141-Linked-List-Cycle"><a href="#LeetCode-141-Linked-List-Cycle" class="headerlink" title="LeetCode 141. Linked List Cycle"></a>LeetCode 141. Linked List Cycle</h2><p><a href="https://leetcode.com/problems/linked-list-cycle/submissions/">LeetCode-141</a></p><p>Given head, the head of a linked list, determine if the linked list has a cycle in it.</p><p>There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail’s next pointer is connected to. Note that pos is not passed as a parameter.</p><p>Return <code>true</code> if there is a <code>cycle</code> in the linked list. Otherwise, return false.</p><p>Example 1:<br><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/141/142.png" alt><br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> head <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> pos <span class="token operator">=</span> <span class="token number">1</span>Output<span class="token operator">:</span> <span class="token boolean">true</span>Explanation<span class="token operator">:</span> There is a cycle in the linked list<span class="token punctuation">,</span> where the tail connects to the <span class="token number">1</span>st <span class="token function">node</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">-</span>indexed<span class="token punctuation">)</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></p><h3 id="method-快慢指针"><a href="#method-快慢指针" class="headerlink" title="method: 快慢指针"></a>method: 快慢指针</h3><p>快指针一次走两格，慢指针一次走一格，如果有环，两个指针肯定会相遇</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">hasCycle</span><span class="token punctuation">(</span>ListNode <span class="token operator">*</span>head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ListNode <span class="token operator">*</span>fast <span class="token operator">=</span> head<span class="token punctuation">;</span>    ListNode <span class="token operator">*</span>slow <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">&amp;&amp;</span> fast<span class="token operator">-></span>next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        fast <span class="token operator">=</span> fast<span class="token operator">-></span>next<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token comment">// 先走</span>        slow <span class="token operator">=</span> slow<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>fast <span class="token operator">==</span> slow<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token comment">// 再判断</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="LeetCode-142-Linked-List-Cycle-II"><a href="#LeetCode-142-Linked-List-Cycle-II" class="headerlink" title="LeetCode 142. Linked List Cycle II"></a>LeetCode 142. Linked List Cycle II</h2><p><a href="https://leetcode.com/problems/linked-list-cycle-ii/">LeetCode-142</a></p><p>Given a linked list, return the <strong>node where the cycle begins</strong>. If there is no cycle, return null.</p><p>There is a cycle in a linked list if there is some node in the list that can be reached again by continuously following the next pointer. Internally, pos is used to denote the index of the node that tail’s next pointer is connected to. Note that pos is not passed as a parameter.</p><p>Example 1:<br><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/141/142.png" alt><br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> head <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> pos <span class="token operator">=</span> <span class="token number">1</span>Output<span class="token operator">:</span> tail connects to node index <span class="token number">1</span>Explanation<span class="token operator">:</span> There is a cycle in the linked list<span class="token punctuation">,</span> where tail connects to the second node<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></p><h3 id="method-快慢指针-1"><a href="#method-快慢指针-1" class="headerlink" title="method: 快慢指针"></a>method: 快慢指针</h3><p>一个指针从快慢指针相遇地方开始遍历，一个从头开始遍历，相遇的节点就是环形的入口</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">ListNode <span class="token operator">*</span><span class="token function">detectCycle</span><span class="token punctuation">(</span>ListNode <span class="token operator">*</span>head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ListNode <span class="token operator">*</span>fast <span class="token operator">=</span> head<span class="token punctuation">;</span>    ListNode <span class="token operator">*</span>slow <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">&amp;&amp;</span> fast<span class="token operator">-></span>next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        fast <span class="token operator">=</span> fast<span class="token operator">-></span>next<span class="token operator">-></span>next<span class="token punctuation">;</span>        slow <span class="token operator">=</span> slow<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>slow <span class="token operator">==</span> fast<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 一个相遇节点开始走</span>            slow <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token comment">// 另一个从头开始走</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>slow <span class="token operator">!=</span> fast<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                slow <span class="token operator">=</span> slow<span class="token operator">-></span>next<span class="token punctuation">;</span>                fast <span class="token operator">=</span> fast<span class="token operator">-></span>next<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> fast<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 双指针 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>88-合并两个有序数组</title>
      <link href="2021/06/06/LeetCode-88-%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/"/>
      <url>2021/06/06/LeetCode-88-%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-88-Merge-Sorted-Array"><a href="#LeetCode-88-Merge-Sorted-Array" class="headerlink" title="LeetCode 88. Merge Sorted Array"></a>LeetCode 88. Merge Sorted Array</h2><p><a href="https://leetcode.com/problems/merge-sorted-array/">LeetCode-88</a><br>You are given two integer arrays <code>nums1</code> and <code>nums2</code>, sorted in <code>non-decreasing order</code>, and two integers <code>m</code> and <code>n</code>, representing the number of elements in <code>nums1</code> and <code>nums2</code> respectively.</p><p>Merge <code>nums1</code> and <code>nums2</code> into a single array sorted in <code>non-decreasing order</code>.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> nums1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> m <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span> nums2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token number">3</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h3 id="method-归并排序"><a href="#method-归并排序" class="headerlink" title="method: 归并排序"></a>method: 归并排序</h3><p><code>p1</code>指向数组1的末尾，<code>p2</code>指向数组2的末尾，<code>cnt</code>指向合并后数组的末尾</p><ul><li><code>nums1</code>用完了，用<code>nums2</code></li><li><code>nums2</code>用完了，用<code>nums1</code></li><li>都还有，看那个大就用哪个</li></ul><p>就不用完了之后再判断哪个还有了</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">merge</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums1<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums2<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> p1 <span class="token operator">=</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> p2 <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> cnt <span class="token operator">=</span> m <span class="token operator">+</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>cnt <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p1 <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> nums1<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span> <span class="token operator">=</span> nums2<span class="token punctuation">[</span>p2<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>p2 <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> nums1<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span> <span class="token operator">=</span> nums1<span class="token punctuation">[</span>p1<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums1<span class="token punctuation">[</span>p1<span class="token punctuation">]</span> <span class="token operator">></span> nums2<span class="token punctuation">[</span>p2<span class="token punctuation">]</span><span class="token punctuation">)</span> nums1<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span> <span class="token operator">=</span> nums1<span class="token punctuation">[</span>p1<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> nums1<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span> <span class="token operator">=</span> nums2<span class="token punctuation">[</span>p2<span class="token operator">--</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        cnt<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>125/680-验证回文串</title>
      <link href="2021/06/06/LeetCode-125-%E9%AA%8C%E8%AF%81%E5%9B%9E%E6%96%87%E4%B8%B2/"/>
      <url>2021/06/06/LeetCode-125-%E9%AA%8C%E8%AF%81%E5%9B%9E%E6%96%87%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-125-Valid-Palindrome"><a href="#LeetCode-125-Valid-Palindrome" class="headerlink" title="LeetCode 125. Valid Palindrome"></a>LeetCode 125. Valid Palindrome</h2><p><a href="https://leetcode.com/problems/valid-palindrome/">LeetCode-125</a></p><p>Given a string s, determine if it is a <strong>palindrome</strong>, considering only <strong>alphanumeric</strong> characters and ignoring cases.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> s <span class="token operator">=</span> <span class="token string">"A man, a plan, a canal: Panama"</span>Output<span class="token operator">:</span> <span class="token boolean">true</span>Explanation<span class="token operator">:</span> <span class="token string">"amanaplanacanalpanama"</span> is a palindrome<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></p><h3 id="method-双指针"><a href="#method-双指针" class="headerlink" title="method: 双指针"></a>method: 双指针</h3><p><code>isalnum()</code>判断字符是不是字母或数字<br><code>isalpha()</code>判断是不是字母<br><code>isdigit()</code>判断是不是数字<br><code>isspace()</code>判断是不是空格<br><code>tolower()</code>转化为小写字母<br><code>toupper()</code>转化为大写字母</p><p>分别从两边找符合条件的字母或数字</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 判断是不是字母或数字，可以用isalnum()代替</span><span class="token keyword">bool</span> <span class="token function">isValue</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isdigit</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">isalpha</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isValue</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isValue</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> j<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">tolower</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">tolower</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token operator">++</span>i<span class="token punctuation">;</span>        <span class="token operator">--</span>j<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="LeetCode-680-Valid-Palindrome-II"><a href="#LeetCode-680-Valid-Palindrome-II" class="headerlink" title="LeetCode 680. Valid Palindrome II"></a>LeetCode 680. Valid Palindrome II</h2><p><a href="https://leetcode.com/problems/valid-palindrome-ii/">LeetCode-680</a></p><p>Given a string s, return true if the s can be palindrome after deleting <strong>at most one character</strong> from it.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> s <span class="token operator">=</span> <span class="token string">"abca"</span>Output<span class="token operator">:</span> <span class="token boolean">true</span>Explanation<span class="token operator">:</span> You could <span class="token keyword">delete</span> the character <span class="token string">'c'</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></p><h2 id="method-双指针-1"><a href="#method-双指针-1" class="headerlink" title="method: 双指针"></a>method: 双指针</h2><p>遇到不相等的地方，就考虑删掉一个的情况，如果删掉还不行，那就不行了</p><p>可以删掉<code>i</code>后面的，或者<code>j</code>前面的</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>string s<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>        j<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> <span class="token function">validPalindrome</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">,</span> <span class="token operator">--</span>j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 删掉i后面的或j前面的</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
            <tag> 双指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>54/59-螺旋矩阵</title>
      <link href="2021/06/05/LeetCode-54-%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5/"/>
      <url>2021/06/05/LeetCode-54-%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-54-Spiral-Matrix"><a href="#LeetCode-54-Spiral-Matrix" class="headerlink" title="LeetCode 54. Spiral Matrix"></a>LeetCode 54. Spiral Matrix</h2><p><a href="https://leetcode.com/problems/spiral-matrix/">LeetCode-54</a></p><p>Given an <code>m x n</code> matrix, return all elements of the matrix in spiral order.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> matrix <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h3 id="method"><a href="#method" class="headerlink" title="method"></a>method</h3><p>先一圈一圈输出，注意区间<strong>左闭右开</strong>，最后</p><ul><li>没有元素剩余，直接返回</li><li>剩一个，直接赋值</li><li>剩一行或者一列，循环赋值</li></ul><p><code>(i, j)</code>都是从<code>(sx, sy)</code>开始的，<code>i--</code>和<code>j--</code>的时候不能小于<code>(sx, sy)</code><br>最后<code>(n1, m1)</code>会有6种情况<code>(0, 0), (n1, 0), (0, m1)</code>这三种不用管<br><code>(1, 1), (n1, 1), (1, m1)</code>这三种要继续赋值</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">spiralOrder</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> matrix<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> matrix<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> m <span class="token operator">=</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">res</span><span class="token punctuation">(</span>n <span class="token operator">*</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n1 <span class="token operator">=</span> n<span class="token punctuation">,</span> m1 <span class="token operator">=</span> m<span class="token punctuation">;</span>     <span class="token comment">// 用来判断还剩几行几列</span>    <span class="token keyword">int</span> sx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> sy <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>     <span class="token comment">// 每圈开始的位置</span>    <span class="token keyword">int</span> offset <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>         <span class="token comment">// 完成一圈就加2</span>    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token comment">// res的指针</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>n1 <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> m1 <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        i <span class="token operator">=</span> sx<span class="token punctuation">,</span> j <span class="token operator">=</span> sy<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> sy <span class="token operator">+</span> m <span class="token operator">-</span> offset<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> res<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sx <span class="token operator">+</span> n <span class="token operator">-</span> offset<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> res<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> j <span class="token operator">></span> sy<span class="token punctuation">;</span> j<span class="token operator">--</span><span class="token punctuation">)</span> res<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">></span> sx<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> res<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        sx<span class="token operator">++</span><span class="token punctuation">,</span> sy<span class="token operator">++</span><span class="token punctuation">;</span>        offset <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>        n1 <span class="token operator">-=</span> <span class="token number">2</span><span class="token punctuation">;</span>        m1 <span class="token operator">-=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token comment">// 完成一圈就减2</span>    <span class="token punctuation">&#125;</span>    i <span class="token operator">=</span> sx<span class="token punctuation">,</span> j <span class="token operator">=</span> sy<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n1 <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> m1 <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> res<span class="token punctuation">[</span>cnt<span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>sx<span class="token punctuation">]</span><span class="token punctuation">[</span>sy<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>n1 <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> m1 <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// 剩一行，直接用m1就不用offset</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> sy <span class="token operator">+</span> m1<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> res<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>n1 <span class="token operator">></span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> m1 <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// 剩一列</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sx <span class="token operator">+</span> n1<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> res<span class="token punctuation">[</span>cnt<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="LeetCode-59-Spiral-Matrix-II"><a href="#LeetCode-59-Spiral-Matrix-II" class="headerlink" title="LeetCode 59. Spiral Matrix II"></a>LeetCode 59. Spiral Matrix II</h2><p><a href="https://leetcode.com/problems/spiral-matrix-ii/">LeetCode-59</a></p><p>Given a positive integer n, generate an <code>n x n</code> matrix filled with elements from <code>1 to n^2</code> in spiral order.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> n <span class="token operator">=</span> <span class="token number">3</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h3 id="method-模拟"><a href="#method-模拟" class="headerlink" title="method: 模拟"></a>method: 模拟</h3><p>一圈一圈地往里填数，每行每列都是固定的<strong>左闭右开</strong>区间</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">generateMatrix</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> <span class="token function">res</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sx <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> sy <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 每圈的起始点</span>    <span class="token keyword">int</span> num <span class="token operator">=</span> n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token comment">// 总共需要填几圈</span>    <span class="token keyword">int</span> offset <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>     <span class="token comment">// 往里一层要减去的固定长度</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>num<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> sx<span class="token punctuation">;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> sy<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> sy <span class="token operator">+</span> n <span class="token operator">-</span> offset<span class="token punctuation">;</span> <span class="token operator">++</span>j<span class="token punctuation">)</span>    <span class="token comment">// 上行</span>            res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> sx <span class="token operator">+</span> n <span class="token operator">-</span> offset<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token comment">// 右列</span>            res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> j <span class="token operator">></span> sy<span class="token punctuation">;</span> <span class="token operator">--</span>j<span class="token punctuation">)</span>     <span class="token comment">// 下行</span>            res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">></span> sx<span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span>     <span class="token comment">// 左列</span>            res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> count<span class="token operator">++</span><span class="token punctuation">;</span>        sx<span class="token operator">++</span><span class="token punctuation">;</span>        sy<span class="token operator">++</span><span class="token punctuation">;</span>        offset <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> res<span class="token punctuation">[</span>sx<span class="token punctuation">]</span><span class="token punctuation">[</span>sy<span class="token punctuation">]</span> <span class="token operator">=</span> count<span class="token punctuation">;</span> <span class="token comment">// 奇数还有一个</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模拟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>209-长度最小的子数组</title>
      <link href="2021/06/05/LeetCode-209-%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84/"/>
      <url>2021/06/05/LeetCode-209-%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-209-Minimum-Size-Subarray-Sum"><a href="#LeetCode-209-Minimum-Size-Subarray-Sum" class="headerlink" title="LeetCode 209. Minimum Size Subarray Sum"></a>LeetCode 209. Minimum Size Subarray Sum</h2><p><a href="https://leetcode.com/problems/minimum-size-subarray-sum/">LeetCode-209</a></p><p>Given an array of positive integers nums and a positive integer target, return the minimal length of a contiguous subarray <code>[numsl, numsl+1, ..., numsr-1, numsr]</code> of which the sum is greater than or equal to target. If there is no such subarray, return <strong>0</strong> instead.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> target <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">,</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token number">2</span>Explanation<span class="token operator">:</span> The subarray <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span> has the minimal length under the problem constraint<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br>Example 2:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> target <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h3 id="method-滑动窗口"><a href="#method-滑动窗口" class="headerlink" title="method: 滑动窗口"></a>method: 滑动窗口</h3><p><code>sum</code>是区间<code>[i, j]</code>的和</p><ul><li>如果<code>sum</code>小于<code>target</code>，区间就扩大，即<code>j++</code></li><li>如果<code>sum</code>大于<code>target</code>，区间就缩小，即<code>i++</code></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">minSubArrayLen</span><span class="token punctuation">(</span><span class="token keyword">int</span> target<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> INT_MAX<span class="token punctuation">;</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        sum <span class="token operator">+=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 就硬加</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>sum <span class="token operator">>=</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token comment">// 大于等于target就记录结果</span>            res <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> j <span class="token operator">-</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 左闭右闭区间</span>            sum <span class="token operator">-=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token comment">// i移动，区间缩小</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res <span class="token operator">==</span> INT_MAX <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间复杂度：$O(n)$</p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 双指针 </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>977-有序数组的平方</title>
      <link href="2021/06/05/LeetCode-977-%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E5%B9%B3%E6%96%B9/"/>
      <url>2021/06/05/LeetCode-977-%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E5%B9%B3%E6%96%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-977-Squares-of-a-Sorted-Array"><a href="#LeetCode-977-Squares-of-a-Sorted-Array" class="headerlink" title="LeetCode 977. Squares of a Sorted Array"></a>LeetCode 977. Squares of a Sorted Array</h2><p><a href="https://leetcode.com/problems/squares-of-a-sorted-array/">LeetCode-977</a></p><p>Given an integer array nums sorted in <code>non-decreasing order</code>, return an array of the <code>squares</code> of each number sorted in <code>non-decreasing order</code>.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">]</span>Explanation<span class="token operator">:</span> After squaring<span class="token punctuation">,</span> the array becomes <span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">.</span>After sorting<span class="token punctuation">,</span> it becomes <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></p><h3 id="method-双指针"><a href="#method-双指针" class="headerlink" title="method: 双指针"></a>method: 双指针</h3><p>因为一个区间的平方，最大值肯定是在两边，所以用双指针从两边向中间遍历</p><p>结果数组<font color="LightSeaGreen">从后往前</font>插值</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">sortedSquares</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">res</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> cnt <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> j <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> j<span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">*</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            res<span class="token punctuation">[</span>cnt<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">*</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            res<span class="token punctuation">[</span>cnt<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">*</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            j<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间复杂度：$O(n)$<br>如果算完平方后再排序，时间复杂度是$O(n + nlogn)$</p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 双指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>328-奇偶链表</title>
      <link href="2021/06/05/LeetCode-328-%E5%A5%87%E5%81%B6%E9%93%BE%E8%A1%A8/"/>
      <url>2021/06/05/LeetCode-328-%E5%A5%87%E5%81%B6%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-328-Odd-Even-Linked-List"><a href="#LeetCode-328-Odd-Even-Linked-List" class="headerlink" title="LeetCode 328. Odd Even Linked List"></a>LeetCode 328. Odd Even Linked List</h2><p><a href="https://leetcode.com/problems/odd-even-linked-list/">LeetCode-328</a></p><p>Given the head of a singly linked list, group all the nodes with <code>odd indices</code> together followed by the nodes with <code>even indices</code>, and return the reordered list.</p><p>The first node is considered odd, and the second node is even, and so on.</p><p>Note that the relative order inside both the even and odd groups should remain as it was in the input.</p><p>Example 1:<br><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/238/328.jpg" alt><br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> head <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h3 id="method"><a href="#method" class="headerlink" title="method"></a>method</h3><p>把偶数位分离出来，最后再串在一起<br>注意奇数个和偶数个的结束条件判断</p><ul><li>奇数，<code>even == nullptr</code></li><li>偶数，<code>even-&gt;next == nullptr</code></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">ListNode<span class="token operator">*</span> <span class="token function">oddEvenList</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>head<span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>    ListNode <span class="token operator">*</span>odd <span class="token operator">=</span> head<span class="token punctuation">;</span>           <span class="token comment">// 奇节点</span>    ListNode <span class="token operator">*</span>even <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token comment">// 偶节点</span>    ListNode <span class="token operator">*</span>evenHead <span class="token operator">=</span> even<span class="token punctuation">;</span>      <span class="token comment">// 记录偶链表头节点</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>even <span class="token operator">&amp;&amp;</span> even<span class="token operator">-></span>next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        odd<span class="token operator">-></span>next <span class="token operator">=</span> even<span class="token operator">-></span>next<span class="token punctuation">;</span>     <span class="token comment">// 重指向</span>        odd <span class="token operator">=</span> odd<span class="token operator">-></span>next<span class="token punctuation">;</span>            <span class="token comment">// 后移</span>        even<span class="token operator">-></span>next <span class="token operator">=</span> odd<span class="token operator">-></span>next<span class="token punctuation">;</span>        even <span class="token operator">=</span> even<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    odd<span class="token operator">-></span>next <span class="token operator">=</span> evenHead<span class="token punctuation">;</span>    <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>203-移除链表元素</title>
      <link href="2021/06/05/LeetCode-203-%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0/"/>
      <url>2021/06/05/LeetCode-203-%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-203-Remove-Linked-List-Elements"><a href="#LeetCode-203-Remove-Linked-List-Elements" class="headerlink" title="LeetCode 203. Remove Linked List Elements"></a>LeetCode 203. Remove Linked List Elements</h2><p><a href="https://leetcode.com/problems/remove-linked-list-elements/">LeetCode-203</a></p><p>Given the head of a linked list and an integer val, remove all the nodes of the linked list that has <code>Node.val == val</code>, and return the new head.</p><p>Example 1:<br><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/203/203.jpg" alt><br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> head <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> val <span class="token operator">=</span> <span class="token number">6</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h2 id="method-1-迭代"><a href="#method-1-迭代" class="headerlink" title="method 1: 迭代"></a>method 1: 迭代</h2><p>可能会连续删除多个元素，所以要用<code>while</code><br>因为会访问<code>next</code>的成员，所以必须确保<code>next</code>不为空</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">ListNode<span class="token operator">*</span> <span class="token function">removeElements</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>head<span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>    ListNode dummy<span class="token punctuation">;</span>    dummy<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>    head <span class="token operator">=</span> <span class="token operator">&amp;</span>dummy<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>head<span class="token operator">-></span>next <span class="token operator">&amp;&amp;</span> head<span class="token operator">-></span>next<span class="token operator">-></span>val <span class="token operator">==</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            head<span class="token operator">-></span>next <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        head <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> dummy<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="method-2-递归"><a href="#method-2-递归" class="headerlink" title="method 2: 递归"></a>method 2: 递归</h2><p>如果这个点需要删除，就返回<code>next</code>，这样这个点就没了</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">ListNode<span class="token operator">*</span> <span class="token function">removeElements</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>head<span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>    head<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token function">removeElements</span><span class="token punctuation">(</span>head<span class="token operator">-></span>next<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token operator">-></span>val <span class="token operator">==</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 递归 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>42-接雨水</title>
      <link href="2021/06/05/LeetCode-42-%E6%8E%A5%E9%9B%A8%E6%B0%B4/"/>
      <url>2021/06/05/LeetCode-42-%E6%8E%A5%E9%9B%A8%E6%B0%B4/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-42-Trapping-Rain-Water"><a href="#LeetCode-42-Trapping-Rain-Water" class="headerlink" title="LeetCode 42. Trapping Rain Water"></a>LeetCode 42. Trapping Rain Water</h2><p><a href="https://leetcode.com/problems/trapping-rain-water/">LeetCode-42</a></p><p>Given n non-negative integers representing an elevation map where the width of each bar is 1, compute how much water it can trap after raining.</p><p>Example 1:<br><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/42/42.png" alt><br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> height <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token number">6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h3 id="method-单调栈"><a href="#method-单调栈" class="headerlink" title="method: 单调栈"></a>method: 单调栈</h3><p>维护一个从栈底到栈顶递减的栈，如果下一个值不满足递减，就要出栈计算雨水值<br>注意这里出栈要用<code>while</code>，相同的元素要全部出栈再计算</p><p>雨水高度计算：不满足递减的<code>height[i]</code>，与左边维持可积水的<code>height[st.top()]</code>中的较小值，减去出栈的<code>height[topIdx]</code><br>雨水宽度计算：不满足递减的<code>i</code>，与左边维持可积水的<code>st.top()</code>下标相减再<code>-1</code></p><p>一个雨水计算完后相当于把这个坑填上</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">trap</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> height<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> st<span class="token punctuation">;</span>    <span class="token keyword">int</span> ret <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> height<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> height<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> height<span class="token punctuation">[</span>st<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> topVal <span class="token operator">=</span> height<span class="token punctuation">[</span>st<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> height<span class="token punctuation">[</span>st<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">==</span> topVal<span class="token punctuation">)</span> st<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 相同的高度要全部出栈</span>            <span class="token comment">// 判断左边有没有值，也就是栈要非空才能接水</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> h <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>height<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> height<span class="token punctuation">[</span>st<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span> topVal<span class="token punctuation">;</span>                <span class="token keyword">int</span> w <span class="token operator">=</span> i <span class="token operator">-</span> st<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>                ret <span class="token operator">+=</span> h <span class="token operator">*</span> w<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        st<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 记得push</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>两个容易错的：</p><ol><li>要记得<code>push(i)</code></li><li>计算高度的时候要减去<code>topVal</code></li></ol>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单调栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>496/503-下一个更大元素</title>
      <link href="2021/06/03/LeetCode-496-%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%9B%B4%E5%A4%A7%E5%85%83%E7%B4%A0/"/>
      <url>2021/06/03/LeetCode-496-%E4%B8%8B%E4%B8%80%E4%B8%AA%E6%9B%B4%E5%A4%A7%E5%85%83%E7%B4%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-496-Next-Greater-Element-I"><a href="#LeetCode-496-Next-Greater-Element-I" class="headerlink" title="LeetCode 496. Next Greater Element I"></a>LeetCode 496. Next Greater Element I</h2><p><a href="https://leetcode.com/problems/next-greater-element-i/">LeetCode-496</a></p><p>You are given two integer arrays nums1 and nums2 both of unique elements, where <code>nums1 is a subset of nums2</code>.</p><p>Find all the <code>next greater numbers</code> for nums1’s elements in the corresponding places of nums2.</p><p>The Next Greater Number of a number x in nums1 is the first greater number to its right in nums2. If it does not exist, return -1 for this number.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> nums1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> nums2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>Explanation<span class="token operator">:</span>For number <span class="token number">4</span> <span class="token punctuation">,</span> you cannot find the next greater number <span class="token keyword">for</span> it in the second array<span class="token punctuation">,</span> so output <span class="token operator">-</span><span class="token number">1.</span>For number <span class="token number">1</span> <span class="token punctuation">,</span> the next greater number <span class="token keyword">for</span> it in the second array is <span class="token number">3.</span>For number <span class="token number">2</span> <span class="token punctuation">,</span> there is no next greater number <span class="token keyword">for</span> it in the second array<span class="token punctuation">,</span> so output <span class="token operator">-</span><span class="token number">1.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h3 id="method-单调栈-哈希表"><a href="#method-单调栈-哈希表" class="headerlink" title="method: 单调栈+哈希表"></a>method: 单调栈+哈希表</h3><p>从前往后遍历，如果<code>nums[i]</code>比栈顶元素大，就把栈顶元素出栈，同时也表明栈顶元素的右边第一个比它大的数就是<code>nums[i]</code>，注意是<code>while</code>循环</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">nextGreaterElement</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums1<span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> st<span class="token punctuation">;</span>    map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> hash<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums2<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> nums2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> st<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            hash<span class="token punctuation">[</span>st<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            st<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        st<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">res</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> n <span class="token operator">:</span> nums1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>hash<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">?</span> hash<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="LeetCode-503-Next-Greater-Element-II"><a href="#LeetCode-503-Next-Greater-Element-II" class="headerlink" title="LeetCode 503. Next Greater Element II"></a>LeetCode 503. Next Greater Element II</h2><p><a href="https://leetcode.com/problems/next-greater-element-ii/">LeetCode-503</a></p><p>Given a <code>circular</code> integer array nums (i.e., the next element of nums[nums.length - 1] is nums[0]), return the <code>next greater number</code> for every element in nums.</p><p>The <code>next greater number</code> of a number x is the first greater number to its traversing-order next in the array, which means you could search circularly to find its next greater number. If it doesn’t exist, return -1 for this number.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>Explanation<span class="token operator">:</span> The first <span class="token number">1'</span>s next greater number is <span class="token number">2</span><span class="token punctuation">;</span> The number <span class="token number">2</span> can<span class="token number">'</span>t find next greater number<span class="token punctuation">.</span> The second <span class="token number">1'</span>s next greater number needs to search circularly<span class="token punctuation">,</span> which is also <span class="token number">2.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h3 id="method-单调栈"><a href="#method-单调栈" class="headerlink" title="method: 单调栈"></a>method: 单调栈</h3><p><strong>注意</strong>：循环数组的写法，扩大一倍，取元素的时候对<code>index</code>取模</p><p>大于<code>nums.size()</code>的就不需要再入栈了</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">nextGreaterElements</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> st<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">ret</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> n <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> nums<span class="token punctuation">[</span>i <span class="token operator">%</span> n<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// 下标要对size取模</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> num <span class="token operator">></span> nums<span class="token punctuation">[</span>st<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            ret<span class="token punctuation">[</span>st<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> num<span class="token punctuation">;</span>            st<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> n<span class="token punctuation">)</span> st<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 小于size才需要入栈</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 哈希表 </tag>
            
            <tag> 单调栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>153-寻找旋转排序数组中的最小值</title>
      <link href="2021/06/03/LeetCode-153-%E5%AF%BB%E6%89%BE%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9C%80%E5%B0%8F%E5%80%BC/"/>
      <url>2021/06/03/LeetCode-153-%E5%AF%BB%E6%89%BE%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9C%80%E5%B0%8F%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-153-Find-Minimum-in-Rotated-Sorted-Array"><a href="#LeetCode-153-Find-Minimum-in-Rotated-Sorted-Array" class="headerlink" title="LeetCode 153. Find Minimum in Rotated Sorted Array"></a>LeetCode 153. Find Minimum in Rotated Sorted Array</h2><p><a href="https://leetcode.com/problems/find-minimum-in-rotated-sorted-array/">LeetCode-153</a></p><p>Suppose an array of length n sorted in ascending order is rotated between 1 and n times. For example, the array <code>nums = [0,1,2,4,5,6,7]</code> might become:</p><p><code>[4,5,6,7,0,1,2]</code> if it was rotated 4 times.<br><code>[0,1,2,4,5,6,7]</code> if it was rotated 7 times.<br>Notice that rotating an array <code>a[0], a[1], a[2], ..., a[n-1]</code> 1 time results in the array <code>a[n-1], a[0], a[1], a[2], ..., a[n-2]</code>.</p><p>Given the sorted rotated array nums of unique elements, return the <strong>minimum</strong> element of this array.</p><p>You must write an algorithm that runs in $O(logn)$ time.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h3 id="method-二分模板一"><a href="#method-二分模板一" class="headerlink" title="method: 二分模板一"></a>method: 二分模板一</h3><ul><li>如果当前元素比<code>nums[0]</code>小，说明是在最小值的分支上，<code>r</code>往左移</li><li>否则就是在<code>nums[0]</code>分支上，<code>l</code>要往右移</li><li>如果最后一个元素比<code>nums[0]</code>大，说明没有旋转，直接返回第一个就可以</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">findMin</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> l <span class="token operator">+</span> r <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> r <span class="token operator">=</span> mid<span class="token punctuation">;</span>        <span class="token keyword">else</span> l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>162-寻找峰值</title>
      <link href="2021/06/03/LeetCode-162-%E5%AF%BB%E6%89%BE%E5%B3%B0%E5%80%BC/"/>
      <url>2021/06/03/LeetCode-162-%E5%AF%BB%E6%89%BE%E5%B3%B0%E5%80%BC/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-162-Find-Peak-Element"><a href="#LeetCode-162-Find-Peak-Element" class="headerlink" title="LeetCode 162. Find Peak Element"></a>LeetCode 162. Find Peak Element</h2><p><a href="https://leetcode.com/problems/find-peak-element/">LeetCode-162</a></p><p>A <strong>peak element</strong> is an element that is strictly <strong>greater than its neighbors</strong>.</p><p>Given an integer array <code>nums</code>, find a <code>peak</code> element, and return its <strong>index</strong>. If the array contains multiple peaks, return the index to any of the peaks.</p><p>You may imagine that <code>nums[-1] = nums[n] = -∞</code>.</p><p>You must write an algorithm that runs in $O(logn)$ time.</p><p>示例 1：<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>输出：<span class="token number">2</span>解释：<span class="token number">3</span> 是峰值元素，你的函数应该返回其索引 <span class="token number">2</span>。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br>示例 2：<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>输出：<span class="token number">1</span> 或 <span class="token number">5</span> 解释：你的函数可以返回索引 <span class="token number">1</span>，其峰值元素为 <span class="token number">2</span>；     或者返回索引 <span class="token number">5</span>， 其峰值元素为 <span class="token number">6</span>。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></p><h3 id="method-二分模板一"><a href="#method-二分模板一" class="headerlink" title="method: 二分模板一"></a>method: 二分模板一</h3><p>如果<code>mid</code>比<code>mid+1</code>大，说明峰值在左边，所以<code>r=mid</code><br>如果<code>mid</code>比<code>mid+1</code>小，说明峰值在右边，所以<code>l=mid+1</code></p><p>考虑边界条件，<code>l</code>指向倒数第二个元素，<code>r</code>指向最后一个元素，<code>mid</code>是<code>l</code><br>如果满足条件，则<code>r = mid = l</code>，退出，结果正确<br>如果不满足，则<code>l = mid + 1 = r</code>，退出，结果也正确</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">findPeakElement</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> l <span class="token operator">+</span> r <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> r <span class="token operator">=</span> mid<span class="token punctuation">;</span>        <span class="token keyword">else</span> l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> r<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="也可以用模板二"><a href="#也可以用模板二" class="headerlink" title="也可以用模板二"></a>也可以用模板二</h3><p>模板二是上取整，所以和<code>mid-1</code>比较不会越界</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">findPeakElement</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> l <span class="token operator">+</span> r <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> l <span class="token operator">=</span> mid<span class="token punctuation">;</span>        <span class="token keyword">else</span> r <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> l<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>74/240-搜索二维矩阵</title>
      <link href="2021/06/03/LeetCode-74-%E6%90%9C%E7%B4%A2%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5/"/>
      <url>2021/06/03/LeetCode-74-%E6%90%9C%E7%B4%A2%E4%BA%8C%E7%BB%B4%E7%9F%A9%E9%98%B5/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-74-Search-a-2D-Matrix"><a href="#LeetCode-74-Search-a-2D-Matrix" class="headerlink" title="LeetCode 74. Search a 2D Matrix"></a>LeetCode 74. Search a 2D Matrix</h2><p><a href="https://leetcode.com/problems/search-a-2d-matrix/">LeetCode-74</a></p><p>Write an efficient algorithm that searches for a value in an <code>m x n</code> matrix. This matrix has the following properties:</p><ul><li>Integers in each row are sorted from left to right.</li><li>The first integer of each row is greater than the last integer of the previous row.</li></ul><p>Example 1:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> matrix <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token number">3</span>Output<span class="token operator">:</span> <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="method-二分"><a href="#method-二分" class="headerlink" title="method: 二分"></a>method: 二分</h3><p>注意二维下标的查找方式<br>通过一维下标<strong>除以列数、模以列数</strong>索引二维矩阵<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token number">0</span>   <span class="token number">1</span>   <span class="token number">2</span>   <span class="token number">3</span><span class="token number">4</span>   <span class="token number">5</span>   <span class="token number">6</span>   <span class="token number">7</span><span class="token number">8</span>   <span class="token number">9</span>  <span class="token number">10</span>  <span class="token number">11</span>一维下标<span class="token number">9</span>对应的二维下标是：<span class="token punctuation">[</span><span class="token number">9</span> <span class="token operator">/</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">9</span> <span class="token operator">%</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">searchMatrix</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> matrix<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> matrix<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> m <span class="token operator">=</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> n <span class="token operator">*</span> m <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> l <span class="token operator">+</span> r <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>mid <span class="token operator">/</span> m<span class="token punctuation">]</span><span class="token punctuation">[</span>mid <span class="token operator">%</span> m<span class="token punctuation">]</span> <span class="token operator">>=</span> target<span class="token punctuation">)</span> r <span class="token operator">=</span> mid<span class="token punctuation">;</span>        <span class="token keyword">else</span> l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> matrix<span class="token punctuation">[</span>r <span class="token operator">/</span> m<span class="token punctuation">]</span><span class="token punctuation">[</span>r <span class="token operator">%</span> m<span class="token punctuation">]</span> <span class="token operator">==</span> target<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="LeetCode-240-Search-a-2D-Matrix-II"><a href="#LeetCode-240-Search-a-2D-Matrix-II" class="headerlink" title="LeetCode 240. Search a 2D Matrix II"></a>LeetCode 240. Search a 2D Matrix II</h2><p><a href="https://leetcode.com/problems/search-a-2d-matrix-ii/">LeetCode-240</a></p><p>Write an efficient algorithm that searches for a target value in an <code>m x n</code> integer matrix. The matrix has the following properties:</p><p>Integers in each row are sorted in <code>ascending from left to right</code>.<br>Integers in each column are sorted in <code>ascending from top to bottom</code>.</p><p>Example 1:</p><p><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/74/240.png" alt></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> matrix <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">26</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token number">5</span>Output<span class="token operator">:</span> <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="method-单调性扫描"><a href="#method-单调性扫描" class="headerlink" title="method: 单调性扫描"></a>method: 单调性扫描</h3><p>从右上角看，左边的数都比它小，下边的数都比它大<br>如果大于<code>target</code>，就往左移<br>如果小于<code>target</code>，就往下移</p><p>时间复杂度：$O(n + m)$</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">searchMatrix</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span><span class="token operator">&amp;</span> matrix<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> matrix<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> r <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> l<span class="token operator">++</span><span class="token punctuation">;</span>         <span class="token comment">// 小了就往下移</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>matrix<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">></span> target<span class="token punctuation">)</span> r<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token comment">// 大了就往左移</span>        <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>34-查找元素/35-搜索插入位置</title>
      <link href="2021/06/02/LeetCode-34-%E5%9C%A8%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9F%A5%E6%89%BE%E5%85%83%E7%B4%A0/"/>
      <url>2021/06/02/LeetCode-34-%E5%9C%A8%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E6%9F%A5%E6%89%BE%E5%85%83%E7%B4%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-34-Find-First-and-Last-Position-of-Element-in-Sorted-Array"><a href="#LeetCode-34-Find-First-and-Last-Position-of-Element-in-Sorted-Array" class="headerlink" title="LeetCode 34. Find First and Last Position of Element in Sorted Array"></a>LeetCode 34. Find First and Last Position of Element in Sorted Array</h2><p><a href="https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array/">LeetCode-34</a></p><p>Given an array of integers nums sorted in <code>ascending order</code>, find the starting and ending position of a given target value.</p><p>If target is not found in the array, return <code>[-1, -1]</code>.</p><p>You must write an algorithm with <code>O(logn)</code> runtime complexity.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token number">8</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br>Example 2:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token number">6</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h2 id="二分模板"><a href="#二分模板" class="headerlink" title="二分模板"></a>二分模板</h2><center><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/34/34.png#pic_center" width="100%" height="100%"></center><p><strong>模板一</strong>：找最左边的元素<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> l <span class="token operator">+</span> r <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span> r <span class="token operator">=</span> mid<span class="token punctuation">;</span>    <span class="token keyword">else</span> l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>；<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><p><strong>模板二</strong>：找最右边的元素<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> mid <span class="token operator">=</span> l <span class="token operator">+</span> r <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span> l <span class="token operator">=</span> mid<span class="token punctuation">;</span>    <span class="token keyword">else</span> r <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>；<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h3 id="method-两次二分"><a href="#method-两次二分" class="headerlink" title="method: 两次二分"></a>method: 两次二分</h3><p>一次找大于等于<code>target</code>的最小值<br>一次找小于等于<code>target</code>的最大值</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">searchRange</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token comment">// 第一次：找大于等于target的最小数</span>    <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> l <span class="token operator">+</span> r <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">>=</span> target<span class="token punctuation">)</span> r <span class="token operator">=</span> mid<span class="token punctuation">;</span>        <span class="token keyword">else</span> l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">==</span> target <span class="token operator">?</span> l <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">// 第二次：找小于等于target的最大数</span>    r <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> l <span class="token operator">+</span> r <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> target<span class="token punctuation">)</span> l <span class="token operator">=</span> mid<span class="token punctuation">;</span>        <span class="token keyword">else</span> r <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    res<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">==</span> target <span class="token operator">?</span> r <span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="LeetCode-35-Search-Insert-Position"><a href="#LeetCode-35-Search-Insert-Position" class="headerlink" title="LeetCode 35. Search Insert Position"></a>LeetCode 35. Search Insert Position</h2><p><a href="https://leetcode.com/problems/search-insert-position/">LeetCode-35</a></p><p>Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.</p><p>You must write an algorithm with <code>O(log n)</code> runtime complexity.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token number">5</span>Output<span class="token operator">:</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><p>Example 2:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token number">7</span>Output<span class="token operator">:</span> <span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h3 id="method-二分模板一"><a href="#method-二分模板一" class="headerlink" title="method: 二分模板一"></a>method: 二分模板一</h3><p>找大于等于<code>target</code>的最小数，用模板一不会越界<br>用模板二，当<code>l</code>指向<code>nums.size() - 1</code>，<code>r</code>指向<code>nums.size()</code>的时候，<code>mid = nums.size()</code>，此时上取整越界</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">searchInsert</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 可能找到最后一个元素的下一个位置</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> l <span class="token operator">+</span> r <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">>=</span> target<span class="token punctuation">)</span> r <span class="token operator">=</span> mid<span class="token punctuation">;</span>        <span class="token keyword">else</span> l <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> r<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.3-浮点数</title>
      <link href="2021/06/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86-2-3-%E6%B5%AE%E7%82%B9%E6%95%B0/"/>
      <url>2021/06/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86-2-3-%E6%B5%AE%E7%82%B9%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="浮点数的表示"><a href="#浮点数的表示" class="headerlink" title="浮点数的表示"></a>浮点数的表示</h2><center><img src="/2021/06/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86-2-3-%E6%B5%AE%E7%82%B9%E6%95%B0/7.png#pic_center" width="100%" height="100%"></center><h2 id="IEEE-754"><a href="#IEEE-754" class="headerlink" title="IEEE 754"></a>IEEE 754</h2><center><img src="/2021/06/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86-2-3-%E6%B5%AE%E7%82%B9%E6%95%B0/1.png#pic_center" width="100%" height="100%"></center><p>单精度浮点数 <code>C0 A0 00 00 H</code> 的值<br><code>C0 A0 00 00 = 1100 0000 1010 0000 0000 0000 0000 0000</code><br>数符：1为负数<br>尾数部分：<code>010 0000 0000 0000 0000 0000</code><br>对应 -&gt; <code>1.01B = 1.25D</code><br>移码：<code>100 0000 1B = 129D</code><br>阶码真值=移码-偏移量=<code>129D-127D=2</code><br>浮点数真值 = $-1.25 \times 2^{2} = -5.0$</p><ol><li>确定数符、阶码、尾数</li><li>确定尾数1.M</li><li>确定阶码的真值 = 移码 - 偏置值</li><li>$(-1)^{s} \times 1.M \times 2^{E-偏置值}$</li></ol>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机组成原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>504-7进制数</title>
      <link href="2021/06/01/LeetCode-504-7%E8%BF%9B%E5%88%B6%E6%95%B0/"/>
      <url>2021/06/01/LeetCode-504-7%E8%BF%9B%E5%88%B6%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-504-Base-7"><a href="#LeetCode-504-Base-7" class="headerlink" title="LeetCode 504. Base 7"></a>LeetCode 504. Base 7</h2><p><a href="https://leetcode.com/problems/base-7/">LeetCode-504</a></p><p>Given an integer num, return a string of its base 7 representation.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> num <span class="token operator">=</span> <span class="token number">100</span>Output<span class="token operator">:</span> <span class="token string">"202"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br>Example 2:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> num <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">7</span>Output<span class="token operator">:</span> <span class="token string">"-10"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h3 id="method-1-模拟"><a href="#method-1-模拟" class="headerlink" title="method 1: 模拟"></a>method 1: 模拟</h3><p>注意进制转换的写法<br><code>int</code>如何转换为<code>char</code>，也可以用<code>to_string()</code>转换为<code>string</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">string <span class="token function">convertToBase7</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">"0"</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> num <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">?</span> num <span class="token operator">:</span> <span class="token operator">-</span>num<span class="token punctuation">;</span>    string ret<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ret <span class="token operator">=</span> <span class="token keyword">char</span><span class="token punctuation">(</span><span class="token string">'0'</span> <span class="token operator">+</span> x <span class="token operator">%</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">+</span> ret<span class="token punctuation">;</span>        x <span class="token operator">/=</span> <span class="token number">7</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> ret <span class="token operator">=</span> <span class="token string">'-'</span> <span class="token operator">+</span> ret<span class="token punctuation">;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="method-2-递归"><a href="#method-2-递归" class="headerlink" title="method 2: 递归"></a>method 2: 递归</h3><ul><li>小于0，加个负号，再递归处理相反数</li><li>小于7，直接返回整数转成的字符串</li><li>大于7，除以7部分继续递归，模以7部分转成字符串</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">string <span class="token function">convertToBase7</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">"-"</span> <span class="token operator">+</span> <span class="token function">convertToBase7</span><span class="token punctuation">(</span><span class="token operator">-</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">&lt;</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">to_string</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">convertToBase7</span><span class="token punctuation">(</span>num <span class="token operator">/</span> <span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">to_string</span><span class="token punctuation">(</span>num <span class="token operator">%</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5.6-try语句块和异常处理</title>
      <link href="2021/06/01/C-Primer-5-6-try%E8%AF%AD%E5%8F%A5%E5%9D%97%E5%92%8C%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
      <url>2021/06/01/C-Primer-5-6-try%E8%AF%AD%E5%8F%A5%E5%9D%97%E5%92%8C%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="throw表达式"><a href="#throw表达式" class="headerlink" title="throw表达式"></a>throw表达式</h2>]]></content>
      
      
      
        <tags>
            
            <tag> C++Primer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>234-回文链表</title>
      <link href="2021/05/31/LeetCode-234-%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8/"/>
      <url>2021/05/31/LeetCode-234-%E5%9B%9E%E6%96%87%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-234-Palindrome-Linked-List"><a href="#LeetCode-234-Palindrome-Linked-List" class="headerlink" title="LeetCode 234. Palindrome Linked List"></a>LeetCode 234. Palindrome Linked List</h2><p><a href="https://leetcode.com/problems/palindrome-linked-list/">LeetCode-234</a></p><p>Given the head of a singly linked list, return true if it is a <strong>palindrome</strong>.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> head <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h3 id="method-1"><a href="#method-1" class="headerlink" title="method 1:"></a>method 1:</h3><p>反转后半段链表，头尾指针从两边向中间比较</p><p>时间复杂度：$O(n)$<br>空间复杂度：$O(1)$</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">ListNode<span class="token operator">*</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>ListNode <span class="token operator">*</span>head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>head <span class="token operator">||</span> <span class="token operator">!</span>head<span class="token operator">-></span>next<span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>    ListNode <span class="token operator">*</span>newHead <span class="token operator">=</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>head<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>    head<span class="token operator">-></span>next<span class="token operator">-></span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>    head<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> newHead<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ListNode <span class="token operator">*</span>slow <span class="token operator">=</span> head<span class="token punctuation">;</span>    ListNode <span class="token operator">*</span>fast <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>fast <span class="token operator">&amp;&amp;</span> fast<span class="token operator">-></span>next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        slow <span class="token operator">=</span> slow<span class="token operator">-></span>next<span class="token punctuation">;</span>        fast <span class="token operator">=</span> fast<span class="token operator">-></span>next<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    ListNode <span class="token operator">*</span>tail <span class="token operator">=</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>slow<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>head <span class="token operator">&amp;&amp;</span> tail<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token operator">-></span>val <span class="token operator">!=</span> tail<span class="token operator">-></span>val<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        head <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>        tail <span class="token operator">=</span> tail<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="改进一下"><a href="#改进一下" class="headerlink" title="改进一下"></a>改进一下</h4><p>可以在找中间点的过程中反转前半段链表</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>head <span class="token operator">||</span> <span class="token operator">!</span>head<span class="token operator">-></span>next<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    ListNode <span class="token operator">*</span>slow <span class="token operator">=</span> head<span class="token punctuation">;</span>    ListNode <span class="token operator">*</span>fast <span class="token operator">=</span> head<span class="token punctuation">;</span>    ListNode <span class="token operator">*</span>pre <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    ListNode <span class="token operator">*</span>tmp <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">&amp;&amp;</span> fast<span class="token operator">-></span>next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        fast <span class="token operator">=</span> fast<span class="token operator">-></span>next<span class="token operator">-></span>next<span class="token punctuation">;</span>        tmp <span class="token operator">=</span> slow<span class="token operator">-></span>next<span class="token punctuation">;</span>        slow<span class="token operator">-></span>next <span class="token operator">=</span> pre<span class="token punctuation">;</span>        pre <span class="token operator">=</span> slow<span class="token punctuation">;</span>        slow <span class="token operator">=</span> tmp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fast<span class="token punctuation">)</span> tmp <span class="token operator">=</span> tmp<span class="token operator">-></span>next<span class="token punctuation">;</span>  <span class="token comment">// 如果是奇数个节点，中间点不用比较</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>pre <span class="token operator">&amp;&amp;</span> tmp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pre<span class="token operator">-></span>val <span class="token operator">!=</span> tmp<span class="token operator">-></span>val<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        pre <span class="token operator">=</span> pre<span class="token operator">-></span>next<span class="token punctuation">;</span>        tmp <span class="token operator">=</span> tmp<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="method-2-递归"><a href="#method-2-递归" class="headerlink" title="method 2: 递归"></a>method 2: 递归</h3><p>如果要求不能修改链表，只能用递归<br>因为递归总是先从最后一个元素开始处理的，相当于有个指针从后往前走<br>所以用一个全局的指针从前往后走就可以相互比较了</p><p>利用栈<strong>先进后出</strong>的特性从后往前遍历</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">ListNode <span class="token operator">*</span>front <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span><span class="token keyword">bool</span> <span class="token function">traversal</span><span class="token punctuation">(</span>ListNode <span class="token operator">*</span>cur<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>cur<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">traversal</span><span class="token punctuation">(</span>cur<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token comment">// 先去处理下一个节点，如果下一个节点不行，就直接返回</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cur<span class="token operator">-></span>val <span class="token operator">!=</span> front<span class="token operator">-></span>val<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>   <span class="token comment">// 如果当前节点不行，也直接返回</span>    front <span class="token operator">=</span> front<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token comment">// 当前节点可以的话front往后移</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment">// 前面的条件都过了，说明到此为止是回文</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ListNode <span class="token operator">*</span>fast <span class="token operator">=</span> head<span class="token punctuation">;</span>    ListNode <span class="token operator">*</span>slow <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">&amp;&amp;</span> fast<span class="token operator">-></span>next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        fast <span class="token operator">=</span> fast<span class="token operator">-></span>next<span class="token operator">-></span>next<span class="token punctuation">;</span>        slow <span class="token operator">=</span> slow<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>   <span class="token comment">// 增加了寻找中间节点，可以不用</span>    front <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">traversal</span><span class="token punctuation">(</span>slow<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先找到中间节点，从中间节点开始递归</p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 递归 </tag>
            
            <tag> 双指针 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>24-两两交换链表中的节点</title>
      <link href="2021/05/31/LeetCode-24-%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/"/>
      <url>2021/05/31/LeetCode-24-%E4%B8%A4%E4%B8%A4%E4%BA%A4%E6%8D%A2%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-24-Swap-Nodes-in-Pairs"><a href="#LeetCode-24-Swap-Nodes-in-Pairs" class="headerlink" title="LeetCode 24. Swap Nodes in Pairs"></a>LeetCode 24. Swap Nodes in Pairs</h2><p><a href="https://leetcode.com/problems/swap-nodes-in-pairs/">LeetCode-24</a></p><p>Given a linked list, <code>swap</code> every <code>two adjacent nodes</code> and return its head. You must solve the problem without modifying the values in the list’s nodes.</p><p><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/24/24.png" alt></p><p>示例 1：<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">输入：head <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>输出：<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h3 id="method-递归"><a href="#method-递归" class="headerlink" title="method: 递归"></a>method: 递归</h3><p>返回的是要交换的两两节点的下一个节点</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">ListNode<span class="token operator">*</span> <span class="token function">swapPairs</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>head <span class="token operator">||</span> <span class="token operator">!</span>head<span class="token operator">-></span>next<span class="token punctuation">)</span> <span class="token keyword">return</span> head<span class="token punctuation">;</span>    ListNode <span class="token operator">*</span>temp <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token comment">// 记录后向节点，待会会断开链接</span>    head<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token function">swapPairs</span><span class="token punctuation">(</span>head<span class="token operator">-></span>next<span class="token operator">-></span>next<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 先去处理下下个节点</span>    temp<span class="token operator">-></span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>      <span class="token comment">// 第二个节点指向第一个节点</span>    <span class="token keyword">return</span> temp<span class="token punctuation">;</span>            <span class="token comment">// 返回新的头结点</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 递归 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1-计算机硬件</title>
      <link href="2021/05/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86-1-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A1%AC%E4%BB%B6/"/>
      <url>2021/05/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86-1-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A1%AC%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<center><img src="/2021/05/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86-1-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A1%AC%E4%BB%B6/4.png#pic_center" width="80%" height="80%"></center><center><img src="/2021/05/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86-1-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A1%AC%E4%BB%B6/5.png#pic_center" width="80%" height="80%"></center><p>主存：内存条<br>辅存：机械硬盘、固态硬盘</p><h2 id="计算机硬件"><a href="#计算机硬件" class="headerlink" title="计算机硬件"></a>计算机硬件</h2><ul><li>输入设备</li><li>输出设备</li><li>主存储器</li><li>运算器</li><li>控制器</li></ul><p>主存储器、运算器、控制器构成了<strong>主机</strong></p><p>冯诺依曼结构：以运算器为中心<br>现代计算机结构：以存储器为中心，<code>CPU = 运算器 + 控制器</code></p><h3 id="主存储器"><a href="#主存储器" class="headerlink" title="主存储器"></a>主存储器</h3><center><img src="/2021/05/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86-1-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A1%AC%E4%BB%B6/8.png#pic_center" width="80%" height="80%"></center><ul><li>存储体</li><li><code>MAR(Memory Address Register)</code>存储地址寄存器</li><li><code>MDR(Memory Data Register)</code>存储数据寄存器</li></ul><p>每个地址对应一个存储单元<br>存储单元：每个存储单元存放一串二进制代码<br>存储字<code>(word)</code>：存储单元中二进制代码的组合<br>存储字长：存储单元中二进制代码的位数</p><p><code>MAR = 4</code>位，说明有$2^{4}$个存储单元<br><code>MDR = 16</code>位，说明存储单元是<code>16</code>位，即<code>1word = 16bit</code></p><h3 id="运算器"><a href="#运算器" class="headerlink" title="运算器"></a>运算器</h3><p>用于实现算术运算、逻辑运算</p><ul><li><code>ACC(Accumulator)</code>: 累加器，用于存放操作数或运算结果</li><li><code>MQ(Multiple-Quotient Register)</code>: 乘商寄存器，在乘除运算时，用于存放操作数或运算结果</li><li><code>X</code>: 通用的操作数寄存器，用于存放操作数</li><li><code>ALU(Arithmetic and Logic Unit)</code>: 算术逻辑单元，通过内部复杂的电路实现算术和逻辑运算</li></ul><h3 id="控制器"><a href="#控制器" class="headerlink" title="控制器"></a>控制器</h3><ul><li><code>CU(Control Unit)</code>: 控制单元，分析指令，放出控制信号</li><li><code>IR(Instruction Register)</code>: 指令寄存器，存放当前执行的指令</li><li><code>PC(Program Counter)</code>: 程序计数器，存放下一条指令地址，有自动加1功能</li></ul><p>完成一条指令</p><ul><li><code>PC</code>: 取指令</li><li><code>IR</code>: 分析指令</li><li><code>CU</code>: 执行指令</li></ul><center><img src="/2021/05/29/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86-1-%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A1%AC%E4%BB%B6/7.png#pic_center" width="80%" height="80%"></center>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机组成原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>58-最后一个单词的长度</title>
      <link href="2021/05/29/LeetCode-58-%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E5%8D%95%E8%AF%8D%E7%9A%84%E9%95%BF%E5%BA%A6/"/>
      <url>2021/05/29/LeetCode-58-%E6%9C%80%E5%90%8E%E4%B8%80%E4%B8%AA%E5%8D%95%E8%AF%8D%E7%9A%84%E9%95%BF%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-58-Length-of-Last-Word"><a href="#LeetCode-58-Length-of-Last-Word" class="headerlink" title="LeetCode 58. Length of Last Word"></a>LeetCode 58. Length of Last Word</h2><p><a href="https://leetcode.com/problems/length-of-last-word/">LeetCode-58</a></p><p>Given a string s consists of some words separated by spaces, return the length of the last word in the string. If the last word does not exist, return <strong>0</strong>.</p><p>A <code>word</code> is a maximal substring consisting of non-space characters only.</p><p>Example 1:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> s <span class="token operator">=</span> <span class="token string">"Hello World"</span>Output<span class="token operator">:</span> <span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Example 2:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> s <span class="token operator">=</span> <span class="token string">" "</span>Output<span class="token operator">:</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="method"><a href="#method" class="headerlink" title="method"></a>method</h3><p>因为后面可能有空格，所以得先找到第一个非空格的元素，再从这个元素开始找是空格的元素</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">lengthOfLastWord</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> r <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>r <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">)</span> r<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> l <span class="token operator">=</span> r<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> s<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">' '</span><span class="token punctuation">)</span> l<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> r <span class="token operator">-</span> l<span class="token punctuation">;</span>   <span class="token comment">// 相当于(l, r]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>215-数组中的第k个最大元素</title>
      <link href="2021/05/29/LeetCode-215-%E6%95%B0%E7%BB%84%E4%B8%AD%E7%AC%ACk%E4%B8%AA%E6%9C%80%E5%A4%A7%E5%85%83%E7%B4%A0/"/>
      <url>2021/05/29/LeetCode-215-%E6%95%B0%E7%BB%84%E4%B8%AD%E7%AC%ACk%E4%B8%AA%E6%9C%80%E5%A4%A7%E5%85%83%E7%B4%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-215-Kth-Largest-Element-in-an-Array"><a href="#LeetCode-215-Kth-Largest-Element-in-an-Array" class="headerlink" title="LeetCode 215. Kth Largest Element in an Array"></a>LeetCode 215. Kth Largest Element in an Array</h2><p><a href="https://leetcode.com/problems/kth-largest-element-in-an-array/">LeetCode-215</a></p><p>Given an integer array <code>nums</code> and an integer <code>k</code>, return the <code>kth</code> largest element in the array.</p><p>Note that it is the <code>kth</code> largest element in the sorted order, not the <code>kth</code> distinct element.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">2</span>Output<span class="token operator">:</span> <span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><br>Example 2:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">4</span>Output<span class="token operator">:</span> <span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h3 id="method-小根堆"><a href="#method-小根堆" class="headerlink" title="method: 小根堆"></a>method: 小根堆</h3><p>维护一个小根堆（从小到大排序），如果新的数比堆顶元素大，就把堆顶元素弹出，新的数入队<br>如果队列是<code>|4|6|</code>，4是第二大的数，后面又来个5，那4就不是第二大的数了，所以把4弹出，5入队，至于6和5谁是第二大的数，优先队列按从小到大排序之后就知道了</p><p><strong>注意</strong>：<br>小根堆的写法<br><code>priority_queue&lt;int, vector&lt;int&gt;, greater&lt;int&gt;&gt;</code><br>同理，大根堆<br><code>priority_queue&lt;int, vector&lt;int&gt;, less&lt;int&gt;&gt;</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">findKthLargest</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    priority_queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">,</span> greater<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> q<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> k<span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 小于k就直接放进来</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以先把元素放进来，再看有没有大于<code>k</code>，再弹出<br>相当于把整个数组都放进堆里排序，再把前面多于k个的元素砍掉，剩下的第一个就是第<code>k</code>大的了</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">findKthLargest</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    priority_queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">,</span> greater<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> q<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> k<span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 堆 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1/167-两数之和</title>
      <link href="2021/05/29/LeetCode-1-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
      <url>2021/05/29/LeetCode-1-%E4%B8%A4%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-1-Two-Sum"><a href="#LeetCode-1-Two-Sum" class="headerlink" title="LeetCode 1. Two Sum"></a>LeetCode 1. Two Sum</h2><p><a href="https://leetcode.com/problems/two-sum/">LeetCode-1</a></p><p>Given an array of integers nums and an integer target, return <code>indices</code> of the two numbers such that they <code>add up to target</code>.</p><p>You may assume that each input would have <code>exactly one solution</code>, and you may <code>not use the same element twice</code>.</p><p>You can return the answer in <code>any order</code>.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token number">9</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> Because nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">9</span><span class="token punctuation">,</span> we <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br>Example 2:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token number">6</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h3 id="method-哈希表"><a href="#method-哈希表" class="headerlink" title="method: 哈希表"></a>method: 哈希表</h3><p>用<code>map</code>存储值和下标的映射，用<code>unordered_map</code>可以快一点</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">twoSum</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    unordered_map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> hash<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">res</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> target <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>hash<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">!=</span> hash<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// 不能写成hash[x]，因为下标可能为0</span>            res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>            res<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> hash<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> res<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> hash<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="LeetCode-167-Two-Sum-II-Input-array-is-sorted"><a href="#LeetCode-167-Two-Sum-II-Input-array-is-sorted" class="headerlink" title="LeetCode 167. Two Sum II - Input array is sorted"></a>LeetCode 167. Two Sum II - Input array is sorted</h2><p><a href="https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/">LeetCode-167</a></p><p>Given an array of integers numbers that is already <code>sorted</code> in non-decreasing order, find two numbers such that they add up to a specific target number.</p><p>Return the indices of the two numbers (1-indexed) as an integer array answer of size 2, where <code>1 &lt;= answer[0] &lt; answer[1] &lt;= numbers.length.</code></p><p>The tests are generated such that there is <code>exactly one solution</code>. You may <code>not use the same element twice</code>.</p><p>Example 1:</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">输入：numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target <span class="token operator">=</span> <span class="token number">9</span>输出：<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>解释：<span class="token number">2</span> 与 <span class="token number">7</span> 之和等于目标数 <span class="token number">9</span> 。因此 index1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> index2 <span class="token operator">=</span> <span class="token number">2</span> 。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="method-二分"><a href="#method-二分" class="headerlink" title="method: 二分"></a>method: 二分</h3><p>用二分法优化右指针的位置：用模板二，找到和<code>nums[0]</code>相加小于等于<code>target</code>的最大数，因为<code>nums[0] + nums[mid]</code>已经小于等于<code>target</code>了，再往右就是大于<code>target</code>了，所以没必要再往右找了</p><p>既然是一个有序区间<code>[l, r]</code>找和为某个数，那么大了就 <code>r--</code>，小了就 <code>l++</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">twoSum</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">res</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 这里要指向最后一个元素，因为后面要直接取数</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> mid <span class="token operator">=</span> <span class="token punctuation">(</span>l <span class="token operator">+</span> r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;=</span> target<span class="token punctuation">)</span> l <span class="token operator">=</span> mid<span class="token punctuation">;</span>        <span class="token keyword">else</span> r <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">)</span> l<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token comment">// 小了</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">></span> target<span class="token punctuation">)</span> r<span class="token operator">--</span><span class="token punctuation">;</span>   <span class="token comment">// 大了</span>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            res<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> r <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> res<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 哈希表 </tag>
            
            <tag> 二分法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>735-行星碰撞</title>
      <link href="2021/05/29/LeetCode-735-%E8%A1%8C%E6%98%9F%E7%A2%B0%E6%92%9E/"/>
      <url>2021/05/29/LeetCode-735-%E8%A1%8C%E6%98%9F%E7%A2%B0%E6%92%9E/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-735-Asteroid-Collision"><a href="#LeetCode-735-Asteroid-Collision" class="headerlink" title="LeetCode 735. Asteroid Collision"></a>LeetCode 735. Asteroid Collision</h2><p><a href="https://leetcode.com/problems/asteroid-collision/">LeetCode-735</a></p><p>We are given an array asteroids of integers representing asteroids in a row.</p><p>For each asteroid, the absolute value represents its size, and the sign represents its direction (<code>positive meaning right, negative meaning left</code>). Each asteroid moves at the same speed.</p><p>Find out the state of the asteroids after all collisions. If two asteroids meet, <code>the smaller one will explode</code>. If both are the same size, <code>both will explode</code>. Two asteroids moving in the same direction will never meet.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> asteroids <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">]</span>Explanation<span class="token operator">:</span> The <span class="token number">10</span> <span class="token operator">and</span> <span class="token operator">-</span><span class="token number">5</span> collide resulting in <span class="token number">10.</span> The <span class="token number">5</span> <span class="token operator">and</span> <span class="token number">10</span> never collide<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></p><p>Example 2:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> asteroids <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>Explanation<span class="token operator">:</span> The <span class="token number">8</span> <span class="token operator">and</span> <span class="token operator">-</span><span class="token number">8</span> collide exploding each other<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></p><h3 id="method-栈"><a href="#method-栈" class="headerlink" title="method: 栈"></a>method: 栈</h3><ul><li>正数就直接入栈</li><li>负数要考虑几种情况<ul><li>栈顶元素是正数并且小于<code>nums[i]</code>的相反数，要退栈，这个要<code>while</code></li><li>栈空或者栈顶元素是负数，<code>nums[i]</code>入栈(正数可以放到这种情况里)</li><li>否则栈非空并且栈顶是正数，<code>nums[i]</code>是负数，如果栈顶等于<code>-nums[i]</code>，要出栈</li></ul></li><li>最后把栈里的元素逆序存到<code>vector</code>里</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">asteroidCollision</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> st<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> st<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> st<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> st<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 需要出栈的情况，这里不用写nums[i]&lt;0</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>st<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> st<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> st<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 可以入栈的情况</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>st<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> st<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 还有一种要出栈的情况</span>    <span class="token punctuation">&#125;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">ret</span><span class="token punctuation">(</span>st<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> st<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ret<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> st<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        st<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为什么不用写<code>nums[i] &lt; 0</code>，因为前边的条件保证栈顶必须是正数，如果<code>nums[i]</code>也是正数，那取反之后肯定会小于栈顶的正数，所以只能是负数才会大于</p><p><code>else</code>已经保证：栈非空，栈顶元素是正数，<code>nums[i]</code>是负数，从这里考虑相等出栈情况</p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单调栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4.11-类型转换</title>
      <link href="2021/05/28/C-Primer-4-11-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
      <url>2021/05/28/C-Primer-4-11-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<h2 id="static-cast"><a href="#static-cast" class="headerlink" title="static_cast"></a>static_cast</h2><p>任何具有明确定义的类型转换，只要不包括底层<code>const</code>，都可以使用<code>static_cast</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">double</span> slope <span class="token operator">=</span> <span class="token keyword">static_cast</span><span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token operator">/</span> i<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用<code>static_cast</code>将<code>void*</code>指针转换回原来的类型。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 任何非常量对象的地址都能存入void*</span><span class="token keyword">void</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token operator">&amp;</span>d<span class="token punctuation">;</span>doule <span class="token operator">*</span>dp <span class="token operator">=</span> <span class="token keyword">static_cast</span><span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="const-cast"><a href="#const-cast" class="headerlink" title="const_cast"></a>const_cast</h2><p>改变对象的底层const，不能改变类型<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token keyword">const_cast</span><span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>pc<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 通过p写值是未定义的行为</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></p><h2 id="reinterpret-cast"><a href="#reinterpret-cast" class="headerlink" title="reinterpret_cast"></a>reinterpret_cast</h2><p>强制类型转换</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token operator">*</span>ip<span class="token punctuation">;</span><span class="token keyword">char</span> <span class="token operator">*</span>pc <span class="token operator">=</span> <span class="token keyword">reinterpret_cast</span><span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">></span><span class="token punctuation">(</span>ip<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> C++Primer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>876-链表的中间节点</title>
      <link href="2021/05/28/LeetCode-876-%E9%93%BE%E8%A1%A8%E7%9A%84%E4%B8%AD%E9%97%B4%E8%8A%82%E7%82%B9/"/>
      <url>2021/05/28/LeetCode-876-%E9%93%BE%E8%A1%A8%E7%9A%84%E4%B8%AD%E9%97%B4%E8%8A%82%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-876-Middle-of-the-Linked-List"><a href="#LeetCode-876-Middle-of-the-Linked-List" class="headerlink" title="LeetCode 876. Middle of the Linked List"></a>LeetCode 876. Middle of the Linked List</h2><p><a href="https://leetcode.com/problems/middle-of-the-linked-list/">LeetCode-876</a></p><p>Given a <code>non-empty</code>, singly linked list with head node head, return a <code>middle node</code> of linked list.</p><p>If there are two middle nodes, return the <code>second middle node</code>.</p><p>Example 1:<br><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/876/lc-midlist1.jpg" alt><br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> Node <span class="token number">3</span> from <span class="token keyword">this</span> <span class="token function">list</span> <span class="token punctuation">(</span>Serialization<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><p>Example 2:<br><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/876/lc-midlist2.jpg" alt><br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> Node <span class="token number">4</span> from <span class="token keyword">this</span> <span class="token function">list</span> <span class="token punctuation">(</span>Serialization<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h3 id="method-双指针"><a href="#method-双指针" class="headerlink" title="method: 双指针"></a>method: 双指针</h3><p>两个指针一开始都指向头结点，<font color="LightSeaGreen">快指针每次走两步，慢指针每次走一步</font><br>用快指针作为判断条件，<code>fast</code>指针为空，或者下一个节点为空就退出</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">ListNode<span class="token operator">*</span> <span class="token function">middleNode</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ListNode <span class="token operator">*</span>fast <span class="token operator">=</span> head<span class="token punctuation">;</span>    ListNode <span class="token operator">*</span>slow <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">&amp;&amp;</span> fast<span class="token operator">-></span>next<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        fast <span class="token operator">=</span> fast<span class="token operator">-></span>next<span class="token operator">-></span>next<span class="token punctuation">;</span>        slow <span class="token operator">=</span> slow<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> slow<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 双指针 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>739-每日温度</title>
      <link href="2021/05/28/LeetCode-739-%E6%AF%8F%E6%97%A5%E6%B8%A9%E5%BA%A6/"/>
      <url>2021/05/28/LeetCode-739-%E6%AF%8F%E6%97%A5%E6%B8%A9%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-739-Daily-Temperatures"><a href="#LeetCode-739-Daily-Temperatures" class="headerlink" title="LeetCode 739. Daily Temperatures"></a>LeetCode 739. Daily Temperatures</h2><p><a href="https://leetcode.com/problems/daily-temperatures/">LeetCode-739</a></p><p>Given a list of daily temperatures temperatures, return a list such that, for each day in the input, tells you how many days you would have to wait until a warmer temperature. If there is no future day for which this is possible, put 0 instead.</p><p>For example, given the list of temperatures temperatures = <code>[73, 74, 75, 71, 69, 72, 76, 73]</code>, your output should be <code>[1, 1, 4, 2, 1, 1, 0, 0]</code>.</p><p>Note: The length of temperatures will be in the range <code>[1, 30000]</code>. Each temperature will be an integer in the range <code>[30, 100].</code></p><h3 id="单调栈模板"><a href="#单调栈模板" class="headerlink" title="单调栈模板"></a>单调栈模板</h3><center><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/739/222.png#pic_center" width="100%" height="100%"></center><h3 id="method-单调栈"><a href="#method-单调栈" class="headerlink" title="method: 单调栈"></a>method: 单调栈</h3><blockquote><p>从栈底到栈顶的下标在数组<code>arr</code>中对应的值是单调递减（不增）的</p></blockquote><p>从前往后遍历，如果比栈顶元素小，就入栈，否则一直把栈顶元素弹出，直到栈空或者可以入栈为止。</p><p>入栈的是数组的下标，因为可以用下标找元素，但不能用元素找下标</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">dailyTemperatures</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> st<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">ret</span><span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>st<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            ret<span class="token punctuation">[</span>st<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">-</span> st<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 下标的差值</span>            st<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        st<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> ret<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单调栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>237-删除链表中的节点</title>
      <link href="2021/05/28/LeetCode-237-%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/"/>
      <url>2021/05/28/LeetCode-237-%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-237-Delete-Node-in-a-Linked-List"><a href="#LeetCode-237-Delete-Node-in-a-Linked-List" class="headerlink" title="LeetCode 237. Delete Node in a Linked List"></a>LeetCode 237. Delete Node in a Linked List</h2><p><a href="https://leetcode.com/problems/delete-node-in-a-linked-list/">LeetCode-237</a></p><p>Write a function to <code>delete a node</code> in a singly-linked list. You will <code>not</code> be given access to the <code>head</code> of the list, instead you will be given access to <code>the node to be deleted</code> directly.</p><p>It is guaranteed that the node to be deleted is <code>not a tail node</code> in the list.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> head <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span> node <span class="token operator">=</span> <span class="token number">5</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span>Explanation<span class="token operator">:</span> You are given the second node with value <span class="token number">5</span><span class="token punctuation">,</span> the linked list should become <span class="token number">4</span> <span class="token operator">-></span> <span class="token number">1</span> <span class="token operator">-></span> <span class="token number">9</span> after calling your function<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></p><h3 id="method"><a href="#method" class="headerlink" title="method"></a>method</h3><center><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/237/3.png#pic_center" width="100%" height="100%"></center><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">deleteNode</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    node<span class="token operator">-></span>val <span class="token operator">=</span> node<span class="token operator">-></span>next<span class="token operator">-></span>val<span class="token punctuation">;</span>    <span class="token comment">// 把自己赋值为下一个节点</span>    node<span class="token operator">-></span>next <span class="token operator">=</span> node<span class="token operator">-></span>next<span class="token operator">-></span>next<span class="token punctuation">;</span>  <span class="token comment">// 删除下一个节点</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>461/477-汉明距离</title>
      <link href="2021/05/28/LeetCode-461-%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB/"/>
      <url>2021/05/28/LeetCode-461-%E6%B1%89%E6%98%8E%E8%B7%9D%E7%A6%BB/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-461-Hamming-Distance"><a href="#LeetCode-461-Hamming-Distance" class="headerlink" title="LeetCode 461. Hamming Distance"></a>LeetCode 461. Hamming Distance</h2><p><a href="https://leetcode.com/problems/hamming-distance/">LeetCode-461</a></p><p>The Hamming distance between two integers is the number of positions at which the corresponding bits are different.</p><p>Given two integers x and y, return the <strong>Hamming distance</strong> between them.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">4</span>Output<span class="token operator">:</span> <span class="token number">2</span>Explanation<span class="token operator">:</span><span class="token number">1</span>   <span class="token punctuation">(</span><span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token number">4</span>   <span class="token punctuation">(</span><span class="token number">0</span> <span class="token number">1</span> <span class="token number">0</span> <span class="token number">0</span><span class="token punctuation">)</span>       ↑   ↑The above arrows point to positions where the corresponding bits are different<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h3 id="method"><a href="#method" class="headerlink" title="method"></a>method</h3><p>转化为计算异或结果中<code>1</code>的个数</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">hammingDistance</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> z <span class="token operator">=</span> x <span class="token operator">^</span> y<span class="token punctuation">;</span>    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>z<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cnt <span class="token operator">+=</span> z <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">;</span>        z <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> cnt<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><ul><li><code>n &amp; (n-1)</code>可以去掉<code>n</code>最低位的<code>1</code></li></ul></blockquote><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">hammingDistance</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> z <span class="token operator">=</span> x <span class="token operator">^</span> y<span class="token punctuation">;</span>    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>z<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        z <span class="token operator">&amp;=</span> <span class="token punctuation">(</span>z <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cnt<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> cnt<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="LeetCode-477-Total-Hamming-Distance"><a href="#LeetCode-477-Total-Hamming-Distance" class="headerlink" title="LeetCode 477. Total Hamming Distance"></a>LeetCode 477. Total Hamming Distance</h2><p>The Hamming distance between two integers is the number of positions at which the corresponding bits are different.</p><p>Given an integer array nums, return the sum of Hamming distances between all the pairs of the integers in nums.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token number">6</span>Explanation<span class="token operator">:</span> In binary representation<span class="token punctuation">,</span> the <span class="token number">4</span> is <span class="token number">0100</span><span class="token punctuation">,</span> <span class="token number">14</span> is <span class="token number">1110</span><span class="token punctuation">,</span> <span class="token operator">and</span> <span class="token number">2</span> is <span class="token number">0010</span> <span class="token punctuation">(</span>justshowing the four bits relevant in <span class="token keyword">this</span> <span class="token keyword">case</span><span class="token punctuation">)</span><span class="token punctuation">.</span>The answer will be<span class="token operator">:</span><span class="token function">HammingDistance</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">HammingDistance</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">HammingDistance</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">=</span> <span class="token number">6.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h3 id="method-1"><a href="#method-1" class="headerlink" title="method"></a>method</h3><p>假设4个数的某一位分别是：1 0 1 0，分别计算异或值为：1 0 1 1 0 1，所以汉明距离总和为4，可以看出是0的个数和1的个数的乘积，所以对每一位计算0和1的个数的乘积就行</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">totalHammingDistance</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">32</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> ones <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> n <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">>></span> i <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> ones<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// 1的个数</span>        <span class="token punctuation">&#125;</span>        res <span class="token operator">+=</span> ones <span class="token operator">*</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> ones<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1的个数*0的个数</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 位运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>344/345-反转字符串</title>
      <link href="2021/05/28/LeetCode-344-%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>2021/05/28/LeetCode-344-%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-344-Reverse-String"><a href="#LeetCode-344-Reverse-String" class="headerlink" title="LeetCode 344. Reverse String"></a>LeetCode 344. Reverse String</h2><p><a href="https://leetcode.com/problems/reverse-string/">LeetCode-344</a></p><p>Write a function that reverses a string. The input string is given as an array of characters s.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> s <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"h"</span><span class="token punctuation">,</span><span class="token string">"e"</span><span class="token punctuation">,</span><span class="token string">"l"</span><span class="token punctuation">,</span><span class="token string">"l"</span><span class="token punctuation">,</span><span class="token string">"o"</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">"o"</span><span class="token punctuation">,</span><span class="token string">"l"</span><span class="token punctuation">,</span><span class="token string">"l"</span><span class="token punctuation">,</span><span class="token string">"e"</span><span class="token punctuation">,</span><span class="token string">"h"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h3 id="method-反向双指针"><a href="#method-反向双指针" class="headerlink" title="method: 反向双指针"></a>method: 反向双指针</h3><font face="黑体">两个指针从两边同时向中间遍历，不断交换元素</font><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">reverseString</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span><span class="token operator">&amp;</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">swap</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        l<span class="token operator">++</span><span class="token punctuation">;</span>        r<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="LeetCode-345-Reverse-Vowels-of-a-String"><a href="#LeetCode-345-Reverse-Vowels-of-a-String" class="headerlink" title="LeetCode 345. Reverse Vowels of a String"></a>LeetCode 345. Reverse Vowels of a String</h2><p><a href="https://leetcode.com/problems/reverse-vowels-of-a-string/submissions/">LeetCode-345</a></p><p>Given a string s, reverse only all the vowels in the string and return it.</p><p>The vowels are ‘a’, ‘e’, ‘i’, ‘o’, and ‘u’, and they can appear in both cases.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> s <span class="token operator">=</span> <span class="token string">"hello"</span>Output<span class="token operator">:</span> <span class="token string">"holle"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h3 id="method-集合存储元音字母"><a href="#method-集合存储元音字母" class="headerlink" title="method: 集合存储元音字母"></a>method: 集合存储元音字母</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">string <span class="token function">reverseVowels</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    set<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span> st<span class="token punctuation">&#123;</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">,</span><span class="token string">'i'</span><span class="token punctuation">,</span><span class="token string">'o'</span><span class="token punctuation">,</span><span class="token string">'u'</span><span class="token punctuation">,</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'E'</span><span class="token punctuation">,</span><span class="token string">'I'</span><span class="token punctuation">,</span><span class="token string">'O'</span><span class="token punctuation">,</span><span class="token string">'U'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r <span class="token operator">&amp;&amp;</span> st<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> st<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> l<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r <span class="token operator">&amp;&amp;</span> st<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> st<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> r<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token function">swap</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        l<span class="token operator">++</span><span class="token punctuation">;</span>        r<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
            <tag> 双指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>191-位1的个数</title>
      <link href="2021/05/28/LeetCode-191-%E4%BD%8D1%E7%9A%84%E4%B8%AA%E6%95%B0/"/>
      <url>2021/05/28/LeetCode-191-%E4%BD%8D1%E7%9A%84%E4%B8%AA%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-191-Number-of-1-Bits"><a href="#LeetCode-191-Number-of-1-Bits" class="headerlink" title="LeetCode 191. Number of 1 Bits"></a>LeetCode 191. Number of 1 Bits</h2><p><a href="https://leetcode.com/problems/number-of-1-bits/">LeetCode-191</a></p><p>Write a function that takes an unsigned integer and returns the number of <code>&#39;1&#39;</code> bits it has (also known as the <code>Hamming weight</code>).</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> n <span class="token operator">=</span> <span class="token number">00000000000000000000000000001011</span>Output<span class="token operator">:</span> <span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h3 id="method-1-直观方法"><a href="#method-1-直观方法" class="headerlink" title="method 1: 直观方法"></a>method 1: 直观方法</h3><p>每次取<code>n</code>的最低位，如果是1，计数器就加1<br>然后<code>n</code>右移一位，因为无符号数右移是逻辑右移，最高位补0，所以<code>n</code>最终会变成0</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">hammingWeight</span><span class="token punctuation">(</span><span class="token keyword">uint32_t</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cnt <span class="token operator">+=</span> n <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">;</span>        n <span class="token operator">>>=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> cnt<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="method-2-位运算"><a href="#method-2-位运算" class="headerlink" title="method 2: 位运算"></a>method 2: 位运算</h3><p><code>lowBit</code>函数返回二进制最低位的1和后面的0，比如<code>1100</code>返回<code>100</code><br><code>1100</code>返回<code>100</code>，做差得<code>1000</code>，<code>ans=1</code><br><code>1000</code>返回<code>1000</code>，做差得<code>0</code>，<code>ans=2</code>，结束</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">uint32_t</span> <span class="token function">lowBit</span><span class="token punctuation">(</span><span class="token keyword">uint32_t</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> x <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token operator">-</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">hammingWeight</span><span class="token punctuation">(</span><span class="token keyword">uint32_t</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        n <span class="token operator">-=</span> <span class="token function">lowBit</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        cnt<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> cnt<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可以用<code>n &amp; (n - 1)</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">hammingWeight</span><span class="token punctuation">(</span><span class="token keyword">uint32_t</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> cnt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        n <span class="token operator">=</span> n <span class="token operator">&amp;</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cnt<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> cnt<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 位运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>27-移除元素</title>
      <link href="2021/05/27/LeetCode-27-%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/"/>
      <url>2021/05/27/LeetCode-27-%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-27-Remove-Element"><a href="#LeetCode-27-Remove-Element" class="headerlink" title="LeetCode 27. Remove Element"></a>LeetCode 27. Remove Element</h2><p><a href="https://leetcode.com/problems/remove-element/">LeetCode-27</a></p><p>Given an integer array <code>nums</code> and an integer <code>val</code>, remove all occurrences of val in nums in-place. The relative order of the elements <code>may be changed</code>.</p><p>Return k after placing the final result in the first k slots of nums.</p><p>Do not allocate extra space for another array. You must do this by modifying the input array in-place with $O(1)$ extra memory.</p><h3 id="method-1-反向双指针"><a href="#method-1-反向双指针" class="headerlink" title="method 1: 反向双指针"></a>method 1: 反向双指针</h3><center><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/27/1.png#pic_center" width="100%" height="100%"></center><center><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/27/2.png#pic_center" width="100%" height="100%"></center><p>双指针，前指针找等于<code>val</code>的数，后指针找不等于<code>val</code>的数，然后交换。</p><p><strong>注意</strong>：这种方法会改变元素的相对位置</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">removeElement</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">!=</span> val<span class="token punctuation">)</span> l<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>r<span class="token punctuation">]</span> <span class="token operator">==</span> val<span class="token punctuation">)</span> r<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token function">swap</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">==</span> val <span class="token operator">?</span> l <span class="token operator">:</span> l <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="method-2-同向双指针"><a href="#method-2-同向双指针" class="headerlink" title="method 2: 同向双指针"></a>method 2: 同向双指针</h3><p>不改变相对位置</p><ul><li>如果右指针不等于<code>val</code>，就把右指针的值赋给左指针，同时移动一格</li><li>如果右指针等于<code>val</code>，右指针移动，左指针不动</li></ul><p>时间复杂度：$O(n)$<br>空间复杂度：$O(1)$</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">removeElement</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            nums<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            index<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> index<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="LeetCode-283-Move-Zeroes"><a href="#LeetCode-283-Move-Zeroes" class="headerlink" title="LeetCode 283. Move Zeroes"></a>LeetCode 283. Move Zeroes</h2><p>Given an integer array nums, move all <code>0&#39;s</code> to the <strong>end</strong> of it while maintaining the relative order of the non-zero elements.</p><p>Note that you must do this in-place without making a copy of the array.</p><p>Example 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h3 id="method"><a href="#method" class="headerlink" title="method"></a>method</h3><p>用同向双指针的方法，先把非零元素移到前面，再把后面的元素置0</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">moveZeroes</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span>             nums<span class="token punctuation">[</span>index<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> index <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> index<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        nums<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 双指针 </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5-替换空格</title>
      <link href="2021/05/26/%E5%89%91%E6%8C%87Offer-5-%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC/"/>
      <url>2021/05/26/%E5%89%91%E6%8C%87Offer-5-%E6%9B%BF%E6%8D%A2%E7%A9%BA%E6%A0%BC/</url>
      
        <content type="html"><![CDATA[<h2 id="剑指-Offer-05-替换空格"><a href="#剑指-Offer-05-替换空格" class="headerlink" title="剑指 Offer 05. 替换空格"></a>剑指 Offer 05. 替换空格</h2><p>请实现一个函数，把字符串 <code>s</code> 中的每个空格替换成<code>&quot;%20&quot;</code>。</p><h2 id="method-1-直接用string的特性"><a href="#method-1-直接用string的特性" class="headerlink" title="method 1: 直接用string的特性"></a>method 1: 直接用string的特性</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">string <span class="token function">replaceSpace</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    string t<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> elem <span class="token operator">:</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>elem <span class="token operator">==</span> <span class="token string">' '</span><span class="token punctuation">)</span> t <span class="token operator">+=</span> <span class="token string">"%20"</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> t <span class="token operator">+=</span> elem<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> t<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>执行用时<span class="token operator">:</span> <span class="token number">4</span> ms内存消耗<span class="token operator">:</span> <span class="token number">6.1</span> MB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="method-2-模拟"><a href="#method-2-模拟" class="headerlink" title="method 2: 模拟"></a>method 2: 模拟</h2><p>两个指针从后往前赋值，<code>p1</code>指向原<code>string</code>的末尾，<code>p2</code>指向新<code>string</code>末尾，如果<code>p1</code>不是空格，给<code>p2</code>赋值<code>p1</code>，否则<code>p2</code>从后往前赋值<code>%20</code><br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">string <span class="token function">replaceSpace</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> len <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isspace</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> s <span class="token operator">+=</span> <span class="token string">"  "</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> p1 <span class="token operator">=</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> p2 <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>p1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isspace</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>p1<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            s<span class="token punctuation">[</span>p2<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>p1<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            s<span class="token punctuation">[</span>p2<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'0'</span><span class="token punctuation">;</span>            s<span class="token punctuation">[</span>p2<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'2'</span><span class="token punctuation">;</span>            s<span class="token punctuation">[</span>p2<span class="token operator">--</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'%'</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        p1<span class="token operator">--</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> s<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>执行用时<span class="token operator">:</span> <span class="token number">0</span> ms内存消耗<span class="token operator">:</span> <span class="token number">6.1</span> MB<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>]]></content>
      
      
      <categories>
          
          <category> 剑指Offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>4.2-算术运算符</title>
      <link href="2021/05/26/C-Primer-4-2-%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
      <url>2021/05/26/C-Primer-4-2-%E7%AE%97%E6%9C%AF%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<h2 id="除法与取模的符号"><a href="#除法与取模的符号" class="headerlink" title="除法与取模的符号"></a>除法与取模的符号</h2><p>除法：符号相同商为正，否则为负<br>取模：符号与被取模数相同。<code>m % n</code>的结果符号与<code>m</code>相同</p>]]></content>
      
      
      
        <tags>
            
            <tag> C++Primer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>9-回文数</title>
      <link href="2021/05/25/LeetCode-9-%E5%9B%9E%E6%96%87%E6%95%B0/"/>
      <url>2021/05/25/LeetCode-9-%E5%9B%9E%E6%96%87%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-9-Palindrome-Number"><a href="#LeetCode-9-Palindrome-Number" class="headerlink" title="LeetCode 9. Palindrome Number"></a>LeetCode 9. Palindrome Number</h2><p><a href="https://leetcode.com/problems/palindrome-number/">LeetCode-9</a></p><p>Given an integer x, return true if x is palindrome integer.</p><p>An integer is a <code>palindrome</code> when it reads the same backward as forward. For example, 121 is palindrome while 123 is not.</p><p>示例 1：<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">输入：x <span class="token operator">=</span> <span class="token number">121</span>输出：<span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><p>示例 2：<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">输入：x <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">121</span>输出：<span class="token boolean">false</span>解释：从左向右读<span class="token punctuation">,</span> 为 <span class="token operator">-</span><span class="token number">121</span> 。 从右向左读<span class="token punctuation">,</span> 为 <span class="token number">121</span><span class="token operator">-</span> 。因此它不是一个回文数。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></p><h3 id="method"><a href="#method" class="headerlink" title="method"></a>method</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token comment">// 负数肯定是false</span>    <span class="token keyword">long</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> temp <span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token comment">// 反转可能会超出int</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        num <span class="token operator">=</span> num <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> x <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">;</span>        x <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> temp <span class="token operator">==</span> num<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 模拟 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>69-x的平方根</title>
      <link href="2021/05/24/LeetCode-69-x%E7%9A%84%E5%B9%B3%E6%96%B9%E6%A0%B9/"/>
      <url>2021/05/24/LeetCode-69-x%E7%9A%84%E5%B9%B3%E6%96%B9%E6%A0%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-69-Sqrt-x"><a href="#LeetCode-69-Sqrt-x" class="headerlink" title="LeetCode 69. Sqrt(x)"></a>LeetCode 69. Sqrt(x)</h2><p><a href="https://leetcode.com/problems/sqrtx/">LeetCode-69</a></p><p>Given a <strong>non-negative</strong> integer <code>x</code>, compute and return the <code>square root</code> of x.</p><p>Since the return type is an <code>integer</code>, the decimal digits are <code>truncated</code>, and only the integer part of the result is returned.</p><p>示例 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">输入<span class="token operator">:</span> <span class="token number">4</span>输出<span class="token operator">:</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><p>示例 2:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">输入<span class="token operator">:</span> <span class="token number">8</span>输出<span class="token operator">:</span> <span class="token number">2</span>说明<span class="token operator">:</span> <span class="token number">8</span> 的平方根是 <span class="token number">2.82842</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">,</span>      由于返回类型是整数，小数部分将被舍去。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></p><h3 id="method-二分法"><a href="#method-二分法" class="headerlink" title="method: 二分法"></a>method: 二分法</h3><p>模板二：满足条件的最大数<br><code>r</code>和<code>l</code>相加可能超过<code>int</code>，所以用<code>long</code><br>两个<code>mid</code>相乘也可能越界，把一个除到另一边去</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">mySqrt</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>l <span class="token operator">&lt;</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">unsigned</span> <span class="token keyword">long</span> mid <span class="token operator">=</span> l <span class="token operator">+</span> r <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token comment">// 左移一位就相当于除以2</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mid <span class="token operator">&lt;=</span> x <span class="token operator">/</span> mid<span class="token punctuation">)</span> l <span class="token operator">=</span> mid<span class="token punctuation">;</span>    <span class="token comment">// 把乘移到另一边</span>        <span class="token keyword">else</span> r <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> l<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二分法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>64-求1到n的和</title>
      <link href="2021/05/24/%E5%89%91%E6%8C%87Offer-64-%E6%B1%821%E5%88%B0n%E7%9A%84%E5%92%8C/"/>
      <url>2021/05/24/%E5%89%91%E6%8C%87Offer-64-%E6%B1%821%E5%88%B0n%E7%9A%84%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="剑指-Offer-64-求1-2-…-n"><a href="#剑指-Offer-64-求1-2-…-n" class="headerlink" title="剑指 Offer 64. 求1+2+…+n"></a>剑指 Offer 64. 求1+2+…+n</h2><p>求 1+2+…+n ，要求不能使用乘除法、for、while、if、else、switch、case等关键字及条件判断语句（A?B:C）。</p><h2 id="method"><a href="#method" class="headerlink" title="method"></a>method</h2><p>用递归</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">sumNums</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> n <span class="token operator">+</span> <span class="token function">sumNums</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 剑指Offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 递归 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>39-数组中出现次数超过一半的数字</title>
      <link href="2021/05/23/%E5%89%91%E6%8C%87Offer-39-%E6%95%B0%E7%BB%84%E4%B8%AD%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E8%B6%85%E8%BF%87%E4%B8%80%E5%8D%8A%E7%9A%84%E6%95%B0%E5%AD%97/"/>
      <url>2021/05/23/%E5%89%91%E6%8C%87Offer-39-%E6%95%B0%E7%BB%84%E4%B8%AD%E5%87%BA%E7%8E%B0%E6%AC%A1%E6%95%B0%E8%B6%85%E8%BF%87%E4%B8%80%E5%8D%8A%E7%9A%84%E6%95%B0%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<h2 id="剑指-Offer-39-数组中出现次数超过一半的数字"><a href="#剑指-Offer-39-数组中出现次数超过一半的数字" class="headerlink" title="剑指 Offer 39. 数组中出现次数超过一半的数字"></a>剑指 Offer 39. 数组中出现次数超过一半的数字</h2><p>数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。</p><p>你可以假设数组是非空的，并且给定的数组总是存在多数元素。</p><p>示例 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">输入<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>输出<span class="token operator">:</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h2 id="method"><a href="#method" class="headerlink" title="method"></a>method</h2><p>利用<code>map</code>保存每个数字出现的次数，超过一半就返回</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">majorityElement</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">></span> m<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> elem <span class="token operator">:</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        m<span class="token punctuation">[</span>elem<span class="token punctuation">]</span><span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>m<span class="token punctuation">[</span>elem<span class="token punctuation">]</span> <span class="token operator">>=</span> count<span class="token punctuation">)</span> <span class="token keyword">return</span> elem<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 剑指Offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2-数据信息表示方法</title>
      <link href="2021/05/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86-2-%E6%95%B0%E6%8D%AE%E4%BF%A1%E6%81%AF%E8%A1%A8%E7%A4%BA%E6%96%B9%E6%B3%95/"/>
      <url>2021/05/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86-2-%E6%95%B0%E6%8D%AE%E4%BF%A1%E6%81%AF%E8%A1%A8%E7%A4%BA%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="符号数表示"><a href="#符号数表示" class="headerlink" title="符号数表示"></a>符号数表示</h2><p>原码：最高位为符号，其余二进制真值<br>补码：最高位符号</p><ul><li>正：与原码相同</li><li>负：符号位不变，其余<strong>取反</strong>后再<strong>加1</strong></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token operator">-</span><span class="token number">69</span>原码：<span class="token number">1100</span> <span class="token number">0101</span>补码：<span class="token number">1011</span> <span class="token number">1011</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>8位原码的表示范围：<strong>-127 ~ 127</strong><br>8位补码的表示范围：<strong>-128 ~ 127</strong><br>因为补码利用了<code>-0</code>这个编码，作为最小的负数<br>比如8位有符号数，最小数<code>-128</code>的编码就是<code>1000 0000</code><br>最大数<code>127</code>的编码是<code>0111 1111</code>(正数的补码和原码一样)<br>所以补码可表示范围比原码多1<br>n位数：$-2^{n-1} \sim 2^{n-1}-1$</p><p><strong>tips:</strong><br>因为计算机中以补码形式存储数据，所以<code>32</code>位的有符号数的<code>int</code>的范围是：$-2^{31} \sim 2^{31}-1$，即 <strong>-2147483648 ~ 2147483647</strong></p><p><code>16</code>位的有符号数的<code>short</code>的范围是：$-2^{15} \sim 2^{15}-1$，即 <strong>-32768 ~ 32767</strong></p><ul><li>已知<code>x</code>的补码，求<code>-x</code>的补码：符号位、数值位全部取反，再<code>+1</code></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token operator">-</span><span class="token number">69</span>补码：<span class="token number">1011</span> <span class="token number">1011</span>取反<span class="token operator">+</span><span class="token number">1</span>：<span class="token number">0100</span> <span class="token number">0101</span> 即<span class="token number">69</span>的补码<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">2147483647</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> a<span class="token operator">+</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">-</span><span class="token number">2147483648</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>反码</p><ul><li>正数：与补码相同</li><li>负数：原码符号不变，其余取反</li></ul><p>移码：补码符号位取反，移码只能用于表示整数</p><center><img src="/2021/05/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86-2-%E6%95%B0%E6%8D%AE%E4%BF%A1%E6%81%AF%E8%A1%A8%E7%A4%BA%E6%96%B9%E6%B3%95/1.png#pic_center" width="100%" height="100%"></center><p>真值增大时，移码也是增大的</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><center><img src="/2021/05/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86-2-%E6%95%B0%E6%8D%AE%E4%BF%A1%E6%81%AF%E8%A1%A8%E7%A4%BA%E6%96%B9%E6%B3%95/2.png#pic_center" width="100%" height="100%"></center><h2 id="补码的作用"><a href="#补码的作用" class="headerlink" title="补码的作用"></a>补码的作用</h2><p>用加法运算替换减法运算<br>88-66<br>找到-66的补码：<br>模$2^{8}$ - 66的绝对值(补码最原始的计算方式)<br><code>= 1 0000 0000 - 0100 0100 = 1011 1110</code><br>然后用 <code>88 = 0101 1000</code>，所以<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">   <span class="token number">0101</span> <span class="token number">1000</span><span class="token operator">+</span>  <span class="token number">1011</span> <span class="token number">1110</span><span class="token operator">=</span> <span class="token number">10001</span> <span class="token number">0110</span>转化成十进制就是<span class="token number">22</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></p><h2 id="算数移位"><a href="#算数移位" class="headerlink" title="算数移位"></a>算数移位</h2><center><img src="/2021/05/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86-2-%E6%95%B0%E6%8D%AE%E4%BF%A1%E6%81%AF%E8%A1%A8%E7%A4%BA%E6%96%B9%E6%B3%95/4.png#pic_center" width="100%" height="100%"></center><p><strong>补码</strong><br>以最低位的1为分界<br>右移：前段跟反码一样，所以补1<br>左移：后段跟原码一样，所以补0</p><center><img src="/2021/05/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86-2-%E6%95%B0%E6%8D%AE%E4%BF%A1%E6%81%AF%E8%A1%A8%E7%A4%BA%E6%96%B9%E6%B3%95/3.png#pic_center" width="100%" height="100%"></center><h2 id="逻辑移位"><a href="#逻辑移位" class="headerlink" title="逻辑移位"></a>逻辑移位</h2><p>逻辑移位可以看作是对无符号数的算数移位，<strong>符号位也会移动</strong>，最高位补0</p><h2 id="原码、补码一位乘法"><a href="#原码、补码一位乘法" class="headerlink" title="原码、补码一位乘法"></a>原码、补码一位乘法</h2><p>原码：</p><ul><li>符号位通过异或确定，数值位由被乘数和乘数的绝对值进行n轮加法、移位</li><li>每次加法可能是<code>+0</code>、<code>+x的原码</code>，看<code>MQ</code>的最低位<code>(0 1)</code></li><li>每次移位是逻辑右移</li></ul><p>补码：</p><ul><li>符号位、数值位都是由被乘数和乘数进行n轮加法、移位，最后还有一次加法</li><li>每次加法可能是<code>+0</code>、<code>+x的补码</code>、<code>+(-x)的的补码</code>，看辅助位和<code>MQ&#39;最低位&#39;</code>的差值<code>(0 1 -1)</code></li><li>每次移位是补码的算数右移，整数补0，负数补1</li></ul><h2 id="大小端存储"><a href="#大小端存储" class="headerlink" title="大小端存储"></a>大小端存储</h2><center><img src="/2021/05/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86-2-%E6%95%B0%E6%8D%AE%E4%BF%A1%E6%81%AF%E8%A1%A8%E7%A4%BA%E6%96%B9%E6%B3%95/5.png#pic_center" width="100%" height="100%"></center><h2 id="边界对齐"><a href="#边界对齐" class="headerlink" title="边界对齐"></a>边界对齐</h2><center><img src="/2021/05/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BB%84%E6%88%90%E5%8E%9F%E7%90%86-2-%E6%95%B0%E6%8D%AE%E4%BF%A1%E6%81%AF%E8%A1%A8%E7%A4%BA%E6%96%B9%E6%B3%95/6.png#pic_center" width="100%" height="100%"></center>]]></content>
      
      
      <categories>
          
          <category> CS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 计算机组成原理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vim基本操作</title>
      <link href="2021/05/22/Linux-vim%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
      <url>2021/05/22/Linux-vim%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<ul><li><code>vim ~/.vimrc</code>可以编辑配置文件</li><li><code>syntax on</code> 语法高亮</li><li><code>set number</code> 行号</li><li><code>w(word)</code> 移动到下一个单词，b移动到上一个单词</li><li><code>page up/down</code> 上下翻页 也可以用 <code>ctrl+f(forward)/b(back)</code></li><li><code>cc</code> 剪切进入编辑，<code>cnc</code> 剪切第n行</li><li><code>v</code> 进入visual模式，可以选择多行，按<code>c</code>删除</li><li><code>starti</code> 可以从第一条指令开始执行程序</li><li><code>layout asm</code> 可以更方便地查看汇编</li><li><code>info register</code> 可以查看寄存器</li></ul><h2 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h2><h3 id="命令模式的常用命令"><a href="#命令模式的常用命令" class="headerlink" title="命令模式的常用命令"></a>命令模式的常用命令</h3><table><tbody align="center">    <tr>        <th bgcolor="#A1A3A6">命令</th><th bgcolor="#A1A3A6">作用</th>    </tr>    <tr>        <td>dd</td><td>删除(剪切)光标所在行</td>    </tr>    <tr>        <td>xdd</td><td>删除(剪切)从光标所在行开始的x行</td>    </tr>    <tr>        <td>行号+gg</td><td>快速跳转到该行，gg跳到首行</td>    </tr>    <tr>        <td>G</td><td>调转到末尾</td>    </tr>    <tr>        <td>/+内容+enter</td><td>搜索</td>    </tr>    <tr>        <td>n</td><td>显示搜索命令定位到的下一个字符串</td>    </tr>    <tr>        <td>N</td><td>显示搜索命令定位到的上一个字符串</td>    </tr>    <tr>        <td>p</td><td>将之前剪切(dd)或复制(yy)的数据粘贴到光标后面</td>    </tr>    <tr>        <td>u</td><td>撤销上一步的操作</td>    </tr>    <tr>        <td>yy</td><td>复制光标所在行</td>    </tr>    <tr>        <td>xyy</td><td>复制从光标所在行开始的x行</td>    </tr>    <tr>        <td>^</td><td>跳到行首</td>    </tr>    <tr>        <td>$</td><td>跳到行末</td>    </tr></tbody></table><h3 id="底行命令模式的常用命令"><a href="#底行命令模式的常用命令" class="headerlink" title="底行命令模式的常用命令"></a>底行命令模式的常用命令</h3><table><tbody align="center">    <tr>        <th bgcolor="#A1A3A6">命令</th><th bgcolor="#A1A3A6">作用</th>    </tr>    <tr>        <td>:w</td><td>保存</td>    </tr>    <tr>        <td>:q</td><td>退出</td>    </tr>    <tr>        <td>:q!</td><td>强制退出(放弃对文档的修改内容)</td>    </tr>    <tr>        <td>:wq!</td><td>强制保存退出</td>    </tr>    <tr>        <td>:整数</td><td>跳转到该行</td>    </tr></tbody></table><h2 id="gcc"><a href="#gcc" class="headerlink" title="gcc"></a>gcc</h2><p>.c文件 -&gt; 预处理(preprocess) -&gt; .i文件 -&gt; 编译(compile) -&gt; .s文件 -&gt; 汇编(assembly) -&gt; .o文件 -&gt; 链接(link) -&gt; a.out</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>40-最小的k个数</title>
      <link href="2021/05/21/%E5%89%91%E6%8C%87Offer-40-%E6%9C%80%E5%B0%8F%E7%9A%84k%E4%B8%AA%E6%95%B0/"/>
      <url>2021/05/21/%E5%89%91%E6%8C%87Offer-40-%E6%9C%80%E5%B0%8F%E7%9A%84k%E4%B8%AA%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="剑指-Offer-40-最小的k个数"><a href="#剑指-Offer-40-最小的k个数" class="headerlink" title="剑指 Offer 40. 最小的k个数"></a>剑指 Offer 40. 最小的k个数</h2><p>输入整数数组 <code>arr</code> ，找出其中最小的 <code>k</code> 个数。例如，输入4、5、1、6、2、7、3、8这8个数字，则最小的4个数字是1、2、3、4。</p><p>示例 1：<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">输入：arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">2</span>输出：<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span> 或者 <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><p>示例 2：<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">输入：arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">1</span>输出：<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h2 id="method"><a href="#method" class="headerlink" title="method"></a>method</h2><p>用优先队列维护一个长度为<code>k</code>的大根堆<br>如果后面的数比堆里最大的数小，就要替换掉堆中的数</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">getLeastNumbers</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>k <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">return</span> res<span class="token punctuation">;</span>         <span class="token comment">// 返回空</span>    priority_queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">,</span> less<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> q<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> k<span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 先放入k个数</span>        <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 把堆里的数据搬到vector</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 剑指Offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 堆 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>48-最长不含重复字符的子字符串</title>
      <link href="2021/05/20/%E5%89%91%E6%8C%87Offer-48-%E6%9C%80%E9%95%BF%E4%B8%8D%E5%90%AB%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
      <url>2021/05/20/%E5%89%91%E6%8C%87Offer-48-%E6%9C%80%E9%95%BF%E4%B8%8D%E5%90%AB%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="剑指-Offer-48-最长不含重复字符的子字符串"><a href="#剑指-Offer-48-最长不含重复字符的子字符串" class="headerlink" title="剑指 Offer 48. 最长不含重复字符的子字符串"></a>剑指 Offer 48. 最长不含重复字符的子字符串</h2><p>请从字符串中找出一个最长的不包含重复字符的子字符串，计算该最长子字符串的长度。</p><p>示例 1:<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">输入<span class="token operator">:</span> <span class="token string">"abcabcbb"</span>输出<span class="token operator">:</span> <span class="token number">3</span> 解释<span class="token operator">:</span> 因为无重复字符的最长子串是 <span class="token string">"abc"</span>，所以其长度为 <span class="token number">3</span>。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></p><h2 id="method-双指针"><a href="#method-双指针" class="headerlink" title="method: 双指针"></a>method: 双指针</h2><p>用<code>[l, r)</code>维护一个不含重复元素的子串<br>利用<code>set</code>集合不含重复元素的特性<br>如果<code>r</code>所指的元素集合中已经存在，就把<code>l</code>所指的元素删除掉，再看<code>r</code>所指元素是否在集合中</p><center><img src="/2021/05/20/%E5%89%91%E6%8C%87Offer-48-%E6%9C%80%E9%95%BF%E4%B8%8D%E5%90%AB%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2/222.png#pic_center" width="100%" height="100%"></center><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span>string s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    set<span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">></span> st<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>r <span class="token operator">&lt;</span> s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> l <span class="token operator">&lt;=</span> r<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>st<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> st<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 如果r所指元素不在集合中</span>            st<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            r<span class="token operator">++</span><span class="token punctuation">;</span>            res <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> r <span class="token operator">-</span> l<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 串长度为(r-1)-l+1=r-l</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            st<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 删掉l所指的元素</span>            l<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> res<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 剑指Offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符串 </tag>
            
            <tag> 双指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3-数组中重复的数字</title>
      <link href="2021/05/19/%E5%89%91%E6%8C%87Offer-3-%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97/"/>
      <url>2021/05/19/%E5%89%91%E6%8C%87Offer-3-%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<h2 id="剑指-Offer-03-数组中重复的数字"><a href="#剑指-Offer-03-数组中重复的数字" class="headerlink" title="剑指 Offer 03. 数组中重复的数字"></a>剑指 Offer 03. 数组中重复的数字</h2><p>在一个长度为 <code>n</code> 的数组 <code>nums</code> 里的所有数字都在 <code>0~n-1</code> 的范围内。数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。请找出数组中任意一个重复的数字。</p><p>示例 1：<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">输入：<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span>输出：<span class="token number">2</span> 或 <span class="token number">3</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></p><h2 id="method"><a href="#method" class="headerlink" title="method"></a>method</h2><p>思路：因为限制时间复杂度为$O(n)$，所以不能用排序<br>对于这种元素是<code>[0, n-1]</code>的数组，可以把元素放回自己的<code>index</code>，如果要放回的位置已经有元素了，并且是没错的，就说明重复了</p><center><img src="/2021/05/19/%E5%89%91%E6%8C%87Offer-3-%E6%95%B0%E7%BB%84%E4%B8%AD%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97/03.png#pic_center" width="60%" height="60%"></center><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span>vi<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> vi<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        vi<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> vi<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        vi<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">findRepeatNumber</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// 遍历数组</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">!=</span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token comment">// 发现和index对不上</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> num<span class="token punctuation">[</span>num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>      <span class="token comment">// 如果那个位置已经正确</span>                    <span class="token keyword">return</span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>              <span class="token comment">// 就说明重复了</span>                <span class="token function">swap</span><span class="token punctuation">(</span>num<span class="token punctuation">,</span> i<span class="token punctuation">,</span> num<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// 否则交换两个数</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 剑指Offer </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3.2-标准库类型string</title>
      <link href="2021/05/19/C-Primer-3-2-%E6%A0%87%E5%87%86%E5%BA%93%E7%B1%BB%E5%9E%8Bstring/"/>
      <url>2021/05/19/C-Primer-3-2-%E6%A0%87%E5%87%86%E5%BA%93%E7%B1%BB%E5%9E%8Bstring/</url>
      
        <content type="html"><![CDATA[<h2 id="string-size-type类型"><a href="#string-size-type类型" class="headerlink" title="string::size_type类型"></a>string::size_type类型</h2><p><code>str.size()</code>的返回类型是无符号数<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">auto</span> len <span class="token operator">=</span> str<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> len <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">*</span> len <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>输出：<span class="token number">18446744073709551615</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><code>str.size()</code>的返回结果是<code>size_type</code>类型，貌似是<code>unsigned long long</code>，反正就是无符号数，注意不要和有符号数混用</p>]]></content>
      
      
      
        <tags>
            
            <tag> C++Primer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2.1-基本内置类型</title>
      <link href="2021/05/19/C-Primer-2-1-%E5%9F%BA%E6%9C%AC%E5%86%85%E7%BD%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>2021/05/19/C-Primer-2-1-%E5%9F%BA%E6%9C%AC%E5%86%85%E7%BD%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="切勿混用带符号类型和无符号类型"><a href="#切勿混用带符号类型和无符号类型" class="headerlink" title="切勿混用带符号类型和无符号类型"></a>切勿混用带符号类型和无符号类型</h2><p>因为<strong>带符号类型</strong>会自动转换为<strong>无符号数</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">unsigned</span> <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>输出：<span class="token number">4294967295</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>危</strong><br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> y <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">*</span> y <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>输出：<span class="token number">4294967295</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><br>带符号类型的x会被转换为无符号类型的4294967295</p>]]></content>
      
      
      
        <tags>
            
            <tag> C++Primer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>String</title>
      <link href="2021/05/15/C-exercise-String/"/>
      <url>2021/05/15/C-exercise-String/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">String</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> cstr <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">const</span> String<span class="token operator">&amp;</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>    String<span class="token operator">&amp;</span> <span class="token keyword">operator</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">const</span> String<span class="token operator">&amp;</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">~</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> <span class="token function">get_c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> m_data<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">char</span><span class="token operator">*</span> m_data<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">inline</span> <span class="token class-name">String</span><span class="token operator">::</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> cstr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>cstr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        m_data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token function">strlen</span><span class="token punctuation">(</span>cstr<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token function">strcpy</span><span class="token punctuation">(</span>m_data<span class="token punctuation">,</span> cstr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        m_data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token operator">*</span>m_data <span class="token operator">=</span> <span class="token string">'\0'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">inline</span> <span class="token class-name">String</span><span class="token operator">::</span><span class="token operator">~</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> m_data<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">inline</span> <span class="token class-name">String</span><span class="token operator">::</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">const</span> String<span class="token operator">&amp;</span> str<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    m_data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span>m_data<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>m_data<span class="token punctuation">,</span> str<span class="token punctuation">.</span>m_data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 赋值前必须检查是否是自我赋值</span><span class="token keyword">inline</span> String<span class="token operator">&amp;</span> String<span class="token operator">::</span><span class="token keyword">operator</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">const</span> String<span class="token operator">&amp;</span> str<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> <span class="token operator">&amp;</span>str<span class="token punctuation">)</span>         <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> m_data<span class="token punctuation">;</span>    m_data <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span>m_data<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>m_data<span class="token punctuation">,</span> str<span class="token punctuation">.</span>m_data<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* 重载流输出运算符 * 必须放在类外面，或者声明为友元函数 */</span><span class="token keyword">inline</span> ostream<span class="token operator">&amp;</span> <span class="token keyword">operator</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>ostream<span class="token operator">&amp;</span> os<span class="token punctuation">,</span> <span class="token keyword">const</span> String<span class="token operator">&amp;</span> str<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> os <span class="token operator">&lt;&lt;</span> str<span class="token punctuation">.</span><span class="token function">get_c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> ptr <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>    String <span class="token function">s1</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> s1 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    String <span class="token function">s2</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> s2 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    String s3<span class="token punctuation">;</span>    s3 <span class="token operator">=</span> s1<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> s3 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>条形图</title>
      <link href="2021/05/12/Python-%E7%94%BB%E5%9B%BE-%E6%9D%A1%E5%BD%A2%E5%9B%BE/"/>
      <url>2021/05/12/Python-%E7%94%BB%E5%9B%BE-%E6%9D%A1%E5%BD%A2%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<p>不同y轴的图例表示方法</p><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">from</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">import</span> MultipleLocator<span class="token keyword">from</span> matplotlib <span class="token keyword">import</span> rcnum_list1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">152.8</span><span class="token punctuation">,</span><span class="token number">122.23</span><span class="token punctuation">,</span><span class="token number">101.9</span><span class="token punctuation">,</span><span class="token number">87.31</span><span class="token punctuation">,</span><span class="token number">76.4</span><span class="token punctuation">,</span><span class="token number">68</span><span class="token punctuation">,</span><span class="token number">61.15</span><span class="token punctuation">,</span><span class="token number">55.6</span><span class="token punctuation">,</span><span class="token number">52.41</span><span class="token punctuation">]</span>num_list2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">23393.3</span><span class="token punctuation">,</span><span class="token number">17956.2</span><span class="token punctuation">,</span><span class="token number">14406</span><span class="token punctuation">,</span><span class="token number">11938.7</span><span class="token punctuation">,</span><span class="token number">10180.5</span><span class="token punctuation">,</span><span class="token number">8899.45</span><span class="token punctuation">,</span><span class="token number">7917.17</span><span class="token punctuation">,</span><span class="token number">7178.32</span><span class="token punctuation">,</span><span class="token number">6832.4</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>num_list2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    num_list2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">/=</span> <span class="token number">1000</span>fig <span class="token operator">=</span> plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span>ax <span class="token operator">=</span> fig<span class="token punctuation">.</span>add_subplot<span class="token punctuation">(</span><span class="token number">111</span><span class="token punctuation">)</span>x <span class="token operator">=</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>bar<span class="token punctuation">(</span>x<span class="token operator">=</span>x<span class="token punctuation">,</span> height<span class="token operator">=</span>num_list1<span class="token punctuation">,</span> width<span class="token operator">=</span><span class="token number">0.4</span><span class="token punctuation">,</span> alpha<span class="token operator">=</span><span class="token number">0.8</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'#00a6ac'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'time(s)'</span><span class="token punctuation">)</span>ax2 <span class="token operator">=</span> ax<span class="token punctuation">.</span>twinx<span class="token punctuation">(</span><span class="token punctuation">)</span>ax2<span class="token punctuation">.</span>bar<span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">0.4</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> x<span class="token punctuation">]</span><span class="token punctuation">,</span> height<span class="token operator">=</span>num_list2<span class="token punctuation">,</span> width<span class="token operator">=</span><span class="token number">0.4</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token string">'#d71345'</span><span class="token punctuation">,</span> label<span class="token operator">=</span><span class="token string">'Energy Consumption(kJ)'</span><span class="token punctuation">)</span>fig<span class="token punctuation">.</span>legend<span class="token punctuation">(</span>loc<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> bbox_to_anchor<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> bbox_transform<span class="token operator">=</span>ax<span class="token punctuation">.</span>transAxes<span class="token punctuation">)</span>font <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'family'</span><span class="token punctuation">:</span> <span class="token string">'Arial'</span><span class="token punctuation">,</span> <span class="token string">'weight'</span><span class="token punctuation">:</span> <span class="token string">'normal'</span><span class="token punctuation">,</span> <span class="token string">'size'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">&#125;</span>ax<span class="token punctuation">.</span>set_xlabel<span class="token punctuation">(</span><span class="token string">"Maximal Speed(m/s)"</span><span class="token punctuation">,</span> font<span class="token punctuation">)</span>ax<span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span><span class="token string">'Time(s)'</span><span class="token punctuation">,</span> font<span class="token punctuation">)</span>x_locator <span class="token operator">=</span> MultipleLocator<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>      <span class="token comment"># 横轴间隔</span>ax<span class="token punctuation">.</span>xaxis<span class="token punctuation">.</span>set_major_locator<span class="token punctuation">(</span>x_locator<span class="token punctuation">)</span>ax<span class="token punctuation">.</span>spines<span class="token punctuation">[</span><span class="token string">'top'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_linewidth<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>   <span class="token comment"># 边框加粗</span>ax<span class="token punctuation">.</span>spines<span class="token punctuation">[</span><span class="token string">'bottom'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_linewidth<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>spines<span class="token punctuation">[</span><span class="token string">'left'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_linewidth<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>spines<span class="token punctuation">[</span><span class="token string">'right'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_linewidth<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>font2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'family'</span><span class="token punctuation">:</span> <span class="token string">'Arial'</span><span class="token punctuation">,</span> <span class="token string">'weight'</span><span class="token punctuation">:</span> <span class="token string">'normal'</span><span class="token punctuation">,</span> <span class="token string">'size'</span><span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token string">'color'</span><span class="token punctuation">:</span><span class="token string">'#d71345'</span><span class="token punctuation">&#125;</span>ax2<span class="token punctuation">.</span>set_ylabel<span class="token punctuation">(</span><span class="token string">'Energy Consumption(kJ)'</span><span class="token punctuation">,</span> font2<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>tick_params<span class="token punctuation">(</span>axis<span class="token operator">=</span><span class="token string">'y'</span><span class="token punctuation">,</span> colors<span class="token operator">=</span><span class="token string">'#d71345'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><center><img src="/2021/05/12/Python-%E7%94%BB%E5%9B%BE-%E6%9D%A1%E5%BD%A2%E5%9B%BE/1.png#pic_center" width="80%" height="80%" alt="test"></center>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>三维图</title>
      <link href="2021/05/12/Python-%E7%94%BB%E5%9B%BE-%E4%B8%89%E7%BB%B4%E5%9B%BE/"/>
      <url>2021/05/12/Python-%E7%94%BB%E5%9B%BE-%E4%B8%89%E7%BB%B4%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<h2 id="np-arange"><a href="#np-arange" class="headerlink" title="np.arange()"></a>np.arange()</h2><p>函数返回一个有<strong>起点</strong>和<strong>终点</strong>的<strong>固定步长</strong>的排列，如<code>[1,2,3,4,5]</code>，起点是1，终点是6，步长为1</p><ul><li>只有一个参数时表示<code>[0, n)</code>，默认步长为1</li></ul><pre class="line-numbers language-py" data-language="py"><code class="language-py">np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token number">1</span> <span class="token number">2</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>有两个参数表示起点到终点，默认步长为1</li></ul><pre class="line-numbers language-py" data-language="py"><code class="language-py">np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">5</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>三个参数表示起点、终点、步长</li></ul><pre class="line-numbers language-py" data-language="py"><code class="language-py">np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token number">3</span> <span class="token number">5</span> <span class="token number">7</span> <span class="token number">9</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>支持小数步长</li></ul><pre class="line-numbers language-py" data-language="py"><code class="language-py">np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">.</span>  <span class="token number">1.5</span> <span class="token number">2</span><span class="token punctuation">.</span>  <span class="token number">2.5</span> <span class="token number">3</span><span class="token punctuation">.</span>  <span class="token number">3.5</span> <span class="token number">4</span><span class="token punctuation">.</span>  <span class="token number">4.5</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="np-linspace"><a href="#np-linspace" class="headerlink" title="np.linspace()"></a>np.linspace()</h2><p>返回<code>start</code>到<code>stop</code>之间<strong>等间隔</strong>的<code>num</code>个点<br><pre class="line-numbers language-py" data-language="py"><code class="language-py">numpy<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span>start<span class="token punctuation">,</span> stop<span class="token punctuation">,</span> num<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">,</span> endpoint<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> retstep<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br><pre class="line-numbers language-py" data-language="py"><code class="language-py">np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token number">3.0</span><span class="token punctuation">,</span> num<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">.</span>   <span class="token number">2.25</span> <span class="token number">2.5</span>  <span class="token number">2.75</span> <span class="token number">3</span><span class="token punctuation">.</span>  <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h2 id="实例1"><a href="#实例1" class="headerlink" title="实例1"></a>实例1</h2><pre class="line-numbers language-py" data-language="py"><code class="language-py">x <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0.2</span><span class="token punctuation">)</span>y <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">0.2</span><span class="token punctuation">)</span>f_x_y <span class="token operator">=</span> np<span class="token punctuation">.</span>power<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> np<span class="token punctuation">.</span>power<span class="token punctuation">(</span>y<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token punctuation">)</span>ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>gca<span class="token punctuation">(</span>projection<span class="token operator">=</span><span class="token string">'3d'</span><span class="token punctuation">)</span>ax<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> f_x_y<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><center><img src="/2021/05/12/Python-%E7%94%BB%E5%9B%BE-%E4%B8%89%E7%BB%B4%E5%9B%BE/1.png#pic_center" width="80%" height="80%" alt="test"></center>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>04_初始化</title>
      <link href="2021/05/01/C-Effective-04-%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
      <url>2021/05/01/C-Effective-04-%E5%88%9D%E5%A7%8B%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h2 id="确定对象被使用前已经初始化"><a href="#确定对象被使用前已经初始化" class="headerlink" title="确定对象被使用前已经初始化"></a>确定对象被使用前已经初始化</h2><p>不同编译单元内定之<code>non-local static</code>对象的初始化次序是不确定的</p><p>广义的<code>static</code>对象包括：</p><ul><li><code>global</code>对象</li><li>定义于<code>namespace</code>作用域内的对象</li><li>在<code>class</code>内、函数内、<code>file</code>作用域内声明为<code>static</code>的对象</li></ul><p><code>local static</code>：定义在函数内的<code>static</code>对象</p><p>比如我有两个类<code>FileSystem</code>和<code>Directory</code></p><ol><li><code>FileSystem</code>的声明和定义</li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">class</span> <span class="token class-name">FileSystem</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">FileSystem</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">num</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    std<span class="token operator">::</span>size_t <span class="token function">getNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">int</span> num<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"FileSystem.h"</span></span>std<span class="token operator">::</span>size_t <span class="token class-name">FileSystem</span><span class="token operator">::</span><span class="token function">getNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> num<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><code>Directory</code>的声明和定义</li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"FileSystem.h"</span></span><span class="token keyword">class</span> <span class="token class-name">Directory</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Directory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">int</span> val<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"Directory.h"</span></span><span class="token keyword">extern</span> FileSystem tfs<span class="token punctuation">;</span>  <span class="token comment">// 这里声明了一个FileSystem对象，因为Directory的初始化要用到</span><span class="token class-name">Directory</span><span class="token operator">::</span><span class="token function">Directory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    std<span class="token operator">::</span>size_t disks <span class="token operator">=</span> tfs<span class="token punctuation">.</span><span class="token function">getNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    val <span class="token operator">=</span> disks<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token class-name">Directory</span><span class="token operator">::</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> val<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Directory tempDir<span class="token punctuation">;</span>  <span class="token comment">// 定义一个Directory对象</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><code>tfs</code>的定义</li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"FileSystem.h"</span></span>FileSystem <span class="token function">tfs</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ol><li><code>main</code>函数</li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"Directory.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">extern</span> Directory tempDir<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cout <span class="token operator">&lt;&lt;</span> tempDir<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发现输出不是我们预期的<code>10</code>，原因在于定义<code>dir</code>时调用了<code>Directory</code>的构造函数，用到了<code>FileSystem</code>的对象<code>tfs</code>，但这个<code>tfs</code>此时未必已经初始化了，因为编译器对文件的编译顺序没有严格的要求，所以会出现问题</p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>不要把<code>tfs</code>声明为全局变量，即<code>non-local static</code>变量，而要声明为<code>local static</code>，就是函数里面的<code>static</code>变量<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"Directory.h"</span></span><span class="token keyword">extern</span> FileSystem<span class="token operator">&amp;</span> <span class="token function">tfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Directory</span><span class="token operator">::</span><span class="token function">Directory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    std<span class="token operator">::</span>size_t disks <span class="token operator">=</span> <span class="token function">tfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getNum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    val <span class="token operator">=</span> disks<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token class-name">Directory</span><span class="token operator">::</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> val<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// Directory dir;   // dir也声明为non-local static</span>Directory<span class="token operator">&amp;</span> <span class="token function">dir</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> Directory tempDir<span class="token punctuation">;</span>    <span class="token keyword">return</span> tempDir<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"FileSystem.h"</span></span><span class="token comment">// FileSystem tfs(10);</span>FileSystem<span class="token operator">&amp;</span> <span class="token function">tfs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> FileSystem <span class="token function">fs</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 在函数里面定义，就是local static</span>    <span class="token keyword">return</span> fs<span class="token punctuation">;</span>                  <span class="token comment">// 返回引用</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"Directory.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">extern</span> Directory<span class="token operator">&amp;</span> <span class="token function">dir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token function">dir</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样就符合我们的预期了<br><code>tfs()</code>函数内部实现了<code>FileSystem</code>对象的初始化，调用该函数之后，就可以确保对象一定会被初始化了<br>所以用调用函数替换直接使用<code>non-local static</code>对象，就可以得到对象初始化保证</p>]]></content>
      
      
      
        <tags>
            
            <tag> Effective_C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>inline关键字</title>
      <link href="2021/04/30/C-inline%E5%85%B3%E9%94%AE%E5%AD%97/"/>
      <url>2021/04/30/C-inline%E5%85%B3%E9%94%AE%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<h2 id="1-类中内联"><a href="#1-类中内联" class="headerlink" title="1.类中内联"></a>1.类中内联</h2><p>头文件中声明方法</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class A&#123;public:    void f1(int x);    &#x2F;**     * @brief 类中定义了的函数是隐式内联函数,声明要想成为内联函数，必须在实现处(定义处)加inline关键字。     * @param x     * @param y     *&#x2F;    void Foo(int x,int y) &#123;&#125;; &#x2F;&#x2F; 定义即隐式内联函数！    void f1(int x); &#x2F;&#x2F; 声明后，要想成为内联函数，必须在定义处加inline&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实现文件中定义内联函数：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;#include &quot;inline.h&quot;using namespace std; &#x2F;** * @brief inline要起作用,inline要与函数定义放在一起,inline是一种“用于实现的关键字,而不是用于声明的关键字” * * @param x * @param y * * @return  *&#x2F;int Foo(int x,int y);  &#x2F;&#x2F; 函数声明inline int Foo(int x,int y) &#x2F;&#x2F; 函数定义&#123;    return x + y;&#125;&#x2F;&#x2F; 定义处加inline关键字，推荐这种写法！inline void A::f1(int x) &#123;&#125;int main() &#123;    cout&lt;&lt;Foo(1,2)&lt;&lt;endl;&#125;&#x2F;** * 编译器对 inline 函数的处理步骤 * 将 inline 函数体复制到 inline 函数调用点处； * 为所用 inline 函数中的局部变量分配内存空间； * 将 inline 函数的的输入参数和返回值映射到调用方法的局部变量空间中； * 如果 inline 函数有多个返回点，将其转变为 inline 函数代码块末尾的分支（使用 GOTO）。 *&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>内联能提高函数效率，但并不是所有的函数都定义成内联函数！内联是以代码膨胀(复制)为代价，仅仅省去了函数调用的开销，从而提高函数的执行效率。</p><ul><li><p>如果执行函数体内代码的时间相比于函数调用的开销较大，那么效率的收获会更少！</p></li><li><p>另一方面，每一处内联函数的调用都要复制代码，将使程序的总代码量增大，消耗更多的内存空间。</p></li></ul><p>以下情况不宜用内联：</p><p>（1）如果函数体内的代码比较长，使得内联将导致内存消耗代价比较高。</p><p>（2）如果函数体内出现循环，那么执行函数体内代码的时间要比函数调用的开销大。</p><h2 id="2-虚函数（virtual）可以是内联函数（inline）吗？"><a href="#2-虚函数（virtual）可以是内联函数（inline）吗？" class="headerlink" title="2.虚函数（virtual）可以是内联函数（inline）吗？"></a>2.虚函数（virtual）可以是内联函数（inline）吗？</h2><ul><li>虚函数可以是内联函数，内联是可以修饰虚函数的，但是当虚函数表现多态性的时候不能内联。</li><li>内联是在编译期建议编译器内联，而虚函数的多态性在运行期，编译器无法知道运行期调用哪个代码，因此虚函数表现为多态性时（运行期）不可以内联。</li><li><code>inline virtual</code> 唯一可以内联的时候是：编译器知道所调用的对象是哪个类（如 <code>Base::who()</code>），这只有在编译器具有实际对象而不是对象的指针或引用时才会发生。</li></ul><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include &lt;iostream&gt;  using namespace std;class Base &#123;public:    inline virtual void info() &#123;        cout &lt;&lt; &quot;I am Base&quot; &lt;&lt; endl;    &#125;    virtual ~Base() &#123;&#125;&#125;;class Derived : public Base &#123;public:    inline void info()  &#x2F;&#x2F; 不写inline时隐式内联    &#123;        cout &lt;&lt; &quot;I am Derived&quot; &lt;&lt; endl;    &#125;&#125;;int main()&#123;    &#x2F;&#x2F; 此处的虚函数 who()，是通过类（Base）的具体对象（b）来调用的，编译期间就能确定了，所以它可以是内联的，但最终是否内联取决于编译器。     Base b;    b.info();    &#x2F;&#x2F; 此处的虚函数是通过指针调用的，呈现多态性，需要在运行时期间才能确定，所以不能为内联。      Base *ptr &#x3D; new Derived();    ptr-&gt;info();    &#x2F;&#x2F; 因为Base有虚析构函数（virtual ~Base() &#123;&#125;），所以 delete 时，会先调用派生类（Derived）析构函数，再调用基类（Base）析构函数，防止内存泄漏。    delete ptr;    ptr &#x3D; nullptr;    return 0;&#125; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>03_const代替#defind</title>
      <link href="2021/04/29/C-Effective-03-const/"/>
      <url>2021/04/29/C-Effective-03-const/</url>
      
        <content type="html"><![CDATA[<h2 id="尽可能使用const代替-define"><a href="#尽可能使用const代替-define" class="headerlink" title="尽可能使用const代替#define"></a>尽可能使用const代替#define</h2><p>有时候需要重载<code>const</code>版本与非<code>const</code>版本的成员函数，但他们的代码又很多重复<br>所以可以直接用非<code>const</code>函数调用<code>const</code>函数</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Text</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span><span class="token operator">:</span>    string text<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Text</span><span class="token punctuation">(</span>string input<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">text</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">&amp;</span> <span class="token keyword">operator</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>size_t pos<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"const operator: "</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> text<span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">char</span><span class="token operator">&amp;</span> <span class="token keyword">operator</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">(</span>size_t pos<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"non-const operator: "</span><span class="token punctuation">;</span>        <span class="token comment">// return text[pos];</span>        <span class="token keyword">return</span> <span class="token keyword">const_cast</span><span class="token operator">&lt;</span><span class="token keyword">char</span><span class="token operator">&amp;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">static_cast</span><span class="token operator">&lt;</span><span class="token keyword">const</span> Text<span class="token operator">&amp;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">[</span>pos<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Text <span class="token function">t</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> t<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>static_cast</code>将<code>this</code>指针转换为<code>const</code>指针，这样就可以调用<code>const operator[]</code><br><code>const_cast</code>将返回值解除<code>const</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> Effective_C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>错题1</title>
      <link href="2021/04/29/NowCoder-%E9%94%99%E9%A2%981/"/>
      <url>2021/04/29/NowCoder-%E9%94%99%E9%A2%981/</url>
      
        <content type="html"><![CDATA[<ol><li><p>运算符优先级<br>算术运算符&gt;关系运算符&gt;逻辑运算符&gt;赋值运算符</p></li><li><p>(p++)-&gt;num<br>会先执行<code>p-&gt;num</code>，然后再<code>p++</code></p></li><li><p><code>getline()</code>读取一行字符</p></li><li><p>派生类的成员函数是虚函数，基类不是，就会执行基类的成员函数</p></li><li><p>除了类属关系运算符<code>&quot;.&quot;</code>、成员指针运算符<code>&quot;.*&quot;</code>、作用域运算符<code>&quot;::&quot;</code>、<code>sizeof</code>运算符和三目运算符<code>&quot;?:&quot;</code>以外，C++中的所有运算符都可以重载</p></li><li><p>重载</p></li></ol><ul><li>函数名相同</li><li>参数必须不同（个数或类型或顺序）</li><li>返回值类型可以相同也可以不同</li></ul><ol><li><code>malloc</code>对应<code>free</code><br><code>new</code>对应<code>delete</code></li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>构造函数</title>
      <link href="2021/04/29/C-%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/"/>
      <url>2021/04/29/C-%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<!-- toc --><h2 id="一、类对象成员的构造"><a href="#一、类对象成员的构造" class="headerlink" title="一、类对象成员的构造"></a>一、类对象成员的构造</h2><p>先构造成员<br>再构造自身（调用构造函数）</p><h2 id="二、派生类构造函数"><a href="#二、派生类构造函数" class="headerlink" title="二、派生类构造函数"></a>二、派生类构造函数</h2><p>派生类可能有多个基类，也可能包括多个成员对象，在创建派生类对象时，派生类的构造函数除了要负责本类成员的初始化外，还要调用基类和成员对象的构造函数，并向它们传递参数，以完成基类子对象和成员对象的建立和初始化。</p><p><strong>派生类只能采用构造函数初始化列表的方式向基类或成员对象的构造函数传递参数</strong>，形式如下：<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">派生类构造函数名<span class="token punctuation">(</span>参数表<span class="token punctuation">)</span><span class="token operator">:</span> 基类构造函数名<span class="token punctuation">(</span>参数表<span class="token punctuation">)</span><span class="token punctuation">,</span> 成员对象名<span class="token number">1</span><span class="token punctuation">(</span>参数表<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></p><h2 id="三、构造函数和析构函数调用次序"><a href="#三、构造函数和析构函数调用次序" class="headerlink" title="三、构造函数和析构函数调用次序"></a>三、构造函数和析构函数调用次序</h2><p><strong>派生类对象的构造</strong></p><ul><li>先构造基类</li><li>再构造成员</li><li>最后构造自身（调用构造函数）</li></ul><p>基类构造顺序由派生层次决定：<strong>最远的基类最先构造</strong><br>成员构造顺序和定义顺序相同<br>析构函数的析构顺序与构造相反</p><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> x<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">A</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        x <span class="token operator">=</span> i<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"A constructor: "</span> <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">B</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> y<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">B</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        y <span class="token operator">=</span> i<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"B constructor: "</span> <span class="token operator">&lt;&lt;</span> y <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">C</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> z<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">C</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        z <span class="token operator">=</span> i<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"C constructor: "</span> <span class="token operator">&lt;&lt;</span> z <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">D</span><span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">B</span></span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    C c1<span class="token punctuation">;</span>    A<span class="token operator">*</span> a1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    A a0<span class="token punctuation">,</span> a4<span class="token punctuation">;</span>    <span class="token function">D</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">a4</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">c1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">B</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"D constructor"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    D d<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>B constructor<span class="token operator">:</span> <span class="token number">1</span>    <span class="token comment">// 先调用基类构造函数</span>C constructor<span class="token operator">:</span> <span class="token number">1</span>    <span class="token comment">// 按照声明的顺序调用成员对象的构造函数，c1</span>A constructor<span class="token operator">:</span> <span class="token number">10</span>   <span class="token comment">// a1</span>A constructor<span class="token operator">:</span> <span class="token number">0</span>    <span class="token comment">// a0</span>A constructor<span class="token operator">:</span> <span class="token number">4</span>    <span class="token comment">// a4</span>D constructor       <span class="token comment">// 最后才是自身</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="explicit关键字"><a href="#explicit关键字" class="headerlink" title="explicit关键字"></a>explicit关键字</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> x<span class="token punctuation">;</span>    <span class="token function">A</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token operator">-></span>x <span class="token operator">=</span> x<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token function">A</span><span class="token punctuation">(</span><span class="token keyword">const</span> A <span class="token operator">&amp;</span>a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token operator">-></span>x <span class="token operator">=</span> a<span class="token punctuation">.</span>x<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    A <span class="token function">a1</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 显示调用初始化函数</span>    A a2 <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>       <span class="token comment">// 隐式调用初始化函数</span>    A <span class="token function">a3</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 显示调用拷贝构造函数</span>    A a4 <span class="token operator">=</span> a1       <span class="token comment">// 隐式调用拷贝构造函数</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>没加<code>explicit</code>时显示调用和隐式调用都可以<br>加了<code>explicit</code>就相当于禁用隐式调用</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> x<span class="token punctuation">;</span>    <span class="token keyword">explicit</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token operator">-></span>x <span class="token operator">=</span> x<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">explicit</span> <span class="token function">A</span><span class="token punctuation">(</span><span class="token keyword">const</span> A <span class="token operator">&amp;</span>a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token operator">-></span>x <span class="token operator">=</span> a<span class="token punctuation">.</span>x<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    A <span class="token function">a1</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 显示调用初始化函数</span>    <span class="token comment">// A a2 = 9;       // error</span>    A <span class="token function">a3</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 显示调用拷贝构造函数</span>    <span class="token comment">// A a4 = a1       // error</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C基础</title>
      <link href="2021/04/29/C-C-%E5%9F%BA%E7%A1%80/"/>
      <url>2021/04/29/C-C-%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="运算符优先级"><a href="#运算符优先级" class="headerlink" title="运算符优先级"></a>运算符优先级</h2><ul><li>作用域解析运算符<code>(::)</code></li><li>成员访问运算符<code>(. -&gt;)</code></li><li>下标运算符<code>[]</code></li><li>函数调用运算符<code>()</code></li><li>后置递增递减运算符<code>(++ --)</code></li><li><code>typeid</code></li><li>前置递增递减运算符<code>(++ --)</code></li><li>位求反<code>(~)</code></li><li>逻辑非<code>(!)</code></li><li>一元正负<code>+(正) -(负)</code></li><li>解引用，取地址<code>(* &amp;)</code></li><li><code>sizeof</code></li><li><code>new delete</code></li><li>乘、除、取模<code>* / %</code></li><li>加减<code>+ -</code></li><li>左移右移<code>&lt;&lt; &gt;&gt;</code></li><li>关系运算符<code>== != &lt; &lt;= &gt; &gt;=</code></li><li>位与、位异或、位或<code>&amp; ^ |</code></li><li>逻辑与、逻辑或<code>&amp;&amp; ||</code></li><li>条件运算符<code>(? :)</code></li><li>赋值运算符<code>(=)</code></li><li>复合赋值运算符<code>*= /= %= += -= &lt;&lt;= &gt;&gt;= &amp;= |= ^=</code></li><li>抛出异常<code>throw</code></li><li>逗号运算符<code>,</code></li></ul><p><strong><code>WARNING</code></strong><br>对有符号数使用位运算，符号位如何处理没有明确的规定，所以强烈建议仅将位运算符用于处理<strong>无符号类型</strong></p><h2 id="内存分配"><a href="#内存分配" class="headerlink" title="内存分配"></a>内存分配</h2><p><code>new</code>出来的对象存储在<strong>堆</strong>里面</p><h2 id="函数指针"><a href="#函数指针" class="headerlink" title="函数指针"></a>函数指针</h2><p>可以用函数指针指向一个函数<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>func<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>    func <span class="token operator">=</span> <span class="token operator">&amp;</span>Add<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token operator">*</span>func<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>  <span class="token comment">// 可以对函数指针取值再调用</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>     <span class="token comment">// 也可以直接调用</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件操作</title>
      <link href="2021/04/29/C-%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
      <url>2021/04/29/C-%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="创建文本文件并写入"><a href="#创建文本文件并写入" class="headerlink" title="创建文本文件并写入"></a>创建文本文件并写入</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fstream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    myFile<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span> ios_base<span class="token operator">::</span>out<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>myFile<span class="token punctuation">.</span><span class="token function">is_open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"open file"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        myFile <span class="token operator">&lt;&lt;</span> <span class="token string">"hello world"</span><span class="token punctuation">;</span>        myFile<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>ios_base::out</code>表示以只写模式打开文件，用<code>is_open</code>检查是否成功打开文件</p><h2 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ifstream myFile<span class="token punctuation">;</span>    myFile<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span> ios_base<span class="token operator">::</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>myFile<span class="token punctuation">.</span><span class="token function">is_open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Open File"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        string fileContent<span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>myFile<span class="token punctuation">.</span><span class="token function">good</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">getline</span><span class="token punctuation">(</span>myFile<span class="token punctuation">,</span> fileContent<span class="token punctuation">)</span><span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> fileContent <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        myFile<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Open Filehello world <span class="token comment">// 输出文件内容</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>ios_base::in</code>以只读方式打开文件，循环读取文件里的所有字符，保存在<code>string</code>类型的<code>fileContent</code>里面</p><h2 id="stringstream"><a href="#stringstream" class="headerlink" title="stringstream"></a>stringstream</h2><p>可以用<code>stringstream</code>把其他类型的数据转换为<code>string</code>类型<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> input <span class="token operator">=</span> <span class="token number">34</span><span class="token punctuation">;</span>    stringstream str<span class="token punctuation">;</span>    str <span class="token operator">&lt;&lt;</span> input<span class="token punctuation">;</span>        string strInput<span class="token punctuation">;</span>    str <span class="token operator">>></span> strInput<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> strInput <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token number">34</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试_1</title>
      <link href="2021/04/28/%E9%9D%A2%E8%AF%95-1/"/>
      <url>2021/04/28/%E9%9D%A2%E8%AF%95-1/</url>
      
        <content type="html"><![CDATA[<!-- toc --><h2 id="变量的声明和定义有声明区别"><a href="#变量的声明和定义有声明区别" class="headerlink" title="变量的声明和定义有声明区别"></a>变量的声明和定义有声明区别</h2><p>变量的定义是为变量分配地址和存储空间，变量的声明不分配地址。<br>一个变量可以在多个地方声明，但是只在一个地方定义。<br>加入<code>extern</code>修饰的是变量的声明，说明此变量将在文件以外或在文件后面部分定义。<br><strong>说明</strong>：很多时候一个变量，只是声明不分配内存空间，直到具体使用时才初始化，分配内存空间，如外部变量<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">extern</span> <span class="token keyword">int</span> A<span class="token punctuation">;</span>    <span class="token comment">// 这是声明不是定义，声明A是一个外部变量</span>    <span class="token comment">// 注意：声明外部变量时可以把变量类型去掉，如：extern A;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> A<span class="token punctuation">;</span>  <span class="token comment">// 定义，定义了A为整形的外部变量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h2 id="简述-ifdef、-else、-endif和-ifndef的作用"><a href="#简述-ifdef、-else、-endif和-ifndef的作用" class="headerlink" title="简述#ifdef、#else、#endif和#ifndef的作用"></a>简述#ifdef、#else、#endif和#ifndef的作用</h2><p>利用<code>#ifdef</code>、<code>#endif</code>将某程序功能模块包括进去，以向特定用户提供该功能<br>在不需要时用户可轻易将其屏蔽。<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">__MATH__ </span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"math.c"</span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>在子程序前加上标记，以便于追踪和调试。<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifdef</span> <span class="token expression">DEBUG</span></span><span class="token function">printf</span> <span class="token punctuation">(</span><span class="token string">"In debugging......!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>应对硬件的限制。由于一些具体应用环境的硬件不一样，限于条件，本地缺乏这种设备，只能绕过硬件，直接写出预期结果。<br><strong>注意</strong>：虽然不用条件编译命令而直接用<code>if</code>语句也能达到要求，但那样做目标程序长（因为所有语句都编译），运行时间长因为在程序运行时间对<code>if</code>语句进行测试）。<br>而采用条件编译，可以减少被编译的语句，从而减少目标程序的长度，减少运行时间</p><h2 id="写出int-bool-float-指针变量与“零值”比较的if语句"><a href="#写出int-bool-float-指针变量与“零值”比较的if语句" class="headerlink" title="写出int/bool/float/指针变量与“零值”比较的if语句"></a>写出int/bool/float/指针变量与“零值”比较的if语句</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// int与零值比较</span><span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">// bool与零值比较 </span><span class="token keyword">if</span> <span class="token punctuation">(</span>flag<span class="token punctuation">)</span>     <span class="token comment">// 表示flag为真 </span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>flag<span class="token punctuation">)</span>    <span class="token comment">// 表示flag为假 </span><span class="token comment">// float与零值比较 </span><span class="token keyword">const</span> <span class="token keyword">float</span> EPSINON <span class="token operator">=</span> <span class="token number">0.00001</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">>=</span> <span class="token operator">-</span>EPSINON<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;=</span> EPSINON<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">//其中EPSINON是允许的误差（即精度） </span><span class="token comment">// 指针变量与零值比较 </span><span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span>p <span class="token operator">!=</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="结构体可以直接赋值吗"><a href="#结构体可以直接赋值吗" class="headerlink" title="结构体可以直接赋值吗"></a>结构体可以直接赋值吗</h2><p>声明时可以直接初始化，同一结构体的不同对象之间也可以直接赋值，但是当结构体中含有指针成员时一定要小心。<br><strong>注意</strong>：当有多个指针指向同一段内存时，某个指针释放这段内存可能会导致其他指针的非法操作，因此在释放前一定要确保其他指针不再使用这段内存空间</p><h2 id="sizeof-和strlen-的区别"><a href="#sizeof-和strlen-的区别" class="headerlink" title="sizeof 和strlen 的区别"></a>sizeof 和strlen 的区别</h2><ul><li><code>sizeof</code>是一个操作符，<code>strlen</code>是库函数。</li><li><code>sizeof</code>的参数可以是数据的类型，也可以是变量，而<code>strlen</code>只能以结尾为<code>&#39;\0&#39;</code>的字符串作参数。</li><li>编译器在编译时就计算出了sizeof的结果，而<code>strlen</code>函数必须在运行时才能计算出来。并且<code>sizeof</code>计算的是数据类型占内存的大小，而<code>strlen</code>计算的是字符串实际的长度。</li><li>数组做<code>sizeof</code>的参数不退化，传递给<code>strlen</code>就退化为指针了</li></ul><h2 id="C-语言的关键字-static-和-C-的关键字-static-有什么区别"><a href="#C-语言的关键字-static-和-C-的关键字-static-有什么区别" class="headerlink" title="C 语言的关键字 static 和 C++ 的关键字 static 有什么区别"></a>C 语言的关键字 static 和 C++ 的关键字 static 有什么区别</h2><p>在<code>C</code>中<code>static</code>用来修饰局部静态变量和外部静态变量、函数。而<code>C++</code>中除了上述功能外，还用来定义类的成员变量和函数，即静态成员和静态成员函数<br><strong>注意</strong>：编程时，<code>static</code>的记忆性和全局性的特点可以让在不同时期调用的函数进行通信，而<code>C++</code>的静态成员则可以在多个对象实例间进行通信</p><h2 id="C-语言的-malloc-和-C-中的-new-有什么区别"><a href="#C-语言的-malloc-和-C-中的-new-有什么区别" class="headerlink" title="C 语言的 malloc 和 C++ 中的 new 有什么区别"></a>C 语言的 malloc 和 C++ 中的 new 有什么区别</h2><ul><li><code>new</code>和<code>delete</code>是操作符，可以重载，只能在<code>C++</code>中使用。</li><li><code>malloc</code>和<code>free</code>是函数，可以覆盖，<code>C/C++</code>中都可以使用。</li><li><code>new</code>可以调用对象的构造函数，对应的<code>delete</code>调用相应的析构函数。</li><li><code>malloc</code>仅仅分配内存，<code>free</code>仅仅回收内存，并不执行构造和析构函数</li><li><code>new</code>和<code>delete</code>返回的是某种数据类型指针，<code>malloc</code>和<code>free</code>返回的是<code>void</code>指针。<br>注意：<code>malloc</code>申请的内存空间要用<code>free</code>释放，而<code>new</code>申请的内存空间要用<code>delete</code>释放，不要混用</li></ul><h2 id="size-t"><a href="#size-t" class="headerlink" title="size_t"></a>size_t</h2><p><code>size_t</code> 是<code>cstddef</code>头文件定义的一种与机器实现有关的无符号整数类型，他的空间足够大，能够表示任意数的大小</p>]]></content>
      
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>26/80-删除有序数组中的重复项</title>
      <link href="2021/04/27/LeetCode-26-%E5%88%A0%E9%99%A4%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9/"/>
      <url>2021/04/27/LeetCode-26-%E5%88%A0%E9%99%A4%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E9%87%8D%E5%A4%8D%E9%A1%B9/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-26-Remove-Duplicates-from-Sorted-Array"><a href="#LeetCode-26-Remove-Duplicates-from-Sorted-Array" class="headerlink" title="LeetCode 26. Remove Duplicates from Sorted Array"></a>LeetCode 26. Remove Duplicates from Sorted Array</h2><p><a href="https://leetcode.com/problems/remove-duplicates-from-sorted-array/">LeetCode</a></p><p>Given an integer array nums <code>sorted in non-decreasing order</code>, <code>remove the duplicates</code> in-place such that each unique element appears only <code>once</code>. The <code>relative order</code> of the elements should be kept the <code>same</code>.</p><p>Return k after placing the final result in the first k slots of nums.</p><p>Do not allocate extra space for another array. You must do this by modifying the input array in-place with $O(1)$ extra memory.</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">输入：nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>输出：<span class="token number">2</span><span class="token punctuation">,</span> nums <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>解释：函数应该返回新的长度 <span class="token number">2</span> ，并且原数组 nums 的前两个元素被修改为 <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span>。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="method-1-用STL提供的算法unique和erase"><a href="#method-1-用STL提供的算法unique和erase" class="headerlink" title="method 1: 用STL提供的算法unique和erase"></a>method 1: 用STL提供的算法unique和erase</h3><p><code>unique</code>可以把重复的那些元素移动到后面去，<code>it</code>指向重复的第一个元素<br>因为他要的是<code>vector</code>的长度，所以直接返回有用部分的长度就可以了，不用删除</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">removeDuplicates</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">auto</span> it <span class="token operator">=</span> <span class="token function">unique</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> nums<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">distance</span><span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> it<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="method-2-快慢指针"><a href="#method-2-快慢指针" class="headerlink" title="method 2: 快慢指针"></a>method 2: 快慢指针</h3><p>快指针指向的元素与慢指针<code>-1</code>的元素相比较</p><ul><li>相同，快指针<code>+1</code>，慢指针不动</li><li>不同，快指针赋值给慢指针，都<code>+1</code></li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">removeDuplicates</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> nums<span class="token punctuation">[</span>index <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            nums<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            index<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> index<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>时间复杂度：$O(n)$<br>空间复杂度：$O(1)$</p><hr><h2 id="LeetCode-80-Remove-Duplicates-from-Sorted-Array-II"><a href="#LeetCode-80-Remove-Duplicates-from-Sorted-Array-II" class="headerlink" title="LeetCode 80. Remove Duplicates from Sorted Array II"></a>LeetCode 80. Remove Duplicates from Sorted Array II</h2><p><a href="https://leetcode.com/problems/remove-duplicates-from-sorted-array-ii/">LeetCode</a></p><p>Given an integer array nums <code>sorted in non-decreasing order</code>, remove some duplicates in-place such that each unique element appears <code>at most twice</code>. The <code>relative order</code> of the elements should be kept the <code>same</code>.</p><h3 id="method-快慢指针"><a href="#method-快慢指针" class="headerlink" title="method: 快慢指针"></a>method: 快慢指针</h3><p>原理一样，只是快指针与慢指针<code>-2</code>的元素相比较</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">removeDuplicates</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> nums<span class="token punctuation">[</span>index <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            nums<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            index<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> index<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>如果是允许<code>N</code>个元素重复，快指针与慢指针<code>-N</code>的元素相比较</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">removeDuplicates</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> N<span class="token punctuation">)</span> <span class="token keyword">return</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> index <span class="token operator">=</span> N<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> N<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> nums<span class="token punctuation">[</span>index <span class="token operator">-</span> N<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            nums<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            index<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> index<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 双指针 </tag>
            
            <tag> 数组 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STL-bitset</title>
      <link href="2021/04/27/C-STL-STL-bitset/"/>
      <url>2021/04/27/C-STL-STL-bitset/</url>
      
        <content type="html"><![CDATA[<p>位标志只能在初始化时指定大小，后面不能再改<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;bitset></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    bitset<span class="token operator">&lt;</span><span class="token number">4</span><span class="token operator">></span> <span class="token function">fourbit</span><span class="token punctuation">(</span><span class="token string">"1011"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> fourbit <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Num of 1: "</span> <span class="token operator">&lt;&lt;</span> fourbit<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    bitset<span class="token operator">&lt;</span><span class="token number">4</span><span class="token operator">></span> <span class="token function">fourbit2</span><span class="token punctuation">(</span><span class="token operator">~</span>fourbit<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> fourbit2 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    bitset<span class="token operator">&lt;</span><span class="token number">4</span><span class="token operator">></span> fourbit3 <span class="token operator">=</span> fourbit<span class="token punctuation">.</span><span class="token function">flip</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> fourbit3 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    bitset<span class="token operator">&lt;</span><span class="token number">8</span><span class="token operator">></span> <span class="token function">eightbit</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> eightbit <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token number">1011</span>Num of <span class="token number">1</span><span class="token operator">:</span> <span class="token number">3</span><span class="token number">0100</span><span class="token number">0100</span><span class="token number">11111111</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>]]></content>
      
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>智能指针</title>
      <link href="2021/04/27/C-%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/"/>
      <url>2021/04/27/C-%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</url>
      
        <content type="html"><![CDATA[<p><code>unique_ptr</code>禁止对指针进行复制和赋值<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Fish</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Fish</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"constructor"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token operator">~</span><span class="token function">Fish</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"destructor"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">Swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Fish swim in water"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">MakeFishSwim</span><span class="token punctuation">(</span><span class="token keyword">const</span> unique_ptr<span class="token operator">&lt;</span>Fish<span class="token operator">></span><span class="token operator">&amp;</span> ptr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ptr<span class="token operator">-></span><span class="token function">Swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    unique_ptr<span class="token operator">&lt;</span>Fish<span class="token operator">></span> <span class="token function">pFish</span><span class="token punctuation">(</span><span class="token keyword">new</span> Fish<span class="token punctuation">)</span><span class="token punctuation">;</span>    pFish<span class="token operator">-></span><span class="token function">Swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">MakeFishSwim</span><span class="token punctuation">(</span>pFish<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>constructorFish swim in waterFish swim in waterdestructor<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h2 id="unique-ptr"><a href="#unique-ptr" class="headerlink" title="unique_ptr"></a>unique_ptr</h2><ul><li>只能有一个<code>Ownership</code>，离开作用域就自动销毁</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;memory></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Entity</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Entity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Entity created!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token operator">~</span><span class="token function">Entity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Entity destroyed!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">ex1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">">>>>>Entering ex1&lt;&lt;&lt;&lt;&lt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#123;</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"-----Entering scope-----"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">auto</span> e1 <span class="token operator">=</span> std<span class="token operator">::</span>make_unique<span class="token operator">&lt;</span>Entity<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"-----Leaving scope-----"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">">>>>>Leaving ex1&lt;&lt;&lt;&lt;&lt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">ex1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">></span>Entering ex1<span class="token operator">&lt;&lt;</span><span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>Entering scope<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>Entity created<span class="token operator">!</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>Leaving scope<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>Entity destroyed<span class="token operator">!</span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">></span>Leaving ex1<span class="token operator">&lt;&lt;</span><span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>Ownership</code>转移到<code>foo</code>里面，所以离开<code>foo</code>之后就销毁了<br><code>move</code>是<code>ownership</code>的直接转移，调用者不再拥有对象</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">foo</span><span class="token punctuation">(</span>std<span class="token operator">::</span>unique_ptr<span class="token operator">&lt;</span>Entity<span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"-----Entering foo-----"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"-----Leaving foo-----"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">ex2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">">>>>>Entering ex2&lt;&lt;&lt;&lt;&lt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> e1 <span class="token operator">=</span> std<span class="token operator">::</span>make_unique<span class="token operator">&lt;</span>Entity<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">foo</span><span class="token punctuation">(</span>std<span class="token operator">::</span><span class="token function">move</span><span class="token punctuation">(</span>e1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">">>>>>Leaving ex2&lt;&lt;&lt;&lt;&lt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">ex2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">></span>Entering ex2<span class="token operator">&lt;&lt;</span><span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span>Entity created<span class="token operator">!</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>Entering foo<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>Leaving foo<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>Entity destroyed<span class="token operator">!</span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">></span>Leaving ex2<span class="token operator">&lt;&lt;</span><span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="shared-ptr"><a href="#shared-ptr" class="headerlink" title="shared_ptr"></a>shared_ptr</h2><p><code>shared_ptr</code>会进行引用计数，引用计数为0时自动销毁</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">ex3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">">>>>>Entering ex3&lt;&lt;&lt;&lt;&lt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> e1 <span class="token operator">=</span> std<span class="token operator">::</span>make_shared<span class="token operator">&lt;</span>Entity<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> e1<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">&#123;</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"-----Entering scope-----"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">auto</span> e2 <span class="token operator">=</span> e1<span class="token punctuation">;</span>        std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> e1<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>        <span class="token keyword">auto</span> e3 <span class="token operator">=</span> std<span class="token operator">::</span><span class="token function">move</span><span class="token punctuation">(</span>e2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// move是ownership转移</span>        std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> e1<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"-----Leaving scope-----"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> e1<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">">>>>>Leaving ex3&lt;&lt;&lt;&lt;&lt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">ex3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">></span>Entering ex3<span class="token operator">&lt;&lt;</span><span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span>Entity created<span class="token operator">!</span><span class="token number">1</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>Entering scope<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token number">2</span><span class="token number">2</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>Leaving scope<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">></span>Leaving ex3<span class="token operator">&lt;&lt;</span><span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span>Entity destroyed<span class="token operator">!</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="weak-ptr"><a href="#weak-ptr" class="headerlink" title="weak_ptr"></a>weak_ptr</h2><p><code>weak_ptr</code>使用前检查对象是否还存在，确认存在才能使用</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">observe</span><span class="token punctuation">(</span>std<span class="token operator">::</span>weak_ptr<span class="token operator">&lt;</span>Entity<span class="token operator">></span> ew<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"*****Entering observe*****"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>std<span class="token operator">::</span>shared_ptr<span class="token operator">&lt;</span>Entity<span class="token operator">></span> spt <span class="token operator">=</span> ew<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> spt<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>        std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"entity still alive"</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"entity was expired"</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"*****Leaving observe*****"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">ex4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">">>>>>Entering ex4&lt;&lt;&lt;&lt;&lt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>weak_ptr<span class="token operator">&lt;</span>Entity<span class="token operator">></span> ew<span class="token punctuation">;</span>    <span class="token punctuation">&#123;</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"-----Entering scope-----"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">auto</span> e1 <span class="token operator">=</span> std<span class="token operator">::</span>make_shared<span class="token operator">&lt;</span>Entity<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> e1<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>        ew <span class="token operator">=</span> e1<span class="token punctuation">;</span>        std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> e1<span class="token punctuation">.</span><span class="token function">use_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>        <span class="token function">observe</span><span class="token punctuation">(</span>ew<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">"-----Leaving scope-----"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">observe</span><span class="token punctuation">(</span>ew<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">puts</span><span class="token punctuation">(</span><span class="token string">">>>>>Leaving ex4&lt;&lt;&lt;&lt;&lt;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">ex4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">></span>Entering ex4<span class="token operator">&lt;&lt;</span><span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>Entering scope<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>Entity created<span class="token operator">!</span><span class="token number">1</span><span class="token number">1</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>Entering observe<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token number">2</span>entity still alive<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>Leaving observe<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>Leaving scope<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>Entity destroyed<span class="token operator">!</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>Entering observe<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>entity was expired<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span>Leaving observe<span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">*</span><span class="token operator">>></span><span class="token operator">>></span><span class="token operator">></span>Leaving ex4<span class="token operator">&lt;&lt;</span><span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>栈和队列</title>
      <link href="2021/04/27/C-STL-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/"/>
      <url>2021/04/27/C-STL-%E6%A0%88%E5%92%8C%E9%98%9F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h2 id="栈和队列"><a href="#栈和队列" class="headerlink" title="栈和队列"></a>栈和队列</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stack></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;queue></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> st<span class="token punctuation">;</span>    st<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    st<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    st<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">56</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>st<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> st<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>        st<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token number">56</span> <span class="token number">34</span> <span class="token number">12</span> <span class="token comment">// 先进后出</span><span class="token number">14</span> <span class="token number">25</span> <span class="token number">36</span> <span class="token comment">// 先进先出</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="优先队列"><a href="#优先队列" class="headerlink" title="优先队列"></a>优先队列</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">priority_queue<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span>q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">36</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    cout <span class="token operator">&lt;&lt;</span> q<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token number">36</span> <span class="token number">25</span> <span class="token number">14</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>lamda表达式</title>
      <link href="2021/04/26/C-lamda/"/>
      <url>2021/04/26/C-lamda/</url>
      
        <content type="html"><![CDATA[<h2 id="lamda表达式"><a href="#lamda表达式" class="headerlink" title="lamda表达式"></a>lamda表达式</h2><p>以<code>[]</code>开头，后面是参数列表，比函数对象更简洁<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Print</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token keyword">operator</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> val <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">for_each</span><span class="token punctuation">(</span>vi<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vi<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>可以简写为<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">for_each</span><span class="token punctuation">(</span>vi<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vi<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> val <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br><code>[]</code>内可以接受参数</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Greater</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token punctuation">(</span>val <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">auto</span> it <span class="token operator">=</span> <span class="token function">find_if</span><span class="token punctuation">(</span>vi<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vi<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Greater</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以简写为<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">auto</span> it <span class="token operator">=</span> <span class="token function">find_if</span><span class="token punctuation">(</span>vi<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vi<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token punctuation">(</span>val <span class="token operator">></span> num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><p>添加关键字multable可以在lamda表达式内部修改通过[]传入的参数，离开lamda表达式之后就无效了，要在外部有效，需要按引用传递<br>可以用<code>-&gt;</code>指定返回类型<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token punctuation">[</span>State1<span class="token punctuation">,</span> State2<span class="token punctuation">]</span><span class="token punctuation">(</span>Type var1<span class="token punctuation">,</span> Type var2<span class="token punctuation">)</span> <span class="token operator">-></span> ReturnType<span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token punctuation">(</span>value <span class="token operator">or</span> expression<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h2 id="二元lamda表达式"><a href="#二元lamda表达式" class="headerlink" title="二元lamda表达式"></a>二元lamda表达式</h2><p>两个<code>vector</code>中的元素对应相乘<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">transform</span><span class="token punctuation">(</span>vi<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vi<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> multiple<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> vi<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        vi<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">for_each</span><span class="token punctuation">(</span>vi<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vi<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> val <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> multiple<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        multiple<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">for_each</span><span class="token punctuation">(</span>multiple<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> multiple<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> val <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> result<span class="token punctuation">;</span>    result<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>vi<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">transform</span><span class="token punctuation">(</span>vi<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vi<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> multiple<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">for_each</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> val <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token number">0</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span> <span class="token number">10</span> <span class="token number">11</span> <span class="token number">12</span> <span class="token number">13</span> <span class="token number">14</span> <span class="token number">15</span> <span class="token number">16</span> <span class="token number">17</span> <span class="token number">18</span> <span class="token number">19</span> <span class="token number">0</span> <span class="token number">11</span> <span class="token number">24</span> <span class="token number">39</span> <span class="token number">56</span> <span class="token number">75</span> <span class="token number">96</span> <span class="token number">119</span> <span class="token number">144</span> <span class="token number">171</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h2 id="通过lamda表达式自定义sort"><a href="#通过lamda表达式自定义sort" class="headerlink" title="通过lamda表达式自定义sort"></a>通过lamda表达式自定义sort</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">for_each</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> val <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sort</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> a <span class="token operator">></span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">for_each</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> result<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> val <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">0</span> <span class="token number">11</span> <span class="token number">24</span> <span class="token number">39</span> <span class="token number">56</span> <span class="token number">75</span> <span class="token number">96</span> <span class="token number">119</span> <span class="token number">144</span> <span class="token number">171</span> <span class="token number">171</span> <span class="token number">144</span> <span class="token number">119</span> <span class="token number">96</span> <span class="token number">75</span> <span class="token number">56</span> <span class="token number">39</span> <span class="token number">24</span> <span class="token number">11</span> <span class="token number">0</span>     <span class="token comment">// 自定义从大到小排序</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出满足条件的元素个数<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 输出偶数个数</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">count_if</span><span class="token punctuation">(</span>vi<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vi<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token operator">!</span><span class="token punctuation">(</span>val <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token number">0</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span> <span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STL常用算法</title>
      <link href="2021/04/24/C-STL-STL%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/"/>
      <url>2021/04/24/C-STL-STL%E5%B8%B8%E7%94%A8%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<!-- toc --><h2 id="遍历每个元素-for-each"><a href="#遍历每个元素-for-each" class="headerlink" title="遍历每个元素 for_each"></a>遍历每个元素 for_each</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">for_each</span><span class="token punctuation">(</span>vi<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vi<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="查找某个元素-find-find-if"><a href="#查找某个元素-find-find-if" class="headerlink" title="查找某个元素 find/find_if"></a>查找某个元素 find/find_if</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">auto</span> it <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>vi<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vi<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">IsMultiple</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> Divisor<span class="token punctuation">;</span>    <span class="token function">IsMultiple</span><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">Divisor</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> input<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token operator">!</span><span class="token punctuation">(</span>input <span class="token operator">%</span> Divisor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> vi<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">23</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">32</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        vi<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> Divisor <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> iElement <span class="token operator">=</span> <span class="token function">find_if</span><span class="token punctuation">(</span>vi<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vi<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">IsMultiple</span><span class="token punctuation">(</span>Divisor<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>iElement <span class="token operator">!=</span> vi<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"First element divisible by "</span> <span class="token operator">&lt;&lt;</span> Divisor<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">": "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>iElement <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>First element divisible by <span class="token number">7</span><span class="token operator">:</span> <span class="token number">28</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用了<code>find_if</code>方法<br>对<code>vi</code>里的每个元素调用一元谓词<code>IsMultiple(Divisor)</code>函数对象，找到第一个整除<code>Divisor</code>的数</p><h2 id="转换-transform"><a href="#转换-transform" class="headerlink" title="转换 transform"></a>转换 transform</h2><p>字符串大小写转换<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">string str <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>string copy<span class="token punctuation">;</span>copy<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">transform</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> str<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> copy<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">::</span>toupper<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><br>从一个<code>vector</code>转换到另一个<code>vector</code>，进行一些变换<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">class</span> <span class="token class-name">Add</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    T <span class="token keyword">operator</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">const</span> T<span class="token operator">&amp;</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token punctuation">(</span>val <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">transform</span><span class="token punctuation">(</span>vi<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vi<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> target<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Add<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h2 id="计数-count-count-if"><a href="#计数-count-count-if" class="headerlink" title="计数 count/count_if"></a>计数 count/count_if</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">count</span><span class="token punctuation">(</span>vi<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vi<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span>  返回等于<span class="token number">6</span>的数量<span class="token function">count_if</span><span class="token punctuation">(</span>vi<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vi<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Greater</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   返回满足条件的数量<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="复制-copy-copy-if"><a href="#复制-copy-copy-if" class="headerlink" title="复制 copy/copy_if"></a>复制 copy/copy_if</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">copyVec</span><span class="token punctuation">(</span>vi<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">auto</span> it2 <span class="token operator">=</span> <span class="token function">copy</span><span class="token punctuation">(</span>vi<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vi<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> copyVec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">for_each</span><span class="token punctuation">(</span>copyVec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> copyVec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> val <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token function">copy_if</span><span class="token punctuation">(</span>vi<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vi<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> it2<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token punctuation">(</span>val <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">for_each</span><span class="token punctuation">(</span>copyVec<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> copyVec<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> val <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token number">0</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span>                         <span class="token comment">// vi</span><span class="token number">0</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span>     <span class="token comment">// 复制了vi的全部元素</span><span class="token number">0</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span> <span class="token number">1</span> <span class="token number">3</span> <span class="token number">5</span> <span class="token number">7</span> <span class="token number">9</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span>     <span class="token comment">// 从返回的迭代器位置开始复制vi的奇数元素</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="搜索-binary-search"><a href="#搜索-binary-search" class="headerlink" title="搜索 binary_search"></a>搜索 binary_search</h2><p>二分查找只能用于已排序的容器，返回<code>true/false</code></p><h2 id="删除-remove-remove-if"><a href="#删除-remove-remove-if" class="headerlink" title="删除 remove/remove_if"></a>删除 remove/remove_if</h2><p><code>remove_if</code>要配合<code>erase</code>使用，因为返回的是无用的部分的迭代器<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> vi<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    vi<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">info</span><span class="token punctuation">(</span>vi<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">auto</span> it <span class="token operator">=</span> <span class="token function">remove_if</span><span class="token punctuation">(</span>vi<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vi<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> val <span class="token operator">&lt;</span> x<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">info</span><span class="token punctuation">(</span>vi<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>vi<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>it<span class="token punctuation">,</span> vi<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">info</span><span class="token punctuation">(</span>vi<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">0</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span> <span class="token number">5</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span> <span class="token number">5</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span>     <span class="token comment">// 把 5~9替换掉前面的0~4</span><span class="token number">5</span>   <span class="token comment">// 返回指向无用部分的第一个元素</span><span class="token number">5</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span>   <span class="token comment">// 再用erase把后面那些没用的删掉</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h2 id="删除重复元素-unique"><a href="#删除重复元素-unique" class="headerlink" title="删除重复元素 unique"></a>删除重复元素 unique</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">auto</span> it <span class="token operator">=</span> <span class="token function">unique</span><span class="token punctuation">(</span>vi<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vi<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vi<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>it<span class="token punctuation">,</span> vi<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">info</span><span class="token punctuation">(</span>vi<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token number">8</span> <span class="token number">8</span> <span class="token number">8</span> <span class="token number">8</span><span class="token operator">-</span><span class="token number">1</span> <span class="token number">8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="替换-replace-replace-if"><a href="#替换-replace-replace-if" class="headerlink" title="替换 replace/replace_if"></a>替换 replace/replace_if</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">vi</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fill</span><span class="token punctuation">(</span>vi<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vi<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fill_n</span><span class="token punctuation">(</span>vi<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">info</span><span class="token punctuation">(</span>vi<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">replace</span><span class="token punctuation">(</span>vi<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vi<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">info</span><span class="token punctuation">(</span>vi<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">replace_if</span><span class="token punctuation">(</span>vi<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vi<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token punctuation">(</span>val <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">info</span><span class="token punctuation">(</span>vi<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">5</span> <span class="token number">5</span> <span class="token number">5</span> <span class="token number">5</span> <span class="token number">8</span> <span class="token number">8</span> <span class="token number">8</span> <span class="token number">8</span>         <span class="token comment">// 填充前4格为5，后4歌为8</span><span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">8</span> <span class="token number">8</span> <span class="token number">8</span> <span class="token number">8</span>         <span class="token comment">// 把5替换成1</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token number">8</span> <span class="token number">8</span> <span class="token number">8</span> <span class="token number">8</span>     <span class="token comment">// 把奇数替换成-1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="分区-partition-stable-partition"><a href="#分区-partition-stable-partition" class="headerlink" title="分区 partition/stable_partition"></a>分区 partition/stable_partition</h2><p><code>partition</code>是乱序的<br><code>stable_partition</code>保持原来的顺序<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// partition(vi.begin(), vi.end(), [](int&amp; val) &#123;return (val % 2);&#125;);</span><span class="token function">info</span><span class="token punctuation">(</span>vi<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">stable_partition</span><span class="token punctuation">(</span>vi<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vi<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token punctuation">(</span>val <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">info</span><span class="token punctuation">(</span>vi<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">0</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span> <span class="token number">1</span> <span class="token number">3</span> <span class="token number">5</span> <span class="token number">7</span> <span class="token number">9</span> <span class="token number">0</span> <span class="token number">2</span> <span class="token number">4</span> <span class="token number">6</span> <span class="token number">8</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h2 id="lower-bound-upper-bound"><a href="#lower-bound-upper-bound" class="headerlink" title="lower_bound/upper_bound"></a>lower_bound/upper_bound</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">auto</span> it <span class="token operator">=</span> <span class="token function">lower_bound</span><span class="token punctuation">(</span>vi<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vi<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>it <span class="token operator">=</span> <span class="token function">upper_bound</span><span class="token punctuation">(</span>vi<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vi<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token number">0</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span> <span class="token number">5</span>   <span class="token comment">// 小于等于5的最大数是5</span><span class="token number">6</span>   <span class="token comment">// 大于5的最小数是6</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="代码示例：基本数据类型"><a href="#代码示例：基本数据类型" class="headerlink" title="代码示例：基本数据类型"></a>代码示例：基本数据类型</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 这种叫函数对象</span><span class="token keyword">class</span> <span class="token class-name">Print</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token keyword">operator</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>cout <span class="token operator">&lt;&lt;</span> val <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Add</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token keyword">operator</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token punctuation">(</span>val <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Greater</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token punctuation">(</span>val <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> vi<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        vi<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">for_each</span><span class="token punctuation">(</span>vi<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vi<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">auto</span> it <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>vi<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vi<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>it <span class="token operator">!=</span> vi<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token function">binary_search</span><span class="token punctuation">(</span>vi<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vi<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    it <span class="token operator">=</span> <span class="token function">find_if</span><span class="token punctuation">(</span>vi<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vi<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Greater</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>it <span class="token operator">!=</span> vi<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Found greater than five: "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    vi<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"number of six: "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">count</span><span class="token punctuation">(</span>vi<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vi<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"num of greater than five: "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">count_if</span><span class="token punctuation">(</span>vi<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vi<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Greater</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> target<span class="token punctuation">;</span>    target<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span>vi<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">transform</span><span class="token punctuation">(</span>vi<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vi<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> target<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Add</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">for_each</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> target<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token number">0</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span> <span class="token number">5</span><span class="token number">1</span>   <span class="token comment">// binary_search的返回值是true/false，表示是否找到该元素</span>Found greater than five<span class="token operator">:</span> <span class="token number">6</span>number of six<span class="token operator">:</span> <span class="token number">2</span>num of greater than five<span class="token operator">:</span> <span class="token number">5</span><span class="token number">100</span> <span class="token number">101</span> <span class="token number">102</span> <span class="token number">103</span> <span class="token number">104</span> <span class="token number">105</span> <span class="token number">106</span> <span class="token number">107</span> <span class="token number">108</span> <span class="token number">109</span> <span class="token number">106</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="代码示例：自定义数据类型Person"><a href="#代码示例：自定义数据类型Person" class="headerlink" title="代码示例：自定义数据类型Person"></a>代码示例：自定义数据类型Person</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;algorithm></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    string name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token function">Person</span><span class="token punctuation">(</span>string _name<span class="token punctuation">,</span> <span class="token keyword">int</span> _age<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">name</span><span class="token punctuation">(</span>_name<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">age</span><span class="token punctuation">(</span>_age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token keyword">const</span> Person<span class="token operator">&amp;</span> input<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>age <span class="token operator">==</span> input<span class="token punctuation">.</span>age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Add</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token keyword">operator</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token punctuation">(</span>val <span class="token operator">+</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">GreaterAge</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">const</span> Person<span class="token operator">&amp;</span> input<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>input<span class="token punctuation">.</span>age <span class="token operator">></span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">">>>>>自定义数据类型&lt;&lt;&lt;&lt;&lt;&lt;\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>Person<span class="token operator">></span> person<span class="token punctuation">;</span>    Person <span class="token function">p1</span><span class="token punctuation">(</span><span class="token string">"kavin"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Person <span class="token function">p2</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Person <span class="token function">p3</span><span class="token punctuation">(</span><span class="token string">"lisa"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    person<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>    person<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>    person<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span>    Person <span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"kavin"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> it2 <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> person<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> test<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>it2 <span class="token operator">!=</span> person<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Found test: "</span> <span class="token operator">&lt;&lt;</span> it2<span class="token operator">-></span>name <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span> <span class="token operator">&lt;&lt;</span> it2<span class="token operator">-></span>age <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">auto</span> it3 <span class="token operator">=</span> <span class="token function">find_if</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> person<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">GreaterAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>it3 <span class="token operator">!=</span> person<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Found age > 20: "</span> <span class="token operator">&lt;&lt;</span> it3<span class="token operator">-></span>name <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span> <span class="token operator">&lt;&lt;</span> it3<span class="token operator">-></span>age <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    Person <span class="token function">p</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"same age: "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">count</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> person<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"num of age > 20: "</span> <span class="token operator">&lt;&lt;</span> <span class="token function">count_if</span><span class="token punctuation">(</span>person<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> person<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">GreaterAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Found test<span class="token operator">:</span> kavin<span class="token punctuation">,</span> <span class="token number">23</span>Found age <span class="token operator">></span> <span class="token number">20</span><span class="token operator">:</span> kavin<span class="token punctuation">,</span> <span class="token number">23</span>same age<span class="token operator">:</span> <span class="token number">2</span>num of age <span class="token operator">></span> <span class="token number">20</span><span class="token operator">:</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="一元谓词"><a href="#一元谓词" class="headerlink" title="一元谓词"></a>一元谓词</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">struct</span> <span class="token class-name">Count</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> count<span class="token punctuation">;</span>    <span class="token function">Count</span><span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">count</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token keyword">operator</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">const</span> T<span class="token operator">&amp;</span> input<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token operator">++</span>count<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> input <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> vi<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i  <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        vi<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    Count<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">;</span>    <span class="token comment">// Count&lt;int>() 是函数对象</span>    res <span class="token operator">=</span> <span class="token function">for_each</span><span class="token punctuation">(</span>vi<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vi<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Count<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> res<span class="token punctuation">.</span>count <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token number">0</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">5</span> <span class="token number">6</span> <span class="token number">7</span> <span class="token number">8</span> <span class="token number">9</span><span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对<code>vi</code>里的每个元素调用了<code>Count&lt;int&gt;()</code>函数，所以在<code>res</code>内部<code>count++</code>执行了10次，所以最后<code>count = 10</code></p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STL-map</title>
      <link href="2021/04/24/C-STL-STL-map/"/>
      <url>2021/04/24/C-STL-STL-map/</url>
      
        <content type="html"><![CDATA[<!-- toc --><h2 id="映射map"><a href="#映射map" class="headerlink" title="映射map"></a>映射map</h2><p><code>map</code>可以存储键-值对，不能重复的键，可以按键的大小排序，或者自定义<br><code>multimap</code>可以重复的键<br><code>unordered_map</code>查找时间复杂度为常数</p><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> string<span class="token punctuation">,</span> Compare<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> mapIntToString<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token operator">--</span><span class="token operator">></span> stringCompare<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> 是排序结构<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="构造键值对"><a href="#构造键值对" class="headerlink" title="构造键值对"></a>构造键值对</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">mapIntToString<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">"kavin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mapIntToString<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> string<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">"jack"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mapIntToString<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"lisa"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;map></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">// 自定义的排序结构</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">struct</span> <span class="token class-name">Compare</span><span class="token punctuation">&#123;</span>    <span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">const</span> T<span class="token operator">&amp;</span> key1<span class="token punctuation">,</span> <span class="token keyword">const</span> T<span class="token operator">&amp;</span> key2<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> key1 <span class="token operator">></span> key2<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">void</span> <span class="token function">info</span><span class="token punctuation">(</span><span class="token keyword">const</span> T<span class="token operator">&amp;</span> se<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"INFO: "</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> it <span class="token operator">=</span> se<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> se<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"("</span> <span class="token operator">&lt;&lt;</span> it<span class="token operator">-></span>first <span class="token operator">&lt;&lt;</span> <span class="token string">"->"</span> <span class="token operator">&lt;&lt;</span> it<span class="token operator">-></span>second <span class="token operator">&lt;&lt;</span> <span class="token string">")"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> string<span class="token punctuation">,</span> Compare<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">>></span> mapIntToString<span class="token punctuation">;</span>    mapIntToString<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">"kavin"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mapIntToString<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>pair<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> string<span class="token operator">></span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token string">"jack"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mapIntToString<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"lisa"</span><span class="token punctuation">;</span>    <span class="token function">info</span><span class="token punctuation">(</span>mapIntToString<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> it <span class="token operator">=</span> mapIntToString<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>it <span class="token operator">!=</span> mapIntToString<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Found: "</span> <span class="token operator">&lt;&lt;</span> it<span class="token operator">-></span>first <span class="token operator">&lt;&lt;</span> <span class="token string">"->"</span> <span class="token operator">&lt;&lt;</span> it<span class="token operator">-></span>second <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// mapIntToString.erase(it);</span>    mapIntToString<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">info</span><span class="token punctuation">(</span>mapIntToString<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>INFO<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">-></span>lisa<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">23</span><span class="token operator">-></span>kavin<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">-></span>jack<span class="token punctuation">)</span> Found<span class="token operator">:</span> <span class="token number">100</span><span class="token operator">-></span>lisaINFO<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">-></span>lisa<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">23</span><span class="token operator">-></span>kavin<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="multimap"><a href="#multimap" class="headerlink" title="multimap"></a>multimap</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    multimap<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> string<span class="token operator">></span> <span class="token function">multimapIntToString</span><span class="token punctuation">(</span>mapIntToString<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> mapIntToString<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    multimapIntToString<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">"lili"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">info</span><span class="token punctuation">(</span>multimapIntToString<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> multimapIntToString<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    it <span class="token operator">=</span> multimapIntToString<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>it <span class="token operator">!=</span> multimapIntToString<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        size_t numOfKey <span class="token operator">=</span> multimapIntToString<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>size_t i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numOfKey<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Found: "</span> <span class="token operator">&lt;&lt;</span> it<span class="token operator">-></span>first <span class="token operator">&lt;&lt;</span> <span class="token string">"->"</span> <span class="token operator">&lt;&lt;</span> it<span class="token operator">-></span>second <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            <span class="token operator">++</span>it<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>INFO<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">-></span>lisa<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">23</span><span class="token operator">-></span>kavin<span class="token punctuation">)</span> INFO<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token number">23</span><span class="token operator">-></span>kavin<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">-></span>lisa<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">-></span>lili<span class="token punctuation">)</span> <span class="token number">2</span>Found<span class="token operator">:</span> <span class="token number">100</span><span class="token operator">-></span>lisaFound<span class="token operator">:</span> <span class="token number">100</span><span class="token operator">-></span>lili<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用循环的方式遍历找到的值</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> STL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STL-set</title>
      <link href="2021/04/23/C-STL-STL-set/"/>
      <url>2021/04/23/C-STL-STL-set/</url>
      
        <content type="html"><![CDATA[<!-- toc --><h2 id="集合set"><a href="#集合set" class="headerlink" title="集合set"></a>集合set</h2><p>集合内部元素是有序的不能重复<br>不能通过指针修改元素的值，只能删掉，重新插入<br><code>multiset</code>可以添加重复元素</p><ul><li>插入元素 </li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Integer<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>multiInteger<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Integer<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>查找元素</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">auto</span> it <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>删除元素</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Integer<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>统计元素个数（针对multiset）</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">multiInteger<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>查找第一个大于或小于某个值的数</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">upper_bound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">lower_bound</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="代码示例1-set与multiset"><a href="#代码示例1-set与multiset" class="headerlink" title="代码示例1: set与multiset"></a>代码示例1: set与multiset</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;set></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Contact</span><span class="token punctuation">&#123;</span>    string name<span class="token punctuation">;</span>    <span class="token keyword">int</span> num<span class="token punctuation">;</span>    <span class="token function">Contact</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> _name<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> _num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        name <span class="token operator">=</span> _name<span class="token punctuation">;</span>        num <span class="token operator">=</span> _num<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">const</span> Contact<span class="token operator">&amp;</span> itemToCompare<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">-></span>num <span class="token operator">&lt;</span> itemToCompare<span class="token punctuation">.</span>num<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"name="</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>name <span class="token operator">&lt;&lt;</span> <span class="token string">", num="</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>num <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">void</span> <span class="token function">info</span><span class="token punctuation">(</span><span class="token keyword">const</span> T<span class="token operator">&amp;</span> se<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"INFO: "</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> s <span class="token operator">:</span> se<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> Integer<span class="token punctuation">;</span>    Integer<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Integer<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Integer<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">info</span><span class="token punctuation">(</span>Integer<span class="token punctuation">)</span><span class="token punctuation">;</span>    it <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">upper_bound</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>it <span class="token operator">!=</span> Integer<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Found: "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">else</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"NOT Found"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">auto</span> it <span class="token operator">=</span> Integer<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>it <span class="token operator">!=</span> Integer<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    Integer<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">info</span><span class="token punctuation">(</span>Integer<span class="token punctuation">)</span><span class="token punctuation">;</span>    Integer<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">info</span><span class="token punctuation">(</span>Integer<span class="token punctuation">)</span><span class="token punctuation">;</span>    multiset<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> multiInteger<span class="token punctuation">;</span>    multiInteger<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    multiInteger<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    multiInteger<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>Integer<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Integer<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">info</span><span class="token punctuation">(</span>multiInteger<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> multiInteger<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>INFO<span class="token operator">:</span> <span class="token number">1</span> <span class="token number">12</span> <span class="token number">23</span> Found<span class="token operator">:</span> <span class="token number">12</span>   <span class="token comment">// 找到第一个大于10的元素</span><span class="token number">23</span>INFO<span class="token operator">:</span> <span class="token number">1</span> <span class="token number">12</span> INFO<span class="token operator">:</span> INFO<span class="token operator">:</span> <span class="token number">10</span> <span class="token number">10</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="代码示例2-存储结构体"><a href="#代码示例2-存储结构体" class="headerlink" title="代码示例2: 存储结构体"></a>代码示例2: 存储结构体</h2><p>要重载&lt;和==运算符，前者用于排序，后者用于查找<br><strong>问题</strong><br>用哪个值去实现&lt;运算符，也会用那个值去find<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">Contact</span><span class="token punctuation">&#123;</span>    string name<span class="token punctuation">;</span>    <span class="token keyword">int</span> num<span class="token punctuation">;</span>    <span class="token function">Contact</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> _name<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> _num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        name <span class="token operator">=</span> _name<span class="token punctuation">;</span>        num <span class="token operator">=</span> _num<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 如果这里用num去排序，查找时也是看num相不相同</span>    <span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">const</span> Contact<span class="token operator">&amp;</span> itemToCompare<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>name <span class="token operator">&lt;</span> itemToCompare<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 所以这里的规则最好一样</span>    <span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token keyword">const</span> Contact<span class="token operator">&amp;</span> itemToCompare<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>name <span class="token operator">==</span> itemToCompare<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"name="</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>name <span class="token operator">&lt;&lt;</span> <span class="token string">", num="</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>num <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> string NameInput <span class="token operator">=</span> <span class="token string">"kavin"</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> iterator <span class="token operator">=</span> setContacts<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token function">Contact</span><span class="token punctuation">(</span>NameInput<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>iterator <span class="token operator">!=</span> setContacts<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Found: "</span><span class="token punctuation">;</span>        iterator<span class="token operator">-></span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"NOT Found!!!"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>name<span class="token operator">=</span>jack<span class="token punctuation">,</span> num<span class="token operator">=</span><span class="token number">23</span>name<span class="token operator">=</span>joke<span class="token punctuation">,</span> num<span class="token operator">=</span><span class="token number">0</span>name<span class="token operator">=</span>kavin<span class="token punctuation">,</span> num<span class="token operator">=</span><span class="token number">12</span>name<span class="token operator">=</span>lisa<span class="token punctuation">,</span> num<span class="token operator">=</span><span class="token number">34</span>Found<span class="token operator">:</span> name<span class="token operator">=</span>kavin<span class="token punctuation">,</span> num<span class="token operator">=</span><span class="token number">12</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>这里可以看到输入的是<code>(&quot;kavin&quot;,0)</code>，但是他还是找到了<code>(&quot;kavin&quot;,12)</code>，因为相等的规则是名字相同就可以</p><h2 id="散列表unordered-set"><a href="#散列表unordered-set" class="headerlink" title="散列表unordered_set"></a>散列表unordered_set</h2><p>无序的集合，不能重复<br>但是可以实现查找时间复杂度为常数<br><code>unordered_multiset</code>可以存储重复元素<br>查找、删除、<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unordered_set></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">void</span> <span class="token function">info</span><span class="token punctuation">(</span><span class="token keyword">const</span> T<span class="token operator">&amp;</span> input<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Size="</span> <span class="token operator">&lt;&lt;</span> input<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Max bucket="</span> <span class="token operator">&lt;&lt;</span> input<span class="token punctuation">.</span><span class="token function">max_bucket_count</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Load factor="</span> <span class="token operator">&lt;&lt;</span> input<span class="token punctuation">.</span><span class="token function">load_factor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"INFO: "</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> s <span class="token operator">:</span> input<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> s <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    unordered_set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> num <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">78</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">info</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> it <span class="token operator">=</span> num<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token number">78</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>it <span class="token operator">!=</span> num<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Found: "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    num<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>it<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">info</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Size<span class="token operator">=</span><span class="token number">4</span>  <span class="token comment">// 当前存储的元素个数</span>Max bucket<span class="token operator">=</span><span class="token number">1152921504606846975</span>  <span class="token comment">// 最大可存储的元素数</span>Load factor<span class="token operator">=</span><span class="token number">0.8</span>INFO<span class="token operator">:</span> <span class="token number">54</span> <span class="token number">78</span> <span class="token number">23</span> <span class="token number">45</span> Found<span class="token operator">:</span> <span class="token number">78</span>Size<span class="token operator">=</span><span class="token number">3</span>Max bucket<span class="token operator">=</span><span class="token number">1152921504606846975</span>Load factor<span class="token operator">=</span><span class="token number">0.6</span>INFO<span class="token operator">:</span> <span class="token number">54</span> <span class="token number">23</span> <span class="token number">45</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> STL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STL-list</title>
      <link href="2021/04/23/C-STL-STL-list/"/>
      <url>2021/04/23/C-STL-STL-list/</url>
      
        <content type="html"><![CDATA[<!-- toc --><h2 id="list双向链表"><a href="#list双向链表" class="headerlink" title="list双向链表"></a>list双向链表</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;list></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Contact</span><span class="token punctuation">&#123;</span>    string name<span class="token punctuation">;</span>    <span class="token keyword">int</span> num<span class="token punctuation">;</span>    <span class="token function">Contact</span><span class="token punctuation">(</span><span class="token keyword">const</span> string<span class="token operator">&amp;</span> _name<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> _num<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        name <span class="token operator">=</span> _name<span class="token punctuation">;</span>        num <span class="token operator">=</span> _num<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 需要重载"&lt;"运算符，让list知道怎么排序</span>    <span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">const</span> Contact<span class="token operator">&amp;</span> itemToCompare<span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">-></span>num <span class="token operator">&lt;</span> itemToCompare<span class="token punctuation">.</span>num<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 自定义二元谓词函数实现自定义排序顺序</span><span class="token keyword">bool</span> <span class="token function">descending</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> lsh<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> rsh<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> lsh <span class="token operator">></span> rsh<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    list<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> li <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">info</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 12 23 </span>    li<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 从尾部插入</span>    li<span class="token punctuation">.</span><span class="token function">push_front</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 从头部插入</span>    <span class="token function">info</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// -1 12 23 100</span>    li<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>li<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">info</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 20 20 -1 12 23 100 </span>    li<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 从尾部弹出</span>    li<span class="token punctuation">.</span><span class="token function">pop_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 从头部弹出</span>    <span class="token function">info</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 20 -1 12 23 </span>    li<span class="token punctuation">.</span><span class="token function">reverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 翻转</span>    <span class="token function">info</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 23 12 -1 20 </span>    li<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 默认是从小到大排序</span>    <span class="token function">info</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// -1 12 20 23 </span>    li<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>descending<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 自定义从大到小排序</span>    <span class="token function">info</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 23 20 12 -1 </span>    Contact <span class="token function">c1</span><span class="token punctuation">(</span><span class="token string">"kavin"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Contact <span class="token function">c2</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Contact <span class="token function">c3</span><span class="token punctuation">(</span><span class="token string">"lisa"</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token operator">&lt;</span>Contact<span class="token operator">></span> contacts <span class="token operator">=</span> <span class="token punctuation">&#123;</span>c1<span class="token punctuation">,</span> c2<span class="token punctuation">,</span> c3<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    contacts<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> it <span class="token operator">:</span> contacts<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        it<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>name<span class="token operator">=</span>kavin<span class="token punctuation">,</span> num<span class="token operator">=</span><span class="token number">12</span>name<span class="token operator">=</span>jack<span class="token punctuation">,</span> num<span class="token operator">=</span><span class="token number">23</span>name<span class="token operator">=</span>lisa<span class="token punctuation">,</span> num<span class="token operator">=</span><span class="token number">34</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
            <tag> STL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STL-vector</title>
      <link href="2021/04/20/C-STL-STL-vector/"/>
      <url>2021/04/20/C-STL-STL-vector/</url>
      
        <content type="html"><![CDATA[<!-- toc --><h2 id="vector动态数组"><a href="#vector动态数组" class="headerlink" title="vector动态数组"></a>vector动态数组</h2><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><ol><li>初始化列表</li><li>n个相同的元素</li><li>复制另一个vector初始化</li><li>复制另一个vector的一部分初始化</li></ol><h4 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> vi <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    vi<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vi<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">67</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> v <span class="token operator">:</span> vi<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> v <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">vec1</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> v <span class="token operator">:</span> vec1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> v <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">vec2</span><span class="token punctuation">(</span>vec1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> v <span class="token operator">:</span> vec2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> v <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">vec3</span><span class="token punctuation">(</span>vec1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vec1<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> v <span class="token operator">:</span> vec3<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> v <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token number">20</span> <span class="token number">30</span> <span class="token number">45</span> <span class="token number">67</span><span class="token number">23</span> <span class="token number">23</span> <span class="token number">23</span> <span class="token number">23</span> <span class="token number">23</span> <span class="token number">23</span> <span class="token number">23</span> <span class="token number">23</span> <span class="token number">23</span> <span class="token number">23</span> <span class="token number">23</span> <span class="token number">23</span> <span class="token number">23</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="查找元素"><a href="#查找元素" class="headerlink" title="查找元素"></a>查找元素</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">auto</span> it <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>vi<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vi<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="插入元素"><a href="#插入元素" class="headerlink" title="插入元素"></a>插入元素</h3><ol><li>在某个位置插入一个元素</li><li>在某个位置插入n个相同的元素</li><li>在某个位置插入另一个vector的元素</li></ol><h4 id="代码示例-1"><a href="#代码示例-1" class="headerlink" title="代码示例"></a>代码示例</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> vi <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    vi<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vi<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">67</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vi<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>vi<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vi<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>vi<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">temp</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vi<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>vi<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> temp<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> temp<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token number">20</span> <span class="token number">30</span> <span class="token number">45</span> <span class="token number">67</span> <span class="token number">123</span> <span class="token number">20</span> <span class="token number">30</span> <span class="token number">45</span> <span class="token number">67</span>     <span class="token comment">// 在头部插入一个元素</span><span class="token number">123</span> <span class="token number">20</span> <span class="token number">30</span> <span class="token number">45</span> <span class="token number">67</span> <span class="token number">89</span> <span class="token number">89</span>   <span class="token comment">// 在尾部插入2个相同的元素</span><span class="token number">123</span> <span class="token number">100</span> <span class="token number">100</span> <span class="token number">100</span> <span class="token number">20</span> <span class="token number">30</span> <span class="token number">45</span> <span class="token number">67</span> <span class="token number">89</span> <span class="token number">89</span>   <span class="token comment">// 在第一个元素位置插入一个vector</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">cbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">cend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="访问元素"><a href="#访问元素" class="headerlink" title="访问元素"></a>访问元素</h2><ol><li>迭代器</li><li>下标运算符[]</li><li>成员函数at()</li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> vi<span class="token punctuation">;</span>    vi<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vi<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">67</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>vi<span class="token punctuation">.</span><span class="token function">cbegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">auto</span> it <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>vi<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> vi<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>it <span class="token operator">!=</span> vi<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token function">distance</span><span class="token punctuation">(</span>vi<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> it<span class="token punctuation">)</span><span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> index<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="删除元素"><a href="#删除元素" class="headerlink" title="删除元素"></a>删除元素</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="大小和容量"><a href="#大小和容量" class="headerlink" title="大小和容量"></a>大小和容量</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> 返回vector大小<span class="token function">capacity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> 返回vector容量，容量不够时会自动重新分配<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="deque"><a href="#deque" class="headerlink" title="deque"></a>deque</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">push_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> 从头部插入<span class="token function">pop_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> 从头部弹出<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">template</span><span class="token operator">&lt;</span><span class="token keyword">typename</span> <span class="token class-name">T</span><span class="token operator">></span><span class="token keyword">void</span> <span class="token function">info</span><span class="token punctuation">(</span><span class="token keyword">const</span> deque<span class="token operator">&lt;</span>T<span class="token operator">></span><span class="token operator">&amp;</span> q<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> x <span class="token operator">:</span> q<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">disp</span><span class="token punctuation">(</span><span class="token keyword">const</span> deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> q<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> it <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> q<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    deque<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> q<span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">push_front</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">info</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">pop_back</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    q<span class="token punctuation">.</span><span class="token function">pop_front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">disp</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token number">9</span> <span class="token number">10</span> <span class="token number">11</span> <span class="token number">12</span> <span class="token number">10</span> <span class="token number">11</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重载赋值运算符</title>
      <link href="2021/04/20/C-%E9%87%8D%E8%BD%BD-%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
      <url>2021/04/20/C-%E9%87%8D%E8%BD%BD-%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<p>运算符重载是<code>C++</code>的一项强大功能。通过重载，可以扩展<code>C++</code>运算符的功能，使它们能够操作用户自定义的数据类型，增加程序代码的直观性和可读性。</p><p>本章主要介绍类成员运算符重载与友元运算符重载，二元运算符与一元运算符重载，运算符<code>++、--、[]、()</code>重载，<code>this</code>指针与运算符重载及 流运算符<code>&lt;&lt;</code>和<code>&gt;&gt;</code>的重载</p><h2 id="一、重载二元运算符"><a href="#一、重载二元运算符" class="headerlink" title="一、重载二元运算符"></a>一、重载二元运算符</h2><h3 id="二元运算符的调用形式与解析"><a href="#二元运算符的调用形式与解析" class="headerlink" title="二元运算符的调用形式与解析"></a>二元运算符的调用形式与解析</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">aa@bb可解释成: aa.operator@<span class="token punctuation">(</span>bb<span class="token punctuation">)</span>或解释成: operator@<span class="token punctuation">(</span>aa,bb<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果两者都有定义,就按照重载解析</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">X</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token keyword">operator</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">X</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token keyword">operator</span> <span class="token operator">+</span> <span class="token punctuation">(</span>X<span class="token punctuation">,</span> X<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token keyword">operator</span> <span class="token operator">+</span> <span class="token punctuation">(</span>X<span class="token punctuation">,</span> <span class="token keyword">double</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="类运算符重载形式"><a href="#类运算符重载形式" class="headerlink" title="类运算符重载形式"></a>类运算符重载形式</h3><h4 id="非静态成员运算符重载"><a href="#非静态成员运算符重载" class="headerlink" title="非静态成员运算符重载"></a>非静态成员运算符重载</h4><p>以类成员形式重载的运算符参数比实际参数少一个，第1个参数是以<code>this</code>指针隐式传递的。 </p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Complex</span><span class="token punctuation">&#123;</span>    <span class="token keyword">double</span> real<span class="token punctuation">,</span>image<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    Complex <span class="token keyword">operator</span><span class="token operator">+</span><span class="token punctuation">(</span>Complex b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="友元运算符重载"><a href="#友元运算符重载" class="headerlink" title="友元运算符重载"></a>友元运算符重载</h4><p>如果将运算符函数作为类的友元重载，它需要的参数个数就与运算符实际需要的参数个数相同。比如，若用友元函数重载Complex类的加法运算符，则形式如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Complex</span><span class="token punctuation">&#123;</span>    <span class="token keyword">friend</span> Complex <span class="token keyword">operator</span><span class="token operator">+</span><span class="token punctuation">(</span>Complex a<span class="token punctuation">,</span>Complex b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//声明</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Complex <span class="token keyword">operator</span><span class="token operator">+</span><span class="token punctuation">(</span>Complex a<span class="token punctuation">,</span>Complex b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>         <span class="token comment">//定义</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、重载一元运算符"><a href="#二、重载一元运算符" class="headerlink" title="二、重载一元运算符"></a>二、重载一元运算符</h2><p>一元运算符只需要一个运算参数，如取地址运算符（&amp;）、负数（-）、自增加（++）等。</p><p>常见调用形式为：<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">@a 或 a@  <span class="token comment">//隐式调用形式</span>a<span class="token punctuation">.</span><span class="token keyword">operator</span>@<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// 显式调用一元运算符@</span>其中的@代表一元运算符，a代表操作数。@a代表前缀一元运算，如“<span class="token operator">++</span>a”；a@表示后缀运算，如“a<span class="token operator">++</span>”。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>@a将被C++解释为下面的形式之一</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">a<span class="token punctuation">.</span><span class="token keyword">operator</span>@<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">operator</span>@<span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>一元运算符作为类成员函数重载时不需要参数，其形式如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">X</span><span class="token punctuation">&#123;</span>    T <span class="token keyword">operator</span>@<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>T是运算符@的返回类型。从形式上看，作为类成员函数重载的一元运算符没有参数，但实际上它包含了一个隐含参数<br>即调用对象的this指针。</p><h3 id="前自增-减-与后自增-减"><a href="#前自增-减-与后自增-减" class="headerlink" title="前自增(减)与后自增(减)"></a>前自增(减)与后自增(减)</h3><p>C++编译器可以通过在运算符函数参数表中是否插入关键字<code>int</code>来区分这两种方式</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//前缀</span><span class="token keyword">operator</span> <span class="token operator">--</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">operator</span> <span class="token operator">--</span> <span class="token punctuation">(</span>X <span class="token operator">&amp;</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//后缀</span><span class="token keyword">operator</span> <span class="token operator">--</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">operator</span> <span class="token operator">--</span> <span class="token punctuation">(</span>X <span class="token operator">&amp;</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、重载赋值运算符"><a href="#三、重载赋值运算符" class="headerlink" title="三、重载赋值运算符="></a>三、重载赋值运算符<code>=</code></h2><p>赋值运算进行时将调用此运算符</p><p>只能用成员函数重载</p><p>如果需要而没有定义时，编译器自动生成，该版本进行<code>bit-by-bit</code>拷贝</p><h2 id="四、重载"><a href="#四、重载" class="headerlink" title="四、重载[]"></a>四、重载<code>[]</code></h2><p>1、<code>[]</code>是一个二元运算符，其重载形式如下：</p><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">class X&#123;    X&amp; operator[](int n);&#125;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>2、 重载<code>[]</code>需要注意的问题</p><ul><li><code>[]</code>是一个二元运算符，其第1个参数是通过对象的<code>this</code>指针传递的，第2个参数代表数组的下标</li><li>由于<code>[]</code>既可以出现在赋值符<code>=</code>的左边，也可以出现在赋值符<code>=</code>的右边，所以重载运算符<code>[]</code>时常返回引用。</li><li><strong><code>[]</code>只能被重载为类的非静态成员函数，不能被重载为友元和普通函数</strong>。</li></ul><h2 id="五、重载"><a href="#五、重载" class="headerlink" title="五、重载()"></a>五、重载<code>()</code></h2><p>1、运算符<code>()</code>是函数调用运算符，也能被重载。且只能被重载为类的成员函数。</p><p>2、运算符<code>()</code>的重载形式如下：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">X</span><span class="token punctuation">&#123;</span>    X<span class="token operator">&amp;</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>参数表<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>其中的参数表可以包括任意多个参数。</p><p>3、运算符( )的调用形式如下：<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">X Obj<span class="token punctuation">;</span>      <span class="token comment">//对象定义</span><span class="token function">Obj</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span>参数表<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//调用形式1</span><span class="token function">Obj</span><span class="token punctuation">(</span>参数表<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//调用形式2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></p><h2 id="六、代码示例"><a href="#六、代码示例" class="headerlink" title="六、代码示例"></a>六、代码示例</h2><p>返回值要写成类引用<code>Class&amp;</code>，不然会再调用构造函数新建一个临时变量</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">A</span><span class="token punctuation">(</span><span class="token keyword">int</span> val <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token function">x</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         cout <span class="token operator">&lt;&lt;</span> <span class="token string">"A: constructor. "</span><span class="token punctuation">;</span>         cout <span class="token operator">&lt;&lt;</span> <span class="token string">"x = "</span> <span class="token operator">&lt;&lt;</span> val <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//返回引用类型</span>    A<span class="token operator">&amp;</span> <span class="token keyword">operator</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">const</span> A<span class="token operator">&amp;</span> input<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"copy Assignment"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        x <span class="token operator">=</span> input<span class="token punctuation">.</span>x<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">int</span> x<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    A <span class="token function">a</span><span class="token punctuation">(</span><span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">,</span> b<span class="token punctuation">;</span>    b <span class="token operator">=</span> a<span class="token punctuation">;</span>    b<span class="token punctuation">.</span><span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//写成这样也可以</span>    A c <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token comment">// 写成这样就不会调用复制赋值运算符函数，编译器内部实现了</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>A<span class="token operator">:</span> constructor<span class="token punctuation">.</span> x <span class="token operator">=</span> <span class="token number">34</span>A<span class="token operator">:</span> constructor<span class="token punctuation">.</span> x <span class="token operator">=</span> <span class="token number">0</span>copy Assignment <span class="token comment">// 调用了复制复制运算符函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重载运算符</title>
      <link href="2021/04/18/C-%E9%87%8D%E8%BD%BD%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
      <url>2021/04/18/C-%E9%87%8D%E8%BD%BD%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<!-- toc --><h2 id="project-1-重载-运算符"><a href="#project-1-重载-运算符" class="headerlink" title="project 1 重载()运算符"></a>project 1 重载()运算符</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Clock</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">int</span> hour<span class="token punctuation">,</span> minute<span class="token punctuation">,</span> second<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Clock</span><span class="token punctuation">(</span><span class="token keyword">int</span> h<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> s<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">hour</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">minute</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">second</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token comment">// 重载()运算符</span>    <span class="token keyword">void</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">int</span> h<span class="token punctuation">,</span> <span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        hour <span class="token operator">=</span> h<span class="token punctuation">;</span>        minute <span class="token operator">=</span> m<span class="token punctuation">;</span>        second <span class="token operator">=</span> s<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">ShowTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> hour <span class="token operator">&lt;&lt;</span> <span class="token string">":"</span> <span class="token operator">&lt;&lt;</span> minute <span class="token operator">&lt;&lt;</span> <span class="token string">":"</span> <span class="token operator">&lt;&lt;</span> second <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Clock <span class="token function">t1</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    t1<span class="token punctuation">.</span><span class="token function">ShowTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    t1<span class="token punctuation">.</span><span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    t1<span class="token punctuation">.</span><span class="token function">ShowTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="project-2-重载-和-运算符"><a href="#project-2-重载-和-运算符" class="headerlink" title="project 2 重载()和[]运算符"></a>project 2 重载()和[]运算符</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">X</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"X operator ("</span> <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">")"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token keyword">operator</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"X operator ["</span> <span class="token operator">&lt;&lt;</span> j <span class="token operator">&lt;&lt;</span> <span class="token string">"]"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> j<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       X obj<span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">obj</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> obj<span class="token punctuation">[</span><span class="token number">234</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> j <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>X <span class="token keyword">operator</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token number">1</span>X <span class="token keyword">operator</span> <span class="token punctuation">[</span><span class="token number">234</span><span class="token punctuation">]</span><span class="token number">234</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>sublime</code>的代码复制到<code>VScode</code>之后会出现空格不一致的问题，解决方法是在<code>sublime</code>中把<code>tab</code>替换为空格<br><code>Perference-&gt;setting</code>添加<br><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token string">"tab_size"</span><span class="token builtin class-name">:</span> <span class="token number">4</span>,<span class="token string">"translate_tabs_to_spaces"</span><span class="token builtin class-name">:</span> <span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h2 id="project-3-员工工资系统"><a href="#project-3-员工工资系统" class="headerlink" title="project 3 员工工资系统"></a>project 3 员工工资系统</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">struct</span> <span class="token class-name">person</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">double</span> salary<span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">*</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">SalaryManage</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span><span class="token operator">:</span>    person<span class="token operator">*</span> employee<span class="token punctuation">;</span>    <span class="token keyword">int</span> max<span class="token punctuation">;</span>    <span class="token comment">// 可容纳员工数</span>    <span class="token keyword">int</span> count<span class="token punctuation">;</span>  <span class="token comment">// 当前员工数</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">SalaryManage</span><span class="token punctuation">(</span><span class="token keyword">int</span> Max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        max <span class="token operator">=</span> Max<span class="token punctuation">;</span>        count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        employee <span class="token operator">=</span> <span class="token keyword">new</span> person<span class="token punctuation">[</span>max<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">double</span> <span class="token operator">&amp;</span><span class="token keyword">operator</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> Name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        person<span class="token operator">*</span> ptr<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>ptr <span class="token operator">=</span> employee<span class="token punctuation">;</span> ptr <span class="token operator">&lt;=</span> employee <span class="token operator">+</span> count<span class="token punctuation">;</span> ptr<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span>ptr<span class="token operator">-></span>name<span class="token punctuation">,</span> Name<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> ptr<span class="token operator">-></span>salary<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            ptr <span class="token operator">=</span> employee <span class="token operator">+</span> count<span class="token punctuation">;</span> <span class="token comment">// 跳到最后一个</span>            count<span class="token operator">++</span><span class="token punctuation">;</span>                <span class="token comment">// 员工数++</span>            ptr<span class="token operator">-></span>name <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token function">strlen</span><span class="token punctuation">(</span>Name<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 新建一个员工</span>            <span class="token function">strcpy</span><span class="token punctuation">(</span>ptr<span class="token operator">-></span>name<span class="token punctuation">,</span> Name<span class="token punctuation">)</span><span class="token punctuation">;</span>            ptr<span class="token operator">-></span>salary <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> ptr<span class="token operator">-></span>salary<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> count<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            cout <span class="token operator">&lt;&lt;</span> employee<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name <span class="token operator">&lt;&lt;</span> <span class="token string">": "</span> <span class="token operator">&lt;&lt;</span> employee<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>salary <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    SalaryManage <span class="token function">s</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> ch1 <span class="token operator">=</span> <span class="token string">"kavin"</span><span class="token punctuation">;</span>    s<span class="token punctuation">[</span>ch1<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3.2</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> ch2 <span class="token operator">=</span> <span class="token string">"jack"</span><span class="token punctuation">;</span>    s<span class="token punctuation">[</span>ch2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">123.2</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">[</span>ch1<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    s<span class="token punctuation">.</span><span class="token function">display</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token number">3.2</span>kavin<span class="token operator">:</span> <span class="token number">3.2</span>jack<span class="token operator">:</span> <span class="token number">123.2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>C++11</code>不能直接从<code>string</code>字符串转为<code>char*</code>，所以用一个指向字符串常量的指针指向他</p><h2 id="project-4-重载二元运算符"><a href="#project-4-重载二元运算符" class="headerlink" title="project 4 重载二元运算符"></a>project 4 重载二元运算符</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Complex</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Complex</span><span class="token punctuation">(</span><span class="token keyword">int</span> _r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">int</span> _i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">r</span><span class="token punctuation">(</span>_r<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">i</span><span class="token punctuation">(</span>_i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    Complex <span class="token keyword">operator</span> <span class="token operator">+</span> <span class="token punctuation">(</span>Complex input<span class="token punctuation">)</span><span class="token punctuation">;</span>    Complex <span class="token keyword">operator</span> <span class="token operator">-</span> <span class="token punctuation">(</span>Complex input<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">int</span> r<span class="token punctuation">,</span> i<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Complex Complex<span class="token operator">::</span><span class="token keyword">operator</span> <span class="token operator">+</span> <span class="token punctuation">(</span>Complex input<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">Complex</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>r <span class="token operator">+</span> input<span class="token punctuation">.</span>r<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-></span>i <span class="token operator">+</span> input<span class="token punctuation">.</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Complex Complex<span class="token operator">::</span><span class="token keyword">operator</span> <span class="token operator">-</span> <span class="token punctuation">(</span>Complex input<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">Complex</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>r <span class="token operator">-</span> input<span class="token punctuation">.</span>r<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token operator">-></span>i <span class="token operator">-</span> input<span class="token punctuation">.</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">Complex</span><span class="token operator">::</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>r<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>i <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"+"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>i <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> cout <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>i <span class="token operator">&lt;&lt;</span> <span class="token string">"i"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Complex <span class="token function">a</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    a<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Complex <span class="token function">b</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    b<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Complex c <span class="token operator">=</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>    c<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Complex d <span class="token operator">=</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span>    d<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">3</span>i<span class="token number">3</span><span class="token operator">+</span><span class="token number">4</span>i<span class="token number">5</span><span class="token operator">+</span><span class="token number">1</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">7</span>i<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="project5-自定义String类"><a href="#project5-自定义String类" class="headerlink" title="project5 自定义String类"></a>project5 自定义String类</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">String</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">~</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">friend</span> ostream<span class="token operator">&amp;</span> <span class="token keyword">operator</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>ostream<span class="token operator">&amp;</span> os<span class="token punctuation">,</span> <span class="token keyword">const</span> String<span class="token operator">&amp;</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> os <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">.</span>sPtr<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 声明为友元函数，参数要与实际需要的参数相同</span>    <span class="token keyword">friend</span> String <span class="token keyword">operator</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">const</span> String<span class="token operator">&amp;</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> String<span class="token operator">&amp;</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> String<span class="token operator">&amp;</span> <span class="token keyword">operator</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">const</span> String<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> String<span class="token operator">&amp;</span> <span class="token keyword">operator</span> <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token keyword">const</span> String<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token keyword">const</span> String<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token operator">!=</span> <span class="token punctuation">(</span><span class="token keyword">const</span> String<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> <span class="token keyword">operator</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">const</span> String<span class="token operator">&amp;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token operator">&amp;</span> <span class="token keyword">operator</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">-></span>length<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">char</span><span class="token operator">*</span> sPtr<span class="token punctuation">;</span>    <span class="token keyword">int</span> length<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">String</span><span class="token operator">::</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span><span class="token operator">*</span> str<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token operator">-></span>sPtr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>sPtr<span class="token punctuation">,</span> str<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token operator">-></span>length <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 友元就不需要作用域String::了</span>String <span class="token keyword">operator</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">const</span> String<span class="token operator">&amp;</span> a<span class="token punctuation">,</span> <span class="token keyword">const</span> String<span class="token operator">&amp;</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    String res<span class="token punctuation">;</span>    res<span class="token punctuation">.</span>sPtr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span>a<span class="token punctuation">.</span>length <span class="token operator">+</span> b<span class="token punctuation">.</span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>sPtr<span class="token punctuation">,</span> a<span class="token punctuation">.</span>sPtr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strcat</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>sPtr<span class="token punctuation">,</span> b<span class="token punctuation">.</span>sPtr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">String</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>sPtr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> String<span class="token operator">&amp;</span> String<span class="token operator">::</span><span class="token keyword">operator</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">const</span> String<span class="token operator">&amp;</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"copy assignment"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token operator">-></span>length <span class="token operator">=</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>sPtr<span class="token punctuation">,</span> s<span class="token punctuation">.</span>sPtr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> String<span class="token operator">&amp;</span> String<span class="token operator">::</span><span class="token keyword">operator</span> <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token keyword">const</span> String<span class="token operator">&amp;</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">char</span><span class="token operator">*</span> temp <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span>sPtr<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token operator">-></span>length <span class="token operator">+=</span> s<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token operator">-></span>sPtr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token operator">-></span>length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>sPtr<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strcat</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>sPtr<span class="token punctuation">,</span> s<span class="token punctuation">.</span>sPtr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">delete</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">*</span><span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> String<span class="token operator">::</span><span class="token keyword">operator</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token keyword">const</span> String<span class="token operator">&amp;</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>sPtr<span class="token punctuation">,</span> s<span class="token punctuation">.</span>sPtr<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> String<span class="token operator">::</span><span class="token keyword">operator</span> <span class="token operator">!=</span> <span class="token punctuation">(</span><span class="token keyword">const</span> String<span class="token operator">&amp;</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token keyword">this</span> <span class="token operator">==</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> String<span class="token operator">::</span><span class="token keyword">operator</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span><span class="token keyword">const</span> String<span class="token operator">&amp;</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>sPtr<span class="token punctuation">,</span> s<span class="token punctuation">.</span>sPtr<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">char</span><span class="token operator">&amp;</span> String<span class="token operator">::</span><span class="token keyword">operator</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">-></span>sPtr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    String <span class="token function">s1</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"s1="</span> <span class="token operator">&lt;&lt;</span> s1 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        String s2<span class="token punctuation">;</span>    s2<span class="token punctuation">.</span><span class="token keyword">operator</span><span class="token operator">=</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"s2="</span> <span class="token operator">&lt;&lt;</span> s2 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    s2 <span class="token operator">+=</span> <span class="token string">" world"</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"s2="</span> <span class="token operator">&lt;&lt;</span> s2 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> s2<span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> s2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    String s3 <span class="token operator">=</span> s1 <span class="token operator">+</span> s2<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"s3="</span> <span class="token operator">&lt;&lt;</span> s3 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    String <span class="token function">s4</span><span class="token punctuation">(</span><span class="token string">"hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>s2 <span class="token operator">!=</span> s4<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"s2!=s4"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"s2==s4"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    String <span class="token function">str1</span><span class="token punctuation">(</span><span class="token string">"abd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    String <span class="token function">str2</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>str1 <span class="token operator">&lt;</span> str2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"str1 &lt; str2"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"str1 >= str2"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>s1<span class="token operator">=</span>hellocopy assignments2<span class="token operator">=</span>hellos2<span class="token operator">=</span>hello worldh e l l o   w o r l d s3<span class="token operator">=</span>hellohello worlds2<span class="token operator">==</span>s4str1 <span class="token operator">>=</span> str2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>继承</title>
      <link href="2021/04/18/C-%E7%BB%A7%E6%89%BF/"/>
      <url>2021/04/18/C-%E7%BB%A7%E6%89%BF/</url>
      
        <content type="html"><![CDATA[<!-- toc --><h2 id="重载基类的方法"><a href="#重载基类的方法" class="headerlink" title="重载基类的方法"></a>重载基类的方法</h2><p>如果要使用基类的方法，可以用作用域解析运算符<code>(::)</code><br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>x <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">A</span></span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>   <span class="token comment">// 重载基类的方法</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"B: "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>x <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>y <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token class-name">A</span><span class="token operator">::</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 使用基类的方法</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    B<span class="token operator">*</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">B</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    b<span class="token operator">-></span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">delete</span> b<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>A constructorB constructorB<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span>     <span class="token comment">// 调用派生类的info()</span>A<span class="token operator">:</span> <span class="token number">3</span>        <span class="token comment">// 调用基类的info()</span>B destructorA destructor<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h2 id="隐藏基类的方法"><a href="#隐藏基类的方法" class="headerlink" title="隐藏基类的方法"></a>隐藏基类的方法</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"A: "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>x <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">info</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"A: receive "</span> <span class="token operator">&lt;&lt;</span> val <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">A</span></span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"B: "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>x <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>y <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    B<span class="token operator">*</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">B</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    b<span class="token operator">-></span><span class="token function">info</span><span class="token punctuation">(</span><span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// error，B中没有实现info(int val)</span>    <span class="token keyword">delete</span> b<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>派生类中实现了<code>info()</code>，他隐藏了基类<code>A::info()</code>的所有版本，编译器调用了派生类的<code>info()</code>，但他没有接受参数，也就会出错</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><ol><li>在<code>main()</code>中使用作用域解析运算符<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">b<span class="token operator">-></span><span class="token class-name">A</span><span class="token operator">::</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>在派生类中使用<code>using</code>关键字<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">using</span> A<span class="token operator">::</span>info<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>重载基类的所有info方法<pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"B: "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>x <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>y <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">info</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"B: receive "</span> <span class="token operator">&lt;&lt;</span> val <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h2 id="私有继承"><a href="#私有继承" class="headerlink" title="私有继承"></a>私有继承</h2><p>公有继承派生类在继承结构层次外部可以使用基类的公有和保护成员，如<code>b-&gt;g()</code><br>私有继承则表示，基类的公有和保护成员，只能在派生类内部使用，<strong>外部无法访问</strong><br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">g</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token operator">-></span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">private</span> <span class="token class-name">A</span></span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"B: f("</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>x <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>y <span class="token operator">&lt;&lt;</span> <span class="token string">")"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">int</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    B<span class="token operator">*</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">B</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    b<span class="token operator">-></span><span class="token function">g</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// error，私有继承不能访问基类的成员函数</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h2 id="保护继承"><a href="#保护继承" class="headerlink" title="保护继承"></a>保护继承</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">g</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token operator">-></span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">A</span></span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"B: f("</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>x <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>y <span class="token operator">&lt;&lt;</span> <span class="token string">")"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">protected</span> <span class="token class-name">B</span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token operator">-></span><span class="token function">g</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>C类想访问A类的成员方法，如果B对A是私有或保护继承，C类是无法访问A类的成员方法的<br>只有B类对A类是公有继承，C类才能访问A类的成员方法</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>如果是<code>is-a</code>关系，即属于关系，要用公有继承</li><li>如果是<code>has-a</code>关系，即拥有关系，要用私有或保护继承</li><li><code>public</code>的限制最小，可以被类成员函数、派生类成员函数、友元访问，类对象也可以访问</li><li><code>protected</code>有点限制，可以被类成员函数、派生类成员函数、友元访问，类对象不能访问</li><li><code>private</code>限制最大，可以被类成员函数、友元访问，派生类、类对象都不能访问</li></ol><h3 id="三个访问限定符的区别"><a href="#三个访问限定符的区别" class="headerlink" title="三个访问限定符的区别"></a>三个访问限定符的区别</h3><table>    <tr>        <th>类型</th>        <th>类成员函数</th>        <th>友元</th>        <th>派生类成员函数</th>        <th>类对象</th>    </tr>    <tr>        <th>public</th>        <th>yes</th>        <th>yes</th>        <th>yes</th>        <th>yes</th>    </tr>    <tr>        <th>protected</th>        <th>yes</th>        <th>yes</th>        <th>yes</th>        <th>no</th>    </tr>    <tr>        <th>privated</th>        <th>yes</th>        <th>yes</th>        <th>no</th>        <th>no</th>    </tr></table>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>抽象类/虚函数/虚继承</title>
      <link href="2021/04/17/C-%E8%99%9A%E5%87%BD%E6%95%B0/"/>
      <url>2021/04/17/C-%E8%99%9A%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<!-- toc --><h2 id="一、多态性"><a href="#一、多态性" class="headerlink" title="一、多态性"></a>一、多态性</h2><p>多态性：多态就是在同一个类或继承体系结构的基类与派生类中，用同名函数来实现各种不同的功能。</p><p><strong>静态绑定又称静态联编</strong>，是指在编译程序时就根据调用函数提供的信息，把它所对应的具体函数确定下来，即在编译时就把调用函数名与具体函数绑定在一起。 </p><p><strong>动态绑定又称动态联编</strong>，是指在编译程序时还不能确定函数调用所对应的具体函数，只有在程序运行过程中才能够确定函数调用所对应的具体函数，即在程序运行时才把调用函数名与具体函数绑定在一起。</p><p>编译时多态性：静态联编(连接)——系统在编译时就决定如何实现某一动作，即对某一消息如何处理。静态联编具有执行速度快的优点。在C++中的编译时多态性是通过函数重载和运算符重载实现的。<br>运行时多态性：动态联编(连接)——系统在运行时动态实现某一动作，即对某一消息在运行过程实现其如何响应。动态联编为系统提供了灵活和高度问题抽象的优点，在C++中的运行时多态性是通过继承和虚函数实现的。</p><h2 id="二、虚函数"><a href="#二、虚函数" class="headerlink" title="二、虚函数"></a>二、虚函数</h2><p>虚函数的意义</p><p>1、基类与派生类的赋值相容</p><ul><li>派生类对象可以赋值给基类对象。</li><li>派生类对象的地址可以赋值给指向基类对象的指针。</li><li>派生类对象可以作为基类对象的引用。</li></ul><p>赋值相容的问题：不论哪种赋值方式，都只能通过基类对象（或基类对象的指针或引用）访问到派生类对象从基类中继承到的成员， 不能借此访问派生类定义的成员。</p><p>2、虚函数使得可以通过基类对象的指针或引用访问派生类定义的成员。</p><p>3、<code>virtual</code>关键字其实质是告知编译系统，被指定为<code>virtual</code>的函数采用动态联编的形式编译。</p><p>4、虚函数的虚特征：基类指针指向派生类的对象时，通过该指针访问其虚函数将调用派生类的版本。</p><ul><li>一旦将某个成员函数声明为虚函数后，它在继承体系中就永远为虚函数了 </li><li>如果基类定义了虚函数，当通过基类指针或引用调用派生类对象时，将访问到它们实际所指对象中的虚函数版本。</li><li>只有通过基类对象的指针和引用访问派生类对象的虚函数时，才能体现虚函数的特性。</li><li>派生类中的虚函数要保持其虚特征，必须与基类虚函数的函数原型完全相同，否则就是普通的重载函数，与基类的虚函数无关。</li><li>派生类通过从基类继承的成员函数调用虚函数时，将访问到派生类中的版本。</li><li>只有类的非静态成员函数才能被定义为虚函数，类的构造函数和静态成员函数不能定义为虚函数。原因是虚函数在继承层次结构中才能够发生作用，而构造函数、静态成员是不能够被继承的。</li><li>内联函数也不能是虚函数。因为内联函数采用的是静态联编的方式，而虚函数是在程序运行时才与具体函数动态绑定的，采用的是动态联编的方式，即使虚函数在类体内被定义，C++编译器也将它视为非内联函数。</li></ul><p>5、基类析构函数几乎总是为虚析构函数。<br>假定使用<code>delete</code>和一个指向派生类的基类指针来销毁派生类对象，如果基类析构函数不为虚,就如一个普通成员函数，<code>delete</code>函数调用的就是基类析构函数。在通过基类对象的引用或指针调用派生类对象时，将致使对象析构不彻底！</p><h2 id="三、纯虚函数和抽象类"><a href="#三、纯虚函数和抽象类" class="headerlink" title="三、纯虚函数和抽象类"></a>三、纯虚函数和抽象类</h2><p>1、纯虚函数概念？</p><p>仅定义函数原型而不定义其实现的虚函数<br>实用角度：占位手段<code>place-holder</code><br>方法学：接口定义手段，抽象表达手段<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">X</span><span class="token punctuation">&#123;</span>    <span class="token keyword">virtual</span> ret_type <span class="token function">func_name</span> <span class="token punctuation">(</span>param<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><br>2、抽象类概念？</p><p>包含一个或多个纯虚函数的类<br><strong>不能实例化抽象类</strong><br>但是可以定义抽象类的指针和引用</p><p>3、C++对抽象类具有以下限定</p><ul><li>抽象类中含有纯虚函数，由于纯虚函数没有实现代码，所以不能建立抽象类的对象。</li><li>抽象类只能作为其他类的基类，可以通过抽象类对象的指针或引用访问到它的派生类对象，实现运行时的多态性。</li><li>如果派生类只是简单地继承了抽象类的纯虚函数，而没有重新定义基类的纯虚函数，则派生类也是一个抽象类。</li></ul><h2 id="虚函数的用法"><a href="#虚函数的用法" class="headerlink" title="虚函数的用法"></a>虚函数的用法</h2><p>为什么要使用虚函数，因为我们希望基类指针如果指向派生类对象，调用的应该是派生类中的方法，如果不用虚函数，只用重载，那他将会调用基类的方法，所以需要虚函数<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"A: info"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">A</span></span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"B: info"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    A<span class="token operator">*</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">B</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    b<span class="token operator">-></span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>没有<span class="token keyword">virtual</span>时，调用基类方法<span class="token operator">:</span>A<span class="token operator">:</span> info加了<span class="token keyword">virtual</span>，调用派生类方法<span class="token operator">:</span>B<span class="token operator">:</span> info<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h2 id="纯虚函数"><a href="#纯虚函数" class="headerlink" title="纯虚函数"></a>纯虚函数</h2><p>抽象类中含有虚函数，继承类中需要实现抽象类的所有虚函数<br>成员函数可以调用虚函数，构造函数和析构函数不能调用虚函数<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment">//纯虚函数</span>    <span class="token keyword">void</span> <span class="token function">g</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token operator">-></span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">// 调用虚函数</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">A</span></span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">// 派生类要实现虚函数</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"B: f()"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    A a<span class="token punctuation">;</span>            <span class="token comment">// error，不能创建抽象类对象</span>    A<span class="token operator">*</span> a <span class="token operator">=</span> <span class="token keyword">new</span> A<span class="token punctuation">;</span>   <span class="token comment">// error，不能创建抽象类指针对象</span>    B<span class="token operator">*</span> b <span class="token operator">=</span> <span class="token keyword">new</span> B<span class="token punctuation">;</span>    b<span class="token operator">-></span><span class="token function">g</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">//因为B对A是公有继承，所以可以使用A中的成员方法</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>虚函数是用虚函数表实现的，虚函数表由一系列函数指针组成，每个函数指针指向虚函数的实现<br>从下面的例子可以看出，<code>Base</code>含有2个<code>int</code>和一个虚函数(几个都一样)，<code>Derived</code>含有2个<code>int</code>，他们差了一个指针的大小(8)<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Base</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">doSomeThing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Derived</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> x<span class="token punctuation">,</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Base<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>Derived<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token number">4</span>   <span class="token comment">// int占用4字节</span><span class="token number">8</span>   <span class="token comment">// 指针占用8字节</span><span class="token number">16</span>  <span class="token comment">// 2个int+1个虚函数指针</span><span class="token number">8</span>   <span class="token comment">// 2个int</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h2 id="抽象类构造函数"><a href="#抽象类构造函数" class="headerlink" title="抽象类构造函数"></a>抽象类构造函数</h2><p>构造函数不能是虚函数<br>可以用基类指针指向派生类对象<br><code>protected</code>允许派生类和友元类访问，但禁止在继承结构层次外部访问<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">A</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">x</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"A constructor"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">virtual</span> <span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">g</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token operator">-></span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">protected</span><span class="token operator">:</span>  <span class="token comment">// 成员变量声明为protected，可以在派生类和友元类中访问</span>    <span class="token keyword">int</span> x<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">A</span></span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">B</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">A</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">y</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"B constructor"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"B: f("</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>x <span class="token operator">&lt;&lt;</span> <span class="token string">", "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>y <span class="token operator">&lt;&lt;</span> <span class="token string">")"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">int</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    A<span class="token operator">*</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">B</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//基类指针指向派生类对象</span>    b<span class="token operator">-></span><span class="token function">g</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>A constructorB constructorB<span class="token operator">:</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>可以看到先调用了<code>A</code>的构造函数，后调用了<code>B</code>的构造函数</p><h2 id="虚析构函数"><a href="#虚析构函数" class="headerlink" title="虚析构函数"></a>虚析构函数</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">virtual</span> <span class="token operator">~</span><span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"A destructor"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">A</span></span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token operator">~</span><span class="token function">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"B destructor"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    A<span class="token operator">*</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">B</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    b<span class="token operator">-></span><span class="token function">g</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">delete</span> b<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>析构函数没有加<span class="token keyword">virtual</span>时：A constructorB constructorB<span class="token operator">:</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>A destructor析构函数加<span class="token keyword">virtual</span>时：A constructorB constructorB<span class="token operator">:</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>B destructor    <span class="token comment">// 先调用了派生类的析构函数</span>A destructor<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>用基类指针指向派生类对象时，如果基类的析构函数没有声明为<code>virtual</code>，销毁对象时就只会调用<strong>基类</strong>的析构函数，这样会造成内存泄漏<br>所以把基类的析构函数声明为<code>virtual</code>，销毁对象时就会先调用<strong>派生类</strong>的析构函数，再调用<strong>基类</strong>的析构函数</p><h2 id="虚继承"><a href="#虚继承" class="headerlink" title="虚继承"></a>虚继承</h2><p>为了解决菱形问题，一个基类有多个派生类，这些派生类又被一个类继承<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> x<span class="token punctuation">;</span>    <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"A: constructor"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">A</span></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">B1</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">A</span></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">B</span><span class="token punctuation">,</span> <span class="token keyword">public</span> <span class="token class-name">B1</span></span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"C: constructor"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    C c<span class="token punctuation">;</span>    c<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>   <span class="token comment">// error，发生混淆，不知道是谁的x</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>A<span class="token operator">:</span> constructor  <span class="token comment">// 调用了两次基类的构造函数</span>A<span class="token operator">:</span> constructorC<span class="token operator">:</span> constructor<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>解决方法：基类的多个派生类使用<strong>虚继承</strong>，确保只有<strong>一个基类实例</strong><br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">int</span> x<span class="token punctuation">;</span>    <span class="token function">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"A: constructor"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token class-name">A</span></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">B1</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token class-name">A</span></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">B</span><span class="token punctuation">,</span> <span class="token keyword">public</span> <span class="token class-name">B1</span></span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">C</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> cout <span class="token operator">&lt;&lt;</span> <span class="token string">"C: constructor"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    C c<span class="token punctuation">;</span>    c<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>   <span class="token comment">// yes</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>A<span class="token operator">:</span> constructor  <span class="token comment">// 只调用了一次基类的构造函数</span>C<span class="token operator">:</span> constructor<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>static关键字</title>
      <link href="2021/04/17/C-static%E5%85%B3%E9%94%AE%E5%AD%97/"/>
      <url>2021/04/17/C-static%E5%85%B3%E9%94%AE%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<h2 id="函数中使用static"><a href="#函数中使用static" class="headerlink" title="函数中使用static"></a>函数中使用static</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span> </span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span> <span class="token keyword">void</span> <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">static</span> <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>     cout <span class="token operator">&lt;&lt;</span> count <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>     count<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token number">0</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到<code>count</code>在不断累加，<code>static</code>变量的空间只分配一次，每次调用之后不会再进行初始化</p><h2 id="类中使用static"><a href="#类中使用static" class="headerlink" title="类中使用static"></a>类中使用static</h2><ul><li>类中的<code>static</code>变量只能声明，定义要放在类外面</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Human</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> ip<span class="token punctuation">;</span>  <span class="token comment">// 类中声明static变量</span><span class="token keyword">private</span><span class="token operator">:</span>    string _name<span class="token punctuation">;</span>    <span class="token keyword">int</span> _age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> Human<span class="token operator">::</span>ip <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// 类外定义static变量</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Human <span class="token function">kavin</span><span class="token punctuation">(</span><span class="token string">"kavin"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> kavin<span class="token punctuation">.</span>ip <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    kavin<span class="token punctuation">.</span>ip <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    Human<span class="token operator">*</span> jack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Human</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    jack<span class="token operator">-></span>ip <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> kavin<span class="token punctuation">.</span>ip <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token number">0</span><span class="token number">30</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到不同对象都可以对<code>static</code>变量进行修改，他们是共享的</p><h2 id="静态变量需要初值"><a href="#静态变量需要初值" class="headerlink" title="静态变量需要初值"></a>静态变量需要初值</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    或者 <span class="token keyword">enum</span> <span class="token punctuation">&#123;</span> num <span class="token operator">=</span> <span class="token number">5</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> arr<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里数组必须知道大小，所以就必须在给<code>num</code>赋初值<br>也可以用<code>enum</code></p><h2 id="静态对象"><a href="#静态对象" class="headerlink" title="静态对象"></a>静态对象</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>        Human <span class="token function">kavin</span><span class="token punctuation">(</span><span class="token string">"kavin"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> num1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"main function end"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>Destructor<span class="token operator">:</span> <span class="token keyword">delete</span> ptrmain function end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为<code>kavin</code>对象的生命周期在if语句结束之后就没了，所以就会调用析构函数</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token keyword">static</span> Human <span class="token function">kavin</span><span class="token punctuation">(</span><span class="token string">"kavin"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> num1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"main function end"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>main function endDestructor<span class="token operator">:</span> <span class="token keyword">delete</span> ptr<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>静态对象的声明周期贯穿整个程序，所以在程序结束之后才会调用析构函数</p><h2 id="静态成员函数"><a href="#静态成员函数" class="headerlink" title="静态成员函数"></a>静态成员函数</h2><p>类中的静态成员函数只能使用类中的静态成员变量和成员函数<br>建议使用类名和范围解析运算符调用静态成员函数<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Human</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">static</span> <span class="token keyword">int</span> ip<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> Human<span class="token operator">::</span>ip <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token class-name">Human</span><span class="token operator">::</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    cout <span class="token operator">&lt;&lt;</span> ip <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment">// Introduce();    //error，不能调用非静态成员函数</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Human <span class="token function">kavin</span><span class="token punctuation">(</span><span class="token string">"kavin"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    kavin<span class="token punctuation">.</span>ip <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token class-name">Human</span><span class="token operator">::</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>拷贝构造函数</title>
      <link href="2021/04/16/C-%E6%8B%B7%E8%B4%9D%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/"/>
      <url>2021/04/16/C-%E6%8B%B7%E8%B4%9D%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<!-- toc --><h2 id="析构函数"><a href="#析构函数" class="headerlink" title="析构函数"></a>析构函数</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Human</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Human</span><span class="token punctuation">(</span>string name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">~</span><span class="token function">Human</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    string _name<span class="token punctuation">;</span>    <span class="token keyword">int</span> _age<span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span> _ptr <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">Human</span><span class="token operator">::</span><span class="token function">Human</span><span class="token punctuation">(</span>string name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token operator">-></span>_name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token operator">-></span>_age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>val <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token operator">-></span>_ptr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">;</span>        <span class="token operator">*</span><span class="token keyword">this</span><span class="token operator">-></span>_ptr <span class="token operator">=</span> val<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>        <span class="token keyword">this</span><span class="token operator">-></span>_ptr <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Human</span><span class="token operator">::</span><span class="token operator">~</span><span class="token function">Human</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token operator">-></span>_ptr <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"delete ptr"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">delete</span> <span class="token keyword">this</span><span class="token operator">-></span>_ptr<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    Human <span class="token function">kavin</span><span class="token punctuation">(</span><span class="token string">"kavin"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> num1<span class="token punctuation">)</span><span class="token punctuation">;</span>    kavin<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    kavin<span class="token punctuation">.</span><span class="token function">Introduce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>I<span class="token string">'m kavin, and I'</span>m <span class="token number">34</span> years old<span class="token punctuation">.</span><span class="token keyword">delete</span> ptr  <span class="token comment">// 调用了析构函数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>类成员变量里有指针，程序结束时应该要释放，所以需要重载析构函数，类里面只有一个析构函数。</p><h2 id="拷贝构造函数"><a href="#拷贝构造函数" class="headerlink" title="拷贝构造函数"></a>拷贝构造函数</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Human</span><span class="token punctuation">&#123;</span><span class="token comment">// 拷贝构造函数</span><span class="token class-name">Human</span><span class="token operator">::</span><span class="token function">Human</span><span class="token punctuation">(</span><span class="token keyword">const</span> Human<span class="token operator">&amp;</span> copySource<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token operator">-></span>_name <span class="token operator">=</span> copySource<span class="token punctuation">.</span>_name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token operator">-></span>_age <span class="token operator">=</span> copySource<span class="token punctuation">.</span>_age<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"copy constructor"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>copySource<span class="token punctuation">.</span>_ptr <span class="token operator">!=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token operator">-></span>_ptr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">;</span>        <span class="token operator">*</span><span class="token keyword">this</span><span class="token operator">-></span>_ptr <span class="token operator">=</span> <span class="token operator">*</span>copySource<span class="token punctuation">.</span>_ptr<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>         <span class="token keyword">this</span><span class="token operator">-></span>_ptr <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">UseHuman</span><span class="token punctuation">(</span>Human input<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    input<span class="token punctuation">.</span><span class="token function">Introduce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    Human <span class="token function">kavin</span><span class="token punctuation">(</span><span class="token string">"kavin"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> num1<span class="token punctuation">)</span><span class="token punctuation">;</span>    kavin<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    kavin<span class="token punctuation">.</span><span class="token function">Introduce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">UseHuman</span><span class="token punctuation">(</span>kavin<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果没有拷贝构造函数，在<code>UseHuman</code>函数完成之后，类中的指针所指的空间就会被释放，而在<code>main</code>函数结束时，又会调用析构函数释放内存，这样就会发生错误。<br>原因在于，传递参数时是浅复制，没有对指针所指内容进行复制，导致两个指针指向同一个地方，所以拷贝构造函数就需要对指针所指内容进行复制。</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++类/友元</title>
      <link href="2021/04/16/C-C-%E7%B1%BB/"/>
      <url>2021/04/16/C-C-%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<!-- toc --><h2 id="一个简单的Human类"><a href="#一个简单的Human类" class="headerlink" title="一个简单的Human类"></a>一个简单的Human类</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Human</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Human</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 默认构造函数</span>    <span class="token function">Human</span><span class="token punctuation">(</span>string name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 重载构造函数</span>    <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>string name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>    string <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">Introduce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    string _name<span class="token punctuation">;</span>    <span class="token keyword">int</span> _age<span class="token punctuation">;</span>    string _gender<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// 重载构造函数</span><span class="token class-name">Human</span><span class="token operator">::</span><span class="token function">Human</span><span class="token punctuation">(</span>string name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token operator">-></span>_name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token operator">-></span>_age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">Human</span><span class="token operator">::</span><span class="token function">setName</span><span class="token punctuation">(</span>string name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token operator">-></span>_name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">Human</span><span class="token operator">::</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token operator">-></span>_age <span class="token operator">=</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>string <span class="token class-name">Human</span><span class="token operator">::</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">-></span>_name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token class-name">Human</span><span class="token operator">::</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token operator">-></span>_age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">Human</span><span class="token operator">::</span><span class="token function">Introduce</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"I'm "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">", and I'm "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" years old."</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Human <span class="token function">kavin</span><span class="token punctuation">(</span><span class="token string">"kavin"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    kavin<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    kavin<span class="token punctuation">.</span><span class="token function">Introduce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Human<span class="token operator">*</span> jack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Human</span><span class="token punctuation">(</span><span class="token string">"jack"</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    jack<span class="token operator">-></span><span class="token function">Introduce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>I<span class="token string">'m kavin, and I'</span>m <span class="token number">34</span> years old<span class="token punctuation">.</span>I<span class="token string">'m jack, and I'</span>m <span class="token number">12</span> years old<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="友元"><a href="#友元" class="headerlink" title="友元"></a>友元</h2><p>声明友元函数或友元类，就可以访问类里面的私有变量<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Human</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">friend</span> <span class="token keyword">void</span> <span class="token function">disp</span><span class="token punctuation">(</span><span class="token keyword">const</span> Human<span class="token operator">&amp;</span> person<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">disp</span><span class="token punctuation">(</span><span class="token keyword">const</span> Human<span class="token operator">&amp;</span> person<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    cout <span class="token operator">&lt;&lt;</span> person<span class="token punctuation">.</span>_age <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Human <span class="token function">kavin</span><span class="token punctuation">(</span><span class="token string">"kavin"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">disp</span><span class="token punctuation">(</span>kavin<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Human</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">friend</span> <span class="token keyword">class</span> <span class="token class-name">Boys</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Boys</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">dispName</span><span class="token punctuation">(</span><span class="token keyword">const</span> Human<span class="token operator">&amp;</span> person<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> person<span class="token punctuation">.</span>_name <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>   <span class="token comment">//可以使用类里面的私有变量</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Human <span class="token function">kavin</span><span class="token punctuation">(</span><span class="token string">"kavin"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Boys</span><span class="token operator">::</span><span class="token function">dispName</span><span class="token punctuation">(</span>kavin<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>kavin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h2 id="一个简单的Circle类"><a href="#一个简单的Circle类" class="headerlink" title="一个简单的Circle类"></a>一个简单的Circle类</h2><p><code>pi</code>是一个常量<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span> </span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span> <span class="token keyword">class</span> <span class="token class-name">Circle</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Circle</span><span class="token punctuation">(</span><span class="token keyword">int</span> radius<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">_radius</span><span class="token punctuation">(</span>radius<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token operator">-></span>_perimeter <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token keyword">this</span><span class="token operator">-></span>pi <span class="token operator">*</span> <span class="token keyword">this</span><span class="token operator">-></span>_radius<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token operator">-></span>_area <span class="token operator">=</span> <span class="token keyword">this</span><span class="token operator">-></span>pi <span class="token operator">*</span> <span class="token keyword">this</span><span class="token operator">-></span>_radius <span class="token operator">*</span> <span class="token keyword">this</span><span class="token operator">-></span>_radius<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">int</span> _radius<span class="token punctuation">;</span>    <span class="token keyword">double</span> _perimeter<span class="token punctuation">;</span>    <span class="token keyword">double</span> _area<span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token keyword">double</span> pi <span class="token operator">=</span> <span class="token number">3.14159</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token class-name">Circle</span><span class="token operator">::</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>_perimeter <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token keyword">this</span><span class="token operator">-></span>_area <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Circle <span class="token function">first</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    first<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token number">37.6991</span><span class="token number">113.097</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><p>如果要声明为<code>static</code>，要在类外面定义<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">Circle</span><span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">const</span> <span class="token keyword">double</span> pi<span class="token punctuation">;</span>         <span class="token comment">//类里面声明</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">double</span> Circle<span class="token operator">::</span>pi <span class="token operator">=</span> <span class="token number">3.14159</span><span class="token punctuation">;</span>  <span class="token comment">//类外面定义</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>cmake</title>
      <link href="2021/04/16/C-cmake/"/>
      <url>2021/04/16/C-cmake/</url>
      
        <content type="html"><![CDATA[<!-- toc --><h2 id="CMake变量"><a href="#CMake变量" class="headerlink" title="CMake变量"></a>CMake变量</h2><p><strong><code>CMAKE_CURRENT_SOURCE_DIR</code></strong></p><ul><li>指的是当前处理的<code>CMakeLists.txt</code>所在的路径。</li></ul><p><strong><code>CMAKE_CURRRENT_BINARY_DIR</code></strong></p><ul><li>如果是<code>in-source</code>编译，它跟<code>CMAKE_CURRENT_SOURCE_DIR</code>一致，如果是<code>out-ofsource</code>编译，他指的是<code>target</code>编译目录。</li></ul><p><strong><code>CMAKE_CURRENT_LIST_FILE</code></strong></p><ul><li>输出调用这个变量的<code>CMakeLists.txt</code>的完整路径</li></ul><h2 id="文件目录"><a href="#文件目录" class="headerlink" title="文件目录"></a>文件目录</h2><p><img src="/2021/04/16/C-cmake/CMake.png" alt></p><h3 id="Solider目录的CMakeLists-txt"><a href="#Solider目录的CMakeLists-txt" class="headerlink" title="Solider目录的CMakeLists.txt"></a>Solider目录的CMakeLists.txt</h3><pre class="line-numbers language-py" data-language="py"><code class="language-py">aux_source_directory(. SRC_LIST)# 将此目录的源文件集合称为变量SRC_LISTmessage($&#123;SRC_LIST&#125;)include_directories($&#123;PROJECT_SOURCE_DIR&#125;&#x2F;include)# 头文件目录add_library(Solider_shared SHARED $&#123;SRC_LIST&#125;)# 库的名称，类型，源文件（动态库）add_library(Solider_static STATIC $&#123;SRC_LIST&#125;)# 静态库set_target_properties(Solider_shared PROPERTIES OUTPUT_NAME &quot;Solider&quot;)# 库的名称，库的输出名称（动态库）set_target_properties(Solider_static PROPERTIES OUTPUT_NAME &quot;Solider&quot;)# 静态库set(LIBRARY_OUTPUT_PATH $&#123;PROJECT_SOURCE_DIR&#125;&#x2F;lib)# 库文件输出到工作空间的lib目录下<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="工作空间的CMakeLists-txt-生成库文件"><a href="#工作空间的CMakeLists-txt-生成库文件" class="headerlink" title="工作空间的CMakeLists.txt (生成库文件)"></a>工作空间的CMakeLists.txt (生成库文件)</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">cmake_minimum_required</span><span class="token punctuation">(</span>VERSION <span class="token number">3.0</span><span class="token punctuation">)</span><span class="token function">project</span><span class="token punctuation">(</span>MAIN<span class="token punctuation">)</span><span class="token comment">// message($&#123;MAIN_BINARY_DIR&#125;)</span><span class="token comment">// message($&#123;PROJECT_BINARY_DIR&#125;)</span><span class="token comment">// message($&#123;CMAKE_BINARY_DIR&#125;)</span><span class="token comment">// 如果是out-of-source编译，指的是工程编译发生的目录 </span><span class="token comment">// /home/kavin/algorithm/VSCode/test05/build</span><span class="token comment">// message($&#123;MAIN_SOURCE_DIR&#125;)</span><span class="token comment">// message($&#123;PROJECT_SOURCE_DIR&#125;)</span><span class="token comment">// message($&#123;CMAKE_SOURCE_DIR&#125;)</span><span class="token comment">// 这三个变量指代的内容是一致的，是工程顶层目录 </span><span class="token comment">// /home/kavin/algorithm/VSCode/test05</span><span class="token comment">// 为了生成库文件，完成之后面再把这句注释掉</span><span class="token comment">// 会进入Solider目录执行里里面的工作空间的CMakeLists.txt</span><span class="token function">add_subdirectory</span><span class="token punctuation">(</span>Solider<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="工作空间的CMakeLists-txt-编译源文件"><a href="#工作空间的CMakeLists-txt-编译源文件" class="headerlink" title="工作空间的CMakeLists.txt (编译源文件)"></a>工作空间的CMakeLists.txt (编译源文件)</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">cmake_minimum_required</span><span class="token punctuation">(</span>VERSION <span class="token number">3.0</span><span class="token punctuation">)</span><span class="token function">project</span><span class="token punctuation">(</span>MAIN<span class="token punctuation">)</span><span class="token function">set</span><span class="token punctuation">(</span>CMAKE_CXX_FLAGS <span class="token string">"$&#123;CMAKE_CXX_FLAGS&#125;"</span><span class="token punctuation">)</span><span class="token function">set</span><span class="token punctuation">(</span>CMAKE_BUILD_TYPE Debug<span class="token punctuation">)</span>     <span class="token comment">// 要启用F5调试一定要用这一条</span><span class="token comment">// 头文件目录</span><span class="token function">include_directories</span><span class="token punctuation">(</span>$<span class="token punctuation">&#123;</span>CMAKE_SOURCE_DIR<span class="token punctuation">&#125;</span><span class="token operator">/</span>include<span class="token punctuation">)</span><span class="token comment">// 库文件目录</span><span class="token function">link_directories</span><span class="token punctuation">(</span>lib<span class="token punctuation">)</span><span class="token comment">// 生成可执行文件</span><span class="token function">add_executable</span><span class="token punctuation">(</span>main main<span class="token punctuation">.</span>cpp<span class="token punctuation">)</span><span class="token comment">// 链接库(静态库)</span><span class="token function">target_link_libraries</span><span class="token punctuation">(</span>main libSolider<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token comment">// 如果是动态库要记得添加环境变量 LD_LIBRARY_PATH=lib/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CMake </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++引用</title>
      <link href="2021/04/16/C-%E5%BC%95%E7%94%A8/"/>
      <url>2021/04/16/C-%E5%BC%95%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<!-- toc --><h2 id="什么叫引用"><a href="#什么叫引用" class="headerlink" title="什么叫引用"></a>什么叫引用</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> original <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"address of original: "</span> <span class="token operator">&lt;&lt;</span> hex <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span>original <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token comment">// 定义一个ref引用original</span>    <span class="token keyword">int</span><span class="token operator">&amp;</span> ref <span class="token operator">=</span> original<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"address of ref: "</span> <span class="token operator">&lt;&lt;</span> hex <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span>ref <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> dec <span class="token operator">&lt;&lt;</span> ref <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>address of original<span class="token operator">:</span> <span class="token number">0x7ffc14a1acfc</span>address of ref<span class="token operator">:</span> <span class="token number">0x7ffc14a1acfc</span><span class="token number">30</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看到<code>original</code>和<code>ref</code>的地址和数值都是一样的，所以引用就相当于起了个别名，注意与指针区别</p><h2 id="引用有什么用"><a href="#引用有什么用" class="headerlink" title="引用有什么用"></a>引用有什么用</h2><p>函数在传参数的时候，如果是按值传递，将会对变量进行复制，如果变量很大，就会消耗很多的时间和内存，所以使用引用可以对变量本身直接继续修改<br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">DoSomeThing</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">&amp;</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"address of val: "</span> <span class="token operator">&lt;&lt;</span> hex <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span>val <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    val <span class="token operator">+=</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment">// 对变量值进行增加操作</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> original <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"address of original: "</span> <span class="token operator">&lt;&lt;</span> hex <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span>original <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">&amp;</span> ref <span class="token operator">=</span> original<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"address of ref: "</span> <span class="token operator">&lt;&lt;</span> hex <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span>ref <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> dec <span class="token operator">&lt;&lt;</span> ref <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token function">DoSomeThing</span><span class="token punctuation">(</span>ref<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> dec <span class="token operator">&lt;&lt;</span> original <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>address of original<span class="token operator">:</span> <span class="token number">0x7ffc14a1acfc</span>address of ref<span class="token operator">:</span> <span class="token number">0x7ffc14a1acfc</span><span class="token number">30</span>address of val<span class="token operator">:</span> <span class="token number">0x7ffc14a1acfc</span><span class="token number">130</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>可以看到最初的变量<code>original</code>的值发生了变化，按引用传递的形参的地址还是和原来一样的</p><h2 id="加个const"><a href="#加个const" class="headerlink" title="加个const"></a>加个const</h2><p>有时候我们希望函数只能使用传递的参数，不能修改他，就需要加个<code>const</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> ref2 <span class="token operator">=</span> ref<span class="token punctuation">;</span><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>ref2 <span class="token operator">=</span> num<span class="token punctuation">;</span> <span class="token comment">// 报错，ref2是只读参数，不能作为左值</span>ref2 <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment">// 报错，ref2是只读参数，不能作为左值</span><span class="token keyword">void</span> <span class="token function">DoSomeThing</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"address of val: "</span> <span class="token operator">&lt;&lt;</span> hex <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span>val <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    val <span class="token operator">+=</span> <span class="token number">100</span><span class="token punctuation">;</span> <span class="token comment">// 报错，ref2是只读参数，不能作为左值</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不能修改的加个<code>const</code>，需要修改的就不用加<code>const</code>，可以像下面这样写</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">DoSomeThing</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> val<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&amp;</span> res<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    res <span class="token operator">=</span> val <span class="token operator">*</span> val<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> original <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">DoSomeThing</span><span class="token punctuation">(</span>original<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> original <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> res <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token number">30</span>  <span class="token comment">//const引用的值没有被改变</span><span class="token number">900</span> <span class="token comment">//没有const的值被修改了</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2/445-两数相加</title>
      <link href="2021/04/16/LeetCode-2-%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/"/>
      <url>2021/04/16/LeetCode-2-%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="LeetCode-2-Add-Two-Numbers"><a href="#LeetCode-2-Add-Two-Numbers" class="headerlink" title="LeetCode 2. Add Two Numbers"></a>LeetCode 2. Add Two Numbers</h2><p><a href="https://leetcode.com/problems/add-two-numbers/submissions/">LeetCode-2</a></p><p>You are given two non-empty linked lists representing two <code>non-negative</code> integers. The digits are stored in <code>reverse order</code>, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.</p><p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p><p>Example 1:</p><p><img src="/2021/04/16/LeetCode-2-%E4%B8%A4%E6%95%B0%E7%9B%B8%E5%8A%A0/2.jpg" alt></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> l1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> l2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span>Explanation<span class="token operator">:</span> <span class="token number">342</span> <span class="token operator">+</span> <span class="token number">465</span> <span class="token operator">=</span> <span class="token number">807.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="method-模拟"><a href="#method-模拟" class="headerlink" title="method: 模拟"></a>method: 模拟</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">ListNode<span class="token operator">*</span> <span class="token function">addTwoNumbers</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> l1<span class="token punctuation">,</span> ListNode<span class="token operator">*</span> l2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ListNode <span class="token operator">*</span>head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ListNode <span class="token operator">*</span>dummy <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token keyword">int</span> carry <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>l1 <span class="token operator">||</span> l2 <span class="token operator">||</span> carry<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> add1 <span class="token operator">=</span> l1 <span class="token operator">?</span> l1<span class="token operator">-></span>val <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> add2 <span class="token operator">=</span> l2 <span class="token operator">?</span> l2<span class="token operator">-></span>val <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> add1 <span class="token operator">+</span> add2 <span class="token operator">+</span> carry<span class="token punctuation">;</span>        head<span class="token operator">-></span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span>sum <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        carry <span class="token operator">=</span> sum <span class="token operator">/</span> <span class="token number">10</span><span class="token punctuation">;</span>        head <span class="token operator">=</span> head<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l1<span class="token punctuation">)</span> l1 <span class="token operator">=</span> l1<span class="token operator">-></span>next<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>l2<span class="token punctuation">)</span> l2 <span class="token operator">=</span> l2<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> dummy<span class="token operator">-></span>next<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><h2 id="LeetCode-445-Add-Two-Numbers-II"><a href="#LeetCode-445-Add-Two-Numbers-II" class="headerlink" title="LeetCode 445. Add Two Numbers II"></a>LeetCode 445. Add Two Numbers II</h2><p><a href="https://leetcode.com/problems/add-two-numbers-ii/">LeetCode-445</a></p><p>You are given two non-empty linked lists representing two non-negative integers. The most significant digit comes first and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.</p><p>You may assume the two numbers do not contain any leading zero, except the number 0 itself.</p><p>Example 1:<br><img src="https://github.com/kavinwkp/blogimage/raw/main/img/LeetCode/2/2.jpg" alt><br><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Input<span class="token operator">:</span> l1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> l2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>Output<span class="token operator">:</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></p><h3 id="method-栈"><a href="#method-栈" class="headerlink" title="method: 栈"></a>method: 栈</h3><blockquote><p>第2题是从头开始算，这题要从后开始算，所以用到栈</p></blockquote><p>把两个链表的元素取出来放到栈里，然后再一位一位相加。<br>生成链表的时候使用<font color="LightSeaGreen">头插法</font>，插在<code>head</code>前面，<code>head</code>再往前走</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">ListNode<span class="token operator">*</span> <span class="token function">addTwoNumbers</span><span class="token punctuation">(</span>ListNode<span class="token operator">*</span> l1<span class="token punctuation">,</span> ListNode<span class="token operator">*</span> l2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> st1<span class="token punctuation">;</span>    stack<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> st2<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>l1<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        st1<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>l1<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        l1 <span class="token operator">=</span> l1<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>l2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        st2<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>l2<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        l2 <span class="token operator">=</span> l2<span class="token operator">-></span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    ListNode <span class="token operator">*</span>head <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>st1<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span>st2<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">||</span> sum<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>st1<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            sum <span class="token operator">+=</span> st1<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            st1<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>st2<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            sum <span class="token operator">+=</span> st2<span class="token punctuation">.</span><span class="token function">top</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            st2<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        ListNode <span class="token operator">*</span>node <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">ListNode</span><span class="token punctuation">(</span>sum <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sum <span class="token operator">/=</span> <span class="token number">10</span><span class="token punctuation">;</span>        node<span class="token operator">-></span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>  <span class="token comment">// 头插法</span>        head <span class="token operator">=</span> node<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> head<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 栈 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenCV_shadow</title>
      <link href="2021/04/13/OpenCV-OpenCV-shadow/"/>
      <url>2021/04/13/OpenCV-OpenCV-shadow/</url>
      
        <content type="html"><![CDATA[<!-- toc --><h2 id="创建Mat"><a href="#创建Mat" class="headerlink" title="创建Mat"></a>创建Mat</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 5行3列随机值</span>Mat img <span class="token operator">=</span> <span class="token function">Mat</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> CV_8UC3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">randu</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token class-name">Scalar</span><span class="token operator">::</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Scalar</span><span class="token operator">::</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2行2列固定值</span>Mat <span class="token function">img1</span><span class="token punctuation">(</span><span class="token function">Size</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> CV_8UC3<span class="token punctuation">,</span> <span class="token function">Scalar</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// create()函数</span>Mat img2<span class="token punctuation">;</span>img2<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token function">Size</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> CV_8UC3<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="输出Mat"><a href="#输出Mat" class="headerlink" title="输出Mat"></a>输出Mat</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">cout <span class="token operator">&lt;&lt;</span> img <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">format</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> Formatter<span class="token operator">::</span>FMT_PYTHON<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token function">format</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> Formatter<span class="token operator">::</span>FMT_NUMPY<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="获取行数和列数"><a href="#获取行数和列数" class="headerlink" title="获取行数和列数"></a>获取行数和列数</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">行数<span class="token operator">:</span> src<span class="token punctuation">.</span>rows列数<span class="token operator">:</span> src<span class="token punctuation">.</span>cols<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="形态学"><a href="#形态学" class="headerlink" title="形态学"></a>形态学</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 创建核</span>Mat kernal <span class="token operator">=</span> <span class="token function">getStructuringElement</span><span class="token punctuation">(</span>MORPH_RECT<span class="token punctuation">,</span> <span class="token function">Size</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Mat img_dilate<span class="token punctuation">,</span> img_erosion<span class="token punctuation">;</span><span class="token comment">// 膨胀</span><span class="token function">dilate</span><span class="token punctuation">(</span>gray<span class="token punctuation">,</span> img_dilate<span class="token punctuation">,</span> kernal<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 腐蚀</span><span class="token function">erode</span><span class="token punctuation">(</span>img_dilate<span class="token punctuation">,</span> img_erosion<span class="token punctuation">,</span> kernal<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 开闭运算 礼帽 黑帽</span><span class="token function">morphologyEx</span><span class="token punctuation">(</span>gray<span class="token punctuation">,</span> dst_open<span class="token punctuation">,</span> MORPH_TOPHAT<span class="token punctuation">,</span> kernal<span class="token punctuation">)</span><span class="token punctuation">;</span>MORPH_OPEN<span class="token operator">:</span> 先腐蚀后膨胀MORPH_CLOSE<span class="token operator">:</span> 先膨胀后腐蚀MORPH_TOPHAT<span class="token operator">:</span> 原图与开运算之差MORPH_BLACKHAT<span class="token operator">:</span> 闭运算与原图之差<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;opencv2/opencv.hpp></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> cv<span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> artc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Mat img <span class="token operator">=</span> <span class="token function">Mat</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> CV_8UC3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">randu</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> <span class="token class-name">Scalar</span><span class="token operator">::</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Scalar</span><span class="token operator">::</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> img <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment">// [ 91,   2,  79, 179,  52, 205, 236,   8, 181;</span>    <span class="token comment">// 239,  26, 248, 207, 218,  45, 183, 158, 101;</span>    <span class="token comment">// 102,  18, 118,  68, 210, 139, 198, 207, 211;</span>    <span class="token comment">// 181, 162, 197, 191, 196,  40,   7, 243, 230;</span>    <span class="token comment">// 45,   6,  48, 173, 242, 125, 175,  90,  63]</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"python:"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token function">format</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> Formatter<span class="token operator">::</span>FMT_PYTHON<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment">// python:</span>    <span class="token comment">// [[[ 91,   2,  79], [179,  52, 205], [236,   8, 181]],</span>    <span class="token comment">//  [[239,  26, 248], [207, 218,  45], [183, 158, 101]],</span>    <span class="token comment">//  [[102,  18, 118], [ 68, 210, 139], [198, 207, 211]],</span>    <span class="token comment">//  [[181, 162, 197], [191, 196,  40], [  7, 243, 230]],</span>    <span class="token comment">//  [[ 45,   6,  48], [173, 242, 125], [175,  90,  63]]]</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"numpy:"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token function">format</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span> Formatter<span class="token operator">::</span>FMT_NUMPY<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment">// numpy:</span>    <span class="token comment">// array([[[ 91,   2,  79], [179,  52, 205], [236,   8, 181]],</span>    <span class="token comment">//        [[239,  26, 248], [207, 218,  45], [183, 158, 101]],</span>    <span class="token comment">//        [[102,  18, 118], [ 68, 210, 139], [198, 207, 211]],</span>    <span class="token comment">//        [[181, 162, 197], [191, 196,  40], [  7, 243, 230]],</span>    <span class="token comment">//        [[ 45,   6,  48], [173, 242, 125], [175,  90,  63]]], dtype='uint8')</span>    Mat <span class="token function">img1</span><span class="token punctuation">(</span><span class="token function">Size</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> CV_8UC3<span class="token punctuation">,</span> <span class="token function">Scalar</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token function">format</span><span class="token punctuation">(</span>img1<span class="token punctuation">,</span> Formatter<span class="token operator">::</span>FMT_PYTHON<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment">// [[[  0,   0, 255], [  0,   0, 255]],</span>    <span class="token comment">//  [[  0,   0, 255], [  0,   0, 255]]]</span>    Mat img2<span class="token punctuation">;</span>    img2<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token function">Size</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span> CV_8UC3<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token function">format</span><span class="token punctuation">(</span>img2<span class="token punctuation">,</span> Formatter<span class="token operator">::</span>FMT_PYTHON<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment">// [[[  0,   0,   0], [  0,   0,   0], [  0,   0,   0], [  0,   0,   0]],</span>    <span class="token comment">//  [[  0,   0,   0], [  0,   0,   0], [  0,   0,   0], [  0,   0,   0]],</span>    <span class="token comment">//  [[  0,   0,   0], [  0,   0,   0], [  0,   0,   0], [  0,   0,   0]],</span>    <span class="token comment">//  [[  0,   0,   0], [  0,   0,   0], [  0,   0,   0], [  0,   0,   0]]]</span>    Mat src <span class="token operator">=</span> <span class="token function">imread</span><span class="token punctuation">(</span><span class="token string">"/homevin/Picturesadow.png"</span><span class="token punctuation">,</span> IMREAD_COLOR<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>src<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"can't find picture"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    cout <span class="token operator">&lt;&lt;</span> src<span class="token punctuation">.</span>rows <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> src<span class="token punctuation">.</span>cols <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    Mat gray<span class="token punctuation">;</span>    <span class="token function">cvtColor</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> gray<span class="token punctuation">,</span> COLOR_BGR2GRAY<span class="token punctuation">)</span><span class="token punctuation">;</span>    Mat kernal <span class="token operator">=</span> <span class="token function">getStructuringElement</span><span class="token punctuation">(</span>MORPH_RECT<span class="token punctuation">,</span> <span class="token function">Size</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Mat img_dilate<span class="token punctuation">,</span> img_erosion<span class="token punctuation">;</span>    <span class="token comment">//Mat dst_open, dst_theshould;</span>    <span class="token comment">// erode(gray, dst, kernal);</span>    <span class="token function">dilate</span><span class="token punctuation">(</span>gray<span class="token punctuation">,</span> img_dilate<span class="token punctuation">,</span> kernal<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">erode</span><span class="token punctuation">(</span>img_dilate<span class="token punctuation">,</span> img_erosion<span class="token punctuation">,</span> kernal<span class="token punctuation">)</span><span class="token punctuation">;</span>    Mat img_diff <span class="token operator">=</span> img_erosion <span class="token operator">-</span> gray<span class="token punctuation">;</span>    img_diff <span class="token operator">=</span> <span class="token number">255</span> <span class="token operator">-</span> img_diff<span class="token punctuation">;</span>    Mat img_norm<span class="token punctuation">;</span>    <span class="token function">normalize</span><span class="token punctuation">(</span>img_diff<span class="token punctuation">,</span> img_norm<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> NORM_MINMAX<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//morphologyEx(gray, dst_open, MORPH_TOPHAT, kernal);</span>    <span class="token comment">//threshold(dst_open, dst_theshould, 110, 255, THRESH_BINARY);</span>    <span class="token comment">// namedWindow("src");</span>    <span class="token comment">// imshow("src", img_diff);</span>    <span class="token function">waitKey</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><center><img src="/2021/04/13/OpenCV-OpenCV-shadow/init.png#pic_center" width="100%" height="100%" alt="test"><br><div style="color:orange; border-bottom: 1px solid #d9d9d9;display: inline-block;color: #999;padding: 2px;">原图</div></center><center><img src="/2021/04/13/OpenCV-OpenCV-shadow/shadow.png#pic_center" width="100%" height="100%" alt="test"><br><div style="color:orange; border-bottom: 1px solid #d9d9d9;display: inline-block;color: #999;padding: 2px;">去阴影</div></center><h2 id="Trackbar找阈值"><a href="#Trackbar找阈值" class="headerlink" title="Trackbar找阈值"></a>Trackbar找阈值</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;opencv2/opencv.hpp></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> cv<span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>string winName <span class="token operator">=</span> <span class="token string">"threshould"</span><span class="token punctuation">;</span>Mat src<span class="token punctuation">,</span> gray<span class="token punctuation">;</span><span class="token keyword">int</span> g_ThreshouldValue <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token comment">// 回调函数</span><span class="token keyword">void</span> <span class="token function">on_Threshould</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">,</span><span class="token keyword">void</span><span class="token operator">*</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">threshold</span><span class="token punctuation">(</span>gray<span class="token punctuation">,</span> dst<span class="token punctuation">,</span> g_ThreshouldValue<span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> THRESH_BINARY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">imshow</span><span class="token punctuation">(</span>winName<span class="token punctuation">,</span> dst<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> artc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    src <span class="token operator">=</span> <span class="token function">imread</span><span class="token punctuation">(</span><span class="token string">"/home/kavin/Pictures/panels/panels_2/dst_1.png"</span><span class="token punctuation">,</span> IMREAD_COLOR<span class="token punctuation">)</span><span class="token punctuation">;</span>    Mat dst <span class="token operator">=</span> src<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>src<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"can't find picture"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    Mat blur<span class="token punctuation">;</span>    <span class="token function">GaussianBlur</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> blur<span class="token punctuation">,</span> <span class="token function">Size</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">cvtColor</span><span class="token punctuation">(</span>blur<span class="token punctuation">,</span> gray<span class="token punctuation">,</span> COLOR_BGR2GRAY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">namedWindow</span><span class="token punctuation">(</span>winName<span class="token punctuation">,</span> WINDOW_NORMAL<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//创建trackbar，确定二值化的阈值</span>    <span class="token function">createTrackbar</span><span class="token punctuation">(</span><span class="token string">"threshould"</span><span class="token punctuation">,</span> winName<span class="token punctuation">,</span> <span class="token operator">&amp;</span>g_ThreshouldValue<span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> on_Threshould<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">on_Threshould</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> key<span class="token punctuation">;</span>        key <span class="token operator">=</span> <span class="token function">waitKey</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">27</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// threshold(gray, dst, 135, 255, THRESH_BINARY);</span>    <span class="token function">waitKey</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="提取矩形"><a href="#提取矩形" class="headerlink" title="提取矩形"></a>提取矩形</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;opencv2/opencv.hpp></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> cv<span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>string winName <span class="token operator">=</span> <span class="token string">"threshould"</span><span class="token punctuation">;</span>Mat src<span class="token punctuation">,</span> gray<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> artc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    src <span class="token operator">=</span> <span class="token function">imread</span><span class="token punctuation">(</span><span class="token string">"/home/kavin/Pictures/panels/panels_2/dst_1.png"</span><span class="token punctuation">,</span> IMREAD_COLOR<span class="token punctuation">)</span><span class="token punctuation">;</span>    Mat dst <span class="token operator">=</span> src<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>src<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"can't find picture"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    Mat blur<span class="token punctuation">;</span>    <span class="token function">GaussianBlur</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> blur<span class="token punctuation">,</span> <span class="token function">Size</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">cvtColor</span><span class="token punctuation">(</span>blur<span class="token punctuation">,</span> gray<span class="token punctuation">,</span> COLOR_BGR2GRAY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">namedWindow</span><span class="token punctuation">(</span>winName<span class="token punctuation">,</span> WINDOW_NORMAL<span class="token punctuation">)</span><span class="token punctuation">;</span>        gray <span class="token operator">=</span> gray <span class="token operator">></span> <span class="token number">130</span><span class="token punctuation">;</span>    Mat kernal <span class="token operator">=</span> <span class="token function">getStructuringElement</span><span class="token punctuation">(</span>MORPH_RECT<span class="token punctuation">,</span> <span class="token function">Size</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Mat img_dilate<span class="token punctuation">,</span> img_erosion<span class="token punctuation">;</span>    Mat dstImage <span class="token operator">=</span> <span class="token class-name">Mat</span><span class="token operator">::</span><span class="token function">zeros</span><span class="token punctuation">(</span>src<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> CV_8U<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">dilate</span><span class="token punctuation">(</span>gray<span class="token punctuation">,</span> img_dilate<span class="token punctuation">,</span> kernal<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// imshow("dilate", img_dilate);</span>    vector<span class="token operator">&lt;</span>vector<span class="token operator">&lt;</span>Point<span class="token operator">></span> <span class="token operator">></span> contours<span class="token punctuation">;</span>    <span class="token comment">// 存储轮廓点</span>    vector<span class="token operator">&lt;</span>Vec4i<span class="token operator">></span> hierarchy<span class="token punctuation">;</span>    <span class="token function">findContours</span><span class="token punctuation">(</span>img_dilate<span class="token punctuation">,</span> contours<span class="token punctuation">,</span> hierarchy<span class="token punctuation">,</span> RETR_TREE<span class="token punctuation">,</span> CHAIN_APPROX_SIMPLE<span class="token punctuation">)</span><span class="token punctuation">;</span>    vector<span class="token operator">&lt;</span>Rect<span class="token operator">></span> panelsRect<span class="token punctuation">;</span>    <span class="token comment">// drawContours(src, contours, -1, Scalar(255, 0, 255), 3);</span>    <span class="token comment">// 画出符合条件的轮廓，并生成矩形</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> contours<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">arcLength</span><span class="token punctuation">(</span>contours<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">450</span> <span class="token operator">&amp;&amp;</span> <span class="token function">arcLength</span><span class="token punctuation">(</span>contours<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">500</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">drawContours</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> contours<span class="token punctuation">,</span> i<span class="token punctuation">,</span> <span class="token function">Scalar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Rect boundRect <span class="token operator">=</span> <span class="token function">boundingRect</span><span class="token punctuation">(</span><span class="token function">Mat</span><span class="token punctuation">(</span>contours<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">rectangle</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> boundRect<span class="token punctuation">.</span><span class="token function">tl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> boundRect<span class="token punctuation">.</span><span class="token function">br</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">Scalar</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            panelsRect<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>boundRect<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    cout <span class="token operator">&lt;&lt;</span> panelsRect<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        Mat panel<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">dst</span><span class="token punctuation">(</span>panelsRect<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">copyTo</span><span class="token punctuation">(</span>panel<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">imshow</span><span class="token punctuation">(</span><span class="token string">"panel_"</span> <span class="token operator">+</span> <span class="token function">to_string</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span> panel<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">imshow</span><span class="token punctuation">(</span>winName<span class="token punctuation">,</span> src<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">waitKey</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><center><img src="/2021/04/13/OpenCV-OpenCV-shadow/panel.png#pic_center" width="100%" height="100%" alt="test"><br><div style="color:orange; border-bottom: 1px solid #d9d9d9;display: inline-block;color: #999;padding: 2px;">原图</div></center>]]></content>
      
      
      <categories>
          
          <category> OpenCV </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenCV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenCV_mask/transform</title>
      <link href="2021/04/12/OpenCV-OpenCV-mask/"/>
      <url>2021/04/12/OpenCV-OpenCV-mask/</url>
      
        <content type="html"><![CDATA[<!-- toc --><h2 id="颜色分割"><a href="#颜色分割" class="headerlink" title="颜色分割"></a>颜色分割</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> cv2 <span class="token keyword">as</span> cv<span class="token keyword">import</span> numpy <span class="token keyword">as</span> npsrc <span class="token operator">=</span> cv<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">"./bird.png"</span><span class="token punctuation">)</span>blur <span class="token operator">=</span> cv<span class="token punctuation">.</span>blur<span class="token punctuation">(</span>src<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     <span class="token comment"># 滤波</span>blur0 <span class="token operator">=</span> cv<span class="token punctuation">.</span>medianBlur<span class="token punctuation">(</span>blur<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>blur1 <span class="token operator">=</span> cv<span class="token punctuation">.</span>GaussianBlur<span class="token punctuation">(</span>blur0<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>blur2 <span class="token operator">=</span> cv<span class="token punctuation">.</span>bilateralFilter<span class="token punctuation">(</span>blur1<span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">75</span><span class="token punctuation">,</span> <span class="token number">75</span><span class="token punctuation">)</span>hsv <span class="token operator">=</span> cv<span class="token punctuation">.</span>cvtColor<span class="token punctuation">(</span>blur2<span class="token punctuation">,</span> cv<span class="token punctuation">.</span>COLOR_BGR2HSV<span class="token punctuation">)</span>  <span class="token comment"># 转换颜色空间</span>low_blue <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>high_blue <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">118</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">]</span><span class="token punctuation">)</span>mask <span class="token operator">=</span> cv<span class="token punctuation">.</span>inRange<span class="token punctuation">(</span>hsv<span class="token punctuation">,</span> low_blue<span class="token punctuation">,</span> high_blue<span class="token punctuation">)</span>res <span class="token operator">=</span> cv<span class="token punctuation">.</span>bitwise_and<span class="token punctuation">(</span>src<span class="token punctuation">,</span> src<span class="token punctuation">,</span> mask<span class="token operator">=</span>mask<span class="token punctuation">)</span>cv<span class="token punctuation">.</span>imwrite<span class="token punctuation">(</span><span class="token string">'bird_1.png'</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span>cv<span class="token punctuation">.</span>namedWindow<span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">,</span> cv<span class="token punctuation">.</span>WINDOW_AUTOSIZE<span class="token punctuation">)</span>cv<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">,</span> res<span class="token punctuation">)</span>cv<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>cv<span class="token punctuation">.</span>destroyAllWindows<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><center><img src="/2021/04/12/OpenCV-OpenCV-mask/bird.png#pic_center" width="80%" height="80%" alt="test"><br><div style="color:orange; border-bottom: 1px solid #d9d9d9;display: inline-block;color: #999;padding: 2px;">原始图像</div></center><center><img src="/2021/04/12/OpenCV-OpenCV-mask/bird_1.png#pic_center" width="80%" height="80%" alt="test"><br><div style="color:orange; border-bottom: 1px solid #d9d9d9;display: inline-block;color: #999;padding: 2px;">分割图像</div></center><h2 id="仿射变换"><a href="#仿射变换" class="headerlink" title="仿射变换"></a>仿射变换</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> cv2 <span class="token keyword">as</span> cv<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltimg <span class="token operator">=</span> cv<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">'1.png'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>img<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>rows<span class="token punctuation">,</span> cols <span class="token operator">=</span> img<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>rows<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>cols<span class="token punctuation">)</span>pts1 <span class="token operator">=</span> np<span class="token punctuation">.</span>float32<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>pts2 <span class="token operator">=</span> np<span class="token punctuation">.</span>float32<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>M <span class="token operator">=</span> cv<span class="token punctuation">.</span>getAffineTransform<span class="token punctuation">(</span>pts1<span class="token punctuation">,</span> pts2<span class="token punctuation">)</span>dst <span class="token operator">=</span> cv<span class="token punctuation">.</span>warpAffine<span class="token punctuation">(</span>img<span class="token punctuation">,</span> M<span class="token punctuation">,</span> <span class="token punctuation">(</span>cols<span class="token punctuation">,</span> rows<span class="token punctuation">)</span><span class="token punctuation">)</span>fig<span class="token punctuation">,</span> axes <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>nrows<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> ncols<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dpi<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span>axes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>axes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'init'</span><span class="token punctuation">)</span>axes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>dst<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>axes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'transform'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><center><img src="/2021/04/12/OpenCV-OpenCV-mask/affine.png#pic_center" width="100%" height="100%" alt="test"><br><div style="color:orange; border-bottom: 1px solid #d9d9d9;display: inline-block;color: #999;padding: 2px;">仿射变换</div></center><h2 id="透射变换"><a href="#透射变换" class="headerlink" title="透射变换"></a>透射变换</h2><p>透射变换是视角变化的结果，是指利用透视中心、像点、目标点三点共线的条件，按透视旋转定律使承影面（透视面）绕迹线（透视轴）旋转某一角度，破坏原有的投影光线束，仍能保持承影面上投影几何图形不变的变换。</p><center><img src="/2021/04/12/OpenCV-OpenCV-mask/2.png#pic_center" width="80%" height="80%" alt="test"></center><h3 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Mat M <span class="token operator">=</span> <span class="token function">getPerspectiveTransform</span><span class="token punctuation">(</span>pts<span class="token punctuation">,</span> pt2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 由两幅图像的对应4个点获得变换矩阵</span><span class="token function">warpPerspective</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> dst<span class="token punctuation">,</span> M<span class="token punctuation">,</span> <span class="token function">Size</span><span class="token punctuation">(</span>dst_width<span class="token punctuation">,</span> dst_height<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// src: 源图像</span><span class="token comment">// dst: 目标图像</span><span class="token comment">// M: 变换矩阵</span><span class="token comment">// Size: 变换后的图像大小</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;opencv2/opencv.hpp></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> cv<span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span>Mat src<span class="token punctuation">,</span> mat<span class="token punctuation">,</span> dst<span class="token punctuation">;</span><span class="token keyword">int</span> pts_count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>Point2f pts<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token comment">// 需要指定4个点构造矩阵</span><span class="token keyword">int</span> dst_width <span class="token operator">=</span> <span class="token number">800</span><span class="token punctuation">;</span><span class="token keyword">int</span> dst_height <span class="token operator">=</span> <span class="token number">600</span><span class="token punctuation">;</span><span class="token comment">// 鼠标双击事件，确定需要变换的区域</span><span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">_mouse_double_click_handler</span><span class="token punctuation">(</span><span class="token keyword">int</span> nEvt<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> flags<span class="token punctuation">,</span> <span class="token keyword">void</span><span class="token operator">*</span> p<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>nEvt<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> EVENT_LBUTTONDBLCLK<span class="token operator">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>pts_count <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            pts<span class="token punctuation">[</span>pts_count<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Point2f</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>            pts_count<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token function">circle</span><span class="token punctuation">(</span>mat<span class="token punctuation">,</span> <span class="token function">Point</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token function">Scalar</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">imshow</span><span class="token punctuation">(</span><span class="token string">"src"</span><span class="token punctuation">,</span> mat<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pts_count <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        Point2f pt2<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        pt2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Point2f</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pt2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Point2f</span><span class="token punctuation">(</span>dst_width<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pt2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Point2f</span><span class="token punctuation">(</span>dst_width<span class="token punctuation">,</span> dst_height<span class="token punctuation">)</span><span class="token punctuation">;</span>        pt2<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">Point2f</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> dst_height<span class="token punctuation">)</span><span class="token punctuation">;</span>        Mat M <span class="token operator">=</span> <span class="token function">getPerspectiveTransform</span><span class="token punctuation">(</span>pts<span class="token punctuation">,</span> pt2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">warpPerspective</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> dst<span class="token punctuation">,</span> M<span class="token punctuation">,</span> <span class="token function">Size</span><span class="token punctuation">(</span>dst_width<span class="token punctuation">,</span> dst_height<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">imshow</span><span class="token punctuation">(</span><span class="token string">"dst"</span><span class="token punctuation">,</span> dst<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">imwrite</span><span class="token punctuation">(</span><span class="token string">"transform.png"</span><span class="token punctuation">,</span> dst<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> artc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    src <span class="token operator">=</span> <span class="token function">imread</span><span class="token punctuation">(</span><span class="token string">"1.png"</span><span class="token punctuation">,</span> IMREAD_COLOR<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>src<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"can't find picture"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">namedWindow</span><span class="token punctuation">(</span><span class="token string">"src"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setMouseCallback</span><span class="token punctuation">(</span><span class="token string">"src"</span><span class="token punctuation">,</span> _mouse_double_click_handler<span class="token punctuation">)</span><span class="token punctuation">;</span>    mat <span class="token operator">=</span> src<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">imshow</span><span class="token punctuation">(</span><span class="token string">"src"</span><span class="token punctuation">,</span> mat<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">waitKey</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><center><img src="/2021/04/12/OpenCV-OpenCV-mask/1.png#pic_center" width="100%" height="100%" alt="test"><br><div style="color:orange; border-bottom: 1px solid #d9d9d9;display: inline-block;color: #999;padding: 2px;">原始图像</div></center><center><img src="/2021/04/12/OpenCV-OpenCV-mask/transform.png#pic_center" width="100%" height="100%" alt="test"><br><div style="color:orange; border-bottom: 1px solid #d9d9d9;display: inline-block;color: #999;padding: 2px;">仿射图像</div></center><h3 id="python"><a href="#python" class="headerlink" title="python"></a>python</h3><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> cv2 <span class="token keyword">as</span> cv<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltdst_width <span class="token operator">=</span> <span class="token number">1200</span>dst_height <span class="token operator">=</span> <span class="token number">900</span>img <span class="token operator">=</span> cv<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">'1.png'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>img<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>rows<span class="token punctuation">,</span> cols <span class="token operator">=</span> img<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>rows<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>cols<span class="token punctuation">)</span>pts1 <span class="token operator">=</span> np<span class="token punctuation">.</span>float32<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">74</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1238</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">963</span><span class="token punctuation">,</span> <span class="token number">555</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">318</span><span class="token punctuation">,</span> <span class="token number">563</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>pts2 <span class="token operator">=</span> np<span class="token punctuation">.</span>float32<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>dst_width<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>dst_width<span class="token punctuation">,</span> dst_height<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> dst_height<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>M <span class="token operator">=</span> cv<span class="token punctuation">.</span>getPerspectiveTransform<span class="token punctuation">(</span>pts1<span class="token punctuation">,</span> pts2<span class="token punctuation">)</span>dst <span class="token operator">=</span> cv<span class="token punctuation">.</span>warpPerspective<span class="token punctuation">(</span>img<span class="token punctuation">,</span> M<span class="token punctuation">,</span> <span class="token punctuation">(</span>dst_width<span class="token punctuation">,</span> dst_height<span class="token punctuation">)</span><span class="token punctuation">)</span>cv<span class="token punctuation">.</span>imwrite<span class="token punctuation">(</span><span class="token string">'perspective.png'</span><span class="token punctuation">,</span> dst<span class="token punctuation">)</span>fig<span class="token punctuation">,</span> axes <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>nrows<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> ncols<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dpi<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span>axes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>axes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'init'</span><span class="token punctuation">)</span>axes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>dst<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>axes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'transform'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><center><img src="/2021/04/12/OpenCV-OpenCV-mask/perspective.png#pic_center" width="100%" height="100%" alt="test"><br><div style="color:orange; border-bottom: 1px solid #d9d9d9;display: inline-block;color: #999;padding: 2px;">仿射变换</div></center><h2 id="开运算"><a href="#开运算" class="headerlink" title="开运算"></a>开运算</h2><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> cv2 <span class="token keyword">as</span> cv<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltsrc <span class="token operator">=</span> cv<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">'mask2.png'</span><span class="token punctuation">)</span>img <span class="token operator">=</span> cv<span class="token punctuation">.</span>cvtColor<span class="token punctuation">(</span>src<span class="token punctuation">,</span> cv<span class="token punctuation">.</span>COLOR_BGR2GRAY<span class="token punctuation">)</span>kernel <span class="token operator">=</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>int8<span class="token punctuation">)</span>kernel2 <span class="token operator">=</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>int8<span class="token punctuation">)</span>erosion <span class="token operator">=</span> cv<span class="token punctuation">.</span>erode<span class="token punctuation">(</span>img<span class="token punctuation">,</span> kernel<span class="token punctuation">)</span>dilate <span class="token operator">=</span> cv<span class="token punctuation">.</span>dilate<span class="token punctuation">(</span>erosion<span class="token punctuation">,</span> kernel2<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>src<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>dilate<span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">"binary"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><center><img src="/2021/04/12/OpenCV-OpenCV-mask/open.png#pic_center" width="100%" height="100%" alt="test"><br><div style="color:orange; border-bottom: 1px solid #d9d9d9;display: inline-block;color: #999;padding: 2px;">开运算</div></center><h2 id="边缘检测"><a href="#边缘检测" class="headerlink" title="边缘检测"></a>边缘检测</h2><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> cv2 <span class="token keyword">as</span> cv<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltsrc <span class="token operator">=</span> cv<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">'open.png'</span><span class="token punctuation">,</span> cv<span class="token punctuation">.</span>IMREAD_GRAYSCALE<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>src<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>low <span class="token operator">=</span> <span class="token number">100</span>high <span class="token operator">=</span> <span class="token number">200</span>canny <span class="token operator">=</span> cv<span class="token punctuation">.</span>Canny<span class="token punctuation">(</span>src<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">)</span>fig<span class="token punctuation">,</span> axes <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>nrows<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> ncols<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dpi<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span>axes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>src<span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">"binary"</span><span class="token punctuation">)</span>axes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'init'</span><span class="token punctuation">)</span>axes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>canny<span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">"binary"</span><span class="token punctuation">)</span>axes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'Canny'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><center><img src="/2021/04/12/OpenCV-OpenCV-mask/canny.png#pic_center" width="100%" height="100%" alt="test"><br><div style="color:orange; border-bottom: 1px solid #d9d9d9;display: inline-block;color: #999;padding: 2px;">边缘检测</div></center><h2 id="绘制轮廓"><a href="#绘制轮廓" class="headerlink" title="绘制轮廓"></a>绘制轮廓</h2><pre class="line-numbers language-py" data-language="py"><code class="language-py">cv<span class="token punctuation">.</span>drawContours<span class="token punctuation">(</span>image<span class="token punctuation">,</span> contours<span class="token punctuation">,</span> contourIdx<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> thickness<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token comment"># image: 在哪个图像上画</span><span class="token comment"># contours: 轮廓集合</span><span class="token comment"># contourIdx: 绘制哪个轮廓，-1表示所有</span><span class="token comment"># color: 颜色</span><span class="token comment"># thickness: 线宽</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token keyword">import</span> cv2 <span class="token keyword">as</span> cv<span class="token keyword">from</span> matplotlib <span class="token keyword">import</span> pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> numpy <span class="token keyword">as</span> npimage <span class="token operator">=</span> cv<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">"images/open.png"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>image<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>blur <span class="token operator">=</span> cv<span class="token punctuation">.</span>blur<span class="token punctuation">(</span>image<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>gray <span class="token operator">=</span> cv<span class="token punctuation">.</span>cvtColor<span class="token punctuation">(</span>blur<span class="token punctuation">,</span> cv<span class="token punctuation">.</span>COLOR_BGR2GRAY<span class="token punctuation">)</span><span class="token comment"># 二值化</span>ret<span class="token punctuation">,</span> binary <span class="token operator">=</span> cv<span class="token punctuation">.</span>threshold<span class="token punctuation">(</span>gray<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> cv<span class="token punctuation">.</span>THRESH_BINARY_INV<span class="token punctuation">)</span>contours<span class="token punctuation">,</span> hierarchy <span class="token operator">=</span> cv<span class="token punctuation">.</span>findContours<span class="token punctuation">(</span>binary<span class="token punctuation">,</span> cv<span class="token punctuation">.</span>RETR_TREE<span class="token punctuation">,</span> cv<span class="token punctuation">.</span>CHAIN_APPROX_SIMPLE<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'len:'</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>contours<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment"># 2</span>cv<span class="token punctuation">.</span>drawContours<span class="token punctuation">(</span>image<span class="token punctuation">,</span> contours<span class="token punctuation">,</span> contourIdx<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> color<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> thickness<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token comment"># 选择符合要求的轮廓进行绘制</span><span class="token comment"># for i in range(len(contours)):</span><span class="token comment">#     cnt = contours[i]</span><span class="token comment">#     perimeter = cv.arcLength(cnt, True)   # 轮廓周长</span><span class="token comment">#     if 3000 &lt; perimeter &lt; 3300:</span><span class="token comment">#         cv.drawContours(image, [cnt], -1, (255, 0, 0), 5)</span>fig<span class="token punctuation">,</span> axes <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>nrows<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> ncols<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span> figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dpi<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span>axes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>binary<span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">"binary"</span><span class="token punctuation">)</span>axes<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'bibary'</span><span class="token punctuation">)</span>axes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>image<span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">"binary"</span><span class="token punctuation">)</span>axes<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>set_title<span class="token punctuation">(</span><span class="token string">'contours'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><center><img src="/2021/04/12/OpenCV-OpenCV-mask/contour.png#pic_center" width="100%" height="100%" alt="test"><br><div style="color:orange; border-bottom: 1px solid #d9d9d9;display: inline-block;color: #999;padding: 2px;">绘制轮廓</div></center>]]></content>
      
      
      <categories>
          
          <category> OpenCV </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenCV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenCV_Panel</title>
      <link href="2021/04/12/OpenCV-OpenCV-Panel/"/>
      <url>2021/04/12/OpenCV-OpenCV-Panel/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-py" data-language="py"><code class="language-py">import cv2 as cvfrom matplotlib import pyplot as pltimport numpy as npfrom numpy.linalg import inv&quot;&quot;&quot; 求两直线交点 &quot;&quot;&quot;def intersection(line1, line2):    # [x1, y1, x2, y2]    a1 &#x3D; line1[1] - line1[3]    # a &#x3D; y1 - y2    b1 &#x3D; line1[2] - line1[0]    # b &#x3D; x2 - x1    c1 &#x3D; line1[0] * line1[3] - line1[2] * line1[1]    # c &#x3D; x1 * y2 - x2 * y1    a2 &#x3D; line2[1] - line2[3]    # a &#x3D; y1 - y2    b2 &#x3D; line2[2] - line2[0]    # b &#x3D; x2 - x1    c2 &#x3D; line2[0] * line2[3] - line2[2] * line2[1]    # c &#x3D; x1 * y2 - x2 * y1    A &#x3D; np.array([[a1, b1], [a2, b2]])    B &#x3D; np.array([[c1], [c2]])    pt &#x3D; np.dot(inv(A), -B)    x &#x3D; pt[0, 0]    y &#x3D; pt[1, 0]    return [x, y]src &#x3D; cv.imread(&quot;images&#x2F;2.png&quot;)mat &#x3D; src.copy()gray &#x3D; cv.cvtColor(src, cv.COLOR_BGR2GRAY)blur &#x3D; cv.blur(gray, (5, 5))# plt.figure(1)# plt.imshow(blur, cmap&#x3D;&quot;binary&quot;)kernel &#x3D; np.ones((10, 10), np.int8)dilate &#x3D; cv.dilate(blur, kernel)&quot;&quot;&quot; 二值化 &quot;&quot;&quot;ret, binary &#x3D; cv.threshold(dilate, 100, 120, cv.THRESH_BINARY_INV)# plt.figure(2)# plt.imshow(binary, cmap&#x3D;&quot;binary&quot;)&quot;&quot;&quot; 求轮廓 &quot;&quot;&quot;contours, hierarchy &#x3D; cv.findContours(binary, cv.RETR_TREE, cv.CHAIN_APPROX_SIMPLE)# print(&#39;len:&#39;, len(contours))cnt &#x3D; contours[0]# cv.drawContours(src, [cnt], -1, (0, 0, 255), 2)&quot;&quot;&quot; 找到满足周长条件的轮廓 &quot;&quot;&quot;for i in range(len(contours)):    cnt &#x3D; contours[i]    perimeter &#x3D; cv.arcLength(cnt, True)    if 2500 &lt; perimeter &lt; 3500:        print(perimeter)        # cv.drawContours(src, [cnt], -1, (0, 255, 255), 2)        break# plt.figure(2)# plt.imshow(src[:, :, ::-1])&quot;&quot;&quot; 求凸包 &quot;&quot;&quot;hull &#x3D; cv.convexHull(cnt)img &#x3D; np.ones((720, 1280, 3), dtype&#x3D;np.uint8)# print(type(gray))   # &lt;class &#39;numpy.ndarray&#39;&gt;# print(gray.shape)   # (720, 1280)# print(type(img))    # &lt;class &#39;numpy.ndarray&#39;&gt;# print(img.shape)    # (720, 1280)# cv.drawContours(src, [hull], -1, (255, 0, 0), 3)# print(len(hull))&quot;&quot;&quot; 在另一张图上画出凸包 &quot;&quot;&quot;cv.drawContours(img, [hull], -1, (0, 0, 255), 2)img_gray &#x3D; cv.cvtColor(img, cv.COLOR_BGR2GRAY)&quot;&quot;&quot; 二值化 &quot;&quot;&quot;_, img_binary &#x3D; cv.threshold(img_gray, 50, 100, cv.THRESH_BINARY)plt.figure(3)plt.imshow(img_binary, cmap&#x3D;&quot;binary&quot;)#### cv.imwrite(&quot;images&#x2F;img.png&quot;, img_binary)&quot;&quot;&quot; 霍夫线检测 &quot;&quot;&quot;lines &#x3D; cv.HoughLines(img_binary, 1.0, np.pi&#x2F;180, 250)print(lines.shape)      # (8, 1, 2)lines &#x3D; np.squeeze(lines)print(lines.shape)      # (8, 2)&quot;&quot;&quot; K-means对四种线分类 &quot;&quot;&quot;criteria &#x3D; (cv.TERM_CRITERIA_EPS + cv.TERM_CRITERIA_MAX_ITER, 10, 1.0)ret,label,center &#x3D; cv.kmeans(lines, 4, None, criteria, 10, cv.KMEANS_RANDOM_CENTERS)# print(center.shape)   # (4, 2)line_point &#x3D; []for i in range(center.shape[0]):    rho, theta &#x3D; center[i]    a &#x3D; np.cos(theta)    b &#x3D; np.sin(theta)    x0 &#x3D; rho * a    y0 &#x3D; rho * b    x1 &#x3D; int(x0 + 2000 * (-b))    y1 &#x3D; int(y0 + 2000 * a)    x2 &#x3D; int(x0 - 2000 * (-b))    y2 &#x3D; int(y0 - 2000 * a)    line_point.append([x1, y1, x2, y2])    cv.line(img, (x1, y1), (x2, y2), (255, 0, 255), 4)# print(line_point)&quot;&quot;&quot; 求4条线的4个交点 &quot;&quot;&quot;pt &#x3D; []for i in range(2):    pt.append(intersection(line_point[i], line_point[2]))    pt.append(intersection(line_point[i], line_point[3]))print(pt)points &#x3D; np.array(pt, dtype&#x3D;int)print(points.shape)     # (4, 2)print(points)# for i in range(points.shape[0]):#     cv.circle(img, (points[i, 0], points[i, 1]), 8, (0, 255, 0), -1)&quot;&quot;&quot; 画出4个交点 &quot;&quot;&quot;for pt in points:    cv.circle(img, (pt[0], pt[1]), 6, (0, 255, 0), -1)plt.figure(5)plt.imshow(img)# cv.imwrite(&quot;images&#x2F;lines.png&quot;, img)&quot;&quot;&quot; 对4个交点进行排序，因为分类的顺序是随机的 &quot;&quot;&quot;idx &#x3D; np.lexsort([points[:, 0]])tr_points &#x3D; points[idx, :]print(tr_points)&quot;&quot;&quot; 利用找到的4隔点进行透射变换 &quot;&quot;&quot;dst_width &#x3D; 800dst_height &#x3D; 600pts1 &#x3D; np.float32([tr_points[0], tr_points[3], tr_points[2], tr_points[1]])pts2 &#x3D; np.float32([[0, 0], [dst_width, 0], [dst_width, dst_height], [0, dst_height]])M &#x3D; cv.getPerspectiveTransform(pts1, pts2)dst &#x3D; cv.warpPerspective(mat, M, (dst_width, dst_height))plt.figure(6)plt.imshow(dst[:, :, ::-1])cv.imwrite(&#39;images&#x2F;dst_2.png&#39;, dst)plt.show()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><center><img src="/2021/04/12/OpenCV-OpenCV-Panel/1.png#pic_center" width="100%" height="100%" alt="test"><br><div style="color:orange; border-bottom: 1px solid #d9d9d9;display: inline-block;color: #999;padding: 2px;">1.原图</div></center><center><img src="/2021/04/12/OpenCV-OpenCV-Panel/img.png#pic_center" width="100%" height="100%" alt="test"><br><div style="color:orange; border-bottom: 1px solid #d9d9d9;display: inline-block;color: #999;padding: 2px;">2.凸包</div></center><center><img src="/2021/04/12/OpenCV-OpenCV-Panel/lines.png#pic_center" width="100%" height="100%" alt="test"><br><div style="color:orange; border-bottom: 1px solid #d9d9d9;display: inline-block;color: #999;padding: 2px;">3. 霍夫线检测与交点</div></center><center><img src="/2021/04/12/OpenCV-OpenCV-Panel/dst_1.png#pic_center" width="100%" height="100%" alt="test"><br><div style="color:orange; border-bottom: 1px solid #d9d9d9;display: inline-block;color: #999;padding: 2px;">4.透射变换</div></center>]]></content>
      
      
      <categories>
          
          <category> OpenCV </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenCV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenCV_Pix</title>
      <link href="2021/04/01/OpenCV-OpenCV-Pix/"/>
      <url>2021/04/01/OpenCV-OpenCV-Pix/</url>
      
        <content type="html"><![CDATA[<!-- toc --><h2 id="获取并修改像素值"><a href="#获取并修改像素值" class="headerlink" title="获取并修改像素值"></a>获取并修改像素值</h2><h3 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;opencv2/opencv.hpp></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> cv<span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> artc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Mat src <span class="token operator">=</span> <span class="token function">imread</span><span class="token punctuation">(</span><span class="token string">"/home/kavin/Pictures/test.png"</span><span class="token punctuation">,</span> IMREAD_COLOR<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>src<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"could not load image...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">50</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          <span class="token comment">// 行</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 列</span>            src<span class="token punctuation">.</span>at<span class="token operator">&lt;</span>Vec3b<span class="token operator">></span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">255</span><span class="token punctuation">;</span>            src<span class="token punctuation">.</span>at<span class="token operator">&lt;</span>Vec3b<span class="token operator">></span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            src<span class="token punctuation">.</span>at<span class="token operator">&lt;</span>Vec3b<span class="token operator">></span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">namedWindow</span><span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">,</span> WINDOW_AUTOSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">imshow</span><span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">,</span> src<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">imwrite</span><span class="token punctuation">(</span><span class="token string">"pix.png"</span><span class="token punctuation">,</span> src<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">waitKey</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 对应的roi区域 （左上角坐标（w,h）,width,height）</span>    Rect <span class="token function">rect_roi</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Mat img_roi <span class="token operator">=</span> <span class="token function">src</span><span class="token punctuation">(</span>rect_roi<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">imshow</span><span class="token punctuation">(</span><span class="token string">"roi"</span><span class="token punctuation">,</span> img_roi<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><center><img src="/2021/04/01/OpenCV-OpenCV-Pix/pixels.png#pic_center" width="50%" height="50%" alt="test"><br><div style="color:orange; border-bottom: 1px solid #d9d9d9;display: inline-block;color: #999;padding: 2px;">修改像素值</div></center><h3 id="python"><a href="#python" class="headerlink" title="python"></a>python</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">src <span class="token operator">=</span> cv<span class="token punctuation">.</span><span class="token function">imread</span><span class="token punctuation">(</span><span class="token string">"./test.png"</span><span class="token punctuation">)</span><span class="token comment">// 获取某个点的像素值</span>px <span class="token operator">=</span> src<span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">]</span>      # <span class="token punctuation">[</span> <span class="token number">27</span>  <span class="token number">15</span> <span class="token number">244</span><span class="token punctuation">]</span><span class="token comment">// 获取某个点某个通道的像素值</span>blue <span class="token operator">=</span> src<span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token number">250</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span> # <span class="token number">27</span><span class="token comment">// 修改高度为200的所有像素值为0</span>src<span class="token punctuation">[</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token operator">:</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>cv<span class="token punctuation">.</span><span class="token function">namedWindow</span><span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">,</span> cv<span class="token punctuation">.</span>WINDOW_AUTOSIZE<span class="token punctuation">)</span>cv<span class="token punctuation">.</span><span class="token function">imshow</span><span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">,</span> src<span class="token punctuation">)</span>cv<span class="token punctuation">.</span><span class="token function">waitKey</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>cv<span class="token punctuation">.</span><span class="token function">destroyAllWindows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><center><img src="/2021/04/01/OpenCV-OpenCV-Pix/pix.png#pic_center" width="50%" height="50%" alt="test"><br><div style="color:orange; border-bottom: 1px solid #d9d9d9;display: inline-block;color: #999;padding: 2px;">修改像素值</div></center><h2 id="通道拆分与合并"><a href="#通道拆分与合并" class="headerlink" title="通道拆分与合并"></a>通道拆分与合并</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">b<span class="token punctuation">,</span> g<span class="token punctuation">,</span> r <span class="token operator">=</span> cv<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span>img <span class="token operator">=</span> cv<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span><span class="token punctuation">(</span>b<span class="token punctuation">,</span> g<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><center><img src="/2021/04/01/OpenCV-OpenCV-Pix/b.png#pic_center" width="50%" height="50%" alt="test"><br><div style="color:orange; border-bottom: 1px solid #d9d9d9;display: inline-block;color: #999;padding: 2px;">B通道图像</div></center><h2 id="转换颜色空间"><a href="#转换颜色空间" class="headerlink" title="转换颜色空间"></a>转换颜色空间</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">hsv <span class="token operator">=</span> cv<span class="token punctuation">.</span><span class="token function">cvtColor</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> cv<span class="token punctuation">.</span>COLOR_BGR2HSV<span class="token punctuation">)</span>cv<span class="token punctuation">.</span><span class="token function">namedWindow</span><span class="token punctuation">(</span><span class="token string">"hsv"</span><span class="token punctuation">,</span> cv<span class="token punctuation">.</span>WINDOW_AUTOSIZE<span class="token punctuation">)</span>cv<span class="token punctuation">.</span><span class="token function">imshow</span><span class="token punctuation">(</span><span class="token string">"hsv"</span><span class="token punctuation">,</span> hsv<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><center><img src="/2021/04/01/OpenCV-OpenCV-Pix/hsv.png#pic_center" width="50%" height="50%" alt="test"><br><div style="color:orange; border-bottom: 1px solid #d9d9d9;display: inline-block;color: #999;padding: 2px;">HSV颜色空间</div></center>]]></content>
      
      
      <categories>
          
          <category> OpenCV </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenCV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenCV_RGB&amp;GRAY</title>
      <link href="2021/04/01/OpenCV-OpenCV-RGB-GRAY/"/>
      <url>2021/04/01/OpenCV-OpenCV-RGB-GRAY/</url>
      
        <content type="html"><![CDATA[<!-- toc --><h2 id="读取图像"><a href="#读取图像" class="headerlink" title="读取图像"></a>读取图像</h2><h3 id="C-版本"><a href="#C-版本" class="headerlink" title="C++版本"></a>C++版本</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">imread</span><span class="token punctuation">(</span> <span class="token keyword">const</span> String<span class="token operator">&amp;</span> filename<span class="token punctuation">,</span> <span class="token keyword">int</span> flags <span class="token operator">=</span> IMREAD_COLOR <span class="token punctuation">)</span>filename<span class="token comment">// 图片路径</span>flags<span class="token comment">// 以彩色图或灰度图的方式进行读取</span>    IMREAD_GRAYSCALE <span class="token operator">=</span> <span class="token number">0</span>    <span class="token comment">// 灰度图</span>    IMREAD_COLOR     <span class="token operator">=</span> <span class="token number">1</span>    <span class="token comment">// 彩色图(默认)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">namedWindow</span><span class="token punctuation">(</span><span class="token keyword">const</span> String<span class="token operator">&amp;</span> winname<span class="token punctuation">,</span> <span class="token keyword">int</span> flags <span class="token operator">=</span> WINDOW_AUTOSIZE<span class="token punctuation">)</span>winname<span class="token comment">// 窗口名称</span>flags<span class="token comment">// 窗口属性</span>WINDOW_NORMAL<span class="token comment">// 可拖动改变大小</span>WINDOW_AUTOSIZE<span class="token comment">// 自动调整适应图片大小</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">imwrite</span><span class="token punctuation">(</span><span class="token keyword">const</span> String<span class="token operator">&amp;</span> filename<span class="token punctuation">,</span> InputArray img<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token operator">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token operator">&amp;</span> params <span class="token operator">=</span> std<span class="token operator">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>filename<span class="token comment">// 文件名</span>img<span class="token comment">// 对象名</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Mat src <span class="token operator">=</span> <span class="token function">imread</span><span class="token punctuation">(</span><span class="token string">"./test.png"</span><span class="token punctuation">,</span> IMREAD_GRAYSCALE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">namedWindow</span><span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">,</span> WINDOW_AUTOSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">imshow</span><span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">,</span> src<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">waitKey</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Python版本"><a href="#Python版本" class="headerlink" title="Python版本"></a>Python版本</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">cv<span class="token punctuation">.</span><span class="token function">imread</span><span class="token punctuation">(</span><span class="token punctuation">)</span>cv<span class="token punctuation">.</span><span class="token function">imshow</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">import cv2 as cvsrc <span class="token operator">=</span> cv<span class="token punctuation">.</span><span class="token function">imread</span><span class="token punctuation">(</span><span class="token string">"./test.png"</span><span class="token punctuation">)</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">type</span><span class="token punctuation">(</span>src<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// &lt;class 'numpy.ndarray'></span><span class="token function">print</span><span class="token punctuation">(</span>src<span class="token punctuation">.</span>dtype<span class="token punctuation">)</span><span class="token comment">// uint8</span><span class="token function">print</span><span class="token punctuation">(</span>src<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token comment">// (610, 570, 3)</span>cv<span class="token punctuation">.</span><span class="token function">namedWindow</span><span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">,</span> cv<span class="token punctuation">.</span>WINDOW_AUTOSIZE<span class="token punctuation">)</span>cv<span class="token punctuation">.</span><span class="token function">imshow</span><span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">,</span> src<span class="token punctuation">)</span>cv<span class="token punctuation">.</span><span class="token function">waitKey</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>cv<span class="token punctuation">.</span><span class="token function">destroyAllWindows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><center><img src="/2021/04/01/OpenCV-OpenCV-RGB-GRAY/test.png#pic_center" width="50%" height="50%" alt="test"></center><h2 id="转化为灰度图"><a href="#转化为灰度图" class="headerlink" title="转化为灰度图"></a>转化为灰度图</h2><h3 id="C-版本-1"><a href="#C-版本-1" class="headerlink" title="C++版本"></a>C++版本</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">cvtColor</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> gray<span class="token punctuation">,</span> COLOR_BGR2GRAY<span class="token punctuation">)</span>src<span class="token comment">// input</span>gray<span class="token comment">// output</span>COLOR_BGR2GRAY<span class="token comment">//RGB图转为GRAY灰度图</span>默认三个通道顺序是<span class="token operator">:</span> B<span class="token punctuation">,</span> G<span class="token punctuation">,</span> R<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;opencv2/opencv.hpp></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> cv<span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> artc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Mat src <span class="token operator">=</span> <span class="token function">imread</span><span class="token punctuation">(</span><span class="token string">"./test.png"</span><span class="token punctuation">,</span> IMREAD_COLOR<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>src<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"could not load image...\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">namedWindow</span><span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">,</span> WINDOW_AUTOSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">imshow</span><span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">,</span> src<span class="token punctuation">)</span><span class="token punctuation">;</span>    Mat gray<span class="token punctuation">;</span>    <span class="token function">cvtColor</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> gray<span class="token punctuation">,</span> COLOR_BGR2GRAY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">imwrite</span><span class="token punctuation">(</span><span class="token string">"./gray.png"</span><span class="token punctuation">,</span> gray<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">namedWindow</span><span class="token punctuation">(</span><span class="token string">"gray"</span><span class="token punctuation">,</span> WINDOW_AUTOSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">imshow</span><span class="token punctuation">(</span><span class="token string">"gray"</span><span class="token punctuation">,</span> gray<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">waitKey</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Python版本-1"><a href="#Python版本-1" class="headerlink" title="Python版本"></a>Python版本</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">src <span class="token operator">=</span> cv<span class="token punctuation">.</span><span class="token function">imread</span><span class="token punctuation">(</span><span class="token string">"./test.png"</span><span class="token punctuation">)</span>cv<span class="token punctuation">.</span><span class="token function">namedWindow</span><span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">,</span> cv<span class="token punctuation">.</span>WINDOW_AUTOSIZE<span class="token punctuation">)</span>cv<span class="token punctuation">.</span><span class="token function">imshow</span><span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">,</span> src<span class="token punctuation">)</span>gray <span class="token operator">=</span> cv<span class="token punctuation">.</span><span class="token function">cvtColor</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> cv<span class="token punctuation">.</span>COLOR_BGR2GRAY<span class="token punctuation">)</span>cv<span class="token punctuation">.</span><span class="token function">imwrite</span><span class="token punctuation">(</span><span class="token string">'gray.png'</span><span class="token punctuation">,</span> gray<span class="token punctuation">)</span>cv<span class="token punctuation">.</span><span class="token function">imshow</span><span class="token punctuation">(</span><span class="token string">"gray"</span><span class="token punctuation">,</span> gray<span class="token punctuation">)</span>cv<span class="token punctuation">.</span><span class="token function">waitKey</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>cv<span class="token punctuation">.</span><span class="token function">destroyAllWindows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><center><img src="/2021/04/01/OpenCV-OpenCV-RGB-GRAY/gray.png#pic_center" width="50%" height="50%" alt="test"><br><div style="color:orange; border-bottom: 1px solid #d9d9d9;display: inline-block;color: #999;padding: 2px;">灰度图</div></center>]]></content>
      
      
      <categories>
          
          <category> OpenCV </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenCV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>OpenCV_draw</title>
      <link href="2021/04/01/OpenCV-OpenCV-draw/"/>
      <url>2021/04/01/OpenCV-OpenCV-draw/</url>
      
        <content type="html"><![CDATA[<!-- toc --><h2 id="绘制直线"><a href="#绘制直线" class="headerlink" title="绘制直线"></a>绘制直线</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">cv<span class="token punctuation">.</span><span class="token function">line</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span>start<span class="token punctuation">,</span>end<span class="token punctuation">,</span>color<span class="token punctuation">,</span>thickness<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>img</code>: 要绘制直线的图像</li><li><code>start,end</code>: 直线的起点和终点</li><li><code>color</code>: 线条的颜色</li><li><code>thickness</code>: 线条宽度</li></ul><h2 id="绘制圆形"><a href="#绘制圆形" class="headerlink" title="绘制圆形"></a>绘制圆形</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">cv<span class="token punctuation">.</span><span class="token function">circle</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span>centerpoint<span class="token punctuation">,</span> r<span class="token punctuation">,</span> color<span class="token punctuation">,</span> thickness<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>img</code>: 要绘制圆形的图像</li><li><code>centerpoint, r</code>: 圆心和半径</li><li><code>color</code>: 线条的颜色</li><li><code>thickness</code>: 线条宽度，为-1时生成闭合图案并填充颜色</li></ul><h2 id="绘制矩形"><a href="#绘制矩形" class="headerlink" title="绘制矩形"></a>绘制矩形</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">cv<span class="token punctuation">.</span><span class="token function">rectangle</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span>leftupper<span class="token punctuation">,</span>rightdown<span class="token punctuation">,</span>color<span class="token punctuation">,</span>thickness<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>img</code>: 要绘制矩形的图像</li><li><code>leftupper, rightdown</code>: 矩形的左上角和右下角坐标</li><li><code>color</code>: 线条的颜色</li><li><code>thickness</code>: 线条宽度</li></ul><h2 id="向图像中添加文字"><a href="#向图像中添加文字" class="headerlink" title="向图像中添加文字"></a>向图像中添加文字</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">cv<span class="token punctuation">.</span><span class="token function">putText</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span>text<span class="token punctuation">,</span>station<span class="token punctuation">,</span> font<span class="token punctuation">,</span> fontsize<span class="token punctuation">,</span>color<span class="token punctuation">,</span>thickness<span class="token punctuation">,</span>cv<span class="token punctuation">.</span>LINE_AA<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>img</code>: 图像</li><li><code>text</code>: 要写入的文本数据</li><li><code>station</code>: 文本的放置位置</li><li><code>font</code>: 字体</li><li><code>fontsize</code>: 字体大小</li></ul><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">import cv2 as cvimport numpy as npsrc <span class="token operator">=</span> np<span class="token punctuation">.</span><span class="token function">zeros</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">512</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span># 创建一张<span class="token number">512</span>X512大小的<span class="token number">8</span>位<span class="token number">3</span>通道图像，数据类型是<span class="token keyword">unsigned</span> <span class="token keyword">int</span># 第一个方向是width，第二个是heightcv<span class="token punctuation">.</span><span class="token function">line</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">511</span><span class="token punctuation">,</span> <span class="token number">511</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>cv<span class="token punctuation">.</span><span class="token function">rectangle</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">384</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">510</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>cv<span class="token punctuation">.</span><span class="token function">circle</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">447</span><span class="token punctuation">,</span><span class="token number">63</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">63</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>font <span class="token operator">=</span> cv<span class="token punctuation">.</span>FONT_ITALICcv<span class="token punctuation">.</span><span class="token function">putText</span><span class="token punctuation">(</span>src<span class="token punctuation">,</span> <span class="token string">'OpenCV'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">,</span> font<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token number">255</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> cv<span class="token punctuation">.</span>LINE_AA<span class="token punctuation">)</span>cv<span class="token punctuation">.</span><span class="token function">namedWindow</span><span class="token punctuation">(</span><span class="token string">"src"</span><span class="token punctuation">,</span> cv<span class="token punctuation">.</span>WINDOW_AUTOSIZE<span class="token punctuation">)</span>cv<span class="token punctuation">.</span><span class="token function">imshow</span><span class="token punctuation">(</span><span class="token string">"src"</span><span class="token punctuation">,</span> src<span class="token punctuation">)</span>cv<span class="token punctuation">.</span><span class="token function">waitKey</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>cv<span class="token punctuation">.</span><span class="token function">destroyAllWindows</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/2021/04/01/OpenCV-OpenCV-draw/draw.png#pic_center" width="50%" height="50%" alt="test"></p>]]></content>
      
      
      <categories>
          
          <category> OpenCV </category>
          
      </categories>
      
      
        <tags>
            
            <tag> OpenCV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ROS action</title>
      <link href="2021/03/26/ROS-ROS-action/"/>
      <url>2021/03/26/ROS-ROS-action/</url>
      
        <content type="html"><![CDATA[<!-- toc --><h2 id="自定义-action-文件"><a href="#自定义-action-文件" class="headerlink" title="自定义 action 文件"></a>自定义 action 文件</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php">int32 input<span class="token operator">--</span><span class="token operator">-</span>int32 outputint32 goal_stamp<span class="token operator">--</span><span class="token operator">-</span>int32 feedback<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="CMakeLists-txt"><a href="#CMakeLists-txt" class="headerlink" title="CMakeLists.txt"></a>CMakeLists.txt</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">add_action_files</span><span class="token punctuation">(</span>  <span class="token constant">FILES</span>  demo<span class="token operator">.</span>action<span class="token punctuation">)</span><span class="token function">generate_messages</span><span class="token punctuation">(</span><span class="token constant">DEPENDENCIES</span>  std_msgs  std_srvs  actionlib_msgs<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="package-xml"><a href="#package-xml" class="headerlink" title="package.xml"></a>package.xml</h2><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build_depend</span><span class="token punctuation">></span></span>actionlib<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build_depend</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>build_export_depend</span><span class="token punctuation">></span></span>actionlib<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>build_export_depend</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exec_depend</span><span class="token punctuation">></span></span>actionlib<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exec_depend</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ros/ros.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;actionlib/server/simple_action_server.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ros_learning/demoAction.h"</span></span><span class="token keyword">int</span> g_count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">bool</span> g_count_failure <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">ExampleActionServer</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span><span class="token operator">:</span>    ros<span class="token operator">::</span>NodeHandle nh_<span class="token punctuation">;</span>     actionlib<span class="token operator">::</span>SimpleActionServer<span class="token operator">&lt;</span>ros_learning<span class="token operator">::</span>demoAction<span class="token operator">></span> as_<span class="token punctuation">;</span>    ros_learning<span class="token operator">::</span>demoGoal goal_<span class="token punctuation">;</span>     ros_learning<span class="token operator">::</span>demoResult result_<span class="token punctuation">;</span>     ros_learning<span class="token operator">::</span>demoFeedback feedback_<span class="token punctuation">;</span>    <span class="token comment">// 每部分都有对应的类名</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">ExampleActionServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">~</span><span class="token function">ExampleActionServer</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">executeCB</span><span class="token punctuation">(</span><span class="token keyword">const</span> actionlib<span class="token operator">::</span>SimpleActionServer<span class="token operator">&lt;</span>ros_learning<span class="token operator">::</span>demoAction<span class="token operator">></span><span class="token operator">::</span>GoalConstPtr<span class="token operator">&amp;</span> goal<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">ExampleActionServer</span><span class="token operator">::</span><span class="token function">ExampleActionServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">as_</span><span class="token punctuation">(</span>nh_<span class="token punctuation">,</span>                                                 <span class="token string">"example_action"</span><span class="token punctuation">,</span>                                                 boost<span class="token operator">::</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>ExampleActionServer<span class="token operator">::</span>executeCB<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">,</span> _1<span class="token punctuation">)</span><span class="token punctuation">,</span>                                                <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">ROS_INFO</span><span class="token punctuation">(</span><span class="token string">"in constructor of exampleActionServer..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    as_<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 启动服务</span>    <span class="token comment">// 构造函数中的false是指在初始化时先不启动，调用start()函数之后再启动</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">ExampleActionServer</span><span class="token operator">::</span><span class="token function">executeCB</span><span class="token punctuation">(</span><span class="token keyword">const</span> actionlib<span class="token operator">::</span>SimpleActionServer<span class="token operator">&lt;</span>ros_learning<span class="token operator">::</span>demoAction<span class="token operator">></span><span class="token operator">::</span>GoalConstPtr<span class="token operator">&amp;</span> goal<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    g_count<span class="token operator">++</span><span class="token punctuation">;</span>    result_<span class="token punctuation">.</span>output <span class="token operator">=</span> g_count<span class="token punctuation">;</span>    result_<span class="token punctuation">.</span>goal_stamp <span class="token operator">=</span> goal<span class="token operator">-></span>input<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>g_count <span class="token operator">!=</span> goal<span class="token operator">-></span>input<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">ROS_WARN</span><span class="token punctuation">(</span><span class="token string">"hey--mismatch!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">ROS_INFO</span><span class="token punctuation">(</span><span class="token string">"g_count = %d; goal_stamp = %d"</span><span class="token punctuation">,</span> g_count<span class="token punctuation">,</span> result_<span class="token punctuation">.</span>goal_stamp<span class="token punctuation">)</span><span class="token punctuation">;</span>        g_count_failure <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token function">ROS_WARN</span><span class="token punctuation">(</span><span class="token string">"informing client of aborted goal"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        as_<span class="token punctuation">.</span><span class="token function">setAborted</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        as_<span class="token punctuation">.</span><span class="token function">setSucceeded</span><span class="token punctuation">(</span>result_<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ros<span class="token operator">::</span><span class="token function">init</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token string">"action_server_node"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ROS_INFO</span><span class="token punctuation">(</span><span class="token string">"instantiating the demo action server: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ExampleActionServer as_object<span class="token punctuation">;</span>        <span class="token function">ROS_INFO</span><span class="token punctuation">(</span><span class="token string">"going into spin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>g_count_failure <span class="token operator">&amp;&amp;</span> ros<span class="token operator">::</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ros<span class="token operator">::</span><span class="token function">spinOnce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ros/ros.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;actionlib/client/simple_action_client.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ros_learning/demoAction.h"</span></span><span class="token keyword">void</span> <span class="token function">doneCb</span><span class="token punctuation">(</span><span class="token keyword">const</span> actionlib<span class="token operator">::</span>SimpleClientGoalState<span class="token operator">&amp;</span> state<span class="token punctuation">,</span>            <span class="token keyword">const</span> ros_learning<span class="token operator">::</span>demoResultConstPtr<span class="token operator">&amp;</span> result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">ROS_WARN</span><span class="token punctuation">(</span><span class="token string">"doneCb: server responded with state [%s]"</span><span class="token punctuation">,</span> state<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">c_str</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> diff <span class="token operator">=</span> result<span class="token operator">-></span>output <span class="token operator">-</span> result<span class="token operator">-></span>goal_stamp<span class="token punctuation">;</span>    <span class="token function">ROS_WARN</span><span class="token punctuation">(</span><span class="token string">"got result output = %d; goal_stamp = %d; diff = %d"</span><span class="token punctuation">,</span> result<span class="token operator">-></span>output<span class="token punctuation">,</span> result<span class="token operator">-></span>goal_stamp<span class="token punctuation">,</span> diff<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ros<span class="token operator">::</span><span class="token function">init</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token string">"action_client_node"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> g_count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    ros_learning<span class="token operator">::</span>demoGoal goal<span class="token punctuation">;</span>    actionlib<span class="token operator">::</span>SimpleActionClient<span class="token operator">&lt;</span>ros_learning<span class="token operator">::</span>demoAction<span class="token operator">></span> <span class="token function">action_client</span><span class="token punctuation">(</span><span class="token string">"example_action"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">ROS_INFO</span><span class="token punctuation">(</span><span class="token string">"waiting for server: "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">bool</span> server_exists <span class="token operator">=</span> action_client<span class="token punctuation">.</span><span class="token function">waitForServer</span><span class="token punctuation">(</span>ros<span class="token operator">::</span><span class="token function">Duration</span><span class="token punctuation">(</span><span class="token number">5.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//bool server_exists = action_client.waitForServer(); //wait forever</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>server_exists<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">ROS_WARN</span><span class="token punctuation">(</span><span class="token string">"could not connect to server; halting"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">ROS_INFO</span><span class="token punctuation">(</span><span class="token string">"connected to action server"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>     <span class="token punctuation">&#123;</span>        g_count<span class="token operator">++</span><span class="token punctuation">;</span>        goal<span class="token punctuation">.</span>input <span class="token operator">=</span> g_count<span class="token punctuation">;</span>        action_client<span class="token punctuation">.</span><span class="token function">sendGoal</span><span class="token punctuation">(</span>goal<span class="token punctuation">,</span> <span class="token operator">&amp;</span>doneCb<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// action_client.sendGoal(goal); </span>        <span class="token comment">// action_client.sendGoal(goal, &amp;doneCb, &amp;activeCb, &amp;feedbackCb);</span>        <span class="token keyword">bool</span> finished_before_timeout <span class="token operator">=</span> action_client<span class="token punctuation">.</span><span class="token function">waitForResult</span><span class="token punctuation">(</span>ros<span class="token operator">::</span><span class="token function">Duration</span><span class="token punctuation">(</span><span class="token number">5.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// action_client.waitForResult(); // wait forever...</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>finished_before_timeout<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">ROS_WARN</span><span class="token punctuation">(</span><span class="token string">"giving up waiting on result for goal number %d"</span><span class="token punctuation">,</span> g_count<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//if here, then server returned a result to us</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> ROS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ROS图像处理</title>
      <link href="2021/03/26/ROS-ROS-CV/"/>
      <url>2021/03/26/ROS-ROS-CV/</url>
      
        <content type="html"><![CDATA[<!-- toc --><h2 id="OpenCV-3-3-1"><a href="#OpenCV-3-3-1" class="headerlink" title="OpenCV 3.3.1"></a>OpenCV 3.3.1</h2><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> build <span class="token operator">&amp;&amp;</span> <span class="token builtin class-name">cd</span> build<span class="token function">mkdir</span> installedcmake -DCMAKE_BUILD_TYPE<span class="token operator">=</span>RELEASE -DCMAKE_INSTALL_PREFIX<span class="token operator">=</span>~/Library/opencv-3.3.1/build/installed -DWITH_CUDA<span class="token operator">=</span>OFF -DBUILD_DOCS<span class="token operator">=</span>OFF -DBUILD_EXAMPLES<span class="token operator">=</span>OFF -DBUILD_TESTS<span class="token operator">=</span>OFF -DBUILD_PERF_TESTS<span class="token operator">=</span>OFF -DOPENCV_EXTRA_MODULES_PATH<span class="token operator">=</span><span class="token punctuation">..</span>/opencv_contrib/modules <span class="token punctuation">..</span><span class="token function">make</span> -j4<span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改系统默认版本"><a href="#修改系统默认版本" class="headerlink" title="修改系统默认版本"></a>修改系统默认版本</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> ~/.bashrc<span class="token builtin class-name">export</span> <span class="token assign-left variable">PKG_CONFIG_PATH</span><span class="token operator">=</span>~/Library/opencv-3.3.1/build/installed/lib/pkgconfig<span class="token builtin class-name">export</span> <span class="token assign-left variable">LD_LIBRARY_PATH</span><span class="token operator">=</span>~/Library/opencv-3.3.1/build/installed/lib<span class="token builtin class-name">source</span> ~/.bashrc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="版本确认"><a href="#版本确认" class="headerlink" title="版本确认"></a>版本确认</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pkg-config --modversion opencv<span class="token number">3.3</span>.1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>查看头文件位置<br><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pkg-config --cflags opencv-I/home/kavin/Library/opencv-3.3.1/build/installed/include/opencv-I/home/kavin/Library/opencv-3.3.1/build/installed/include<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></p><p>查看库文件<br><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">pkg-config --libs opencv-L/home/kavin/Library/opencv-3.3.1/build/installed/lib -lopencv_stitching -lopencv_superres -lopencv_videostab -lopencv_photo -lopencv_aruco -lopencv_bgsegm -lopencv_bioinspired -lopencv_ccalib -lopencv_dpm -lopencv_face -lopencv_freetype -lopencv_fuzzy -lopencv_hdf -lopencv_img_hash -lopencv_line_descriptor -lopencv_optflow -lopencv_reg -lopencv_rgbd -lopencv_saliency -lopencv_sfm -lopencv_stereo -lopencv_structured_light -lopencv_viz -lopencv_phase_unwrapping -lopencv_surface_matching -lopencv_tracking -lopencv_datasets -lopencv_text -lopencv_dnn -lopencv_plot -lopencv_xfeatures2d -lopencv_shape -lopencv_video -lopencv_ml -lopencv_ximgproc -lopencv_calib3d -lopencv_features2d -lopencv_highgui -lopencv_videoio -lopencv_flann -lopencv_xobjdetect -lopencv_imgcodecs -lopencv_objdetect -lopencv_xphoto -lopencv_imgproc -lopencv_core<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h3 id="CMakeLists指定版本"><a href="#CMakeLists指定版本" class="headerlink" title="CMakeLists指定版本"></a>CMakeLists指定版本</h3><p>不修改默认是在<code>/usr</code>查找</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">set<span class="token punctuation">(</span>OpenCV_DIR <span class="token string">"~/Library/opencv-3.3.1/build/installed/OpenCV"</span><span class="token punctuation">)</span>find_package<span class="token punctuation">(</span>OpenCV REQUIRED<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="发布图像"><a href="#发布图像" class="headerlink" title="发布图像"></a>发布图像</h2><p>使用<code>image_transport</code>进行图像话题发布订阅</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">image_transport<span class="token operator">::</span>ImageTransport <span class="token function">it</span><span class="token punctuation">(</span>nh<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">//用句柄初始化image_transport</span>image_transport<span class="token operator">::</span>Publisher image_pub <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">advertise</span><span class="token punctuation">(</span><span class="token string">"image_topic"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//cv::Mat通过cv_bridge::CvImage转换为sensor_msgs::ImagePtr</span>sensor_msgs<span class="token operator">::</span>ImagePtr msg <span class="token operator">=</span> cv_bridge<span class="token operator">::</span><span class="token function">CvImage</span><span class="token punctuation">(</span>std_msgs<span class="token operator">::</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"bgr8"</span><span class="token punctuation">,</span> image<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toImageMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="源代码"><a href="#源代码" class="headerlink" title="源代码"></a>源代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;ros/ros.h></span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;image_transport/image_transport.h></span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;opencv2/highgui/highgui.hpp></span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;opencv2/core/core.hpp></span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;cv_bridge/cv_bridge.h></span></span><span class="token macro property"><span class="token directive-hash">#</span> <span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> cv<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ros<span class="token operator">::</span><span class="token function">init</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token string">"image_pub_node"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ros<span class="token operator">::</span>NodeHandle nh<span class="token punctuation">;</span>    image_transport<span class="token operator">::</span>ImageTransport <span class="token function">it</span><span class="token punctuation">(</span>nh<span class="token punctuation">)</span><span class="token punctuation">;</span>    image_transport<span class="token operator">::</span>Publisher image_pub <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">advertise</span><span class="token punctuation">(</span><span class="token string">"image_topic"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Mat image <span class="token operator">=</span> <span class="token function">imread</span><span class="token punctuation">(</span><span class="token string">"/home/kavin/Pictures/test.png"</span><span class="token punctuation">,</span> IMREAD_COLOR<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>image<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token string">"can't find picture"</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    sensor_msgs<span class="token operator">::</span>ImagePtr msg <span class="token operator">=</span> cv_bridge<span class="token operator">::</span><span class="token function">CvImage</span><span class="token punctuation">(</span>std_msgs<span class="token operator">::</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"bgr8"</span><span class="token punctuation">,</span> image<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toImageMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ros<span class="token operator">::</span>Rate <span class="token function">loop_rate</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>nh<span class="token punctuation">.</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        image_pub<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">ROS_INFO</span><span class="token punctuation">(</span><span class="token string">"publish an image"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        loop_rate<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="接收图像"><a href="#接收图像" class="headerlink" title="接收图像"></a>接收图像</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">image_transport<span class="token operator">::</span>Subscriber image_sub <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">"/simple_camera/image_raw"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> image_topic_cb<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//sensor_msgs话题通过cv_bridge::toCvCopy转换为cv::Mat指针</span>cv_bridge<span class="token operator">::</span>CvImagePtr cv_ptr <span class="token operator">=</span> cv_bridge<span class="token operator">::</span><span class="token function">toCvCopy</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> sensor_msgs<span class="token operator">::</span>image_encodings<span class="token operator">::</span>BGR8<span class="token punctuation">)</span><span class="token punctuation">;</span>Mat colorImg <span class="token operator">=</span> cv_ptr<span class="token operator">-></span>image<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="源代码-1"><a href="#源代码-1" class="headerlink" title="源代码"></a>源代码</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ros/ros.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sensor_msgs/image_encodings.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;image_transport/image_transport.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;opencv2/opencv.hpp></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cv_bridge/cv_bridge.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> cv<span class="token punctuation">;</span>Mat colorImg<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">image_topic_cb</span><span class="token punctuation">(</span><span class="token keyword">const</span> sensor_msgs<span class="token operator">::</span>ImageConstPtr<span class="token operator">&amp;</span> msg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">try</span>    <span class="token punctuation">&#123;</span>        <span class="token function">ROS_INFO</span><span class="token punctuation">(</span><span class="token string">"Receive an image successfully"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cv_bridge<span class="token operator">::</span>CvImagePtr cv_ptr <span class="token operator">=</span> cv_bridge<span class="token operator">::</span><span class="token function">toCvCopy</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> sensor_msgs<span class="token operator">::</span>image_encodings<span class="token operator">::</span>BGR8<span class="token punctuation">)</span><span class="token punctuation">;</span>        colorImg <span class="token operator">=</span> cv_ptr<span class="token operator">-></span>image<span class="token punctuation">;</span>        <span class="token function">imshow</span><span class="token punctuation">(</span><span class="token string">"image"</span><span class="token punctuation">,</span> colorImg<span class="token punctuation">)</span><span class="token punctuation">;</span>        Mat grayImg<span class="token punctuation">;</span>        <span class="token function">cvtColor</span><span class="token punctuation">(</span>colorImg<span class="token punctuation">,</span> grayImg<span class="token punctuation">,</span> COLOR_BGR2GRAY<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">imshow</span><span class="token punctuation">(</span><span class="token string">"gray"</span><span class="token punctuation">,</span> grayImg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// cv::imshow("image", cv_bridge::toCvShare(msg, "bgr8")->image);</span>        <span class="token comment">// cv::waitKey(10);</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>cv_bridge<span class="token operator">::</span>Exception<span class="token operator">&amp;</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        std<span class="token operator">::</span>cerr <span class="token operator">&lt;&lt;</span> e<span class="token punctuation">.</span><span class="token function">what</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ros<span class="token operator">::</span><span class="token function">init</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token string">"image_sub"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ros<span class="token operator">::</span>NodeHandle nh<span class="token punctuation">;</span>    image_transport<span class="token operator">::</span>ImageTransport <span class="token function">it</span><span class="token punctuation">(</span>nh<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">namedWindow</span><span class="token punctuation">(</span><span class="token string">"image"</span><span class="token punctuation">,</span> CV_WINDOW_AUTOSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">namedWindow</span><span class="token punctuation">(</span><span class="token string">"gray"</span><span class="token punctuation">,</span> CV_WINDOW_AUTOSIZE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">startWindowThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    image_transport<span class="token operator">::</span>Subscriber image_sub <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">"/simple_camera/image_raw"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> image_topic_cb<span class="token punctuation">)</span><span class="token punctuation">;</span>    ros<span class="token operator">::</span><span class="token function">spin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">destroyWindow</span><span class="token punctuation">(</span><span class="token string">"image"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">destroyWindow</span><span class="token punctuation">(</span><span class="token string">"gray"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token comment">#! /usr/bin/env python</span><span class="token comment"># coding=utf-8</span><span class="token keyword">import</span> rospy<span class="token keyword">from</span> sensor_msgs<span class="token punctuation">.</span>msg <span class="token keyword">import</span> Image<span class="token keyword">import</span> cv2<span class="token keyword">from</span> cv_bridge <span class="token keyword">import</span> CvBridgerospy<span class="token punctuation">.</span>init_node<span class="token punctuation">(</span><span class="token string">'py_image_sub'</span><span class="token punctuation">,</span> anonymous<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">colorCallBack</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">:</span>    bridge <span class="token operator">=</span> CvBridge<span class="token punctuation">(</span><span class="token punctuation">)</span>    img <span class="token operator">=</span> bridge<span class="token punctuation">.</span>imgmsg_to_cv2<span class="token punctuation">(</span>msg<span class="token punctuation">,</span> <span class="token string">"bgr8"</span><span class="token punctuation">)</span>    cv2<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span><span class="token string">"color"</span><span class="token punctuation">,</span> img<span class="token punctuation">)</span>    cv2<span class="token punctuation">.</span>waitKey<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">listener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    rospy<span class="token punctuation">.</span>Subscriber<span class="token punctuation">(</span><span class="token string">"image_topic"</span><span class="token punctuation">,</span> Image<span class="token punctuation">,</span> colorCallBack<span class="token punctuation">)</span>    rospy<span class="token punctuation">.</span>spin<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>cv2<span class="token punctuation">.</span>__version__<span class="token punctuation">)</span>    listener<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'done'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> OpenCV </tag>
            
            <tag> ROS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ROS find_red_pixels</title>
      <link href="2021/03/26/ROS-ROS-find-red-pixels/"/>
      <url>2021/03/26/ROS-ROS-find-red-pixels/</url>
      
        <content type="html"><![CDATA[<!-- toc --><h2 id="ImageConverter类声明"><a href="#ImageConverter类声明" class="headerlink" title="ImageConverter类声明"></a><code>ImageConverter</code>类声明</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ros/ros.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;image_transport/image_transport.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cv_bridge/cv_bridge.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sensor_msgs/image_encodings.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;opencv2/imgproc/imgproc.hpp></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;opencv2/highgui/highgui.hpp></span></span><span class="token keyword">static</span> <span class="token keyword">const</span> std<span class="token operator">::</span>string OPENCV_WINDOW <span class="token operator">=</span> <span class="token string">"OpenCV display window"</span><span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> cv<span class="token punctuation">;</span><span class="token keyword">int</span> g_redratio<span class="token punctuation">;</span> <span class="token comment">// 红色阈值</span><span class="token keyword">class</span> <span class="token class-name">ImageConverter</span> <span class="token punctuation">&#123;</span>    ros<span class="token operator">::</span>NodeHandle nh_<span class="token punctuation">;</span>    image_transport<span class="token operator">::</span>ImageTransport it_<span class="token punctuation">;</span>    image_transport<span class="token operator">::</span>Subscriber image_sub_<span class="token punctuation">;</span>    image_transport<span class="token operator">::</span>Publisher image_pub_<span class="token punctuation">;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">ImageConverter</span><span class="token punctuation">(</span>ros<span class="token operator">::</span>NodeHandle <span class="token operator">&amp;</span>nodehandle<span class="token punctuation">)</span>    <span class="token operator">:</span> <span class="token function">it_</span><span class="token punctuation">(</span>nh_<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        image_sub_ <span class="token operator">=</span> it_<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">"simple_camera/image_raw"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>                <span class="token operator">&amp;</span>ImageConverter<span class="token operator">::</span>imageCb<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        image_pub_ <span class="token operator">=</span> it_<span class="token punctuation">.</span><span class="token function">advertise</span><span class="token punctuation">(</span><span class="token string">"/image_converter/output_video"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">namedWindow</span><span class="token punctuation">(</span>OPENCV_WINDOW<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token operator">~</span><span class="token function">ImageConverter</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">destroyWindow</span><span class="token punctuation">(</span>OPENCV_WINDOW<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">void</span> <span class="token function">imageCb</span><span class="token punctuation">(</span><span class="token keyword">const</span> sensor_msgs<span class="token operator">::</span>ImageConstPtr<span class="token operator">&amp;</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="imageCb回调函数定义"><a href="#imageCb回调函数定义" class="headerlink" title="imageCb回调函数定义"></a><code>imageCb</code>回调函数定义</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token class-name">ImageConverter</span><span class="token operator">::</span><span class="token function">imageCb</span><span class="token punctuation">(</span><span class="token keyword">const</span> sensor_msgs<span class="token operator">::</span>ImageConstPtr<span class="token operator">&amp;</span> msg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cv_bridge<span class="token operator">::</span>CvImagePtr cv_ptr<span class="token punctuation">;</span> <span class="token comment">//OpenCV data type</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        cv_ptr <span class="token operator">=</span> cv_bridge<span class="token operator">::</span><span class="token function">toCvCopy</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> sensor_msgs<span class="token operator">::</span>image_encodings<span class="token operator">::</span>BGR8<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>cv_bridge<span class="token operator">::</span>Exception<span class="token operator">&amp;</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">ROS_ERROR</span><span class="token punctuation">(</span><span class="token string">"cv_bridge exception: %s"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">what</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> npix <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment">// 红色区域总的像素</span>    <span class="token keyword">int</span> isum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment">// 红色的列数</span>    <span class="token keyword">int</span> jsum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment">// 红色的行数</span>    <span class="token keyword">int</span> redval<span class="token punctuation">,</span> blueval<span class="token punctuation">,</span> greenval<span class="token punctuation">,</span> testval<span class="token punctuation">;</span>    Vec3b rgbpix<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cv_ptr<span class="token operator">-></span>image<span class="token punctuation">.</span>cols<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> cv_ptr<span class="token operator">-></span>image<span class="token punctuation">.</span>rows<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 提取某点像素值</span>            rgbpix <span class="token operator">=</span> cv_ptr<span class="token operator">-></span>image<span class="token punctuation">.</span>at<span class="token operator">&lt;</span>Vec3b<span class="token operator">></span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>            redval <span class="token operator">=</span> rgbpix<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// +1 防止除以0</span>            blueval <span class="token operator">=</span> rgbpix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            greenval <span class="token operator">=</span> rgbpix<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            testval <span class="token operator">=</span> redval <span class="token operator">/</span> <span class="token punctuation">(</span>blueval <span class="token operator">+</span> greenval<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 如果这个点判定为红色，设为白色</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>testval <span class="token operator">></span> g_redratio<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                cv_ptr<span class="token operator">-></span>image<span class="token punctuation">.</span>at<span class="token operator">&lt;</span>Vec3b<span class="token operator">></span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">255</span><span class="token punctuation">;</span>                cv_ptr<span class="token operator">-></span>image<span class="token punctuation">.</span>at<span class="token operator">&lt;</span>Vec3b<span class="token operator">></span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">255</span><span class="token punctuation">;</span>                cv_ptr<span class="token operator">-></span>image<span class="token punctuation">.</span>at<span class="token operator">&lt;</span>Vec3b<span class="token operator">></span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">255</span><span class="token punctuation">;</span>                npix<span class="token operator">++</span><span class="token punctuation">;</span>     <span class="token comment">// 红色区域总的像素</span>                isum <span class="token operator">+=</span> i<span class="token punctuation">;</span>  <span class="token comment">// 红色的列数</span>                jsum <span class="token operator">+=</span> j<span class="token punctuation">;</span>  <span class="token comment">// 红色的行数</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 其他点设为黑色</span>                cv_ptr<span class="token operator">-></span>image<span class="token punctuation">.</span>at<span class="token operator">&lt;</span>Vec3b<span class="token operator">></span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                cv_ptr<span class="token operator">-></span>image<span class="token punctuation">.</span>at<span class="token operator">&lt;</span>Vec3b<span class="token operator">></span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                cv_ptr<span class="token operator">-></span>image<span class="token punctuation">.</span>at<span class="token operator">&lt;</span>Vec3b<span class="token operator">></span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">ROS_WARN</span><span class="token punctuation">(</span><span class="token string">"npix: %d"</span><span class="token punctuation">,</span> npix<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> half_box <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span> <span class="token comment">// 矩形大小</span>    <span class="token keyword">int</span> i_centroid<span class="token punctuation">,</span> j_centroid<span class="token punctuation">;</span>    <span class="token keyword">double</span> x_centroid<span class="token punctuation">,</span> y_centroid<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>npix <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        i_centroid <span class="token operator">=</span> isum <span class="token operator">/</span> npix<span class="token punctuation">;</span>   <span class="token comment">// 中间点位置</span>        j_centroid <span class="token operator">=</span> jsum <span class="token operator">/</span> npix<span class="token punctuation">;</span>        x_centroid <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> isum<span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> npix<span class="token punctuation">)</span><span class="token punctuation">;</span>        y_centroid <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> jsum<span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> npix<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">ROS_INFO</span><span class="token punctuation">(</span><span class="token string">"u_avg: %f; v_avg: %f"</span><span class="token punctuation">,</span>x_centroid<span class="token punctuation">,</span>y_centroid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">ROS_WARN</span><span class="token punctuation">(</span><span class="token string">"center (col, row) : (%d, %d)"</span><span class="token punctuation">,</span> i_centroid<span class="token punctuation">,</span> j_centroid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i_box <span class="token operator">=</span> i_centroid <span class="token operator">-</span> half_box<span class="token punctuation">;</span> i_box <span class="token operator">&lt;=</span> i_centroid <span class="token operator">+</span> half_box<span class="token punctuation">;</span> i_box<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j_box <span class="token operator">=</span> j_centroid <span class="token operator">-</span> half_box<span class="token punctuation">;</span> j_box <span class="token operator">&lt;=</span> j_centroid <span class="token operator">+</span> half_box<span class="token punctuation">;</span> j_box<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>i_box <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>j_box <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>i_box <span class="token operator">&lt;</span> cv_ptr<span class="token operator">-></span>image<span class="token punctuation">.</span>cols<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>j_box <span class="token operator">&lt;</span> cv_ptr<span class="token operator">-></span>image<span class="token punctuation">.</span>rows<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    cv_ptr<span class="token operator">-></span>image<span class="token punctuation">.</span>at<span class="token operator">&lt;</span>Vec3b<span class="token operator">></span><span class="token punctuation">(</span>j_box<span class="token punctuation">,</span> i_box<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">255</span><span class="token punctuation">;</span> <span class="token comment">//(255,0,0) is pure blue</span>                    cv_ptr<span class="token operator">-></span>image<span class="token punctuation">.</span>at<span class="token operator">&lt;</span>Vec3b<span class="token operator">></span><span class="token punctuation">(</span>j_box<span class="token punctuation">,</span> i_box<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                    cv_ptr<span class="token operator">-></span>image<span class="token punctuation">.</span>at<span class="token operator">&lt;</span>Vec3b<span class="token operator">></span><span class="token punctuation">(</span>j_box<span class="token punctuation">,</span> i_box<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">imshow</span><span class="token punctuation">(</span>OPENCV_WINDOW<span class="token punctuation">,</span> cv_ptr<span class="token operator">-></span>image<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 图像显示</span>    <span class="token function">waitKey</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     image_pub_<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span>cv_ptr<span class="token operator">-></span><span class="token function">toImageMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 将处理后的图像发布出去</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ros<span class="token operator">::</span><span class="token function">init</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token string">"find_red_pixels_node"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ros<span class="token operator">::</span>NodeHandle n<span class="token punctuation">;</span>        ImageConverter <span class="token function">ic</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 创建类实例</span>    g_redratio<span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>         <span class="token comment">// 红色的阈值</span>    ros<span class="token operator">::</span>Duration <span class="token function">timer</span><span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>ros<span class="token operator">::</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        ros<span class="token operator">::</span><span class="token function">spinOnce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        timer<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><center><img src="/2021/03/26/ROS-ROS-find-red-pixels/image.png#pic_center" width="80%" height="80%" alt="test"><br><div style="color:orange; border-bottom: 1px solid #d9d9d9;display: inline-block;color: #999;padding: 2px;">原始图像</div></center><center><img src="/2021/03/26/ROS-ROS-find-red-pixels/image2.png#pic_center" width="80%" height="80%" alt="test"><br><div style="color:orange; border-bottom: 1px solid #d9d9d9;display: inline-block;color: #999;padding: 2px;">找到红色区域中心位置</div></center><h2 id="canny函数"><a href="#canny函数" class="headerlink" title="canny函数"></a><code>canny</code>函数</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Mat gray_image<span class="token punctuation">,</span> contours<span class="token punctuation">;</span><span class="token function">cvtColor</span><span class="token punctuation">(</span>cv_ptr<span class="token operator">-></span>image<span class="token punctuation">,</span> gray_image<span class="token punctuation">,</span> COLOR_BGR2GRAY<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Canny</span><span class="token punctuation">(</span>gray_image<span class="token punctuation">,</span> contours<span class="token punctuation">,</span> <span class="token number">125</span><span class="token punctuation">,</span> <span class="token number">350</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">imshow</span><span class="token punctuation">(</span>OPENCV_WINDOW<span class="token punctuation">,</span> contours<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">waitKey</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> sensor_msgs<span class="token operator">::</span>ImagePtr msg_contours<span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    msg_contours <span class="token operator">=</span> cv_bridge<span class="token operator">::</span><span class="token function">CvImage</span><span class="token punctuation">(</span>std_msgs<span class="token operator">::</span><span class="token function">Header</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">"mono8"</span><span class="token punctuation">,</span> contours<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toImageMsg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span><span class="token punctuation">(</span>cv_bridge<span class="token operator">::</span>Exception<span class="token operator">&amp;</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">ROS_ERROR</span><span class="token punctuation">(</span><span class="token string">"cv_bridge exception: %s"</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span><span class="token function">what</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>image_pub_<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span>msg_contours<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="编码参数"><a href="#编码参数" class="headerlink" title="编码参数"></a>编码参数</h3><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token argument-name">mono8</span><span class="token punctuation">:</span> <span class="token constant">CV_8UC1</span><span class="token punctuation">,</span> grayscale image<span class="token argument-name">mono16</span><span class="token punctuation">:</span> <span class="token constant">CV_16UC1</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token operator">-</span>bit grayscale image<span class="token argument-name">bgr8</span><span class="token punctuation">:</span> <span class="token constant">CV_8UC3</span><span class="token punctuation">,</span> color image with blue<span class="token operator">-</span>green<span class="token operator">-</span>red color order<span class="token argument-name">rgb8</span><span class="token punctuation">:</span> <span class="token constant">CV_8UC3</span><span class="token punctuation">,</span> color image with red<span class="token operator">-</span>green<span class="token operator">-</span>blue color order<span class="token argument-name">bgra8</span><span class="token punctuation">:</span> <span class="token constant">CV_8UC4</span><span class="token punctuation">,</span> <span class="token constant">BGR</span> color image with an alpha channel<span class="token argument-name">rgba8</span><span class="token punctuation">:</span> <span class="token constant">CV_8UC4</span><span class="token punctuation">,</span> <span class="token constant">RGB</span> color image with an alpha channel<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><center><img src="/2021/03/26/ROS-ROS-find-red-pixels/contours.png#pic_center" width="80%" height="80%" alt="test"><br><div style="color:orange; border-bottom: 1px solid #d9d9d9;display: inline-block;color: #999;padding: 2px;">红色边缘</div></center>]]></content>
      
      
      
        <tags>
            
            <tag> OpenCV </tag>
            
            <tag> ROS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ROS_MAVROS</title>
      <link href="2021/03/26/ROS-ROS-mavros/"/>
      <url>2021/03/26/ROS-ROS-mavros/</url>
      
        <content type="html"><![CDATA[<!-- toc --><p><img src="/2021/03/26/ROS-ROS-mavros/mavros/mavros.png" alt></p><h2 id="常用MAVROS消息"><a href="#常用MAVROS消息" class="headerlink" title="常用MAVROS消息"></a>常用MAVROS消息</h2><h3 id="global-position-订阅-GPS-数据"><a href="#global-position-订阅-GPS-数据" class="headerlink" title="global_position 订阅 GPS 数据"></a>global_position 订阅 GPS 数据</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">消息名称<span class="token operator">:</span> mavros<span class="token operator">/</span>global_position<span class="token operator">/</span>global类型名称<span class="token operator">:</span> sensor_msgs<span class="token operator">::</span>NavSatFix常用类成员变量<span class="token operator">:</span> float64 latitude    <span class="token comment">//经</span>float64 longitude   <span class="token comment">//纬</span>float64 altitude    <span class="token comment">//海拔</span>float64<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> position_covarianceuint8 position_covariance_type<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="imu-pub-订阅-IMU-原始数据"><a href="#imu-pub-订阅-IMU-原始数据" class="headerlink" title="imu_pub 订阅 IMU 原始数据"></a>imu_pub 订阅 IMU 原始数据</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">消息名称<span class="token operator">:</span> mavros<span class="token operator">/</span>imu<span class="token operator">/</span><span class="token function">data</span><span class="token punctuation">(</span>不是mavros<span class="token operator">/</span>imu<span class="token operator">/</span>data_raw<span class="token punctuation">,</span> mavros<span class="token operator">/</span>imu<span class="token operator">/</span>data 为经过滤波后的数据<span class="token punctuation">)</span>类型名称<span class="token operator">:</span> sensor_msgs<span class="token operator">::</span>Imu常用类成员变量<span class="token operator">:</span>geometry_msgs<span class="token operator">::</span>Quaternion orientation       <span class="token comment">//旋转四元数(xyzw)</span>float64<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> orientation_covariance           <span class="token comment">//方差</span>geometry_msgs<span class="token operator">::</span>Vector3 angular_velocity     <span class="token comment">//3 轴角速度(xyz)</span>float64<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> angular_velocity_covariance      <span class="token comment">//方差</span>geometry_msgs<span class="token operator">::</span>Vector3 linear_acceleration  <span class="token comment">//线性加速度(xyz)</span>float64<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> linear_acceleration_covariance   <span class="token comment">//方差</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="local-position-订阅本地位置数据"><a href="#local-position-订阅本地位置数据" class="headerlink" title="local_position 订阅本地位置数据"></a>local_position 订阅本地位置数据</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">消息名称<span class="token operator">:</span> mavros<span class="token operator">/</span>local_position<span class="token operator">/</span>pose类型名称<span class="token operator">:</span> geometry_msgs<span class="token operator">::</span>PoseStamped<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="manual-control-订阅遥控器的值"><a href="#manual-control-订阅遥控器的值" class="headerlink" title="manual_control 订阅遥控器的值"></a>manual_control 订阅遥控器的值</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">消息名称<span class="token operator">:</span> mavros<span class="token operator">/</span>manual_control<span class="token operator">/</span>control类型名称<span class="token operator">:</span> mavros_msgs<span class="token operator">::</span>ManualControl常用类成员变量<span class="token operator">:</span>float32 xfloat32 yfloat32 zfloat32 ruint16 buttons<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="sys-status-查询系统状态"><a href="#sys-status-查询系统状态" class="headerlink" title="sys_status 查询系统状态"></a>sys_status 查询系统状态</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">消息名称<span class="token operator">:</span> mavros<span class="token operator">/</span>state类型名称<span class="token operator">:</span> mavros_msgs<span class="token operator">::</span>State常用类成员变量<span class="token operator">:</span><span class="token keyword">bool</span> connected  <span class="token comment">//是否连接</span><span class="token keyword">bool</span> armed      <span class="token comment">//是否解锁</span><span class="token keyword">bool</span> guided     <span class="token comment">//是否被引导（offboard 模式）</span>string mode     <span class="token comment">//模式类型</span>uint8 system_status<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="waypoint-查询航点"><a href="#waypoint-查询航点" class="headerlink" title="waypoint 查询航点"></a>waypoint 查询航点</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">消息名称<span class="token operator">:</span> mavros<span class="token operator">/</span>mission<span class="token operator">/</span>waypoints类型名称<span class="token operator">:</span> mavros_msgs<span class="token operator">::</span>WaypointList常用类成员变量<span class="token operator">:</span>uint16 current_seq  <span class="token comment">//当前航点索引</span>mavros_msgs<span class="token operator">::</span>Waypoint<span class="token punctuation">[</span><span class="token punctuation">]</span> waypoints    uint8 frame     <span class="token comment">//坐标类型</span>    uint16 command  <span class="token comment">//命令 id，16 为航点</span>    <span class="token keyword">bool</span> is_current    <span class="token keyword">bool</span> autocontinue    float32 param1    float32 param2    float32 param3    float32 param4    float64 x_lat   <span class="token comment">//经度或者 x 坐标</span>    float64 y_long  <span class="token comment">//维度或者 y 坐标</span>    float64 z_alt   <span class="token comment">//海拔或者 z 坐标</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="坐标系"><a href="#坐标系" class="headerlink" title="坐标系"></a>坐标系</h2><p><code>px4</code>使用的坐标系为<code>NED</code>（北东地）坐标系或者<code>FRD</code>（前右下）坐标系。<br><code>mavros</code>中常使用的是<code>ENU</code>（东北天）坐标系或者<code>body</code>系，<code>mavros</code>会自动将输入的<code>ENU</code>坐标值或者<code>body</code>系坐标值转换到<code>NED</code>坐标系中，再通过<code>mavlink</code>发送给飞控。</p><p>mavros的话题中常见的坐标系有<code>global</code>系、<code>local</code>系、<code>body</code>系</p><ul><li><p><code>global</code>系是gps坐标系，经纬度。</p></li><li><p><code>local</code>系指当地坐标系，一般是<code>ENU</code>坐标系，坐标原点一般在起飞点。如果有offset的话坐标原点在飞机上，这时其实是导航坐标系。</p></li><li><p><code>body</code>系在melodic版本中，改成了FLU（前左上）坐标系。</p></li></ul><h3 id="note"><a href="#note" class="headerlink" title="note"></a>note</h3><ul><li><code>coordinate_frame=1</code>虽然代表向px4发送<code>NED</code>坐标值，但是发送到这个话题的坐标系应该用<code>ENU</code>，<code>mavros</code>会自动完成这个坐标系的转换</li><li><code>ROS</code>程序发布的给定姿态<code>topic</code>为<code>/mavros/setpoint_raw/attitude</code>，而非<code>/mavros/setpoint_attitude/attitude</code></li><li><code>ROS</code>发布的速度指令<code>topic</code>为<code>/mavros/setpoint_velocity/cmd_vel_unstamped</code></li></ul><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token argument-name">topic</span><span class="token punctuation">:</span> <span class="token string double-quoted-string">"mavros/setpoint_raw/local"</span>rosmsg show marvros_msg<span class="token operator">/</span>PositionTarget    uint8 coordinate_frame    uint8 <span class="token constant">FRAME_LOCAL_NED</span> <span class="token operator">=</span> <span class="token number">1</span>    uint8 <span class="token constant">FRAME_LOCAL_OFFSET_NED</span> <span class="token operator">=</span> <span class="token number">7</span>    uint8 <span class="token constant">FRAME_BODY_NED</span> <span class="token operator">=</span> <span class="token number">8</span>    uint8 <span class="token constant">FRAME_BODY_OFFSET_NED</span> <span class="token operator">=</span> <span class="token number">9</span>    uint16 type_mask    uint16 <span class="token constant">IGNORE_PX</span> <span class="token operator">=</span> <span class="token number">1</span>    <span class="token comment"># Position ignore flags</span>    uint16 <span class="token constant">IGNORE_PY</span> <span class="token operator">=</span> <span class="token number">2</span>    uint16 <span class="token constant">IGNORE_PZ</span> <span class="token operator">=</span> <span class="token number">4</span>    uint16 <span class="token constant">IGNORE_VX</span> <span class="token operator">=</span> <span class="token number">8</span>    <span class="token comment"># Velocity vector ignore flags</span>    uint16 <span class="token constant">IGNORE_VY</span> <span class="token operator">=</span> <span class="token number">16</span>    uint16 <span class="token constant">IGNORE_VZ</span> <span class="token operator">=</span> <span class="token number">32</span>    uint16 <span class="token constant">IGNORE_AFX</span> <span class="token operator">=</span> <span class="token number">64</span>  <span class="token comment"># Acceleration/Force vector ignore flags</span>    uint16 <span class="token constant">IGNORE_AFY</span> <span class="token operator">=</span> <span class="token number">128</span>    uint16 <span class="token constant">IGNORE_AFZ</span> <span class="token operator">=</span> <span class="token number">256</span>    uint16 <span class="token constant">FORCE</span> <span class="token operator">=</span> <span class="token number">512</span>      <span class="token comment"># Force in af vector flag</span>    uint16 <span class="token constant">IGNORE_YAW</span> <span class="token operator">=</span> <span class="token number">1024</span>    uint16 <span class="token constant">IGNORE_YAW_RATE</span> <span class="token operator">=</span> <span class="token number">2048</span>    geometry_msgs<span class="token operator">/</span>Point position    geometry_msgs<span class="token operator">/</span>Vector3 velocity    geometry_msgs<span class="token operator">/</span>Vector3 acceleration_or_force    float32 yaw    float32 yaw_rate<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> ROS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ROS参数服务器</title>
      <link href="2021/03/26/ROS-ROS-param/"/>
      <url>2021/03/26/ROS-ROS-param/</url>
      
        <content type="html"><![CDATA[<!-- toc --><h2 id="YAML文件"><a href="#YAML文件" class="headerlink" title="YAML文件"></a>YAML文件</h2><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">joint1_gains</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span><span class="token key atrule">p</span><span class="token punctuation">:</span> <span class="token number">7.0</span><span class="token punctuation">,</span> <span class="token key atrule">i</span><span class="token punctuation">:</span> <span class="token number">8.0</span><span class="token punctuation">,</span> <span class="token key atrule">d</span><span class="token punctuation">:</span> <span class="token number">9.0</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="源文件"><a href="#源文件" class="headerlink" title="源文件"></a>源文件</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ros/ros.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ros<span class="token operator">::</span><span class="token function">init</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token string">"read_param_node"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ros<span class="token operator">::</span>NodeHandle n<span class="token punctuation">;</span>    <span class="token keyword">double</span> P_gain<span class="token punctuation">,</span> D_gain<span class="token punctuation">,</span> I_gain<span class="token punctuation">;</span>    <span class="token function">ROS_WARN</span><span class="token punctuation">(</span><span class="token string">"rosparam start"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token punctuation">.</span><span class="token function">getParam</span><span class="token punctuation">(</span><span class="token string">"/gains/p"</span><span class="token punctuation">,</span> P_gain<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">ROS_WARN</span><span class="token punctuation">(</span><span class="token string">"proportional gain set to %f"</span><span class="token punctuation">,</span> P_gain<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token function">ROS_WARN</span><span class="token punctuation">(</span><span class="token string">"Can't load param of P"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    ros<span class="token operator">::</span><span class="token function">spin</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="launch文件"><a href="#launch文件" class="headerlink" title="launch文件"></a><code>launch</code>文件</h2><pre class="line-numbers language-js" data-language="js"><code class="language-js"><span class="token operator">&lt;</span>launch<span class="token operator">></span>    <span class="token operator">&lt;</span>rosparam command<span class="token operator">=</span><span class="token string">"load"</span> file<span class="token operator">=</span><span class="token string">"$(find ros_learning)/param/gains.yaml"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>node name<span class="token operator">=</span><span class="token string">"read_param_node"</span> pkg<span class="token operator">=</span><span class="token string">"ros_learning"</span> type<span class="token operator">=</span><span class="token string">"read_param_node"</span> output<span class="token operator">=</span><span class="token string">"screen"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>launch<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> ROS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ROS控制器</title>
      <link href="2021/03/26/ROS-ROS%E6%8E%A7%E5%88%B6%E5%99%A8/"/>
      <url>2021/03/26/ROS-ROS%E6%8E%A7%E5%88%B6%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<!-- toc --><h2 id="Minimal-Simulator"><a href="#Minimal-Simulator" class="headerlink" title="Minimal Simulator"></a>Minimal Simulator</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;ros/ros.h></span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;std_msgs/Float64.h></span> </span>std_msgs<span class="token operator">::</span>Float64 g_velocity<span class="token punctuation">;</span>std_msgs<span class="token operator">::</span>Float64 g_force<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">myCallback</span><span class="token punctuation">(</span><span class="token keyword">const</span> std_msgs<span class="token operator">::</span>Float64<span class="token operator">&amp;</span> message_holder<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">ROS_INFO</span><span class="token punctuation">(</span><span class="token string">"received force value is: %f"</span><span class="token punctuation">,</span> message_holder<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    g_force<span class="token punctuation">.</span>data <span class="token operator">=</span> message_holder<span class="token punctuation">.</span>data<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ros<span class="token operator">::</span><span class="token function">init</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token string">"minimal_simulator"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ros<span class="token operator">::</span>NodeHandle nh<span class="token punctuation">;</span>     ros<span class="token operator">::</span>Subscriber my_subscriber_object <span class="token operator">=</span> nh<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">"force_cmd"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> myCallback<span class="token punctuation">)</span><span class="token punctuation">;</span>    ros<span class="token operator">::</span>Publisher my_publisher_object <span class="token operator">=</span> nh<span class="token punctuation">.</span>advertise<span class="token operator">&lt;</span>std_msgs<span class="token operator">::</span>Float64<span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"velocity"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 订阅力控制话题，通过积分发布速度话题</span>    <span class="token keyword">double</span> mass <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> dt <span class="token operator">=</span> <span class="token number">0.01</span><span class="token punctuation">;</span>   <span class="token comment">//10ms 积分时间</span>    <span class="token keyword">double</span> sample_rate <span class="token operator">=</span> <span class="token number">1.0</span> <span class="token operator">/</span> dt<span class="token punctuation">;</span>     ros<span class="token operator">::</span>Rate <span class="token function">naptime</span><span class="token punctuation">(</span>sample_rate<span class="token punctuation">)</span><span class="token punctuation">;</span>    g_velocity<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>      g_force<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>     <span class="token keyword">while</span> <span class="token punctuation">(</span>ros<span class="token operator">::</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        g_velocity<span class="token punctuation">.</span>data <span class="token operator">=</span> g_velocity<span class="token punctuation">.</span>data <span class="token operator">+</span> <span class="token punctuation">(</span>g_force<span class="token punctuation">.</span>data <span class="token operator">/</span> mass<span class="token punctuation">)</span> <span class="token operator">*</span> dt<span class="token punctuation">;</span>         my_publisher_object<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span>g_velocity<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token function">ROS_INFO</span><span class="token punctuation">(</span><span class="token string">"velocity = %f"</span><span class="token punctuation">,</span> g_velocity<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        ros<span class="token operator">::</span><span class="token function">spinOnce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        naptime<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Minimal-Controller"><a href="#Minimal-Controller" class="headerlink" title="Minimal Controller"></a>Minimal Controller</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ros/ros.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;std_msgs/Float64.h></span></span>std_msgs<span class="token operator">::</span>Float64 g_vel<span class="token punctuation">;</span>std_msgs<span class="token operator">::</span>Float64 g_vel_cmd<span class="token punctuation">;</span>std_msgs<span class="token operator">::</span>Float64 g_force<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">vel_cb</span><span class="token punctuation">(</span><span class="token keyword">const</span> std_msgs<span class="token operator">::</span>Float64<span class="token operator">::</span>ConstPtr <span class="token operator">&amp;</span>velocity<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">ROS_WARN</span><span class="token punctuation">(</span><span class="token string">"Receive velocity: %f m/s"</span><span class="token punctuation">,</span> velocity<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    g_vel<span class="token punctuation">.</span>data <span class="token operator">=</span> velocity<span class="token operator">-></span>data<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">vel_cmd_cb</span><span class="token punctuation">(</span><span class="token keyword">const</span> std_msgs<span class="token operator">::</span>Float64<span class="token operator">::</span>ConstPtr <span class="token operator">&amp;</span>vel_cmd<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">ROS_WARN</span><span class="token punctuation">(</span><span class="token string">"Receive desired velocity: %f m/s"</span><span class="token punctuation">,</span> vel_cmd<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>    g_vel_cmd<span class="token punctuation">.</span>data <span class="token operator">=</span> vel_cmd<span class="token operator">-></span>data<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ros<span class="token operator">::</span><span class="token function">init</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token string">"controller"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ros<span class="token operator">::</span>NodeHandle nh<span class="token punctuation">;</span>    <span class="token comment">// 订阅当前速度和期望速度</span>    ros<span class="token operator">::</span>Subscriber vel_sub <span class="token operator">=</span> nh<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">"velocity"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> vel_cb<span class="token punctuation">)</span><span class="token punctuation">;</span>    ros<span class="token operator">::</span>Subscriber vel_cmd_sub <span class="token operator">=</span> nh<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">"vel_cmd"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> vel_cmd_cb<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 输出期望控制力</span>    ros<span class="token operator">::</span>Publisher force_pub <span class="token operator">=</span> nh<span class="token punctuation">.</span>advertise<span class="token operator">&lt;</span>std_msgs<span class="token operator">::</span>Float64<span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"force_cmd"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> Kv <span class="token operator">=</span> <span class="token number">1.0</span><span class="token punctuation">;</span>    <span class="token comment">// 比例控制器</span>    <span class="token keyword">double</span> dt <span class="token operator">=</span> <span class="token number">0.01</span><span class="token punctuation">;</span>     <span class="token keyword">double</span> sample_rate <span class="token operator">=</span> <span class="token number">1.0</span> <span class="token operator">/</span> dt<span class="token punctuation">;</span>     ros<span class="token operator">::</span>Rate <span class="token function">naptime</span><span class="token punctuation">(</span>sample_rate<span class="token punctuation">)</span><span class="token punctuation">;</span>    g_vel<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>     g_vel_cmd<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>     g_force<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> vel_err <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>ros<span class="token operator">::</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        vel_err <span class="token operator">=</span> g_vel_cmd<span class="token punctuation">.</span>data <span class="token operator">-</span> g_vel<span class="token punctuation">.</span>data<span class="token punctuation">;</span>        g_force<span class="token punctuation">.</span>data <span class="token operator">=</span> Kv <span class="token operator">*</span> vel_err<span class="token punctuation">;</span>        force_pub<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span>g_force<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">ROS_INFO</span><span class="token punctuation">(</span><span class="token string">"force command = %f N"</span><span class="token punctuation">,</span> g_force<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>        ros<span class="token operator">::</span><span class="token function">spinOnce</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        naptime<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="launch文件"><a href="#launch文件" class="headerlink" title="launch文件"></a><code>launch</code>文件</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token operator">&lt;</span>launch<span class="token operator">></span>    <span class="token operator">&lt;</span>node name<span class="token operator">=</span><span class="token string double-quoted-string">"simulator"</span> pkg<span class="token operator">=</span><span class="token string double-quoted-string">"ros_learning"</span> type<span class="token operator">=</span><span class="token string double-quoted-string">"simulator_node"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>node name<span class="token operator">=</span><span class="token string double-quoted-string">"controller"</span> pkg<span class="token operator">=</span><span class="token string double-quoted-string">"ros_learning"</span> type<span class="token operator">=</span><span class="token string double-quoted-string">"controller_node"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>launch<span class="token operator">></span><span class="token comment"># name: 节点名</span><span class="token comment"># pkg: 包名</span><span class="token comment"># type: 可执行文件名</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="rqt-plot-画曲线"><a href="#rqt-plot-画曲线" class="headerlink" title="rqt_plot 画曲线"></a><code>rqt_plot</code> 画曲线</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">rostopic pub <span class="token operator">-</span>r <span class="token number">10</span> vel_cmd std_msgs<span class="token operator">/</span>Float64 <span class="token number">0.5</span>rqt_plot velocity<span class="token operator">/</span>data<span class="token punctuation">,</span> vel_cmd<span class="token operator">/</span>data<span class="token punctuation">,</span> force_cmd<span class="token operator">/</span>data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><center><img src="/2021/03/26/ROS-ROS%E6%8E%A7%E5%88%B6%E5%99%A8/profiles.png#pic_center" width="100%" height="100%" alt="test"><br><div style="color:orange; border-bottom: 1px solid #d9d9d9;display: inline-block;color: #999;padding: 2px;">profiles</div></center>]]></content>
      
      
      
        <tags>
            
            <tag> ROS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ROS自定义msg</title>
      <link href="2021/03/26/ROS-ROS%E8%87%AA%E5%AE%9A%E4%B9%89msg/"/>
      <url>2021/03/26/ROS-ROS%E8%87%AA%E5%AE%9A%E4%B9%89msg/</url>
      
        <content type="html"><![CDATA[<!-- toc --><h2 id="自定义msg消息"><a href="#自定义msg消息" class="headerlink" title="自定义msg消息"></a>自定义<code>msg</code>消息</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Header headerint32 numfloat64<span class="token punctuation">[</span><span class="token punctuation">]</span> data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="修改CMakeLists-txt"><a href="#修改CMakeLists-txt" class="headerlink" title="修改CMakeLists.txt"></a>修改<code>CMakeLists.txt</code></h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">find_package</span><span class="token punctuation">(</span>catkin REQUIRED COMPONENTS  roscpp  rospy  std_msgs  message_generation<span class="token punctuation">)</span><span class="token comment">// 添加自定义的msg文件</span><span class="token function">add_message_files</span><span class="token punctuation">(</span>  FILES  test<span class="token punctuation">.</span>msg<span class="token punctuation">)</span><span class="token comment">// 自定义的msg使用了哪些包</span><span class="token function">generate_messages</span><span class="token punctuation">(</span>  DEPENDENCIES  std_msgs<span class="token punctuation">)</span><span class="token function">catkin_package</span><span class="token punctuation">(</span> CATKIN_DEPENDS roscpp rospy std_msgs message_runtime<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="修改package-xml"><a href="#修改package-xml" class="headerlink" title="修改package.xml"></a>修改<code>package.xml</code></h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token operator">&lt;</span>build_depend<span class="token operator">></span>message_generation<span class="token operator">&lt;</span><span class="token operator">/</span>build_depend<span class="token operator">></span><span class="token operator">&lt;</span>exec_depend<span class="token operator">></span>message_runtime<span class="token operator">&lt;</span><span class="token operator">/</span>exec_depend<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ros/ros.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ros_learning/test.h"</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> Eigen<span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> cv<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ros<span class="token operator">::</span><span class="token function">init</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token string">"talker"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ros<span class="token operator">::</span>NodeHandle n<span class="token punctuation">;</span>    ros<span class="token operator">::</span>Publisher pub <span class="token operator">=</span> n<span class="token punctuation">.</span>advertise<span class="token operator">&lt;</span>ros_learning<span class="token operator">::</span>test<span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"chatting"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ros<span class="token operator">::</span>Rate <span class="token function">loop_rate</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span> <span class="token function">vi</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> arr<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ros_learning<span class="token operator">::</span>test input_msg<span class="token punctuation">;</span>    input_msg<span class="token punctuation">.</span>header<span class="token punctuation">.</span>stamp <span class="token operator">=</span> ros<span class="token operator">::</span><span class="token class-name">Time</span><span class="token operator">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    input_msg<span class="token punctuation">.</span>header<span class="token punctuation">.</span>seq <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    input_msg<span class="token punctuation">.</span>header<span class="token punctuation">.</span>frame_id <span class="token operator">=</span> <span class="token string">"base_frame"</span><span class="token punctuation">;</span>    input_msg<span class="token punctuation">.</span>num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    input_msg<span class="token punctuation">.</span>data <span class="token operator">=</span> vi<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>ros<span class="token operator">::</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        input_msg<span class="token punctuation">.</span>header<span class="token punctuation">.</span>seq<span class="token operator">++</span><span class="token punctuation">;</span>        input_msg<span class="token punctuation">.</span>header<span class="token punctuation">.</span>stamp <span class="token operator">=</span> ros<span class="token operator">::</span><span class="token class-name">Time</span><span class="token operator">::</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span> i <span class="token operator">:</span> input_msg<span class="token punctuation">.</span>data<span class="token punctuation">)</span>            std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>        std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>        pub<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span>input_msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        loop_rate<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="是否使用仿真时间"><a href="#是否使用仿真时间" class="headerlink" title="是否使用仿真时间"></a>是否使用仿真时间</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">$ rosparam get use_sim_time<span class="token boolean">true</span>$ rosparam set use_sim_time <span class="token boolean">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> ROS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ROS自定义类</title>
      <link href="2021/03/26/ROS-ROS%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB/"/>
      <url>2021/03/26/ROS-ROS%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<!-- toc --><h2 id="头文件"><a href="#头文件" class="headerlink" title="头文件"></a>头文件</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">EXAMPLE_H_</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">EXAMPLE_H_</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;math.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;vector></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ros/ros.h></span> </span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;std_msgs/Bool.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;std_msgs/Float32.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;std_srvs/Trigger.h></span> </span><span class="token comment">// rossrv show std_msgs/Trigger</span><span class="token comment">// bool success</span><span class="token comment">// string message</span><span class="token keyword">class</span> <span class="token class-name">Example</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">Example</span><span class="token punctuation">(</span>ros<span class="token operator">::</span>NodeHandle<span class="token operator">*</span> nodehandle<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 构造函数，传句柄地址</span><span class="token keyword">private</span><span class="token operator">:</span>    ros<span class="token operator">::</span>NodeHandle nh_<span class="token punctuation">;</span>     ros<span class="token operator">::</span>Subscriber minimal_subscriber_<span class="token punctuation">;</span>    ros<span class="token operator">::</span>ServiceServer minimal_service_<span class="token punctuation">;</span>    ros<span class="token operator">::</span>Publisher  minimal_publisher_<span class="token punctuation">;</span>        <span class="token keyword">double</span> val_from_subscriber_<span class="token punctuation">;</span>     <span class="token keyword">double</span> val_to_remember_<span class="token punctuation">;</span>         <span class="token keyword">void</span> <span class="token function">initializeSubscribers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 初始化订阅者成员函数</span>    <span class="token keyword">void</span> <span class="token function">initializePublishers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 初始化发布者成员函数</span>    <span class="token keyword">void</span> <span class="token function">initializeServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// 初始化服务端成员函数</span>        <span class="token comment">// 回调函数</span>    <span class="token keyword">void</span> <span class="token function">subscriberCallback</span><span class="token punctuation">(</span><span class="token keyword">const</span> std_msgs<span class="token operator">::</span>Float32 <span class="token operator">&amp;</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">bool</span> <span class="token function">serviceCallback</span><span class="token punctuation">(</span>std_srvs<span class="token operator">::</span>Trigger<span class="token operator">::</span>Request <span class="token operator">&amp;</span>request<span class="token punctuation">,</span> std_srvs<span class="token operator">::</span>Trigger<span class="token operator">::</span>Response <span class="token operator">&amp;</span>response<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="源文件"><a href="#源文件" class="headerlink" title="源文件"></a>源文件</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"Example.h"</span></span><span class="token class-name">Example</span><span class="token operator">::</span><span class="token function">Example</span><span class="token punctuation">(</span>ros<span class="token operator">::</span>NodeHandle<span class="token operator">*</span> nodehandle<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">nh_</span><span class="token punctuation">(</span><span class="token operator">*</span>nodehandle<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">ROS_INFO</span><span class="token punctuation">(</span><span class="token string">"in class constructor of Example"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">initializeSubscribers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token function">initializePublishers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">initializeServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">Example</span><span class="token operator">::</span><span class="token function">initializeSubscribers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">ROS_INFO</span><span class="token punctuation">(</span><span class="token string">"Initializing Subscribers"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    minimal_subscriber_ <span class="token operator">=</span> nh_<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">"input_topic"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>Example<span class="token operator">::</span>subscriberCallback<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//函数指针和this指针</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">Example</span><span class="token operator">::</span><span class="token function">initializePublishers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">ROS_INFO</span><span class="token punctuation">(</span><span class="token string">"Initializing Publishers"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    minimal_publisher_ <span class="token operator">=</span> nh_<span class="token punctuation">.</span>advertise<span class="token operator">&lt;</span>std_msgs<span class="token operator">::</span>Float32<span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"output_topic"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">Example</span><span class="token operator">::</span><span class="token function">initializeServices</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">ROS_INFO</span><span class="token punctuation">(</span><span class="token string">"Initializing Services"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    minimal_service_ <span class="token operator">=</span> nh_<span class="token punctuation">.</span><span class="token function">advertiseService</span><span class="token punctuation">(</span><span class="token string">"service"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>Example<span class="token operator">::</span>serviceCallback<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token class-name">Example</span><span class="token operator">::</span><span class="token function">subscriberCallback</span><span class="token punctuation">(</span><span class="token keyword">const</span> std_msgs<span class="token operator">::</span>Float32 <span class="token operator">&amp;</span>msg<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    val_from_subscriber_ <span class="token operator">=</span> msg<span class="token punctuation">.</span>data<span class="token punctuation">;</span>    <span class="token function">ROS_INFO</span><span class="token punctuation">(</span><span class="token string">"Receive message: %f"</span><span class="token punctuation">,</span> msg<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>       val_to_remember_ <span class="token operator">+=</span> val_from_subscriber_<span class="token punctuation">;</span>    std_msgs<span class="token operator">::</span>Float32 output_msg<span class="token punctuation">;</span>    output_msg<span class="token punctuation">.</span>data <span class="token operator">=</span> val_to_remember_<span class="token punctuation">;</span>    minimal_publisher_<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span>output_msg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">bool</span> <span class="token class-name">Example</span><span class="token operator">::</span><span class="token function">serviceCallback</span><span class="token punctuation">(</span>std_srvs<span class="token operator">::</span>Trigger<span class="token operator">::</span>Request <span class="token operator">&amp;</span>request<span class="token punctuation">,</span> std_srvs<span class="token operator">::</span>Trigger<span class="token operator">::</span>Response <span class="token operator">&amp;</span>response<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">ROS_INFO</span><span class="token punctuation">(</span><span class="token string">"service callback"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    response<span class="token punctuation">.</span>success <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    response<span class="token punctuation">.</span>message <span class="token operator">=</span> <span class="token string">"response message"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ros<span class="token operator">::</span><span class="token function">init</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token string">"Example"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ros<span class="token operator">::</span>NodeHandle nh<span class="token punctuation">;</span>    Example <span class="token function">example</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>nh<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 构造函数的参数是句柄地址</span>    ros<span class="token operator">::</span><span class="token function">spin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="生成库文件"><a href="#生成库文件" class="headerlink" title="生成库文件"></a>生成库文件</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">add_libraries</span><span class="token punctuation">(</span>Example src<span class="token operator">/</span>Example<span class="token punctuation">.</span>cpp<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="可执行文件链接库"><a href="#可执行文件链接库" class="headerlink" title="可执行文件链接库"></a>可执行文件链接库</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">add_executable</span><span class="token punctuation">(</span>test_node src<span class="token operator">/</span>test<span class="token punctuation">.</span>cpp<span class="token punctuation">)</span><span class="token function">target_link_libraries</span><span class="token punctuation">(</span>test_node Example<span class="token punctuation">)</span>    <span class="token comment">// 添加自定义库</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> ROS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ROS自定义srv</title>
      <link href="2021/03/26/ROS-ROS%E8%87%AA%E5%AE%9A%E4%B9%89srv/"/>
      <url>2021/03/26/ROS-ROS%E8%87%AA%E5%AE%9A%E4%B9%89srv/</url>
      
        <content type="html"><![CDATA[<h2 id="自定义-srv-消息"><a href="#自定义-srv-消息" class="headerlink" title="自定义 srv 消息"></a>自定义 srv 消息</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">string name<span class="token operator">--</span><span class="token operator">-</span>int32 age<span class="token keyword">bool</span> sex<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="修改-CMakeLists-txt"><a href="#修改-CMakeLists-txt" class="headerlink" title="修改 CMakeLists.txt"></a>修改 CMakeLists.txt</h2><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token function">add_service_files</span><span class="token punctuation">(</span>  <span class="token constant">FILES</span>  stu<span class="token operator">.</span>srv<span class="token punctuation">)</span><span class="token function">generate_messages</span><span class="token punctuation">(</span>  <span class="token constant">DEPENDENCIES</span>  std_msgs  std_srvs<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ros/ros.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ros_learning/stu.h"</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token comment">// 注意回调函数的参数写法</span><span class="token keyword">bool</span> <span class="token function">stu_cb</span><span class="token punctuation">(</span>ros_learning<span class="token operator">::</span>stu<span class="token operator">::</span>Request <span class="token operator">&amp;</span>request<span class="token punctuation">,</span> ros_learning<span class="token operator">::</span>stu<span class="token operator">::</span>Response <span class="token operator">&amp;</span>response<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    string <span class="token function">input_name</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> input_name <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    response<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    response<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ros<span class="token operator">::</span><span class="token function">init</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token string">"service"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ros<span class="token operator">::</span>NodeHandle nh<span class="token punctuation">;</span>    ros<span class="token operator">::</span>ServiceServer service <span class="token operator">=</span> nh<span class="token punctuation">.</span><span class="token function">advertiseService</span><span class="token punctuation">(</span><span class="token string">"look_up_stu"</span><span class="token punctuation">,</span> stu_cb<span class="token punctuation">)</span><span class="token punctuation">;</span>    ros<span class="token operator">::</span><span class="token function">spin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;ros/ros.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ros_learning/stu.h"</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ros<span class="token operator">::</span><span class="token function">init</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token string">"client"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ros<span class="token operator">::</span>NodeHandle n<span class="token punctuation">;</span>    ros<span class="token operator">::</span>ServiceClient client <span class="token operator">=</span> n<span class="token punctuation">.</span>serviceClient<span class="token operator">&lt;</span>ros_learning<span class="token operator">::</span>stu<span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"look_up_stu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ros_learning<span class="token operator">::</span>stu srv<span class="token punctuation">;</span>    string inputName<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>ros<span class="token operator">::</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        cin <span class="token operator">>></span> inputName<span class="token punctuation">;</span>        srv<span class="token punctuation">.</span>request<span class="token punctuation">.</span>name <span class="token operator">=</span> inputName<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>inputName<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span><span class="token string">"exit"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span>client<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>srv<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"name: "</span> <span class="token operator">&lt;&lt;</span> srv<span class="token punctuation">.</span>request<span class="token punctuation">.</span>name <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"age: "</span> <span class="token operator">&lt;&lt;</span> srv<span class="token punctuation">.</span>response<span class="token punctuation">.</span>age <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>            cout <span class="token operator">&lt;&lt;</span> <span class="token string">"sex: "</span> <span class="token operator">&lt;&lt;</span> srv<span class="token punctuation">.</span>response<span class="token punctuation">.</span>sex <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> ROS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ROS话题通信</title>
      <link href="2021/03/26/ROS-ROS%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/"/>
      <url>2021/03/26/ROS-ROS%E8%AF%9D%E9%A2%98%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<!-- toc --><h2 id="容易出错的地方"><a href="#容易出错的地方" class="headerlink" title="容易出错的地方"></a>容易出错的地方</h2><h3 id="链接catkin的库"><a href="#链接catkin的库" class="headerlink" title="链接catkin的库"></a>链接catkin的库</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">target_link_libraries</span><span class="token punctuation">(</span>main $<span class="token punctuation">&#123;</span>catkin_LIBRARIES<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="使用自定义头文件，前面加包名"><a href="#使用自定义头文件，前面加包名" class="headerlink" title="使用自定义头文件，前面加包名"></a>使用自定义头文件，前面加包名</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"package_name/xxx.h"</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="CMakeLists-txt"><a href="#CMakeLists-txt" class="headerlink" title="CMakeLists.txt"></a>CMakeLists.txt</h3><p>如果有自定义类，需要包含头文件和链接库</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 头文件位置</span><span class="token function">include_libraries</span><span class="token punctuation">(</span>include<span class="token punctuation">)</span><span class="token comment">// 添加库文件</span><span class="token function">add_libraries</span><span class="token punctuation">(</span>Student STATIC src<span class="token operator">/</span>Student<span class="token punctuation">.</span>cpp<span class="token punctuation">)</span><span class="token comment">// 链接</span><span class="token function">target_link_libraries</span><span class="token punctuation">(</span>main Student<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="std-msgs的数据类型"><a href="#std-msgs的数据类型" class="headerlink" title="std_msgs的数据类型"></a>std_msgs的数据类型</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;std_msgs/Float64.h></span></span>float64 data<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;std_msgs/Float64MultiArray.h></span></span>float64<span class="token punctuation">[</span><span class="token punctuation">]</span> data  <span class="token comment">// 这种可变数组就相当于vector</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><h3 id="发布者-talker"><a href="#发布者-talker" class="headerlink" title="发布者 talker"></a>发布者 talker</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ros<span class="token operator">::</span><span class="token function">init</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token string">"talker"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 节点名</span>    ros<span class="token operator">::</span>NodeHandle n<span class="token punctuation">;</span>                  <span class="token comment">// 句柄</span>    ros<span class="token operator">::</span>Publisher pub <span class="token operator">=</span> n<span class="token punctuation">.</span>advertise<span class="token operator">&lt;</span>std_msgs<span class="token operator">::</span>Float64<span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"chatting"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 往chatting话题上发消息，数据类型是std_msgs::Float64</span>    std_msgs<span class="token operator">::</span>Float64 input<span class="token punctuation">;</span>    input<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>    ros<span class="token operator">::</span>Rate <span class="token function">loop_rate</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 1s发一次</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>ros<span class="token operator">::</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        input<span class="token punctuation">.</span>data <span class="token operator">+=</span> <span class="token number">0.1</span><span class="token punctuation">;</span>        pub<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>        loop_rate<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不同数据类型<code>std_msgs::Float64MultiArray</code></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ros<span class="token operator">::</span><span class="token function">init</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token string">"talker"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ros<span class="token operator">::</span>NodeHandle n<span class="token punctuation">;</span>    ros<span class="token operator">::</span>Publisher pub <span class="token operator">=</span> n<span class="token punctuation">.</span>advertise<span class="token operator">&lt;</span>std_msgs<span class="token operator">::</span>Float64MultiArray<span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"chatting"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ros<span class="token operator">::</span>Rate <span class="token function">loop_rate</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">double</span> arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    std<span class="token operator">::</span>vector<span class="token operator">&lt;</span><span class="token keyword">double</span><span class="token operator">></span> <span class="token function">vi</span><span class="token punctuation">(</span>arr<span class="token punctuation">,</span> arr<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// float64就是double</span>    std_msgs<span class="token operator">::</span>Float64MultiArray input_float<span class="token punctuation">;</span>    input_float<span class="token punctuation">.</span>data <span class="token operator">=</span> vi<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>ros<span class="token operator">::</span><span class="token function">ok</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> i <span class="token operator">:</span> input_float<span class="token punctuation">.</span>data<span class="token punctuation">)</span>            std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>        std<span class="token operator">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token operator">::</span>endl<span class="token punctuation">;</span>        pub<span class="token punctuation">.</span><span class="token function">publish</span><span class="token punctuation">(</span>input_float<span class="token punctuation">)</span><span class="token punctuation">;</span>        loop_rate<span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="订阅者-listener"><a href="#订阅者-listener" class="headerlink" title="订阅者 listener"></a>订阅者 listener</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">chatting_cb</span><span class="token punctuation">(</span><span class="token keyword">const</span> std_msgs<span class="token operator">::</span>Float64<span class="token operator">::</span>ConstPtr<span class="token operator">&amp;</span> message<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">ROS_INFO</span><span class="token punctuation">(</span><span class="token string">"I receive the number: %f"</span><span class="token punctuation">,</span> message<span class="token operator">-></span>data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token operator">*</span> argv<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    ros<span class="token operator">::</span><span class="token function">init</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token string">"listener"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    ros<span class="token operator">::</span>NodeHandle n<span class="token punctuation">;</span>    ros<span class="token operator">::</span>Subscribe sub <span class="token operator">=</span> n<span class="token punctuation">.</span><span class="token function">subscribe</span><span class="token punctuation">(</span><span class="token string">"chatting"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> chatting_cb<span class="token punctuation">)</span><span class="token punctuation">;</span>    ros<span class="token operator">::</span><span class="token function">spin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 阻塞</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="CMakeLists-txt-1"><a href="#CMakeLists-txt-1" class="headerlink" title="CMakeLists.txt"></a>CMakeLists.txt</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">cmake_minimum_required</span><span class="token punctuation">(</span>VERSION <span class="token number">3.0</span><span class="token punctuation">.</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token function">project</span><span class="token punctuation">(</span>learning_communication<span class="token punctuation">)</span><span class="token function">find_package</span><span class="token punctuation">(</span>catkin REQUIRED COMPONENTS  roscpp  rospy  std_msgs<span class="token punctuation">)</span><span class="token function">catkin_package</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">include_directories</span><span class="token punctuation">(</span>  include  $<span class="token punctuation">&#123;</span>catkin_INCLUDE_DIRS<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token function">add_executable</span><span class="token punctuation">(</span>talker src<span class="token operator">/</span>talker<span class="token punctuation">.</span>cpp<span class="token punctuation">)</span><span class="token function">target_link_libraries</span><span class="token punctuation">(</span>talker $<span class="token punctuation">&#123;</span>catkin_LIBRARIES<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><h3 id="发布者"><a href="#发布者" class="headerlink" title="发布者"></a>发布者</h3><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token comment">#! /usr/bin/env python</span><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> rospy<span class="token keyword">from</span> std_msgs<span class="token punctuation">.</span>msg <span class="token keyword">import</span> String<span class="token keyword">from</span> test_msgs<span class="token punctuation">.</span>msg <span class="token keyword">import</span> Position<span class="token keyword">def</span> <span class="token function">talker</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    rospy<span class="token punctuation">.</span>init_node<span class="token punctuation">(</span><span class="token string">'py_talker'</span><span class="token punctuation">,</span> anonymous<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    Pos_pub <span class="token operator">=</span> rospy<span class="token punctuation">.</span>Publisher<span class="token punctuation">(</span><span class="token string">'/test/Position'</span><span class="token punctuation">,</span> Position<span class="token punctuation">,</span> queue_size<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span>    rate <span class="token operator">=</span> rospy<span class="token punctuation">.</span>Rate<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span>    pos <span class="token operator">=</span> Position<span class="token punctuation">(</span><span class="token punctuation">)</span>    pos<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">10</span>    pos<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">20</span>    <span class="token keyword">while</span> <span class="token keyword">not</span> rospy<span class="token punctuation">.</span>is_shutdown<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        pos<span class="token punctuation">.</span>x <span class="token operator">+=</span> <span class="token number">1</span>        pos<span class="token punctuation">.</span>y <span class="token operator">+=</span> <span class="token number">2</span>        rospy<span class="token punctuation">.</span>loginfo<span class="token punctuation">(</span>pos<span class="token punctuation">)</span>        Pos_pub<span class="token punctuation">.</span>publish<span class="token punctuation">(</span>pos<span class="token punctuation">)</span>        rate<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        talker<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> rospy<span class="token punctuation">.</span>ROSInterruptException<span class="token punctuation">:</span><span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="订阅者"><a href="#订阅者" class="headerlink" title="订阅者"></a>订阅者</h3><pre class="line-numbers language-py" data-language="py"><code class="language-py"><span class="token comment">#! /usr/bin/env python</span><span class="token comment"># -*- coding: utf-8 -*-</span><span class="token keyword">import</span> rospy<span class="token keyword">from</span> test_msgs<span class="token punctuation">.</span>msg <span class="token keyword">import</span> Position<span class="token keyword">def</span> <span class="token function">callback</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">:</span>    rospy<span class="token punctuation">.</span>loginfo<span class="token punctuation">(</span><span class="token string">'Receive: %f, %f'</span><span class="token punctuation">,</span> msg<span class="token punctuation">.</span>x<span class="token punctuation">,</span> msg<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">listener</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    rospy<span class="token punctuation">.</span>init_node<span class="token punctuation">(</span><span class="token string">'py_listener'</span><span class="token punctuation">,</span> anonymous<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    rospy<span class="token punctuation">.</span>Subscriber<span class="token punctuation">(</span><span class="token string">'/test/Position'</span><span class="token punctuation">,</span> Position<span class="token punctuation">,</span> callback<span class="token punctuation">)</span>    rospy<span class="token punctuation">.</span>spin<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        listener<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">except</span> rospy<span class="token punctuation">.</span>ROSInitException<span class="token punctuation">:</span><span class="token keyword">pass</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> ROS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PX4</title>
      <link href="2021/03/26/%E5%A4%9A%E6%97%8B%E7%BF%BC-PX4/"/>
      <url>2021/03/26/%E5%A4%9A%E6%97%8B%E7%BF%BC-PX4/</url>
      
        <content type="html"><![CDATA[<!-- TOC --><h2 id="关于PX4的一些基本概念"><a href="#关于PX4的一些基本概念" class="headerlink" title="关于PX4的一些基本概念"></a>关于PX4的一些基本概念</h2><ul><li><code>PX4</code>是一套开源的飞控套件，许多无人机的飞控系统都是基于<code>PX4</code>构建的</li><li><code>MAVLink</code>是一种常用的通信协议，常用于无人机于地面站<code>(Ground Control Station)</code>或无人机之间的通讯</li><li><code>OFFBOARD</code>控制：<code>PX4</code>仅仅执行飞行姿态等与飞行相关的控制，初次之外的其他控制(如视觉导航)由外部程序进行</li></ul><h2 id="ROS、PX4和它们之间的关系"><a href="#ROS、PX4和它们之间的关系" class="headerlink" title="ROS、PX4和它们之间的关系"></a>ROS、PX4和它们之间的关系</h2><ul><li><code>SITL</code>即<code>Software In The Loop</code>，指的是使用软件飞控进行模拟飞行——<code>PX4</code>飞控运行在<code>PC</code>上</li><li>与之对应的是<code>HITL</code>，<code>Hardware In The Loop</code>，即使用单独的飞控硬件执行模拟</li><li>无人机可以使用专业的飞行遥控器进行控制，也可以使用软件在<code>PC</code>或手机上进行控制</li></ul>]]></content>
      
      
      <categories>
          
          <category> 多旋翼 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多旋翼 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PX4_pos_estimator</title>
      <link href="2021/03/26/%E5%A4%9A%E6%97%8B%E7%BF%BC-PX4-pos-estimator/"/>
      <url>2021/03/26/%E5%A4%9A%E6%97%8B%E7%BF%BC-PX4-pos-estimator/</url>
      
        <content type="html"><![CDATA[<!-- toc --><h2 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h2><h3 id="相关参数"><a href="#相关参数" class="headerlink" title="相关参数"></a>相关参数</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> input_source<span class="token punctuation">;</span><span class="token keyword">float</span> rate_hz<span class="token punctuation">;</span>Eigen<span class="token operator">::</span>Vector3f pos_offset<span class="token punctuation">;</span><span class="token keyword">float</span> yaw_offset<span class="token punctuation">;</span>string object_name<span class="token punctuation">;</span>ros<span class="token operator">::</span>Time last_timestamp<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="laser定位相关"><a href="#laser定位相关" class="headerlink" title="laser定位相关"></a>laser定位相关</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Eigen<span class="token operator">::</span>Vector3d pos_drone_laser<span class="token punctuation">;</span> <span class="token comment">//无人机当前位置 (laser)</span>Eigen<span class="token operator">::</span>Quaterniond q_laser<span class="token punctuation">;</span>Eigen<span class="token operator">::</span>Vector3d Euler_laser<span class="token punctuation">;</span> <span class="token comment">//无人机当前姿态(laser)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="T265"><a href="#T265" class="headerlink" title="T265"></a>T265</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Eigen<span class="token operator">::</span>Vector3d pos_drone_t265<span class="token punctuation">;</span>Eigen<span class="token operator">::</span>Quaterniond q_t265<span class="token punctuation">;</span>Eigen<span class="token operator">::</span>Vector3d Euler_t265<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="gazebo真值相关"><a href="#gazebo真值相关" class="headerlink" title="gazebo真值相关"></a>gazebo真值相关</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Eigen<span class="token operator">::</span>Vector3d pos_drone_gazebo<span class="token punctuation">;</span>Eigen<span class="token operator">::</span>Quaterniond q_gazebo<span class="token punctuation">;</span>Eigen<span class="token operator">::</span>Vector3d Euler_gazebo<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="SLAM相关"><a href="#SLAM相关" class="headerlink" title="SLAM相关"></a>SLAM相关</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Eigen<span class="token operator">::</span>Vector3d pos_drone_slam<span class="token punctuation">;</span>Eigen<span class="token operator">::</span>Quaterniond q_slam<span class="token punctuation">;</span>Eigen<span class="token operator">::</span>Vector3d Euler_slam<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="发布相关变量"><a href="#发布相关变量" class="headerlink" title="发布相关变量"></a>发布相关变量</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">geometry_msgs<span class="token operator">::</span>TransformStamped laser<span class="token punctuation">;</span> <span class="token comment">//当前时刻cartorgrapher发布的数据</span>ros<span class="token operator">::</span>Publisher vision_pub<span class="token punctuation">;</span>ros<span class="token operator">::</span>Publisher drone_state_pub<span class="token punctuation">;</span>ros<span class="token operator">::</span>Publisher message_pub<span class="token punctuation">;</span>ros<span class="token operator">::</span>Publisher odom_pub<span class="token punctuation">;</span>ros<span class="token operator">::</span>Publisher trajectory_pub<span class="token punctuation">;</span>prometheus_msgs<span class="token operator">::</span>Message message<span class="token punctuation">;</span>prometheus_msgs<span class="token operator">::</span>DroneState Drone_State<span class="token punctuation">;</span>nav_msgs<span class="token operator">::</span>Odometry Drone_odom<span class="token punctuation">;</span>std<span class="token operator">::</span>vector<span class="token operator">&lt;</span>geometry_msgs<span class="token operator">::</span>PoseStamped<span class="token operator">></span> posehistory_vector_<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="主函数"><a href="#主函数" class="headerlink" title="主函数"></a>主函数</h2><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">ros<span class="token operator">::</span><span class="token function">init</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">,</span> <span class="token string">"px4_pos_estimator"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ros<span class="token operator">::</span>NodeHandle <span class="token function">nh</span><span class="token punctuation">(</span><span class="token string">"~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="读取参数表中的参数"><a href="#读取参数表中的参数" class="headerlink" title="读取参数表中的参数"></a>读取参数表中的参数</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//读取参数表中的参数</span><span class="token comment">// 定位数据输入源 0 for vicon， 1 for 激光SLAM, 2 for gazebo ground truth, 3 for T265 ,  9 for outdoor </span>nh<span class="token punctuation">.</span>param<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"input_source"</span><span class="token punctuation">,</span> input_source<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//　程序执行频率</span>nh<span class="token punctuation">.</span>param<span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"rate_hz"</span><span class="token punctuation">,</span> rate_hz<span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//　定位设备偏移量</span>nh<span class="token punctuation">.</span>param<span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"offset_x"</span><span class="token punctuation">,</span> pos_offset<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>nh<span class="token punctuation">.</span>param<span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"offset_y"</span><span class="token punctuation">,</span> pos_offset<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>nh<span class="token punctuation">.</span>param<span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"offset_z"</span><span class="token punctuation">,</span> pos_offset<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>nh<span class="token punctuation">.</span>param<span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"offset_yaw"</span><span class="token punctuation">,</span> yaw_offset<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="订阅"><a href="#订阅" class="headerlink" title="订阅"></a>订阅</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 【订阅】cartographer估计位置</span>ros<span class="token operator">::</span>Subscriber laser_sub <span class="token operator">=</span> nh<span class="token punctuation">.</span>subscribe<span class="token operator">&lt;</span>tf2_msgs<span class="token operator">::</span>TFMessage<span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"/tf"</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> laser_cb<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 【订阅】t265估计位置</span>ros<span class="token operator">::</span>Subscriber t265_sub <span class="token operator">=</span> nh<span class="token punctuation">.</span>subscribe<span class="token operator">&lt;</span>nav_msgs<span class="token operator">::</span>Odometry<span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"/t265/odom/sample"</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> t265_cb<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 【订阅】gazebo仿真真值</span>ros<span class="token operator">::</span>Subscriber gazebo_sub <span class="token operator">=</span> nh<span class="token punctuation">.</span>subscribe<span class="token operator">&lt;</span>nav_msgs<span class="token operator">::</span>Odometry<span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"/prometheus/ground_truth/p300_basic"</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> gazebo_cb<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 【订阅】SLAM估计位姿</span>ros<span class="token operator">::</span>Subscriber slam_sub <span class="token operator">=</span> nh<span class="token punctuation">.</span>subscribe<span class="token operator">&lt;</span>geometry_msgs<span class="token operator">::</span>PoseStamped<span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"/slam/pose"</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> slam_cb<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 10秒定时打印，以确保程序在正确运行</span>ros<span class="token operator">::</span>Timer timer <span class="token operator">=</span> nh<span class="token punctuation">.</span><span class="token function">createTimer</span><span class="token punctuation">(</span>ros<span class="token operator">::</span><span class="token function">Duration</span><span class="token punctuation">(</span><span class="token number">10.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> timerCallback<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h3><h4 id="laser-cb"><a href="#laser-cb" class="headerlink" title="laser_cb"></a>laser_cb</h4><h4 id="gazebo-cb"><a href="#gazebo-cb" class="headerlink" title="gazebo_cb"></a>gazebo_cb</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">pos_drone_gazebo <span class="token operator">=</span> <span class="token class-name">Eigen</span><span class="token operator">::</span><span class="token function">Vector3d</span><span class="token punctuation">(</span>msg<span class="token operator">-></span>pose<span class="token punctuation">.</span>pose<span class="token punctuation">.</span>position<span class="token punctuation">.</span>x<span class="token punctuation">,</span> msg<span class="token operator">-></span>pose<span class="token punctuation">.</span>pose<span class="token punctuation">.</span>position<span class="token punctuation">.</span>y<span class="token punctuation">,</span> msg<span class="token operator">-></span>pose<span class="token punctuation">.</span>pose<span class="token punctuation">.</span>position<span class="token punctuation">.</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>q_gazebo <span class="token operator">=</span> <span class="token class-name">Eigen</span><span class="token operator">::</span><span class="token function">Quaterniond</span><span class="token punctuation">(</span>msg<span class="token operator">-></span>pose<span class="token punctuation">.</span>pose<span class="token punctuation">.</span>oriention<span class="token punctuation">.</span>w<span class="token punctuation">,</span> msg<span class="token operator">-></span>pose<span class="token punctuation">.</span>pose<span class="token punctuation">.</span>oriention<span class="token punctuation">.</span>x<span class="token punctuation">,</span> msg<span class="token operator">-></span>pose<span class="token punctuation">.</span>pose<span class="token punctuation">.</span>oriention<span class="token punctuation">.</span>y<span class="token punctuation">,</span> msg<span class="token operator">-></span>pose<span class="token punctuation">.</span>pose<span class="token punctuation">.</span>oriention<span class="token punctuation">.</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>Euler_gazebo <span class="token operator">=</span> <span class="token function">quaterniond_to_euler</span><span class="token punctuation">(</span>q_gazebo<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="slam-cb"><a href="#slam-cb" class="headerlink" title="slam_cb"></a>slam_cb</h4><h4 id="t265-cb"><a href="#t265-cb" class="headerlink" title="t265_cb"></a>t265_cb</h4><h4 id="timerCallback"><a href="#timerCallback" class="headerlink" title="timerCallback"></a>timerCallback</h4><h3 id="用于与mavros通讯的类，通过mavros接收来至飞控的消息【飞控-gt-mavros-gt-本程序】"><a href="#用于与mavros通讯的类，通过mavros接收来至飞控的消息【飞控-gt-mavros-gt-本程序】" class="headerlink" title="用于与mavros通讯的类，通过mavros接收来至飞控的消息【飞控-&gt;mavros-&gt;本程序】"></a>用于与mavros通讯的类，通过mavros接收来至飞控的消息【飞控-&gt;mavros-&gt;本程序】</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">state_from_mavros _state_from_mavros<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="state-from-mavros订阅的话题"><a href="#state-from-mavros订阅的话题" class="headerlink" title="state_from_mavros订阅的话题"></a>state_from_mavros订阅的话题</h4><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 【订阅】无人机当前状态 - 来自飞控</span>state_sub <span class="token operator">=</span> state_nh<span class="token punctuation">.</span>subscribe<span class="token operator">&lt;</span>mavros_msgs<span class="token operator">::</span>State<span class="token operator">></span><span class="token punctuation">(</span>uav_name <span class="token operator">+</span> <span class="token string">"/mavros/state"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>state_from_mavros<span class="token operator">::</span>state_cb<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 【订阅】无人机当前状态 - 来自飞控</span>extended_state_sub <span class="token operator">=</span> state_nh<span class="token punctuation">.</span>subscribe<span class="token operator">&lt;</span>mavros_msgs<span class="token operator">::</span>ExtendedState<span class="token operator">></span><span class="token punctuation">(</span>uav_name <span class="token operator">+</span> <span class="token string">"/mavros/extended_state"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>state_from_mavros<span class="token operator">::</span>extended_state_cb<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 【订阅】无人机当前位置 坐标系:ENU系 （此处注意，所有状态量在飞控中均为NED系，但在ros中mavros将其转换为ENU系处理。所以，在ROS中，所有和mavros交互的量都为ENU系）</span>position_sub <span class="token operator">=</span> state_nh<span class="token punctuation">.</span>subscribe<span class="token operator">&lt;</span>geometry_msgs<span class="token operator">::</span>PoseStamped<span class="token operator">></span><span class="token punctuation">(</span>uav_name <span class="token operator">+</span> <span class="token string">"/mavros/local_position/pose"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>state_from_mavros<span class="token operator">::</span>pos_cb<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 【订阅】无人机当前速度 坐标系:ENU系</span>velocity_sub <span class="token operator">=</span> state_nh<span class="token punctuation">.</span>subscribe<span class="token operator">&lt;</span>geometry_msgs<span class="token operator">::</span>TwistStamped<span class="token operator">></span><span class="token punctuation">(</span>uav_name <span class="token operator">+</span> <span class="token string">"/mavros/local_position/velocity_local"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>state_from_mavros<span class="token operator">::</span>vel_cb<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 【订阅】无人机当前欧拉角 坐标系:ENU系</span>attitude_sub <span class="token operator">=</span> state_nh<span class="token punctuation">.</span>subscribe<span class="token operator">&lt;</span>sensor_msgs<span class="token operator">::</span>Imu<span class="token operator">></span><span class="token punctuation">(</span>uav_name <span class="token operator">+</span> <span class="token string">"/mavros/imu/data"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>state_from_mavros<span class="token operator">::</span>att_cb<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 【订阅】无人机相对高度 此订阅仅针对户外实验</span>alt_sub <span class="token operator">=</span> state_nh<span class="token punctuation">.</span>subscribe<span class="token operator">&lt;</span>std_msgs<span class="token operator">::</span>Float64<span class="token operator">></span><span class="token punctuation">(</span>uav_name <span class="token operator">+</span> <span class="token string">"/mavros/global_position/rel_alt"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>state_from_mavros<span class="token operator">::</span>alt_cb<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="主循环"><a href="#主循环" class="headerlink" title="主循环"></a>主循环</h3><h4 id="send-to-fcu"><a href="#send-to-fcu" class="headerlink" title="send_to_fcu();"></a><code>send_to_fcu();</code></h4><ul><li>将采集的机载设备的定位信息及偏航角信息发送至飞控，根据参数<code>input_source</code>选择定位信息来源</li></ul><h4 id="pub-to-nodes-state-from-mavros-DroneState"><a href="#pub-to-nodes-state-from-mavros-DroneState" class="headerlink" title="pub_to_nodes(_state_from_mavros._DroneState);"></a><code>pub_to_nodes(_state_from_mavros._DroneState);</code></h4><ul><li>发布无人机状态至其他节点  </li><li>发布无人机当前<code>odometry</code>,用于导航及<code>rviz</code>显示</li><li>发布无人机运动轨迹，用于<code>rviz</code>显示<center><img src="/2021/03/26/%E5%A4%9A%E6%97%8B%E7%BF%BC-PX4-pos-estimator/PX4.png#pic_center" width="100%" height="100%" alt="test"><br><div style="color:orange; border-bottom: 1px solid #d9d9d9;display: inline-block;color: #999;padding: 2px;">rqt_graph</div></center></li></ul>]]></content>
      
      
      <categories>
          
          <category> 多旋翼 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多旋翼 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PX4_sender</title>
      <link href="2021/03/26/%E5%A4%9A%E6%97%8B%E7%BF%BC-PX4-sender/"/>
      <url>2021/03/26/%E5%A4%9A%E6%97%8B%E7%BF%BC-PX4-sender/</url>
      
        <content type="html"><![CDATA[<!-- toc --><h2 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">float</span> cur_time<span class="token punctuation">;</span>         <span class="token comment">//程序运行时间</span><span class="token keyword">float</span> Takeoff_height<span class="token punctuation">;</span>   <span class="token comment">//默认起飞高度</span><span class="token keyword">float</span> Disarm_height<span class="token punctuation">;</span>    <span class="token comment">//自动上锁高度</span><span class="token keyword">float</span> Land_speed<span class="token punctuation">;</span>       <span class="token comment">//降落速度</span><span class="token keyword">int</span> Land_mode<span class="token punctuation">;</span>          <span class="token comment">//降落策略选择</span>Eigen<span class="token operator">::</span>Vector2f geo_fence_x<span class="token punctuation">;</span>        <span class="token comment">//地理围栏</span>Eigen<span class="token operator">::</span>Vector2f geo_fence_y<span class="token punctuation">;</span>Eigen<span class="token operator">::</span>Vector2f geo_fence_z<span class="token punctuation">;</span>Eigen<span class="token operator">::</span>Vector3d Takeoff_position<span class="token punctuation">;</span>   <span class="token comment">// 起飞位置</span>prometheus_msgs<span class="token operator">::</span>DroneState _DroneState<span class="token punctuation">;</span>    <span class="token comment">//无人机状态量</span>prometheus_msgs<span class="token operator">::</span>ControlCommand Command_Now<span class="token punctuation">;</span>    <span class="token comment">//无人机当前执行命令</span>prometheus_msgs<span class="token operator">::</span>ControlCommand Command_Last<span class="token punctuation">;</span>   <span class="token comment">//无人机上一条执行命令</span>Eigen<span class="token operator">::</span>Vector3d <span class="token function">state_sp</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Eigen<span class="token operator">::</span>Vector3d <span class="token function">state_sp_extra</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">double</span> yaw_sp<span class="token punctuation">;</span><span class="token keyword">double</span> yaw_rate_sp<span class="token punctuation">;</span>prometheus_msgs<span class="token operator">::</span>Message message<span class="token punctuation">;</span>prometheus_msgs<span class="token operator">::</span>LogMessageControl LogMessage<span class="token punctuation">;</span><span class="token comment">//RVIZ显示：期望位置</span>geometry_msgs<span class="token operator">::</span>PoseStamped ref_pose_rviz<span class="token punctuation">;</span><span class="token keyword">float</span> dt <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>ros<span class="token operator">::</span>Publisher rivz_ref_pose_pub<span class="token punctuation">;</span>ros<span class="token operator">::</span>Publisher message_pub<span class="token punctuation">;</span>ros<span class="token operator">::</span>Publisher log_message_pub<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="订阅"><a href="#订阅" class="headerlink" title="订阅"></a>订阅</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 【订阅】为任务模块生成的控制指令(来自terminal_control.cpp)</span>ros<span class="token operator">::</span>Subscriber Command_sub <span class="token operator">=</span> nh<span class="token punctuation">.</span>subscribe<span class="token operator">&lt;</span>prometheus_msgs<span class="token operator">::</span>ControlCommand<span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"/prometheus/control_command"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> Command_cb<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 本话题为Prometheus地面站发送的控制指令</span>ros<span class="token operator">::</span>Subscriber station_command_sub <span class="token operator">=</span> nh<span class="token punctuation">.</span>subscribe<span class="token operator">&lt;</span>prometheus_msgs<span class="token operator">::</span>ControlCommand<span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"/prometheus/control_command_station"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> station_command_cb<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//【订阅】无人机状态(来自px4_pos_estimator.cpp)</span>ros<span class="token operator">::</span>Subscriber drone_state_sub <span class="token operator">=</span> nh<span class="token punctuation">.</span>subscribe<span class="token operator">&lt;</span>prometheus_msgs<span class="token operator">::</span>DroneState<span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"/prometheus/drone_state"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> drone_state_cb<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="发布"><a href="#发布" class="headerlink" title="发布"></a>发布</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 【发布】参考位姿 RVIZ显示用</span>rivz_ref_pose_pub <span class="token operator">=</span> nh<span class="token punctuation">.</span>advertise<span class="token operator">&lt;</span>geometry_msgs<span class="token operator">::</span>PoseStamped<span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"/prometheus/control/ref_pose_rviz"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 【发布】用于地面站显示的提示消息</span>message_pub <span class="token operator">=</span> nh<span class="token punctuation">.</span>advertise<span class="token operator">&lt;</span>prometheus_msgs<span class="token operator">::</span>Message<span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"/prometheus/message/main"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 【发布】用于log的消息</span>log_message_pub <span class="token operator">=</span> nh<span class="token punctuation">.</span>advertise<span class="token operator">&lt;</span>prometheus_msgs<span class="token operator">::</span>LogMessageControl<span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"/prometheus/log/control"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 参数读取</span>nh<span class="token punctuation">.</span>param<span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"Takeoff_height"</span><span class="token punctuation">,</span> Takeoff_height<span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>nh<span class="token punctuation">.</span>param<span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"Disarm_height"</span><span class="token punctuation">,</span> Disarm_height<span class="token punctuation">,</span> <span class="token number">0.15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>nh<span class="token punctuation">.</span>param<span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"Land_speed"</span><span class="token punctuation">,</span> Land_speed<span class="token punctuation">,</span> <span class="token number">0.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>nh<span class="token punctuation">.</span>param<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"Land_mode"</span><span class="token punctuation">,</span>Land_mode<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>nh<span class="token punctuation">.</span>param<span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"geo_fence/x_min"</span><span class="token punctuation">,</span> geo_fence_x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">100.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>nh<span class="token punctuation">.</span>param<span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"geo_fence/x_max"</span><span class="token punctuation">,</span> geo_fence_x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">100.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>nh<span class="token punctuation">.</span>param<span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"geo_fence/y_min"</span><span class="token punctuation">,</span> geo_fence_y<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">100.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>nh<span class="token punctuation">.</span>param<span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"geo_fence/y_max"</span><span class="token punctuation">,</span> geo_fence_y<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">100.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>nh<span class="token punctuation">.</span>param<span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"geo_fence/z_min"</span><span class="token punctuation">,</span> geo_fence_z<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">100.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>nh<span class="token punctuation">.</span>param<span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token string">"geo_fence/z_max"</span><span class="token punctuation">,</span> geo_fence_z<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">100.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 设定起飞位置</span>Takeoff_position<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>Takeoff_position<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.0</span><span class="token punctuation">;</span>Takeoff_position<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0.15</span><span class="token punctuation">;</span><span class="token comment">// 建议控制频率: 10 - 50Hz, 控制频率取决于控制形式，若控制方式为速度或加速度应适当提高频率</span>ros<span class="token operator">::</span>Rate <span class="token function">rate</span><span class="token punctuation">(</span><span class="token number">20.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="用于与mavros通讯的类，通过mavros发送控制指令至飞控【本程序-gt-mavros-gt-飞控】"><a href="#用于与mavros通讯的类，通过mavros发送控制指令至飞控【本程序-gt-mavros-gt-飞控】" class="headerlink" title="用于与mavros通讯的类，通过mavros发送控制指令至飞控【本程序-&gt;mavros-&gt;飞控】"></a>用于与mavros通讯的类，通过mavros发送控制指令至飞控【本程序-&gt;mavros-&gt;飞控】</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">command_to_mavros _command_to_mavros<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 【订阅】无人机期望位置/速度/加速度 坐标系:ENU系 本话题来自飞控</span>position_target_sub <span class="token operator">=</span> command_nh<span class="token punctuation">.</span>subscribe<span class="token operator">&lt;</span>mavros_msgs<span class="token operator">::</span>PositionTarget<span class="token operator">></span><span class="token punctuation">(</span>uav_name <span class="token operator">+</span> <span class="token string">"/mavros/setpoint_raw/target_local"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>command_to_mavros<span class="token operator">::</span>pos_target_cb<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 【订阅】无人机期望角度/角速度 坐标系:ENU系 本话题来自飞控</span>attitude_target_sub <span class="token operator">=</span> command_nh<span class="token punctuation">.</span>subscribe<span class="token operator">&lt;</span>mavros_msgs<span class="token operator">::</span>AttitudeTarget<span class="token operator">></span><span class="token punctuation">(</span>uav_name <span class="token operator">+</span> <span class="token string">"/mavros/setpoint_raw/target_attitude"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>command_to_mavros<span class="token operator">::</span>att_target_cb<span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 【发布】位置/速度/加速度期望值至飞控 坐标系 ENU系</span>advertise<span class="token operator">&lt;</span>mavros_msgs<span class="token operator">::</span>PositionTarget<span class="token operator">></span><span class="token punctuation">(</span>uav_name <span class="token operator">+</span> <span class="token string">"/mavros/setpoint_raw/local"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 【发布】角度/角速度期望值至飞控 坐标系 ENU系</span>setpoint_raw_attitude_pub <span class="token operator">=</span> command_nh<span class="token punctuation">.</span>advertise<span class="token operator">&lt;</span>mavros_msgs<span class="token operator">::</span>AttitudeTarget<span class="token operator">></span><span class="token punctuation">(</span>uav_name <span class="token operator">+</span> <span class="token string">"/mavros/setpoint_raw/attitude"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 【发布】底层控制量（Mx My Mz 及 F） [0][1][2][3]分别对应 roll pitch yaw控制量及油门推力注意这里是NED系的！！</span>actuator_setpoint_pub <span class="token operator">=</span> command_nh<span class="token punctuation">.</span>advertise<span class="token operator">&lt;</span>mavros_msgs<span class="token operator">::</span>ActuatorControl<span class="token operator">></span><span class="token punctuation">(</span>uav_name <span class="token operator">+</span> <span class="token string">"/mavros/actuator_control"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 【发布】本话题要发送至飞控(通过Mavros_extra功能包 /plugins/mount_control.cpp发送)</span>mount_control_pub <span class="token operator">=</span> command_nh<span class="token punctuation">.</span>advertise<span class="token operator">&lt;</span>mavros_msgs<span class="token operator">::</span>MountControl<span class="token operator">></span><span class="token punctuation">(</span>uav_name <span class="token operator">+</span> <span class="token string">"/mavros/mount_control/command"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="主循环"><a href="#主循环" class="headerlink" title="主循环"></a>主循环</h2><ul><li><p>Idle</p></li><li><p>Takeoff</p></li><li><p>Hold</p></li><li><p>Land</p></li><li><p>Move</p></li><li><p>Disarm</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 多旋翼 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多旋翼 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Prometheus</title>
      <link href="2021/03/26/%E5%A4%9A%E6%97%8B%E7%BF%BC-Prometheus/"/>
      <url>2021/03/26/%E5%A4%9A%E6%97%8B%E7%BF%BC-Prometheus/</url>
      
        <content type="html"><![CDATA[<h2 id="Control模块"><a href="#Control模块" class="headerlink" title="Control模块"></a>Control模块</h2><ul><li><code>Idle</code>：怠速；意思就是飞机会进入offboard模式，但是在该模式下，没有对飞机进行任何指令的发送。飞机也不会有任何动作。这个指令一般也可以不用。</li><li><code>Takeoff</code>：起飞；起飞点为当前点，起飞高度通过 yaml参数设置，单位是米，默认起飞高度是0.5m</li><li><code>Hold</code>：悬停；飞机正在飞行过程中如果接受到 2 指令，会在当前时刻进入悬停状态。</li><li><code>Land</code>：降落；降落速度通过 yaml参数设置，单位是m/s ，默认降落速度为0.2m/s 。还有一个 上锁高度 到达上锁高度之后飞机会进入飞控的本身降落模式进而缓缓着地，上锁高度通过 yaml 参数进行设置，单位是米，默认是 0.18m，即认为离地不到20cm的时候进入飞控本身的降落飞行模式。</li><li><code>Move</code>模式；该模式就包含我们所称的指点飞行功能，在此模式下，又有5种子模式，</li><li><code>XYZ_POS</code>, 空间位置控制</li><li><code>XY_POS_Z_VEL</code>, 水平面位置控制高度速度控制</li><li><code>XY_VEL_Z_POS</code>, 水平面速度控制高度定高控制</li><li><code>XYZ_VEL</code>, 空间速度控制</li><li><code>TRAJECTORY</code>, 轨迹跟踪控制</li></ul><h2 id="Common模块"><a href="#Common模块" class="headerlink" title="Common模块"></a>Common模块</h2><p>公用模块中比较核心的就是自定义的<code>msg</code>消息</p><ul><li><code>ControlCommand.msg</code>：控制无人机指令的msg格式，掌握API首先掌握msg定义</li><li><code>DetectionInfo.msg</code>：目标检测模块的输出结果</li><li><code>DroneState.msg</code>：无人机当下各个状态信息（与板载计算机是否通信连接，解锁或者上锁，当前飞行模式，当前的状态量位置速度加速度及姿态）</li><li><code>LogMessageControl.msg</code>：控制端的日志打印信息记录</li></ul>]]></content>
      
      
      <categories>
          
          <category> 多旋翼 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多旋翼 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Prometheus_msgs</title>
      <link href="2021/03/26/%E5%A4%9A%E6%97%8B%E7%BF%BC-Prometheus-msg/"/>
      <url>2021/03/26/%E5%A4%9A%E6%97%8B%E7%BF%BC-Prometheus-msg/</url>
      
        <content type="html"><![CDATA[<!-- toc --><h2 id="prometheus-msgs-DroneState"><a href="#prometheus-msgs-DroneState" class="headerlink" title="prometheus_msgs/DroneState"></a>prometheus_msgs/DroneState</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">$ rosmsg show prometheus_msgs<span class="token operator">/</span>DroneState std_msgs<span class="token operator">/</span>Header header  uint32 seq  time stamp  string frame_idstring mode     <span class="token comment">// 模式选择，来自"/mavros/state"话题，类型是mavros_msgs::State</span><span class="token keyword">bool</span> connected  <span class="token comment">// 是否连接，来自"/mavros/state"话题，类型是mavros_msgs::State</span><span class="token keyword">bool</span> armed      <span class="token comment">// 是否解锁，来自"/mavros/state"话题，类型是mavros_msgs::State</span><span class="token keyword">bool</span> landed     <span class="token comment">// 是否降落，来自"/mavros/extended_state"，类型是mavros_msgs::ExtendedState</span>float32 time_from_startfloat32<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> position <span class="token comment">// 位置，来自"/mavros/local_position/pose"，类型是geometry_msgs::PoseStamped</span>float32 rel_altfloat32<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> velocity <span class="token comment">// 速度，来自"/mavros/local_position/velocity_local"，类型是geometry_msgs::TwistStamped</span>float32<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> attitude <span class="token comment">// 姿态欧拉角，来自"/mavros/Imu/data"，由四元数转换而来</span>geometry_msgs<span class="token operator">/</span>Quaternion attitude_q <span class="token comment">//姿态四元数，来自"/mavros/Imu/data"，类型是sensor_msgs::Imu里面的orientation</span>  float64 x  float64 y  float64 z  float64 wfloat32<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> attitude_rate    <span class="token comment">// 角速度，来自"/mavros/Imu/data"，类型是sensor_msgs::Imu里面的angular_velocity</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="prometheus-msgs-Message"><a href="#prometheus-msgs-Message" class="headerlink" title="prometheus_msgs/Message"></a>prometheus_msgs/Message</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">$ rosmsg show prometheus_msgs<span class="token operator">/</span>Message std_msgs<span class="token operator">/</span>Header header  uint32 seq  time stamp  string frame_iduint8 message_type          <span class="token comment">// 节点回传地面站的消息</span>uint8 NORMAL<span class="token operator">=</span><span class="token number">0</span>              <span class="token comment">// enum message_type</span>uint8 WARN<span class="token operator">=</span><span class="token number">1</span>uint8 ERROR<span class="token operator">=</span><span class="token number">2</span>string source_nodestring content$ rosmsg show nav_msgs<span class="token operator">/</span>Odometry std_msgs<span class="token operator">/</span>Header header  uint32 seq  time stamp  string frame_idstring child_frame_idgeometry_msgs<span class="token operator">/</span>PoseWithCovariance pose  geometry_msgs<span class="token operator">/</span>Pose pose    geometry_msgs<span class="token operator">/</span>Point position      float64 x      float64 y      float64 z    geometry_msgs<span class="token operator">/</span>Quaternion orientation      float64 x      float64 y      float64 z      float64 w  float64<span class="token punctuation">[</span><span class="token number">36</span><span class="token punctuation">]</span> covariancegeometry_msgs<span class="token operator">/</span>TwistWithCovariance twist  geometry_msgs<span class="token operator">/</span>Twist twist    geometry_msgs<span class="token operator">/</span>Vector3 linear      float64 x      float64 y      float64 z    geometry_msgs<span class="token operator">/</span>Vector3 angular      float64 x      float64 y      float64 z  float64<span class="token punctuation">[</span><span class="token number">36</span><span class="token punctuation">]</span> covariance<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="prometheus-msgs-ControlCommand"><a href="#prometheus-msgs-ControlCommand" class="headerlink" title="prometheus_msgs/ControlCommand"></a>prometheus_msgs/ControlCommand</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">$ rosmsg show prometheus_msgs<span class="token operator">/</span>ControlCommand uint8 Idle<span class="token operator">=</span><span class="token number">0</span>uint8 Takeoff<span class="token operator">=</span><span class="token number">1</span>uint8 Hold<span class="token operator">=</span><span class="token number">2</span>uint8 Land<span class="token operator">=</span><span class="token number">3</span>uint8 Move<span class="token operator">=</span><span class="token number">4</span>uint8 Disarm<span class="token operator">=</span><span class="token number">5</span>uint8 User_Mode1<span class="token operator">=</span><span class="token number">6</span>uint8 User_Mode2<span class="token operator">=</span><span class="token number">7</span>std_msgs<span class="token operator">/</span>Header header  uint32 seq  time stamp  string frame_iduint32 Command_IDstring sourceuint8 Modeprometheus_msgs<span class="token operator">/</span>PositionReference Reference_State  uint8 XYZ_POS<span class="token operator">=</span><span class="token number">0</span>  uint8 XY_POS_Z_VEL<span class="token operator">=</span><span class="token number">1</span>  uint8 XY_VEL_Z_POS<span class="token operator">=</span><span class="token number">2</span>  uint8 XYZ_VEL<span class="token operator">=</span><span class="token number">3</span>  uint8 XYZ_ACC<span class="token operator">=</span><span class="token number">4</span>  uint8 TRAJECTORY<span class="token operator">=</span><span class="token number">5</span>  uint8 ENU_FRAME<span class="token operator">=</span><span class="token number">0</span>  uint8 BODY_FRAME<span class="token operator">=</span><span class="token number">1</span>  uint8 MIX_FRAME<span class="token operator">=</span><span class="token number">2</span>  std_msgs<span class="token operator">/</span>Header header    uint32 seq    time stamp    string frame_id  uint8 Move_mode  uint8 Move_frame  float32 time_from_start  float32<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> position_ref  float32<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> velocity_ref  float32<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> acceleration_ref  <span class="token keyword">bool</span> Yaw_Rate_Mode  float32 yaw_ref  float32 yaw_rate_ref<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="prometheus-msgs-PositionReference"><a href="#prometheus-msgs-PositionReference" class="headerlink" title="prometheus_msgs/PositionReference"></a>prometheus_msgs/PositionReference</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">$ rosmsg show prometheus_msgs<span class="token operator">/</span>PositionReferenceuint8 XYZ_POS<span class="token operator">=</span><span class="token number">0</span>uint8 XY_POS_Z_VEL<span class="token operator">=</span><span class="token number">1</span>uint8 XY_VEL_Z_POS<span class="token operator">=</span><span class="token number">2</span>uint8 XYZ_VEL<span class="token operator">=</span><span class="token number">3</span>uint8 XYZ_ACC<span class="token operator">=</span><span class="token number">4</span>uint8 TRAJECTORY<span class="token operator">=</span><span class="token number">5</span>uint8 ENU_FRAME<span class="token operator">=</span><span class="token number">0</span>uint8 BODY_FRAME<span class="token operator">=</span><span class="token number">1</span>uint8 MIX_FRAME<span class="token operator">=</span><span class="token number">2</span>std_msgs<span class="token operator">/</span>Header header  uint32 seq  time stamp  string frame_iduint8 Move_modeuint8 Move_framefloat32 time_from_startfloat32<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> position_reffloat32<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> velocity_reffloat32<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> acceleration_ref<span class="token keyword">bool</span> Yaw_Rate_Modefloat32 yaw_reffloat32 yaw_rate_ref<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 多旋翼 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 多旋翼 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++指针</title>
      <link href="2021/03/25/C-C-%E6%8C%87%E9%92%88/"/>
      <url>2021/03/25/C-C-%E6%8C%87%E9%92%88/</url>
      
        <content type="html"><![CDATA[<!-- toc --><h2 id="指针大小"><a href="#指针大小" class="headerlink" title="指针大小"></a>指针大小</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>        cout <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token number">4</span><span class="token number">1</span><span class="token number">8</span><span class="token number">8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可见不管是什么类型的指针，大小都是<strong>8个字节</strong></p><h2 id="const指针"><a href="#const指针" class="headerlink" title="const指针"></a>const指针</h2><h3 id="指向常量的指针"><a href="#指向常量的指针" class="headerlink" title="指向常量的指针"></a>指向常量的指针</h3><ol><li><code>const</code>修饰的是<code>int</code>，说明<code>int</code>是常量不可修改，不能通过指针修改他的值，但可以指向别处</li><li>指针指向的对象可以不是<code>const</code>，但是还是不能用指针去修改他，可以用其他方法修改</li><li>必须用<code>const void*</code>才能指向<code>const</code>对象</li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">*</span> pInteger<span class="token punctuation">;</span>    <span class="token comment">// int const* pInteger;</span><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>           <span class="token comment">// 不是const</span>pInteger <span class="token operator">=</span> <span class="token operator">&amp;</span>num<span class="token punctuation">;</span><span class="token comment">// *pInteger = 100;// error, 不能用指针修改常量</span>num <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>               <span class="token comment">// yes，可以用其他方法修改</span><span class="token keyword">int</span> another <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>pInteger <span class="token operator">=</span> <span class="token operator">&amp;</span>another<span class="token punctuation">;</span>    <span class="token comment">// yes，可以改变指针指向</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">char</span> ch <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">;</span><span class="token comment">// void* p = &amp;ch;   //error</span><span class="token keyword">const</span> <span class="token keyword">void</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token operator">&amp;</span>ch<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="常指针、const指针"><a href="#常指针、const指针" class="headerlink" title="常指针、const指针"></a>常指针、const指针</h3><ol><li><code>const</code>修饰的是指针，说明指针是常数，所以他存储的地址不能变，也就是不能改变指向，可以通过指针改变指向对象的值</li><li>常指针必须进行初始化</li><li>常指针不能指向<code>const</code>变量</li></ol><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">// const int num = 10;  // error，const int* -> int*</span><span class="token keyword">int</span><span class="token operator">*</span> <span class="token keyword">const</span> pInt <span class="token operator">=</span> <span class="token operator">&amp;</span>num<span class="token punctuation">;</span> <span class="token keyword">int</span> another <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token comment">// pInt = &amp;another;     // error, 常指针不能修改指向</span><span class="token operator">*</span>pInt <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>            <span class="token comment">// yes，变量不是const，可以改变他的值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="指向常量的常指针"><a href="#指向常量的常指针" class="headerlink" title="指向常量的常指针"></a>指向常量的常指针</h2><ul><li>只能指向<code>const</code>变量</li></ul><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">const</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">int</span><span class="token operator">*</span> <span class="token keyword">const</span> ptr <span class="token operator">=</span> <span class="token operator">&amp;</span>num<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> C++ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CMakeForOpenCV</title>
      <link href="2021/03/21/OpenCV-CMakeForOpenCV/"/>
      <url>2021/03/21/OpenCV-CMakeForOpenCV/</url>
      
        <content type="html"><![CDATA[<!-- toc --><h2 id="g-编译-OpenCV"><a href="#g-编译-OpenCV" class="headerlink" title="g++ 编译 OpenCV"></a>g++ 编译 OpenCV</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">g++ main.cpp -I D:/software/opencv/opencv/build/x64/mingw/install/include -L D:/software/opencv/opencv/build/x64/mingw/install/x64/mingw/lib -l libopencv_calib3d450 -l libopencv_core450 -l libopencv_dnn450 -l libopencv_features2d450 -l libopencv_flann450 -l libopencv_gapi450 -l libopencv_highgui450 -l libopencv_imgcodecs450 -l libopencv_imgproc450 -l libopencv_ml450 -l libopencv_objdetect450 -l libopencv_photo450 -l libopencv_stitching450 -l libopencv_video450 -l libopencv_videoio450 -l libopencv_world450 -o main.exe <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Ubuntu可以用-pkg-config"><a href="#Ubuntu可以用-pkg-config" class="headerlink" title="Ubuntu可以用 pkg_config"></a>Ubuntu可以用 pkg_config</h2><p><strong>查看OpenCV路径和库</strong><br><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ pkg-config --cflags --libs opencv -I/usr/local/include/opencv -I/usr/local/include -L/usr/local/lib -lopencv_dnn -lopencv_ml -lopencv_objdetect -lopencv_shape -lopencv_stitching -lopencv_superres -lopencv_videostab -lopencv_calib3d -lopencv_features2d -lopencv_highgui -lopencv_videoio -lopencv_imgcodecs -lopencv_video -lopencv_photo -lopencv_imgproc -lopencv_flann -lopencv_viz -lopencv_coreg++ main.cpp -o main <span class="token variable"><span class="token variable">`</span>pkg-config --cflags --libs opencv<span class="token variable">`</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></p><h2 id="CMake-编译-OpenCV"><a href="#CMake-编译-OpenCV" class="headerlink" title="CMake 编译 OpenCV"></a>CMake 编译 OpenCV</h2><pre class="line-numbers language-cmake" data-language="cmake"><code class="language-cmake"><span class="token keyword">find_package</span><span class="token punctuation">(</span>OpenCV REQUIRED<span class="token punctuation">)</span><span class="token keyword">message</span><span class="token punctuation">(</span><span class="token string">"<span class="token interpolation"><span class="token punctuation">$&#123;</span><span class="token variable">OpenCV_INCLUDE_DIRS</span><span class="token punctuation">&#125;</span></span>"</span><span class="token punctuation">)</span><span class="token comment"># /usr/local/include</span><span class="token keyword">message</span><span class="token punctuation">(</span><span class="token string">"<span class="token interpolation"><span class="token punctuation">$&#123;</span><span class="token variable">OpenCV_LIBRARY_DIRS</span><span class="token punctuation">&#125;</span></span>"</span><span class="token punctuation">)</span><span class="token comment"># /usr/local/include/opencv</span><span class="token keyword">message</span><span class="token punctuation">(</span><span class="token string">"<span class="token interpolation"><span class="token punctuation">$&#123;</span><span class="token variable">OpenCV_LIBS</span><span class="token punctuation">&#125;</span></span>"</span><span class="token punctuation">)</span><span class="token comment"># opencv_calib3d;opencv_core;...</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_CXX_FLAGS</span> <span class="token string">"<span class="token interpolation"><span class="token punctuation">$&#123;</span><span class="token variable">CMAKE_CXX_FLAGS</span><span class="token punctuation">&#125;</span></span>"</span><span class="token punctuation">)</span><span class="token keyword">set</span><span class="token punctuation">(</span><span class="token variable">CMAKE_BUILD_TYPE</span> Debug<span class="token punctuation">)</span><span class="token comment"># 头文件目录</span><span class="token keyword">include_directories</span><span class="token punctuation">(</span><span class="token punctuation">$&#123;</span>OpenCV_INCLUDE_DIRS<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment"># 库文件目录</span><span class="token keyword">link_directories</span><span class="token punctuation">(</span><span class="token punctuation">$&#123;</span>OpenCV_LIBRARY_DIRS<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">add_executable</span><span class="token punctuation">(</span>main main.cpp<span class="token punctuation">)</span><span class="token comment">#链接</span><span class="token keyword">target_link_libraries</span><span class="token punctuation">(</span>main <span class="token punctuation">$&#123;</span>OpenCV_LIBS<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> OpenCV </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CMake </tag>
            
            <tag> OpenCV </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Eigen_1</title>
      <link href="2021/03/21/Eigen-Eigen-1/"/>
      <url>2021/03/21/Eigen-Eigen-1/</url>
      
        <content type="html"><![CDATA[<!-- toc --><h2 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h2><p>(1) 矩阵类型</p><p><mark><strong>MatrixSizeType</strong></mark> where Size can be 2,3,4 for fixed size square matrices or X for dynamic size, and where Type can be i for integer, f for float, d for double, cf for complex float, cd for complex double.</p><p><code>Matrix3d</code>: <em>double</em> 3X3 方阵<br><code>MatrixXf</code>: <em>float</em> 动态大小</p><p>(2) 向量类型<br><mark><strong>VectorSizeType</strong></mark>: 列向量<br><mark><strong>RowVectorSizeType</strong></mark>: 行向量<br><code>Vector4f</code>: <em>float</em> 4行的列向量</p><h2 id="零矩阵"><a href="#零矩阵" class="headerlink" title="零矩阵"></a>零矩阵</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token class-name">MatrixXd</span><span class="token operator">::</span><span class="token function">Zero</span><span class="token punctuation">(</span>rows<span class="token punctuation">,</span>cols<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="随机矩阵"><a href="#随机矩阵" class="headerlink" title="随机矩阵"></a>随机矩阵</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token class-name">MatrixXd</span><span class="token operator">::</span><span class="token function">Random</span><span class="token punctuation">(</span>rows<span class="token punctuation">,</span>cols<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="常数矩阵"><a href="#常数矩阵" class="headerlink" title="常数矩阵"></a>常数矩阵</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token class-name">MatrixXd</span><span class="token operator">::</span><span class="token function">Constant</span><span class="token punctuation">(</span>rows<span class="token punctuation">,</span>cols<span class="token punctuation">,</span>constant<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="单位矩阵"><a href="#单位矩阵" class="headerlink" title="单位矩阵"></a>单位矩阵</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token class-name">MatrixXd</span><span class="token operator">::</span><span class="token function">Identity</span><span class="token punctuation">(</span>rows<span class="token punctuation">,</span>cols<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;Eigen/Dense></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> Eigen<span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    Eigen<span class="token operator">::</span>MatrixXd q <span class="token operator">=</span> Eigen<span class="token operator">::</span><span class="token class-name">MatrixXd</span><span class="token operator">::</span><span class="token function">Zero</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> q <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    # <span class="token number">0</span> <span class="token number">0</span>    # <span class="token number">0</span> <span class="token number">0</span>        q<span class="token punctuation">.</span><span class="token function">resize</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 仅限于0矩阵，其他会出大问题</span>    cout <span class="token operator">&lt;&lt;</span> q<span class="token punctuation">.</span><span class="token function">rows</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment">// 4</span>    cout <span class="token operator">&lt;&lt;</span> q<span class="token punctuation">.</span><span class="token function">cols</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment">// 4</span>    cout <span class="token operator">&lt;&lt;</span> q <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    # <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span>    # <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span>    # <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span>    # <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token number">0</span>    MatrixXd m2 <span class="token operator">=</span> <span class="token class-name">MatrixXd</span><span class="token operator">::</span><span class="token function">Random</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> m2 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    # <span class="token number">0.680375</span> <span class="token number">0.59688</span> <span class="token operator">-</span><span class="token number">0.329554</span>    # <span class="token operator">-</span><span class="token number">0.211234</span> <span class="token number">0.823295</span> <span class="token number">0.536459</span>    # <span class="token number">0.566198</span> <span class="token operator">-</span><span class="token number">0.604897</span> <span class="token operator">-</span><span class="token number">0.444451</span>    MatrixXd m3 <span class="token operator">=</span> <span class="token class-name">MatrixXd</span><span class="token operator">::</span><span class="token function">Constant</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> m3 <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    # <span class="token number">1.2</span> <span class="token number">1.2</span> <span class="token number">1.2</span>    # <span class="token number">1.2</span> <span class="token number">1.2</span> <span class="token number">1.2</span>    # <span class="token number">1.2</span> <span class="token number">1.2</span> <span class="token number">1.2</span>        VectorXd <span class="token function">v</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    v <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> v <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    # <span class="token number">1</span>    # <span class="token number">2</span>        cout <span class="token operator">&lt;&lt;</span> m<span class="token operator">*</span>v <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment">// 矩阵和向量相乘</span>    # <span class="token number">5</span>    # <span class="token number">11</span>    MatrixXd m4 <span class="token operator">=</span> <span class="token class-name">MatrixXd</span><span class="token operator">::</span><span class="token function">Identity</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 1 0 0 0</span>    <span class="token comment">// 0 1 0 0</span>    <span class="token comment">// 0 0 1 0</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Eigen </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Eigen_2</title>
      <link href="2021/03/21/Eigen-Eigen-2/"/>
      <url>2021/03/21/Eigen-Eigen-2/</url>
      
        <content type="html"><![CDATA[<!-- toc --><h2 id="转置矩阵"><a href="#转置矩阵" class="headerlink" title="转置矩阵"></a>转置矩阵</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">matrix<span class="token punctuation">.</span><span class="token function">transpose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="共轭矩阵"><a href="#共轭矩阵" class="headerlink" title="共轭矩阵"></a>共轭矩阵</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">matrix<span class="token punctuation">.</span><span class="token function">conjugate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="伴随矩阵-共轭转置"><a href="#伴随矩阵-共轭转置" class="headerlink" title="伴随矩阵(共轭转置)"></a>伴随矩阵(共轭转置)</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">matrix<span class="token punctuation">.</span><span class="token function">adjoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="逆矩阵"><a href="#逆矩阵" class="headerlink" title="逆矩阵"></a>逆矩阵</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">matrix<span class="token punctuation">.</span><span class="token function">inverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="块操作"><a href="#块操作" class="headerlink" title="块操作"></a>块操作</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">matrix<span class="token punctuation">.</span><span class="token function">block</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>p<span class="token punctuation">,</span>q<span class="token punctuation">)</span><span class="token comment">// 起始于(i,j),提取块大小为(p,q)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="行列式"><a href="#行列式" class="headerlink" title="行列式"></a>行列式</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">matrix<span class="token punctuation">.</span><span class="token function">determinant</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;Eigen/Dense></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> Eigen<span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    MatrixXd <span class="token function">p</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    p <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span>         <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span>         <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">.</span><span class="token function">transpose</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment">// 1 4 7</span>    <span class="token comment">// 2 1 8</span>    <span class="token comment">// 3 6 1</span>    cout <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">.</span><span class="token function">inverse</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment">// -0.451923   0.211538  0.0865385</span>    <span class="token comment">// 0.365385  -0.192308  0.0576923</span>    <span class="token comment">// 0.240385  0.0576923 -0.0673077</span>    cout <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">.</span><span class="token function">conjugate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment">// 1 2 3    共轭矩阵，实数的共轭就是本身</span>    <span class="token comment">// 4 1 6</span>    <span class="token comment">// 7 8 1</span>    cout <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">.</span><span class="token function">adjoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment">// 1 4 7    伴随矩阵，转置+共轭</span>    <span class="token comment">// 2 1 8</span>    <span class="token comment">// 3 6 1</span>    cout <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">.</span><span class="token function">block</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">.</span>block<span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment">// 4</span>    <span class="token comment">// 7</span>    cout <span class="token operator">&lt;&lt;</span> p<span class="token punctuation">.</span><span class="token function">determinant</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment">// 104</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Eigen </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Eigen_Quaternion</title>
      <link href="2021/03/21/Eigen-Eigen-Quaternion/"/>
      <url>2021/03/21/Eigen-Eigen-Quaternion/</url>
      
        <content type="html"><![CDATA[<!-- toc --><h2 id="旋转向量到旋转矩阵"><a href="#旋转向量到旋转矩阵" class="headerlink" title="旋转向量到旋转矩阵"></a>旋转向量到旋转矩阵</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">double</span> alpha <span class="token operator">=</span> M_PI <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">;</span>AngleAxisd <span class="token function">rotation_vector</span><span class="token punctuation">(</span>alpha<span class="token punctuation">,</span> <span class="token function">Vector3d</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// x轴: 1 0 0</span><span class="token comment">// y轴: 0 1 0</span><span class="token comment">// z轴: 0 0 1</span>MatrixXd rotation_matrix<span class="token punctuation">;</span>rotation_matrix <span class="token operator">=</span> rotation_vector<span class="token punctuation">.</span><span class="token function">matrix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// rotation_matrix = rotation_vector.toRotationMatrix();</span>cout <span class="token operator">&lt;&lt;</span> rotation_matrix <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">// 1         0         0</span><span class="token comment">// 0       0.5 -0.866025</span><span class="token comment">// 0  0.866025       0.5</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="旋转向量到欧拉角"><a href="#旋转向量到欧拉角" class="headerlink" title="旋转向量到欧拉角"></a>旋转向量到欧拉角</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Vector3d eulerAngle <span class="token operator">=</span> rotation_vector<span class="token punctuation">.</span><span class="token function">matrix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eulerAngles</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// ZYX: 2, 1, 0</span>cout <span class="token operator">&lt;&lt;</span> eulerAngle <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//      0</span><span class="token comment">//     -0</span><span class="token comment">// 1.0472</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="旋转向量到四元数"><a href="#旋转向量到四元数" class="headerlink" title="旋转向量到四元数"></a>旋转向量到四元数</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Quaterniond <span class="token function">quaternion</span><span class="token punctuation">(</span>rotation_vector<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> quaternion<span class="token punctuation">.</span><span class="token function">coeffs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//      0.5</span><span class="token comment">//        0</span><span class="token comment">//        0</span><span class="token comment">// 0.866025</span>cout <span class="token operator">&lt;&lt;</span> quaternion<span class="token punctuation">.</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> quaternion<span class="token punctuation">.</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> quaternion<span class="token punctuation">.</span><span class="token function">z</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> quaternion<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">// 0.5</span><span class="token comment">// 0</span><span class="token comment">// 0</span><span class="token comment">// 0.866025</span>Quaterniond quaternion2<span class="token punctuation">;</span>quaternion2 <span class="token operator">=</span> rotation_vector<span class="token punctuation">;</span>  <span class="token comment">// 重载了'='</span>cout <span class="token operator">&lt;&lt;</span> quaternion2<span class="token punctuation">.</span><span class="token function">coeffs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//      0.5</span><span class="token comment">//        0</span><span class="token comment">//        0</span><span class="token comment">// 0.866025</span><span class="token comment">// 四元数的初始化</span>Quaterniond <span class="token function">quaternion</span><span class="token punctuation">(</span>w<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Eigen </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Eigen_向量</title>
      <link href="2021/03/21/Eigen-Eigen-%E5%90%91%E9%87%8F/"/>
      <url>2021/03/21/Eigen-Eigen-%E5%90%91%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<!-- toc --><h2 id="头部"><a href="#头部" class="headerlink" title="头部"></a>头部</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">head</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token comment">// 头i个元素</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="部分"><a href="#部分" class="headerlink" title="部分"></a>部分</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">segment</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token comment">// 取向量从i开始,长度为n</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="尾部"><a href="#尾部" class="headerlink" title="尾部"></a>尾部</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">tail</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token comment">// 后i个元素</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;Eigen/Dense></span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> Eigen<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token keyword">const</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    VectorXd <span class="token function">x</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    VectorXd <span class="token function">a</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    a <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> a <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment">// 1</span>    <span class="token comment">// 2</span>    x<span class="token punctuation">.</span><span class="token function">head</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span> a<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment">// 1</span>    <span class="token comment">// 2</span>    <span class="token comment">// 0</span>    <span class="token comment">// 0</span>    <span class="token comment">// 0</span>    <span class="token comment">// 0</span>    VectorXd <span class="token function">b</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    b <span class="token operator">&lt;&lt;</span> <span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">;</span>    x<span class="token punctuation">.</span><span class="token function">segment</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span> b<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment">// 1</span>    <span class="token comment">// 2</span>    <span class="token comment">// 3</span>    <span class="token comment">// 4</span>    <span class="token comment">// 0</span>    <span class="token comment">// 0</span>        VectorXd <span class="token function">c</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    c <span class="token operator">&lt;&lt;</span> <span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">;</span>    x<span class="token punctuation">.</span><span class="token function">tail</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span> c<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> x <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment">// 1</span>    <span class="token comment">// 2</span>    <span class="token comment">// 3</span>    <span class="token comment">// 4</span>    <span class="token comment">// 5</span>    <span class="token comment">// 6</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Eigen </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Eigen_求秩</title>
      <link href="2021/03/21/Eigen-Eigen-%E6%B1%82%E7%A7%A9/"/>
      <url>2021/03/21/Eigen-Eigen-%E6%B1%82%E7%A7%A9/</url>
      
        <content type="html"><![CDATA[<!-- toc --><h2 id="rank-基本用法"><a href="#rank-基本用法" class="headerlink" title="rank()基本用法"></a><code>rank()</code>基本用法</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">JacobiSVD<span class="token operator">&lt;</span>MatrixXd<span class="token operator">></span> <span class="token function">svd</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>svd<span class="token punctuation">.</span><span class="token function">rank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"Eigen/Dense"</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> Eigen<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    MatrixXd <span class="token function">a</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    a <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>         <span class="token number">3</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span>         <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">;</span>    MatrixXd <span class="token function">b</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    b <span class="token operator">&lt;&lt;</span> <span class="token number">2</span><span class="token punctuation">,</span>        <span class="token number">1</span><span class="token punctuation">,</span>        <span class="token number">1</span><span class="token punctuation">;</span>    MatrixXd m <span class="token operator">=</span> <span class="token class-name">MatrixXd</span><span class="token operator">::</span><span class="token function">Zero</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    m<span class="token punctuation">.</span><span class="token function">col</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">=</span> b<span class="token punctuation">;</span>    m<span class="token punctuation">.</span><span class="token function">col</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span>    m<span class="token punctuation">.</span><span class="token function">col</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span> a <span class="token operator">*</span> a <span class="token operator">*</span> b<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> m <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    JacobiSVD<span class="token operator">&lt;</span>MatrixXd<span class="token operator">></span> <span class="token function">svd</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> svd<span class="token punctuation">.</span><span class="token function">rank</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Eigen </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Eigen_矩阵属性</title>
      <link href="2021/03/21/Eigen-Eigen-%E7%9F%A9%E9%98%B5%E5%B1%9E%E6%80%A7/"/>
      <url>2021/03/21/Eigen-Eigen-%E7%9F%A9%E9%98%B5%E5%B1%9E%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<!-- toc --><h2 id="元素累加累乘"><a href="#元素累加累乘" class="headerlink" title="元素累加累乘"></a>元素累加累乘</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">mat<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>mat<span class="token punctuation">.</span><span class="token function">prod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="平均值"><a href="#平均值" class="headerlink" title="平均值"></a>平均值</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">mat<span class="token punctuation">.</span><span class="token function">mean</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="最值"><a href="#最值" class="headerlink" title="最值"></a>最值</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">mat<span class="token punctuation">.</span><span class="token function">minCoeff</span><span class="token punctuation">(</span><span class="token punctuation">)</span>mat<span class="token punctuation">.</span><span class="token function">maxCoeff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="迹"><a href="#迹" class="headerlink" title="迹"></a>迹</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">mat<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="对角元素"><a href="#对角元素" class="headerlink" title="对角元素"></a>对角元素</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">mat<span class="token punctuation">.</span><span class="token function">diagonal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="特征值与特征向量"><a href="#特征值与特征向量" class="headerlink" title="特征值与特征向量"></a>特征值与特征向量</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">EigenSolver<span class="token operator">&lt;</span>Matrix3d<span class="token operator">></span> <span class="token function">eigen_solver</span><span class="token punctuation">(</span>mat<span class="token punctuation">)</span><span class="token punctuation">;</span>eigen_solver<span class="token punctuation">.</span><span class="token function">pseudoEigenvalueMatrix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 特征值排成矩阵形式</span>eigen_solver<span class="token punctuation">.</span><span class="token function">pseudoEigenvectors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">// 每一列是一个特征向量</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;cstring></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"Eigen/Dense"</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">using</span> <span class="token keyword">namespace</span> Eigen<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Matrix2d mat<span class="token punctuation">;</span>    mat <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Here is mat.sum():       "</span> <span class="token operator">&lt;&lt;</span> mat<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>       <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Here is mat.prod():      "</span> <span class="token operator">&lt;&lt;</span> mat<span class="token punctuation">.</span><span class="token function">prod</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Here is mat.mean():      "</span> <span class="token operator">&lt;&lt;</span> mat<span class="token punctuation">.</span><span class="token function">mean</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Here is mat.minCoeff():  "</span> <span class="token operator">&lt;&lt;</span> mat<span class="token punctuation">.</span><span class="token function">minCoeff</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Here is mat.maxCoeff():  "</span> <span class="token operator">&lt;&lt;</span> mat<span class="token punctuation">.</span><span class="token function">maxCoeff</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Here is mat.trace():     "</span> <span class="token operator">&lt;&lt;</span> mat<span class="token punctuation">.</span><span class="token function">trace</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment">// Here is mat.sum():       10</span>    <span class="token comment">// Here is mat.prod():      24</span>    <span class="token comment">// Here is mat.mean():      2.5</span>    <span class="token comment">// Here is mat.minCoeff():  1</span>    <span class="token comment">// Here is mat.maxCoeff():  4</span>    <span class="token comment">// Here is mat.trace():     5</span>    Matrix3d mat<span class="token punctuation">;</span>mat <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span>           <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span>           <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> mat<span class="token punctuation">.</span><span class="token function">diagonal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment">// 1</span>    <span class="token comment">// 4</span>    <span class="token comment">// 7</span>    cout <span class="token operator">&lt;&lt;</span> mat<span class="token punctuation">.</span><span class="token function">eigenvalues</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment">// (14.8426,0)</span>    <span class="token comment">// (-3.10313,0)</span>    <span class="token comment">// (0.260538,0)</span>EigenSolver<span class="token operator">&lt;</span>Matrix3d<span class="token operator">></span> <span class="token function">eigen_solver</span><span class="token punctuation">(</span>mat<span class="token punctuation">)</span><span class="token punctuation">;</span>MatrixXd eig_value <span class="token operator">=</span> eigen_solver<span class="token punctuation">.</span><span class="token function">pseudoEigenvalueMatrix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"matrix values = \n"</span> <span class="token operator">&lt;&lt;</span> eig_value <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment">// matrix values =</span>    <span class="token comment">// 14.8426        0        0</span>    <span class="token comment">//     0   -3.10313        0</span>    <span class="token comment">//     0        0   0.260538</span>MatrixXd eig_vector <span class="token operator">=</span> eigen_solver<span class="token punctuation">.</span><span class="token function">pseudoEigenvectors</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"matrix vectors = \n"</span> <span class="token operator">&lt;&lt;</span> eig_vector <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment">// matrix vectors =</span>    <span class="token comment">// -0.307083 -0.629353  0.493782</span>    <span class="token comment">// -0.467283 -0.291072 -0.826916</span>    <span class="token comment">// -0.829064  0.791116  0.322174</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Eigen </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Eigen_运算符</title>
      <link href="2021/03/21/Eigen-Eigen-%E8%BF%90%E7%AE%97%E7%AC%A6/"/>
      <url>2021/03/21/Eigen-Eigen-%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
      
        <content type="html"><![CDATA[<!-- toc --><h2 id="向量内积"><a href="#向量内积" class="headerlink" title="向量内积"></a>向量内积</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Vector2d <span class="token function">m</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Vector2d <span class="token function">n</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> m<span class="token punctuation">.</span><span class="token function">dot</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>    <span class="token comment">// 向量内积：14</span>cout <span class="token operator">&lt;&lt;</span> m<span class="token punctuation">.</span><span class="token function">adjoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> n <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">adjoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="转置与伴随矩阵"><a href="#转置与伴随矩阵" class="headerlink" title="转置与伴随矩阵"></a>转置与伴随矩阵</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Matrix2d m<span class="token punctuation">,</span> n<span class="token punctuation">;</span>m <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span>     <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">;</span>n <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">transpose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// m.transposeInPlace();    //m变成自己的转置矩阵</span>n <span class="token operator">=</span> m<span class="token punctuation">.</span><span class="token function">adjoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//伴随矩阵，实数的伴随矩阵等于转置矩阵</span><span class="token comment">// 1 3</span><span class="token comment">// 2 4</span>m<span class="token punctuation">.</span><span class="token function">adjointInPlace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//m变成自己的伴随矩阵</span>Matrix2cf m <span class="token operator">=</span> <span class="token class-name">Matrix2cf</span><span class="token operator">::</span><span class="token function">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//复数的伴随矩阵，除了转置，复数域要变号</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Here is the 2x2 complex matrix m:"</span> <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> m <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"Here is the adjoint of m:"</span> <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> m<span class="token punctuation">.</span><span class="token function">adjoint</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>Here is the <span class="token number">2</span>x2 complex matrix m<span class="token operator">:</span><span class="token punctuation">(</span><span class="token number">0.127171</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">0.997497</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0.0402539</span><span class="token punctuation">,</span><span class="token number">0.170019</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">0.617481</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">0.613392</span><span class="token punctuation">)</span>  <span class="token punctuation">(</span><span class="token number">0.791925</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">0.299417</span><span class="token punctuation">)</span>Here is the adjoint of m<span class="token operator">:</span><span class="token punctuation">(</span><span class="token number">0.127171</span><span class="token punctuation">,</span><span class="token number">0.997497</span><span class="token punctuation">)</span>    <span class="token punctuation">(</span><span class="token number">0.617481</span><span class="token punctuation">,</span><span class="token number">0.613392</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">0.0402539</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">0.170019</span><span class="token punctuation">)</span>    <span class="token punctuation">(</span><span class="token number">0.791925</span><span class="token punctuation">,</span><span class="token number">0.299417</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="范数与单位化"><a href="#范数与单位化" class="headerlink" title="范数与单位化"></a>范数与单位化</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Vector2d <span class="token function">vec1</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Vector2d vec2<span class="token punctuation">;</span><span class="token keyword">double</span> scalar <span class="token operator">=</span> vec1<span class="token punctuation">.</span><span class="token function">norm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 二阶范数 5    </span>scalar <span class="token operator">=</span> vec1<span class="token punctuation">.</span><span class="token function">squaredNorm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 范数平方 25</span>vec2 <span class="token operator">=</span> vec1<span class="token punctuation">.</span><span class="token function">normalized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 单位化 0.6; 0.8</span>vec1<span class="token punctuation">.</span><span class="token function">normalize</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// inplace 自己变成自己的单位化</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="叉积"><a href="#叉积" class="headerlink" title="叉积"></a>叉积</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Vector3d <span class="token function">vec1</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Vector3d <span class="token function">vec2</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"cross: "</span> <span class="token operator">&lt;&lt;</span> endl <span class="token operator">&lt;&lt;</span> vec1<span class="token punctuation">.</span><span class="token function">cross</span><span class="token punctuation">(</span>vec2<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">// 叉积只适用于三维向量</span>cross<span class="token operator">:</span>     <span class="token operator">-</span><span class="token number">2</span>      <span class="token number">4</span>     <span class="token operator">-</span><span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Eigen </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
